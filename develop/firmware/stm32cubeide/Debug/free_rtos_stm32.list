
free_rtos_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013248  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d5c  080133f8  080133f8  000233f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014154  08014154  00030618  2**0
                  CONTENTS
  4 .ARM          00000008  08014154  08014154  00024154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801415c  0801415c  00030618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801415c  0801415c  0002415c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014160  08014160  00024160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000618  20000000  08014164  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030618  2**0
                  CONTENTS
 10 .bss          000053bc  20000618  20000618  00030618  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200059d4  200059d4  00030618  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030618  2**0
                  CONTENTS, READONLY
 13 .debug_info   000261d8  00000000  00000000  00030648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000646e  00000000  00000000  00056820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f28  00000000  00000000  0005cc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001cc8  00000000  00000000  0005ebb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c64a  00000000  00000000  00060880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f2ba  00000000  00000000  0008ceca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2f20  00000000  00000000  000bc184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000cf  00000000  00000000  0019f0a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000912c  00000000  00000000  0019f174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000618 	.word	0x20000618
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080133e0 	.word	0x080133e0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000061c 	.word	0x2000061c
 80001ec:	080133e0 	.word	0x080133e0

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <ButtonInit>:

/**
 * @brief          Button initialization (CLK, GPIO, NVIC)
 */
void ButtonInit(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]

   __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <ButtonInit+0xb8>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a26      	ldr	r2, [pc, #152]	; (8000fa4 <ButtonInit+0xb8>)
 8000f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <ButtonInit+0xb8>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <ButtonInit+0xb8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a1f      	ldr	r2, [pc, #124]	; (8000fa4 <ButtonInit+0xb8>)
 8000f28:	f043 0308 	orr.w	r3, r3, #8
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <ButtonInit+0xb8>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0308 	and.w	r3, r3, #8
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <ButtonInit+0xb8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a18      	ldr	r2, [pc, #96]	; (8000fa4 <ButtonInit+0xb8>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <ButtonInit+0xb8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <ButtonInit+0xb8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a11      	ldr	r2, [pc, #68]	; (8000fa4 <ButtonInit+0xb8>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <ButtonInit+0xb8>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]

   HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	2006      	movs	r0, #6
 8000f78:	f007 ff49 	bl	8008e0e <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f7c:	2006      	movs	r0, #6
 8000f7e:	f007 ff62 	bl	8008e46 <HAL_NVIC_EnableIRQ>

   GPIO_InitStruct.Pin = BUTTON_Pin;
 8000f82:	2301      	movs	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f8a:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <ButtonInit+0xbc>)
 8000f98:	f008 fb8e 	bl	80096b8 <HAL_GPIO_Init>
}
 8000f9c:	bf00      	nop
 8000f9e:	3728      	adds	r7, #40	; 0x28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020000 	.word	0x40020000

08000fac <ButtonTask>:
/******************************************************************************/



void ButtonTask(void *argumet)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b0a2      	sub	sp, #136	; 0x88
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    uint8_t ddd[128] = {0};
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	227c      	movs	r2, #124	; 0x7c
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f00f f8e3 	bl	801018c <memset>
    UNUSED(ddd);

    for (;;)
    {
        ButtonCheckMode();
 8000fc6:	f000 f811 	bl	8000fec <ButtonCheckMode>
        osDelay(10);
 8000fca:	200a      	movs	r0, #10
 8000fcc:	f004 f9a6 	bl	800531c <osDelay>
        ButtonCheckMode();
 8000fd0:	e7f9      	b.n	8000fc6 <ButtonTask+0x1a>

08000fd2 <prvButtonActivate>:

/**
 * @brief          Button activation from EXTI Callback
 */
void prvButtonActivate(struct user_button *user_button_ptr)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
	user_button_ptr->activate = true;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	705a      	strb	r2, [r3, #1]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <ButtonCheckMode>:

/**
 * @brief          This functions calls constantly to check button mode
 */
void ButtonCheckMode(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
    prvButtonCheckAlgorithm(&user_button);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <ButtonCheckMode+0x10>)
 8000ff2:	f000 f805 	bl	8001000 <prvButtonCheckAlgorithm>
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000638 	.word	0x20000638

08001000 <prvButtonCheckAlgorithm>:

/**
 * @brief          Button check algorithm (for singlne, double and hold modes)
 */
void prvButtonCheckAlgorithm(struct user_button *user_button_ptr)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	if (user_button_ptr->activate) {
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	785b      	ldrb	r3, [r3, #1]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d016      	beq.n	800103e <prvButtonCheckAlgorithm+0x3e>
		if (!TimStarted(&user_button.debounce_timeout)) {
 8001010:	483d      	ldr	r0, [pc, #244]	; (8001108 <prvButtonCheckAlgorithm+0x108>)
 8001012:	f001 fa5d 	bl	80024d0 <TimStarted>
 8001016:	4603      	mov	r3, r0
 8001018:	f083 0301 	eor.w	r3, r3, #1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00a      	beq.n	8001038 <prvButtonCheckAlgorithm+0x38>
			user_button_ptr->mode = BUTTON_ONE_CLICK;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
			user_button_ptr->activate = false;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	705a      	strb	r2, [r3, #1]
			TimStart(&user_button.debounce_timeout, BUTTON_DEBOUNCE_TIME_MS);
 800102e:	2132      	movs	r1, #50	; 0x32
 8001030:	4835      	ldr	r0, [pc, #212]	; (8001108 <prvButtonCheckAlgorithm+0x108>)
 8001032:	f001 fa24 	bl	800247e <TimStart>
 8001036:	e002      	b.n	800103e <prvButtonCheckAlgorithm+0x3e>
		}
		else {
			user_button_ptr->mode = BUTTON_DOUBLE_CLICK;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]
		}
	}

	if ((TimStarted(&user_button.debounce_timeout)) && (TimCheck(&user_button.debounce_timeout, (5 * user_button_ptr->held_pressed_counter)))) {
 800103e:	4832      	ldr	r0, [pc, #200]	; (8001108 <prvButtonCheckAlgorithm+0x108>)
 8001040:	f001 fa46 	bl	80024d0 <TimStarted>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d023      	beq.n	8001092 <prvButtonCheckAlgorithm+0x92>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	789b      	ldrb	r3, [r3, #2]
 800104e:	461a      	mov	r2, r3
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	4619      	mov	r1, r3
 8001058:	482b      	ldr	r0, [pc, #172]	; (8001108 <prvButtonCheckAlgorithm+0x108>)
 800105a:	f001 fa49 	bl	80024f0 <TimCheck>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d016      	beq.n	8001092 <prvButtonCheckAlgorithm+0x92>
		if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET) {
 8001064:	2101      	movs	r1, #1
 8001066:	4829      	ldr	r0, [pc, #164]	; (800110c <prvButtonCheckAlgorithm+0x10c>)
 8001068:	f008 fcc2 	bl	80099f0 <HAL_GPIO_ReadPin>
 800106c:	4603      	mov	r3, r0
 800106e:	2b01      	cmp	r3, #1
 8001070:	d105      	bne.n	800107e <prvButtonCheckAlgorithm+0x7e>
			++user_button_ptr->held_pressed_counter;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	789b      	ldrb	r3, [r3, #2]
 8001076:	3301      	adds	r3, #1
 8001078:	b2da      	uxtb	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	709a      	strb	r2, [r3, #2]
		}
		user_button_ptr->mode = (user_button_ptr->held_pressed_counter >= 71) ? BUTTON_HELD_PRESSED : user_button_ptr->mode;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	789b      	ldrb	r3, [r3, #2]
 8001082:	2b46      	cmp	r3, #70	; 0x46
 8001084:	d802      	bhi.n	800108c <prvButtonCheckAlgorithm+0x8c>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	e000      	b.n	800108e <prvButtonCheckAlgorithm+0x8e>
 800108c:	2202      	movs	r2, #2
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	701a      	strb	r2, [r3, #0]
	}

	if ((TimStarted(&user_button.debounce_timeout)) && (TimCheck(&user_button.debounce_timeout, 350))) {
 8001092:	481d      	ldr	r0, [pc, #116]	; (8001108 <prvButtonCheckAlgorithm+0x108>)
 8001094:	f001 fa1c 	bl	80024d0 <TimStarted>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d030      	beq.n	8001100 <prvButtonCheckAlgorithm+0x100>
 800109e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80010a2:	4819      	ldr	r0, [pc, #100]	; (8001108 <prvButtonCheckAlgorithm+0x108>)
 80010a4:	f001 fa24 	bl	80024f0 <TimCheck>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d028      	beq.n	8001100 <prvButtonCheckAlgorithm+0x100>
		switch (user_button_ptr->mode) {
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d018      	beq.n	80010e8 <prvButtonCheckAlgorithm+0xe8>
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	dc19      	bgt.n	80010ee <prvButtonCheckAlgorithm+0xee>
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <prvButtonCheckAlgorithm+0xc4>
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d00f      	beq.n	80010e2 <prvButtonCheckAlgorithm+0xe2>
 80010c2:	e014      	b.n	80010ee <prvButtonCheckAlgorithm+0xee>
		    case BUTTON_ONE_CLICK:
		        if(!UARTSendByte(&huart3, 0x02)) {
 80010c4:	2102      	movs	r1, #2
 80010c6:	4812      	ldr	r0, [pc, #72]	; (8001110 <prvButtonCheckAlgorithm+0x110>)
 80010c8:	f001 fbe8 	bl	800289c <UARTSendByte>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f083 0301 	eor.w	r3, r3, #1
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <prvButtonCheckAlgorithm+0xdc>
		            IndicationLedError();
 80010d8:	f000 fa12 	bl	8001500 <IndicationLedError>
		        }
		        IndicationLedButton();
 80010dc:	f000 f998 	bl	8001410 <IndicationLedButton>
			   	break;
 80010e0:	e005      	b.n	80010ee <prvButtonCheckAlgorithm+0xee>
		    case BUTTON_DOUBLE_CLICK:
		        IndicationLedButtonDoubleClick();
 80010e2:	f000 f9e5 	bl	80014b0 <IndicationLedButtonDoubleClick>
			   	break;
 80010e6:	e002      	b.n	80010ee <prvButtonCheckAlgorithm+0xee>
			case BUTTON_HELD_PRESSED:
			    IndicationLedButtonHold();
 80010e8:	f000 f9ba 	bl	8001460 <IndicationLedButtonHold>
			    break;
 80010ec:	bf00      	nop
		}
		user_button_ptr->held_pressed_counter = 0;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	709a      	strb	r2, [r3, #2]
		TimStop(&user_button.debounce_timeout);
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <prvButtonCheckAlgorithm+0x108>)
 80010f6:	f001 f9db 	bl	80024b0 <TimStop>
		user_button_ptr->activate = false;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	705a      	strb	r2, [r3, #1]
	}
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	2000063c 	.word	0x2000063c
 800110c:	40020000 	.word	0x40020000
 8001110:	20000d74 	.word	0x20000d74

08001114 <EXTI0_IRQHandler>:

/**
 * @brief          EXTI0 IRQHandler - for interrupt with button
 */
void EXTI0_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001118:	2001      	movs	r0, #1
 800111a:	f008 fcb5 	bl	8009a88 <HAL_GPIO_EXTI_IRQHandler>
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_GPIO_EXTI_Callback>:

/**
 * @brief          Callback of EXTI0
 */
void HAL_GPIO_EXTI_Callback(uint16_t gpio_pin)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	80fb      	strh	r3, [r7, #6]
	if (gpio_pin == BUTTON_Pin) {
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d102      	bne.n	800113a <HAL_GPIO_EXTI_Callback+0x16>
	    prvButtonActivate(&user_button);
 8001134:	4803      	ldr	r0, [pc, #12]	; (8001144 <HAL_GPIO_EXTI_Callback+0x20>)
 8001136:	f7ff ff4c 	bl	8000fd2 <prvButtonActivate>
	}
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000638 	.word	0x20000638

08001148 <IndicationInit>:

/**
 * @brief          Initialization off led CLK, Pins, hardware, fns and init of each led fns
 */
void IndicationInit(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08c      	sub	sp, #48	; 0x30
 800114c:	af00      	add	r7, sp, #0
	mculed_ctrl_t fns = {0};
 800114e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOD_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <IndicationInit+0x120>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a3d      	ldr	r2, [pc, #244]	; (8001268 <IndicationInit+0x120>)
 8001174:	f043 0308 	orr.w	r3, r3, #8
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <IndicationInit+0x120>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	4b37      	ldr	r3, [pc, #220]	; (8001268 <IndicationInit+0x120>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a36      	ldr	r2, [pc, #216]	; (8001268 <IndicationInit+0x120>)
 8001190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b34      	ldr	r3, [pc, #208]	; (8001268 <IndicationInit+0x120>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b30      	ldr	r3, [pc, #192]	; (8001268 <IndicationInit+0x120>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a2f      	ldr	r2, [pc, #188]	; (8001268 <IndicationInit+0x120>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <IndicationInit+0x120>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin|LED_TOP_Pin|LED_RIGHT_Pin|LED_BOTTOM_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80011c4:	4829      	ldr	r0, [pc, #164]	; (800126c <IndicationInit+0x124>)
 80011c6:	f008 fc2b 	bl	8009a20 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = LED_LEFT_Pin|LED_TOP_Pin|LED_RIGHT_Pin|LED_BOTTOM_Pin;
 80011ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80011ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	4619      	mov	r1, r3
 80011e2:	4822      	ldr	r0, [pc, #136]	; (800126c <IndicationInit+0x124>)
 80011e4:	f008 fa68 	bl	80096b8 <HAL_GPIO_Init>

	mculed[LED_TOP].hardware.port    =    (uint32_t) LED_TOP_GPIO_Port;
 80011e8:	4b21      	ldr	r3, [pc, #132]	; (8001270 <IndicationInit+0x128>)
 80011ea:	4a20      	ldr	r2, [pc, #128]	; (800126c <IndicationInit+0x124>)
 80011ec:	60da      	str	r2, [r3, #12]
	mculed[LED_TOP].hardware.pin     =    (uint32_t) LED_TOP_Pin;
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <IndicationInit+0x128>)
 80011f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011f4:	609a      	str	r2, [r3, #8]
	mculed[LED_LEFT].hardware.port   =    (uint32_t) LED_LEFT_GPIO_Port;
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <IndicationInit+0x128>)
 80011f8:	4a1c      	ldr	r2, [pc, #112]	; (800126c <IndicationInit+0x124>)
 80011fa:	635a      	str	r2, [r3, #52]	; 0x34
	mculed[LED_LEFT].hardware.pin    =    (uint32_t) LED_LEFT_Pin;
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <IndicationInit+0x128>)
 80011fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001202:	631a      	str	r2, [r3, #48]	; 0x30
	mculed[LED_BOTTOM].hardware.port =    (uint32_t) LED_BOTTOM_GPIO_Port;
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <IndicationInit+0x128>)
 8001206:	4a19      	ldr	r2, [pc, #100]	; (800126c <IndicationInit+0x124>)
 8001208:	65da      	str	r2, [r3, #92]	; 0x5c
	mculed[LED_BOTTOM].hardware.pin  =    (uint32_t) LED_BOTTOM_Pin;
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <IndicationInit+0x128>)
 800120c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001210:	659a      	str	r2, [r3, #88]	; 0x58
	mculed[LED_RIGHT].hardware.port  =    (uint32_t) LED_RIGHT_GPIO_Port;
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <IndicationInit+0x128>)
 8001214:	4a15      	ldr	r2, [pc, #84]	; (800126c <IndicationInit+0x124>)
 8001216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	mculed[LED_RIGHT].hardware.pin   =    (uint32_t) LED_RIGHT_Pin;
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <IndicationInit+0x128>)
 800121c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	fns.turn_on = IndicationLedTurnOn;
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <IndicationInit+0x12c>)
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
	fns.turn_off = IndicationLedTurnOff;
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <IndicationInit+0x130>)
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
	fns.toggle = IndicationLedToggle;
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <IndicationInit+0x134>)
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c

	McuLedInit(&mculed[LED_TOP], &fns);
 8001230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001234:	4619      	mov	r1, r3
 8001236:	480e      	ldr	r0, [pc, #56]	; (8001270 <IndicationInit+0x128>)
 8001238:	f000 fbf8 	bl	8001a2c <McuLedInit>
	McuLedInit(&mculed[LED_LEFT], &fns);
 800123c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001240:	4619      	mov	r1, r3
 8001242:	480f      	ldr	r0, [pc, #60]	; (8001280 <IndicationInit+0x138>)
 8001244:	f000 fbf2 	bl	8001a2c <McuLedInit>
	McuLedInit(&mculed[LED_BOTTOM], &fns);
 8001248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124c:	4619      	mov	r1, r3
 800124e:	480d      	ldr	r0, [pc, #52]	; (8001284 <IndicationInit+0x13c>)
 8001250:	f000 fbec 	bl	8001a2c <McuLedInit>
	McuLedInit(&mculed[LED_RIGHT], &fns);
 8001254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001258:	4619      	mov	r1, r3
 800125a:	480b      	ldr	r0, [pc, #44]	; (8001288 <IndicationInit+0x140>)
 800125c:	f000 fbe6 	bl	8001a2c <McuLedInit>
}
 8001260:	bf00      	nop
 8001262:	3730      	adds	r7, #48	; 0x30
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40023800 	.word	0x40023800
 800126c:	40020c00 	.word	0x40020c00
 8001270:	20000648 	.word	0x20000648
 8001274:	080012b3 	.word	0x080012b3
 8001278:	080012d7 	.word	0x080012d7
 800127c:	080012fb 	.word	0x080012fb
 8001280:	20000670 	.word	0x20000670
 8001284:	20000698 	.word	0x20000698
 8001288:	200006c0 	.word	0x200006c0

0800128c <IndicationUpdateTask>:




void IndicationUpdateTask(void *argument)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b0a2      	sub	sp, #136	; 0x88
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
    uint8_t ddd[128] = {0};
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	227c      	movs	r2, #124	; 0x7c
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f00e ff73 	bl	801018c <memset>
    UNUSED(ddd);

    for (;;)
    {
        IndicationLedsUpdate();
 80012a6:	f000 fba3 	bl	80019f0 <IndicationLedsUpdate>

        osDelay(10);
 80012aa:	200a      	movs	r0, #10
 80012ac:	f004 f836 	bl	800531c <osDelay>
        IndicationLedsUpdate();
 80012b0:	e7f9      	b.n	80012a6 <IndicationUpdateTask+0x1a>

080012b2 <IndicationLedTurnOn>:

/**
 * @brief          Led actions fns
 */
void IndicationLedTurnOn(mculed_t *self)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef *) self->hardware.port, self->hardware.pin, GPIO_PIN_SET);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	4618      	mov	r0, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	2201      	movs	r2, #1
 80012c8:	4619      	mov	r1, r3
 80012ca:	f008 fba9 	bl	8009a20 <HAL_GPIO_WritePin>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <IndicationLedTurnOff>:

void IndicationLedTurnOff(mculed_t *self)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef *) self->hardware.port, self->hardware.pin, GPIO_PIN_RESET);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	4618      	mov	r0, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	2200      	movs	r2, #0
 80012ec:	4619      	mov	r1, r3
 80012ee:	f008 fb97 	bl	8009a20 <HAL_GPIO_WritePin>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <IndicationLedToggle>:

void IndicationLedToggle(mculed_t *self)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin((GPIO_TypeDef *)self->hardware.port, self->hardware.pin);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	461a      	mov	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4619      	mov	r1, r3
 8001310:	4610      	mov	r0, r2
 8001312:	f008 fb9e 	bl	8009a52 <HAL_GPIO_TogglePin>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <IndicationLedLoading>:

/**
 * @brief          Loading led animation function
 */
void IndicationLedLoading(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
	for (int led_index = 0; led_index < N_LED; led_index++) {
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	e017      	b.n	800135c <IndicationLedLoading+0x3c>
	    prvIndicationLedLoadingSetup(&mculed[led_index], led_index);
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4a0d      	ldr	r2, [pc, #52]	; (800136c <IndicationLedLoading+0x4c>)
 8001338:	4413      	add	r3, r2
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4618      	mov	r0, r3
 800133e:	f000 f9c3 	bl	80016c8 <prvIndicationLedLoadingSetup>
	    LedFunction(&mculed[led_index]);
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	4a07      	ldr	r2, [pc, #28]	; (800136c <IndicationLedLoading+0x4c>)
 800134e:	4413      	add	r3, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f000 fba4 	bl	8001a9e <LedFunction>
	for (int led_index = 0; led_index < N_LED; led_index++) {
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3301      	adds	r3, #1
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b03      	cmp	r3, #3
 8001360:	d9e4      	bls.n	800132c <IndicationLedLoading+0xc>
	}
}
 8001362:	bf00      	nop
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000648 	.word	0x20000648

08001370 <IndicationLedTop>:

/**
 * @brief          LED top on
 */
void IndicationLedTop(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
	for (int led_index = 0; led_index < N_LED; led_index++) {
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	e017      	b.n	80013ac <IndicationLedTop+0x3c>
	    prvIndicationLedTopSetup(&mculed[led_index], led_index);
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <IndicationLedTop+0x4c>)
 8001388:	4413      	add	r3, r2
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f8df 	bl	8001550 <prvIndicationLedTopSetup>
	    LedFunction(&mculed[led_index]);
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <IndicationLedTop+0x4c>)
 800139e:	4413      	add	r3, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 fb7c 	bl	8001a9e <LedFunction>
	for (int led_index = 0; led_index < N_LED; led_index++) {
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3301      	adds	r3, #1
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d9e4      	bls.n	800137c <IndicationLedTop+0xc>
	}
}
 80013b2:	bf00      	nop
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000648 	.word	0x20000648

080013c0 <IndicationLedBottom>:

/**
 * @brief          LED bottom on
 */
void IndicationLedBottom(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
    for (int led_index = 0; led_index < N_LED; led_index++) {
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	e017      	b.n	80013fc <IndicationLedBottom+0x3c>
        prvIndicationLedBottomSetup(&mculed[led_index], led_index);
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	4a0d      	ldr	r2, [pc, #52]	; (800140c <IndicationLedBottom+0x4c>)
 80013d8:	4413      	add	r3, r2
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 f915 	bl	800160c <prvIndicationLedBottomSetup>
        LedFunction(&mculed[led_index]);
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4a07      	ldr	r2, [pc, #28]	; (800140c <IndicationLedBottom+0x4c>)
 80013ee:	4413      	add	r3, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 fb54 	bl	8001a9e <LedFunction>
    for (int led_index = 0; led_index < N_LED; led_index++) {
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3301      	adds	r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b03      	cmp	r3, #3
 8001400:	d9e4      	bls.n	80013cc <IndicationLedBottom+0xc>
    }
}
 8001402:	bf00      	nop
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000648 	.word	0x20000648

08001410 <IndicationLedButton>:

/**
 * @brief          Button led function
 */
void IndicationLedButton(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
    for (int led_index = 0; led_index < N_LED; led_index++) {
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	e017      	b.n	800144c <IndicationLedButton+0x3c>
        prvIndicationLedButtonSetup(&mculed[led_index], led_index);
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	4a0d      	ldr	r2, [pc, #52]	; (800145c <IndicationLedButton+0x4c>)
 8001428:	4413      	add	r3, r2
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4618      	mov	r0, r3
 800142e:	f000 f9a5 	bl	800177c <prvIndicationLedButtonSetup>
        LedFunction(&mculed[led_index]);
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	4a07      	ldr	r2, [pc, #28]	; (800145c <IndicationLedButton+0x4c>)
 800143e:	4413      	add	r3, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fb2c 	bl	8001a9e <LedFunction>
    for (int led_index = 0; led_index < N_LED; led_index++) {
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3301      	adds	r3, #1
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b03      	cmp	r3, #3
 8001450:	d9e4      	bls.n	800141c <IndicationLedButton+0xc>
    }
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000648 	.word	0x20000648

08001460 <IndicationLedButtonHold>:

/**
 * @brief          Hold button led function
 */
void IndicationLedButtonHold(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
	for (int led_index = 0; led_index < N_LED; led_index++) {
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	e017      	b.n	800149c <IndicationLedButtonHold+0x3c>
	    prvIndicationLedButtonHoldSetup(&mculed[led_index], led_index);
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4a0d      	ldr	r2, [pc, #52]	; (80014ac <IndicationLedButtonHold+0x4c>)
 8001478:	4413      	add	r3, r2
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	4618      	mov	r0, r3
 800147e:	f000 f9d1 	bl	8001824 <prvIndicationLedButtonHoldSetup>
	    LedFunction(&mculed[led_index]);
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	4a07      	ldr	r2, [pc, #28]	; (80014ac <IndicationLedButtonHold+0x4c>)
 800148e:	4413      	add	r3, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fb04 	bl	8001a9e <LedFunction>
	for (int led_index = 0; led_index < N_LED; led_index++) {
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3301      	adds	r3, #1
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d9e4      	bls.n	800146c <IndicationLedButtonHold+0xc>
	}
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000648 	.word	0x20000648

080014b0 <IndicationLedButtonDoubleClick>:

/**
 * @brief          Double click button led function
 */
void IndicationLedButtonDoubleClick(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
	for (int led_index = 0; led_index < N_LED; led_index++) {
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	e017      	b.n	80014ec <IndicationLedButtonDoubleClick+0x3c>
	    prvIndicationLedButtonDoubleClickSetup(&mculed[led_index], led_index);
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <IndicationLedButtonDoubleClick+0x4c>)
 80014c8:	4413      	add	r3, r2
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 fa0d 	bl	80018ec <prvIndicationLedButtonDoubleClickSetup>
	    LedFunction(&mculed[led_index]);
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <IndicationLedButtonDoubleClick+0x4c>)
 80014de:	4413      	add	r3, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 fadc 	bl	8001a9e <LedFunction>
	for (int led_index = 0; led_index < N_LED; led_index++) {
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3301      	adds	r3, #1
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d9e4      	bls.n	80014bc <IndicationLedButtonDoubleClick+0xc>
	}
}
 80014f2:	bf00      	nop
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000648 	.word	0x20000648

08001500 <IndicationLedError>:

/**
 * @brief          Error led function
 */
void IndicationLedError(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
	for (int led_index = 0; led_index < N_LED; led_index++) {
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	e016      	b.n	800153a <IndicationLedError+0x3a>
	    prvIndicationLedErrorSetup(&mculed[led_index]);
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4a0d      	ldr	r2, [pc, #52]	; (800154c <IndicationLedError+0x4c>)
 8001518:	4413      	add	r3, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f000 fa44 	bl	80019a8 <prvIndicationLedErrorSetup>
	    LedFunction(&mculed[led_index]);
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4a08      	ldr	r2, [pc, #32]	; (800154c <IndicationLedError+0x4c>)
 800152c:	4413      	add	r3, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f000 fab5 	bl	8001a9e <LedFunction>
	for (int led_index = 0; led_index < N_LED; led_index++) {
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3301      	adds	r3, #1
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b03      	cmp	r3, #3
 800153e:	d9e5      	bls.n	800150c <IndicationLedError+0xc>
	}
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000648 	.word	0x20000648

08001550 <prvIndicationLedTopSetup>:

/**
 * @brief          Loading led top animation setup
 */
void prvIndicationLedTopSetup(mculed_t *led_ptr, int led_index)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
    led_ptr->setup.iterations_num = INDICATION_LED_BUTTON_NUM;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	80da      	strh	r2, [r3, #6]

    switch (led_index) {
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	2b03      	cmp	r3, #3
 8001564:	d83f      	bhi.n	80015e6 <prvIndicationLedTopSetup+0x96>
 8001566:	a201      	add	r2, pc, #4	; (adr r2, 800156c <prvIndicationLedTopSetup+0x1c>)
 8001568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156c:	0800157d 	.word	0x0800157d
 8001570:	08001599 	.word	0x08001599
 8001574:	080015b3 	.word	0x080015b3
 8001578:	080015cd 	.word	0x080015cd
        case LED_TOP:
            led_ptr->hardware.mode = MCULED_ON_STATE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	741a      	strb	r2, [r3, #16]
            led_ptr->setup.on_ms = (INDICATION_LED_SPEED_FAST * LED_RIGHT_TIME_ON);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	22dc      	movs	r2, #220	; 0xdc
 8001586:	801a      	strh	r2, [r3, #0]
            led_ptr->setup.off_ms = (INDICATION_LED_SPEED_FAST * LED_RIGHT_TIME_OFF);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800158e:	805a      	strh	r2, [r3, #2]
            led_ptr->setup.delay_ms = ZERO_MS;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	809a      	strh	r2, [r3, #4]
            break;
 8001596:	e027      	b.n	80015e8 <prvIndicationLedTopSetup+0x98>
        case LED_LEFT:
            led_ptr->hardware.mode = MCULED_OFF_STATE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	741a      	strb	r2, [r3, #16]
            led_ptr->setup.on_ms = ZERO_MS;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	801a      	strh	r2, [r3, #0]
            led_ptr->setup.delay_ms = ZERO_MS;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	809a      	strh	r2, [r3, #4]
            led_ptr->setup.off_ms = ZERO_MS;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	805a      	strh	r2, [r3, #2]
            break;
 80015b0:	e01a      	b.n	80015e8 <prvIndicationLedTopSetup+0x98>
        case LED_BOTTOM:
            led_ptr->hardware.mode = MCULED_OFF_STATE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	741a      	strb	r2, [r3, #16]
            led_ptr->setup.on_ms = ZERO_MS;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	801a      	strh	r2, [r3, #0]
            led_ptr->setup.off_ms = ZERO_MS;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	805a      	strh	r2, [r3, #2]
            led_ptr->setup.delay_ms = ZERO_MS;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	809a      	strh	r2, [r3, #4]
            break;
 80015ca:	e00d      	b.n	80015e8 <prvIndicationLedTopSetup+0x98>
        case LED_RIGHT:
            led_ptr->hardware.mode = MCULED_OFF_STATE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	741a      	strb	r2, [r3, #16]
            led_ptr->setup.on_ms = ZERO_MS;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	801a      	strh	r2, [r3, #0]
            led_ptr->setup.delay_ms = ZERO_MS;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	809a      	strh	r2, [r3, #4]
            led_ptr->setup.off_ms = ZERO_MS;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	805a      	strh	r2, [r3, #2]
            break;
 80015e4:	e000      	b.n	80015e8 <prvIndicationLedTopSetup+0x98>
        default:
            break;
 80015e6:	bf00      	nop
    }

    led_ptr->status.iterations_counter = 0;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	831a      	strh	r2, [r3, #24]
    led_ptr->status.on_timeout = led_ptr->setup.on_ms;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	881a      	ldrh	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	829a      	strh	r2, [r3, #20]
    led_ptr->status.off_timeout = led_ptr->setup.off_ms;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	885a      	ldrh	r2, [r3, #2]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	82da      	strh	r2, [r3, #22]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop

0800160c <prvIndicationLedBottomSetup>:

/**
 * @brief          Loading led bottom animation setup
 */
void prvIndicationLedBottomSetup(mculed_t *led_ptr, int led_index)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
    led_ptr->setup.iterations_num = INDICATION_LED_BUTTON_NUM;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	80da      	strh	r2, [r3, #6]

    switch (led_index) {
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	2b03      	cmp	r3, #3
 8001620:	d83f      	bhi.n	80016a2 <prvIndicationLedBottomSetup+0x96>
 8001622:	a201      	add	r2, pc, #4	; (adr r2, 8001628 <prvIndicationLedBottomSetup+0x1c>)
 8001624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001628:	08001639 	.word	0x08001639
 800162c:	08001653 	.word	0x08001653
 8001630:	0800166d 	.word	0x0800166d
 8001634:	08001689 	.word	0x08001689
        case LED_TOP:
            led_ptr->hardware.mode = MCULED_OFF_STATE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	741a      	strb	r2, [r3, #16]
            led_ptr->setup.on_ms = ZERO_MS;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	801a      	strh	r2, [r3, #0]
            led_ptr->setup.delay_ms = ZERO_MS;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	809a      	strh	r2, [r3, #4]
            led_ptr->setup.off_ms = ZERO_MS;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	805a      	strh	r2, [r3, #2]
            break;
 8001650:	e028      	b.n	80016a4 <prvIndicationLedBottomSetup+0x98>
        case LED_LEFT:
            led_ptr->hardware.mode = MCULED_OFF_STATE;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	741a      	strb	r2, [r3, #16]
            led_ptr->setup.on_ms = ZERO_MS;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	801a      	strh	r2, [r3, #0]
            led_ptr->setup.delay_ms = ZERO_MS;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	809a      	strh	r2, [r3, #4]
            led_ptr->setup.off_ms = ZERO_MS;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	805a      	strh	r2, [r3, #2]
            break;
 800166a:	e01b      	b.n	80016a4 <prvIndicationLedBottomSetup+0x98>
        case LED_BOTTOM:
            led_ptr->hardware.mode = MCULED_ON_STATE;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	741a      	strb	r2, [r3, #16]
            led_ptr->setup.on_ms = (INDICATION_LED_SPEED_FAST * LED_RIGHT_TIME_ON);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	22dc      	movs	r2, #220	; 0xdc
 8001676:	801a      	strh	r2, [r3, #0]
            led_ptr->setup.off_ms = (INDICATION_LED_SPEED_FAST * LED_RIGHT_TIME_OFF);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800167e:	805a      	strh	r2, [r3, #2]
            led_ptr->setup.delay_ms = ZERO_MS;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	809a      	strh	r2, [r3, #4]
            break;
 8001686:	e00d      	b.n	80016a4 <prvIndicationLedBottomSetup+0x98>
        case LED_RIGHT:
            led_ptr->hardware.mode = MCULED_OFF_STATE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	741a      	strb	r2, [r3, #16]
            led_ptr->setup.on_ms = ZERO_MS;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	801a      	strh	r2, [r3, #0]
            led_ptr->setup.delay_ms = ZERO_MS;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	809a      	strh	r2, [r3, #4]
            led_ptr->setup.off_ms = ZERO_MS;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	805a      	strh	r2, [r3, #2]
            break;
 80016a0:	e000      	b.n	80016a4 <prvIndicationLedBottomSetup+0x98>
        default:
            break;
 80016a2:	bf00      	nop
    }

    led_ptr->status.iterations_counter = 0;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	831a      	strh	r2, [r3, #24]
    led_ptr->status.on_timeout = led_ptr->setup.on_ms;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	881a      	ldrh	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	829a      	strh	r2, [r3, #20]
    led_ptr->status.off_timeout = led_ptr->setup.off_ms;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	885a      	ldrh	r2, [r3, #2]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	82da      	strh	r2, [r3, #22]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop

080016c8 <prvIndicationLedLoadingSetup>:

/**
 * @brief          Loading led animation setup
 */
void prvIndicationLedLoadingSetup(mculed_t *led_ptr, int led_index)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
	led_ptr->hardware.mode = MCULED_LED_LOADING;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2204      	movs	r2, #4
 80016d6:	741a      	strb	r2, [r3, #16]
	led_ptr->setup.iterations_num = INDICATION_LED_LOADING_NUM;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f242 7210 	movw	r2, #10000	; 0x2710
 80016de:	80da      	strh	r2, [r3, #6]

	switch (led_index) {
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d837      	bhi.n	8001756 <prvIndicationLedLoadingSetup+0x8e>
 80016e6:	a201      	add	r2, pc, #4	; (adr r2, 80016ec <prvIndicationLedLoadingSetup+0x24>)
 80016e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ec:	080016fd 	.word	0x080016fd
 80016f0:	08001711 	.word	0x08001711
 80016f4:	08001727 	.word	0x08001727
 80016f8:	0800173f 	.word	0x0800173f
		case LED_TOP:
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TOP_TIME_ON);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2296      	movs	r2, #150	; 0x96
 8001700:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TOP_TIME_OFF);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	22d2      	movs	r2, #210	; 0xd2
 8001706:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = (INDICATION_LED_SPEED_MIDDLE * (LED_RIGHT_TIME_OFF - LED_TOP_TIME_ON));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	22f0      	movs	r2, #240	; 0xf0
 800170c:	809a      	strh	r2, [r3, #4]
			break;
 800170e:	e023      	b.n	8001758 <prvIndicationLedLoadingSetup+0x90>
		case LED_LEFT:
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_LEFT_TIME_ON);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	22d2      	movs	r2, #210	; 0xd2
 8001714:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_LEFT_TIME_OFF);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800171c:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = (INDICATION_LED_SPEED_MIDDLE * (LED_RIGHT_TIME_OFF - LED_LEFT_TIME_ON));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	22b4      	movs	r2, #180	; 0xb4
 8001722:	809a      	strh	r2, [r3, #4]
			break;
 8001724:	e018      	b.n	8001758 <prvIndicationLedLoadingSetup+0x90>
		case LED_BOTTOM:
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_BOTTOM_TIME_ON);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800172c:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_BOTTOM_TIME_OFF);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8001734:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = (INDICATION_LED_SPEED_MIDDLE * (LED_RIGHT_TIME_OFF - LED_BOTTOM_TIME_ON));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2278      	movs	r2, #120	; 0x78
 800173a:	809a      	strh	r2, [r3, #4]
			break;
 800173c:	e00c      	b.n	8001758 <prvIndicationLedLoadingSetup+0x90>
		case LED_RIGHT:
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_RIGHT_TIME_ON);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8001744:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_RIGHT_TIME_OFF);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800174c:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = (INDICATION_LED_SPEED_MIDDLE * (LED_RIGHT_TIME_OFF - LED_RIGHT_TIME_ON));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	223c      	movs	r2, #60	; 0x3c
 8001752:	809a      	strh	r2, [r3, #4]
			break;
 8001754:	e000      	b.n	8001758 <prvIndicationLedLoadingSetup+0x90>
		default:
			break;
 8001756:	bf00      	nop
 	}

	led_ptr->status.iterations_counter = 0;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	831a      	strh	r2, [r3, #24]
	led_ptr->status.on_timeout = led_ptr->setup.on_ms;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	881a      	ldrh	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	829a      	strh	r2, [r3, #20]
	led_ptr->status.off_timeout = led_ptr->setup.off_ms;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	885a      	ldrh	r2, [r3, #2]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	82da      	strh	r2, [r3, #22]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop

0800177c <prvIndicationLedButtonSetup>:

/**
 * @brief          Button led setup
 */
void prvIndicationLedButtonSetup(mculed_t *led_ptr, int led_index)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
	switch (led_index) {
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	2b03      	cmp	r3, #3
 800178a:	d839      	bhi.n	8001800 <prvIndicationLedButtonSetup+0x84>
 800178c:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <prvIndicationLedButtonSetup+0x18>)
 800178e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001792:	bf00      	nop
 8001794:	080017a5 	.word	0x080017a5
 8001798:	080017c5 	.word	0x080017c5
 800179c:	080017d9 	.word	0x080017d9
 80017a0:	080017ed 	.word	0x080017ed
		case LED_TOP:
			led_ptr->hardware.mode = MCULED_ON_STATE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.iterations_num = INDICATION_LED_BUTTON_NUM;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	80da      	strh	r2, [r3, #6]
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TOP_TIME_ON);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2296      	movs	r2, #150	; 0x96
 80017b4:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TOP_TIME_OFF);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	22d2      	movs	r2, #210	; 0xd2
 80017ba:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	809a      	strh	r2, [r3, #4]
			break;
 80017c2:	e01e      	b.n	8001802 <prvIndicationLedButtonSetup+0x86>
		case LED_LEFT:
			led_ptr->hardware.mode = MCULED_OFF_STATE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.on_ms = ZERO_MS;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = ZERO_MS;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	805a      	strh	r2, [r3, #2]
			break;
 80017d6:	e014      	b.n	8001802 <prvIndicationLedButtonSetup+0x86>
		case LED_BOTTOM:
			led_ptr->hardware.mode = MCULED_OFF_STATE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.on_ms = ZERO_MS;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = ZERO_MS;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	805a      	strh	r2, [r3, #2]
			break;
 80017ea:	e00a      	b.n	8001802 <prvIndicationLedButtonSetup+0x86>
		case LED_RIGHT:
			led_ptr->hardware.mode = MCULED_OFF_STATE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.on_ms = ZERO_MS;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = ZERO_MS;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	805a      	strh	r2, [r3, #2]
			break;
 80017fe:	e000      	b.n	8001802 <prvIndicationLedButtonSetup+0x86>
		default:
			break;
 8001800:	bf00      	nop
 	}

	led_ptr->status.iterations_counter = 0;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	831a      	strh	r2, [r3, #24]
	led_ptr->status.on_timeout = led_ptr->setup.on_ms;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	881a      	ldrh	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	829a      	strh	r2, [r3, #20]
	led_ptr->status.off_timeout = led_ptr->setup.off_ms;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	885a      	ldrh	r2, [r3, #2]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	82da      	strh	r2, [r3, #22]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <prvIndicationLedButtonHoldSetup>:

/**
 * @brief          Button hold led setup
 */
void prvIndicationLedButtonHoldSetup(mculed_t *led_ptr, int led_index)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
	switch (led_index) {
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2b03      	cmp	r3, #3
 8001832:	d848      	bhi.n	80018c6 <prvIndicationLedButtonHoldSetup+0xa2>
 8001834:	a201      	add	r2, pc, #4	; (adr r2, 800183c <prvIndicationLedButtonHoldSetup+0x18>)
 8001836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183a:	bf00      	nop
 800183c:	0800184d 	.word	0x0800184d
 8001840:	08001867 	.word	0x08001867
 8001844:	08001887 	.word	0x08001887
 8001848:	080018a7 	.word	0x080018a7
		case LED_TOP:
			led_ptr->hardware.mode = MCULED_OFF_STATE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.on_ms = ZERO_MS;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = ZERO_MS;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	809a      	strh	r2, [r3, #4]
			break;
 8001864:	e030      	b.n	80018c8 <prvIndicationLedButtonHoldSetup+0xa4>
		case LED_LEFT:
			led_ptr->hardware.mode = MCULED_ON_STATE;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.iterations_num = INDICATION_LED_BUTTON_NUM;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	80da      	strh	r2, [r3, #6]
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_ON);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2296      	movs	r2, #150	; 0x96
 8001876:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_OFF);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	22d2      	movs	r2, #210	; 0xd2
 800187c:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	809a      	strh	r2, [r3, #4]
			break;
 8001884:	e020      	b.n	80018c8 <prvIndicationLedButtonHoldSetup+0xa4>
		case LED_BOTTOM:
			led_ptr->hardware.mode = MCULED_ON_STATE;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.iterations_num = INDICATION_LED_BUTTON_NUM;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	80da      	strh	r2, [r3, #6]
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_ON);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2296      	movs	r2, #150	; 0x96
 8001896:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_OFF);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	22d2      	movs	r2, #210	; 0xd2
 800189c:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	809a      	strh	r2, [r3, #4]
			break;
 80018a4:	e010      	b.n	80018c8 <prvIndicationLedButtonHoldSetup+0xa4>
		case LED_RIGHT:
			led_ptr->hardware.mode = MCULED_ON_STATE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.iterations_num = INDICATION_LED_BUTTON_NUM;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	80da      	strh	r2, [r3, #6]
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_ON);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2296      	movs	r2, #150	; 0x96
 80018b6:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_OFF);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	22d2      	movs	r2, #210	; 0xd2
 80018bc:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	809a      	strh	r2, [r3, #4]
			break;
 80018c4:	e000      	b.n	80018c8 <prvIndicationLedButtonHoldSetup+0xa4>
		default:
			break;
 80018c6:	bf00      	nop
 	}

	led_ptr->status.iterations_counter = 0;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	831a      	strh	r2, [r3, #24]
	led_ptr->status.on_timeout = led_ptr->setup.on_ms;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	881a      	ldrh	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	829a      	strh	r2, [r3, #20]
	led_ptr->status.off_timeout = led_ptr->setup.off_ms;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	885a      	ldrh	r2, [r3, #2]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	82da      	strh	r2, [r3, #22]
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop

080018ec <prvIndicationLedButtonDoubleClickSetup>:




void prvIndicationLedButtonDoubleClickSetup(mculed_t *led_ptr, int led_index)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
	switch (led_index) {
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d842      	bhi.n	8001982 <prvIndicationLedButtonDoubleClickSetup+0x96>
 80018fc:	a201      	add	r2, pc, #4	; (adr r2, 8001904 <prvIndicationLedButtonDoubleClickSetup+0x18>)
 80018fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001902:	bf00      	nop
 8001904:	08001915 	.word	0x08001915
 8001908:	0800192f 	.word	0x0800192f
 800190c:	0800194f 	.word	0x0800194f
 8001910:	08001969 	.word	0x08001969
		case LED_TOP:
			led_ptr->hardware.mode = MCULED_OFF_STATE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.on_ms = ZERO_MS;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = ZERO_MS;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	809a      	strh	r2, [r3, #4]
			break;
 800192c:	e02a      	b.n	8001984 <prvIndicationLedButtonDoubleClickSetup+0x98>
		case LED_LEFT:
			led_ptr->hardware.mode = MCULED_ON_STATE;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.iterations_num = INDICATION_LED_BUTTON_NUM;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	80da      	strh	r2, [r3, #6]
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_ON);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2296      	movs	r2, #150	; 0x96
 800193e:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_OFF);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	22d2      	movs	r2, #210	; 0xd2
 8001944:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	809a      	strh	r2, [r3, #4]
			break;
 800194c:	e01a      	b.n	8001984 <prvIndicationLedButtonDoubleClickSetup+0x98>
		case LED_BOTTOM:
			led_ptr->hardware.mode = MCULED_OFF_STATE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.on_ms = ZERO_MS;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = ZERO_MS;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	809a      	strh	r2, [r3, #4]
			break;
 8001966:	e00d      	b.n	8001984 <prvIndicationLedButtonDoubleClickSetup+0x98>
		case LED_RIGHT:
			led_ptr->hardware.mode = MCULED_OFF_STATE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.on_ms = ZERO_MS;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = ZERO_MS;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	809a      	strh	r2, [r3, #4]
			break;
 8001980:	e000      	b.n	8001984 <prvIndicationLedButtonDoubleClickSetup+0x98>
		default:
			break;
 8001982:	bf00      	nop
 	}

	led_ptr->status.iterations_counter = 0;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	831a      	strh	r2, [r3, #24]
	led_ptr->status.on_timeout = led_ptr->setup.on_ms;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	881a      	ldrh	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	829a      	strh	r2, [r3, #20]
	led_ptr->status.off_timeout = led_ptr->setup.off_ms;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	885a      	ldrh	r2, [r3, #2]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	82da      	strh	r2, [r3, #22]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop

080019a8 <prvIndicationLedErrorSetup>:

/**
 * @brief          Error led setup
 */
void prvIndicationLedErrorSetup(mculed_t *led_ptr)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	led_ptr->hardware.mode = MCULED_ON_STATE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	741a      	strb	r2, [r3, #16]
	led_ptr->setup.iterations_num = INDICATION_LED_ERROR_NUM;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2203      	movs	r2, #3
 80019ba:	80da      	strh	r2, [r3, #6]

	led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_ON);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2296      	movs	r2, #150	; 0x96
 80019c0:	801a      	strh	r2, [r3, #0]
	led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_OFF);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	22d2      	movs	r2, #210	; 0xd2
 80019c6:	805a      	strh	r2, [r3, #2]
	led_ptr->setup.delay_ms = ZERO_MS;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	809a      	strh	r2, [r3, #4]

	led_ptr->status.iterations_counter = 0;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	831a      	strh	r2, [r3, #24]
	led_ptr->status.on_timeout = led_ptr->setup.on_ms;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	881a      	ldrh	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	829a      	strh	r2, [r3, #20]
	led_ptr->status.off_timeout = led_ptr->setup.off_ms;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	885a      	ldrh	r2, [r3, #2]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	82da      	strh	r2, [r3, #22]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <IndicationLedsUpdate>:

/**
 * @brief          Led update from SysTick_Handler
 */
void IndicationLedsUpdate(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
	for (int led_index = 0; led_index < N_LED; led_index++) {
 80019f6:	2300      	movs	r3, #0
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	e00c      	b.n	8001a16 <IndicationLedsUpdate+0x26>
	    LedUpdate(&mculed[led_index]);
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <IndicationLedsUpdate+0x38>)
 8001a08:	4413      	add	r3, r2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f867 	bl	8001ade <LedUpdate>
	for (int led_index = 0; led_index < N_LED; led_index++) {
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3301      	adds	r3, #1
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d9ef      	bls.n	80019fc <IndicationLedsUpdate+0xc>
	}
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000648 	.word	0x20000648

08001a2c <McuLedInit>:

/**
 * @brief          Initialization of each led
 */
mculedr_t McuLedInit(mculed_t *self, mculed_ctrl_t *fns)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
	if (self == NULL || fns == NULL || fns->turn_on == NULL || fns->turn_off == NULL) {
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00a      	beq.n	8001a52 <McuLedInit+0x26>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d007      	beq.n	8001a52 <McuLedInit+0x26>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <McuLedInit+0x26>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <McuLedInit+0x2a>
		return MCULED_ERROR;
 8001a52:	23ff      	movs	r3, #255	; 0xff
 8001a54:	e01d      	b.n	8001a92 <McuLedInit+0x66>
	}

	self->setup.on_ms = 0;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	801a      	strh	r2, [r3, #0]
	self->setup.off_ms = 0;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	805a      	strh	r2, [r3, #2]
	self->setup.iterations_num = 0;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	80da      	strh	r2, [r3, #6]
	self->setup.delay_ms = 0;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	809a      	strh	r2, [r3, #4]

	self->status.iterations_counter = 0;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	831a      	strh	r2, [r3, #24]
	self->status.off_timeout = 0;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	82da      	strh	r2, [r3, #22]
	self->status.on_timeout = 0;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	829a      	strh	r2, [r3, #20]

	self->fns.turn_on = fns->turn_on;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	61da      	str	r2, [r3, #28]
	self->fns.turn_off = fns->turn_off;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	621a      	str	r2, [r3, #32]

	return MCULED_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <LedFunction>:

/**
 * @brief          Led function for different modes of work
 */
void LedFunction(mculed_t *self)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
	if (self->hardware.mode == MCULED_OFF_STATE) {
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	7c1b      	ldrb	r3, [r3, #16]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d103      	bne.n	8001ab6 <LedFunction+0x18>
		self->fns.turn_off(self);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	4798      	blx	r3
	}
	if (self->hardware.mode == MCULED_ON_STATE) {
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7c1b      	ldrb	r3, [r3, #16]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d103      	bne.n	8001ac6 <LedFunction+0x28>
		self->fns.turn_on(self);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	4798      	blx	r3
	}
	if (self->hardware.mode == MCULED_TOGGLE_STATE) {
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7c1b      	ldrb	r3, [r3, #16]
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d103      	bne.n	8001ad6 <LedFunction+0x38>
		self->fns.toggle(self);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	4798      	blx	r3
	}
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <LedUpdate>:

/**
 * @brief          Led update from SysTick_Handler for each led
 */
void LedUpdate(mculed_t *self)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
	if (self->status.on_timeout) {
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	8a9b      	ldrh	r3, [r3, #20]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d02b      	beq.n	8001b46 <LedUpdate+0x68>
		if (!--self->status.on_timeout) {
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	8a9b      	ldrh	r3, [r3, #20]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	829a      	strh	r2, [r3, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	8a9b      	ldrh	r3, [r3, #20]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d121      	bne.n	8001b46 <LedUpdate+0x68>
			self->fns.turn_off(self); // TURN OFF
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	4798      	blx	r3
			if (self->setup.iterations_num) {
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	88db      	ldrh	r3, [r3, #6]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d019      	beq.n	8001b46 <LedUpdate+0x68>
				self->status.iterations_counter++;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	8b1b      	ldrh	r3, [r3, #24]
 8001b16:	3301      	adds	r3, #1
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	831a      	strh	r2, [r3, #24]
				if (self->status.iterations_counter >= self->setup.iterations_num) {
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	8b1a      	ldrh	r2, [r3, #24]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	88db      	ldrh	r3, [r3, #6]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d305      	bcc.n	8001b36 <LedUpdate+0x58>
					self->setup.off_ms = 0;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	805a      	strh	r2, [r3, #2]
					self->setup.delay_ms = 0;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	809a      	strh	r2, [r3, #4]
				}
				self->status.off_timeout = (self->setup.off_ms + self->setup.delay_ms);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	885a      	ldrh	r2, [r3, #2]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	889b      	ldrh	r3, [r3, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	82da      	strh	r2, [r3, #22]
			}
		}
	}

	if (self->status.off_timeout) {
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	8adb      	ldrh	r3, [r3, #22]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d015      	beq.n	8001b7a <LedUpdate+0x9c>
		if (!--self->status.off_timeout) {
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	8adb      	ldrh	r3, [r3, #22]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	82da      	strh	r2, [r3, #22]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	8adb      	ldrh	r3, [r3, #22]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10b      	bne.n	8001b7a <LedUpdate+0x9c>
			self->status.on_timeout = (self->setup.on_ms + self->setup.delay_ms);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	881a      	ldrh	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	889b      	ldrh	r3, [r3, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	829a      	strh	r2, [r3, #20]
			self->fns.turn_on(self); // TURN ON
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	4798      	blx	r3
		}
	}
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <MicrophoneInit>:
/**
 * \brief           Microphone init
 * \param[in]
 */
void MicrophoneInit(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
    I2S2Init();
 8001b88:	f000 fd86 	bl	8002698 <I2S2Init>
    I2S3Init();
 8001b8c:	f000 fd56 	bl	800263c <I2S3Init>
    RingBufMicrophoneInit();
 8001b90:	f000 fc1c 	bl	80023cc <RingBufMicrophoneInit>
    prvMicrophoneCRCInit();
 8001b94:	f000 f9ca 	bl	8001f2c <prvMicrophoneCRCInit>
    PDM2PCM_init();
 8001b98:	f000 fbb0 	bl	80022fc <PDM2PCM_init>

    prvMicrophoneSetRead(MICROPHONE_READ_BLOCKED);
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f000 f9a7 	bl	8001ef0 <prvMicrophoneSetRead>

    microphone.timeout_ms = MICROPHONE_TIMEOUT_MS;
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <MicrophoneInit+0x50>)
 8001ba4:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001ba8:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548

    VisualQueueHandle = osMessageQueueNew(128, sizeof(uint16_t), &VisualQueueAttributes);
 8001bac:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <MicrophoneInit+0x54>)
 8001bae:	2102      	movs	r1, #2
 8001bb0:	2080      	movs	r0, #128	; 0x80
 8001bb2:	f003 fcdc 	bl	800556e <osMessageQueueNew>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <MicrophoneInit+0x58>)
 8001bba:	6013      	str	r3, [r2, #0]

    HAL_I2S_Transmit_DMA(&hi2s3, &microphone.tx[0], 64);
 8001bbc:	2240      	movs	r2, #64	; 0x40
 8001bbe:	4908      	ldr	r1, [pc, #32]	; (8001be0 <MicrophoneInit+0x5c>)
 8001bc0:	4808      	ldr	r0, [pc, #32]	; (8001be4 <MicrophoneInit+0x60>)
 8001bc2:	f008 f8b9 	bl	8009d38 <HAL_I2S_Transmit_DMA>
    HAL_I2S_Receive_DMA(&hi2s2, &microphone.rx[0], 64);
 8001bc6:	2240      	movs	r2, #64	; 0x40
 8001bc8:	4907      	ldr	r1, [pc, #28]	; (8001be8 <MicrophoneInit+0x64>)
 8001bca:	4808      	ldr	r0, [pc, #32]	; (8001bec <MicrophoneInit+0x68>)
 8001bcc:	f008 f95c 	bl	8009e88 <HAL_I2S_Receive_DMA>
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000820 	.word	0x20000820
 8001bd8:	08013c0c 	.word	0x08013c0c
 8001bdc:	200006f0 	.word	0x200006f0
 8001be0:	20000c68 	.word	0x20000c68
 8001be4:	20000790 	.word	0x20000790
 8001be8:	20000b48 	.word	0x20000b48
 8001bec:	200007d8 	.word	0x200007d8

08001bf0 <MicrophoneTask>:
/**
 * \brief           RTOS microphone task
 * \param[in]
 */
void MicrophoneTask(void *argument)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        switch (microphone.status) {
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <MicrophoneTask+0x88>)
 8001bfa:	f893 3550 	ldrb.w	r3, [r3, #1360]	; 0x550
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d835      	bhi.n	8001c6e <MicrophoneTask+0x7e>
 8001c02:	a201      	add	r2, pc, #4	; (adr r2, 8001c08 <MicrophoneTask+0x18>)
 8001c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c08:	08001c6f 	.word	0x08001c6f
 8001c0c:	08001c25 	.word	0x08001c25
 8001c10:	08001c31 	.word	0x08001c31
 8001c14:	08001c3d 	.word	0x08001c3d
 8001c18:	08001c47 	.word	0x08001c47
 8001c1c:	08001c61 	.word	0x08001c61
 8001c20:	08001c53 	.word	0x08001c53
            case MICROPHONE_RX_STATE_1:
                prvMicrophoneRxState1();
 8001c24:	f000 f830 	bl	8001c88 <prvMicrophoneRxState1>
                MicrophoneSetStatus(MICROPHONE_READY);
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f000 f94f 	bl	8001ecc <MicrophoneSetStatus>
                break;
 8001c2e:	e01f      	b.n	8001c70 <MicrophoneTask+0x80>
            case MICROPHONE_RX_STATE_2:
                prvMicrophoneRxState2();
 8001c30:	f000 f86e 	bl	8001d10 <prvMicrophoneRxState2>
                MicrophoneSetStatus(MICROPHONE_READY);
 8001c34:	2000      	movs	r0, #0
 8001c36:	f000 f949 	bl	8001ecc <MicrophoneSetStatus>
                break;
 8001c3a:	e019      	b.n	8001c70 <MicrophoneTask+0x80>
            case MICROPHONE_TX_STATE_1:
                prvMicrophoneTxState1();
 8001c3c:	f000 f890 	bl	8001d60 <prvMicrophoneTxState1>
                MicrophoneSetStatus(MICROPHONE_READY);
 8001c40:	2000      	movs	r0, #0
 8001c42:	f000 f943 	bl	8001ecc <MicrophoneSetStatus>
            case MICROPHONE_TX_STATE_2:
                prvMicrophoneTxState2();
 8001c46:	f000 f8cf 	bl	8001de8 <prvMicrophoneTxState2>
                MicrophoneSetStatus(MICROPHONE_READY);
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f000 f93e 	bl	8001ecc <MicrophoneSetStatus>
            case MICROPHONE_READY:
                break;
 8001c50:	e00e      	b.n	8001c70 <MicrophoneTask+0x80>
            case MICROPHONE_PROCESS_ERROR:
                PrintfLogsCRLF("\tError: microphone process error!");
 8001c52:	480a      	ldr	r0, [pc, #40]	; (8001c7c <MicrophoneTask+0x8c>)
 8001c54:	f001 fca8 	bl	80035a8 <PrintfLogs>
 8001c58:	4809      	ldr	r0, [pc, #36]	; (8001c80 <MicrophoneTask+0x90>)
 8001c5a:	f001 fca5 	bl	80035a8 <PrintfLogs>
                break;
 8001c5e:	e007      	b.n	8001c70 <MicrophoneTask+0x80>
            case MICROPHONE_INIT_ERROR:
                PrintfLogsCRLF("\tError: initialization of DMA I2S for microphone");
 8001c60:	4808      	ldr	r0, [pc, #32]	; (8001c84 <MicrophoneTask+0x94>)
 8001c62:	f001 fca1 	bl	80035a8 <PrintfLogs>
 8001c66:	4806      	ldr	r0, [pc, #24]	; (8001c80 <MicrophoneTask+0x90>)
 8001c68:	f001 fc9e 	bl	80035a8 <PrintfLogs>
                break;
 8001c6c:	e000      	b.n	8001c70 <MicrophoneTask+0x80>
            default:
                break;
 8001c6e:	bf00      	nop
        }
        osDelay(1);
 8001c70:	2001      	movs	r0, #1
 8001c72:	f003 fb53 	bl	800531c <osDelay>
        switch (microphone.status) {
 8001c76:	e7bf      	b.n	8001bf8 <MicrophoneTask+0x8>
 8001c78:	20000820 	.word	0x20000820
 8001c7c:	0801340c 	.word	0x0801340c
 8001c80:	08013430 	.word	0x08013430
 8001c84:	08013434 	.word	0x08013434

08001c88 <prvMicrophoneRxState1>:
/**
 * \brief           Microphone RX_STATE_1
 * \param[in]
 */
void prvMicrophoneRxState1(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
    PDM_Filter(&microphone.rx[0], &microphone.mid_buff[0], &PDM1_filter_handler);
 8001c8e:	4a1a      	ldr	r2, [pc, #104]	; (8001cf8 <prvMicrophoneRxState1+0x70>)
 8001c90:	491a      	ldr	r1, [pc, #104]	; (8001cfc <prvMicrophoneRxState1+0x74>)
 8001c92:	481b      	ldr	r0, [pc, #108]	; (8001d00 <prvMicrophoneRxState1+0x78>)
 8001c94:	f00e f9ce 	bl	8010034 <PDM_Filter>

    if (!MicrophonePutDataToRxBuffer(&microphone.mid_buff, sizeof(microphone.mid_buff))) {
 8001c98:	2120      	movs	r1, #32
 8001c9a:	4818      	ldr	r0, [pc, #96]	; (8001cfc <prvMicrophoneRxState1+0x74>)
 8001c9c:	f000 f8e8 	bl	8001e70 <MicrophonePutDataToRxBuffer>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f083 0301 	eor.w	r3, r3, #1
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <prvMicrophoneRxState1+0x2a>
        MicrophoneSetStatus(MICROPHONE_PROCESS_ERROR);
 8001cac:	2006      	movs	r0, #6
 8001cae:	f000 f90d 	bl	8001ecc <MicrophoneSetStatus>
    }

    osMessageQueuePut(VisualQueueHandle, microphone.mid_buff, 0, 100);
 8001cb2:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <prvMicrophoneRxState1+0x7c>)
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	2364      	movs	r3, #100	; 0x64
 8001cb8:	2200      	movs	r2, #0
 8001cba:	4910      	ldr	r1, [pc, #64]	; (8001cfc <prvMicrophoneRxState1+0x74>)
 8001cbc:	f003 fcca 	bl	8005654 <osMessageQueuePut>

    if ((microphone.lwrb_rx.w - microphone.lwrb_rx.r) > MICROPHONE_BUFF_SIZE) {
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <prvMicrophoneRxState1+0x80>)
 8001cc2:	f3bf 8f5b 	dmb	ish
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f3bf 8f5b 	dmb	ish
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <prvMicrophoneRxState1+0x84>)
 8001cd2:	f3bf 8f5b 	dmb	ish
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f3bf 8f5b 	dmb	ish
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b80      	cmp	r3, #128	; 0x80
 8001ce4:	d904      	bls.n	8001cf0 <prvMicrophoneRxState1+0x68>
        IndicationLedBottom();
 8001ce6:	f7ff fb6b 	bl	80013c0 <IndicationLedBottom>
        prvMicrophoneSetRead(MICROPHONE_READ_READY);
 8001cea:	2001      	movs	r0, #1
 8001cec:	f000 f900 	bl	8001ef0 <prvMicrophoneSetRead>
    }
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200006f4 	.word	0x200006f4
 8001cfc:	20000c48 	.word	0x20000c48
 8001d00:	20000b48 	.word	0x20000b48
 8001d04:	200006f0 	.word	0x200006f0
 8001d08:	2000082c 	.word	0x2000082c
 8001d0c:	20000828 	.word	0x20000828

08001d10 <prvMicrophoneRxState2>:
/**
 * \brief           Microphone RX_STATE_2
 * \param[in]
 */
void prvMicrophoneRxState2(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
    PDM_Filter(&microphone.rx[64], &microphone.mid_buff[0], &PDM1_filter_handler);
 8001d14:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <prvMicrophoneRxState2+0x40>)
 8001d16:	490f      	ldr	r1, [pc, #60]	; (8001d54 <prvMicrophoneRxState2+0x44>)
 8001d18:	480f      	ldr	r0, [pc, #60]	; (8001d58 <prvMicrophoneRxState2+0x48>)
 8001d1a:	f00e f98b 	bl	8010034 <PDM_Filter>

    if (!MicrophonePutDataToRxBuffer(&microphone.mid_buff, sizeof(microphone.mid_buff))) {
 8001d1e:	2120      	movs	r1, #32
 8001d20:	480c      	ldr	r0, [pc, #48]	; (8001d54 <prvMicrophoneRxState2+0x44>)
 8001d22:	f000 f8a5 	bl	8001e70 <MicrophonePutDataToRxBuffer>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f083 0301 	eor.w	r3, r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <prvMicrophoneRxState2+0x28>
        MicrophoneSetStatus(MICROPHONE_PROCESS_ERROR);
 8001d32:	2006      	movs	r0, #6
 8001d34:	f000 f8ca 	bl	8001ecc <MicrophoneSetStatus>
    }

    osMessageQueuePut(VisualQueueHandle, microphone.mid_buff, 0, 100);
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <prvMicrophoneRxState2+0x4c>)
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	2364      	movs	r3, #100	; 0x64
 8001d3e:	2200      	movs	r2, #0
 8001d40:	4904      	ldr	r1, [pc, #16]	; (8001d54 <prvMicrophoneRxState2+0x44>)
 8001d42:	f003 fc87 	bl	8005654 <osMessageQueuePut>

    MicrophoneSetStatus(MICROPHONE_READY);
 8001d46:	2000      	movs	r0, #0
 8001d48:	f000 f8c0 	bl	8001ecc <MicrophoneSetStatus>
}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	200006f4 	.word	0x200006f4
 8001d54:	20000c48 	.word	0x20000c48
 8001d58:	20000bc8 	.word	0x20000bc8
 8001d5c:	200006f0 	.word	0x200006f0

08001d60 <prvMicrophoneTxState1>:
/**
 * \brief           Microphone TX_STATE_1
 * \param[in]
 */
void prvMicrophoneTxState1(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b0a2      	sub	sp, #136	; 0x88
 8001d64:	af00      	add	r7, sp, #0
    if (prvMicrophoneGetRead()) {
 8001d66:	f000 f8d5 	bl	8001f14 <prvMicrophoneGetRead>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d034      	beq.n	8001dda <prvMicrophoneTxState1+0x7a>

        uint16_t data[MICROPHONE_HALF_BUFF_SIZE] = {0};
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f00e fa08 	bl	801018c <memset>
        MicrophoneGetDataFromRxBuffer(data);
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 f894 	bl	8001eac <MicrophoneGetDataFromRxBuffer>

        for (int i = 0; i < MICROPHONE_HALF_BUFF_SIZE; i = i + 4) {
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001d8a:	e022      	b.n	8001dd2 <prvMicrophoneTxState1+0x72>
            microphone.tx[i] = data[i];
 8001d8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	3388      	adds	r3, #136	; 0x88
 8001d94:	443b      	add	r3, r7
 8001d96:	f833 1c84 	ldrh.w	r1, [r3, #-132]
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <prvMicrophoneTxState1+0x84>)
 8001d9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001da0:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8001da4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            microphone.tx[i + 2] = data[i];
 8001da8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dac:	1c9a      	adds	r2, r3, #2
 8001dae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	3388      	adds	r3, #136	; 0x88
 8001db6:	443b      	add	r3, r7
 8001db8:	f833 0c84 	ldrh.w	r0, [r3, #-132]
 8001dbc:	4909      	ldr	r1, [pc, #36]	; (8001de4 <prvMicrophoneTxState1+0x84>)
 8001dbe:	f502 7309 	add.w	r3, r2, #548	; 0x224
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (int i = 0; i < MICROPHONE_HALF_BUFF_SIZE; i = i + 4) {
 8001dc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dcc:	3304      	adds	r3, #4
 8001dce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001dd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dd6:	2b3f      	cmp	r3, #63	; 0x3f
 8001dd8:	ddd8      	ble.n	8001d8c <prvMicrophoneTxState1+0x2c>
        }
    }
}
 8001dda:	bf00      	nop
 8001ddc:	3788      	adds	r7, #136	; 0x88
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000820 	.word	0x20000820

08001de8 <prvMicrophoneTxState2>:
/**
 * \brief           Microphone TX_STATE_1
 * \param[in]
 */
void prvMicrophoneTxState2(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b0a2      	sub	sp, #136	; 0x88
 8001dec:	af00      	add	r7, sp, #0
    if (prvMicrophoneGetRead()) {
 8001dee:	f000 f891 	bl	8001f14 <prvMicrophoneGetRead>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d034      	beq.n	8001e62 <prvMicrophoneTxState2+0x7a>

        uint16_t data[MICROPHONE_HALF_BUFF_SIZE] = {0};
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f00e f9c4 	bl	801018c <memset>
        MicrophoneGetDataFromRxBuffer(data);
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 f850 	bl	8001eac <MicrophoneGetDataFromRxBuffer>

        for (int i = MICROPHONE_HALF_BUFF_SIZE; i < MICROPHONE_BUFF_SIZE; i = i + 4) {
 8001e0c:	2340      	movs	r3, #64	; 0x40
 8001e0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e12:	e022      	b.n	8001e5a <prvMicrophoneTxState2+0x72>
            microphone.tx[i] = data[i];
 8001e14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	3388      	adds	r3, #136	; 0x88
 8001e1c:	443b      	add	r3, r7
 8001e1e:	f833 1c84 	ldrh.w	r1, [r3, #-132]
 8001e22:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <prvMicrophoneTxState2+0x84>)
 8001e24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e28:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8001e2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            microphone.tx[i + 2] = data[i];
 8001e30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e34:	1c9a      	adds	r2, r3, #2
 8001e36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	3388      	adds	r3, #136	; 0x88
 8001e3e:	443b      	add	r3, r7
 8001e40:	f833 0c84 	ldrh.w	r0, [r3, #-132]
 8001e44:	4909      	ldr	r1, [pc, #36]	; (8001e6c <prvMicrophoneTxState2+0x84>)
 8001e46:	f502 7309 	add.w	r3, r2, #548	; 0x224
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (int i = MICROPHONE_HALF_BUFF_SIZE; i < MICROPHONE_BUFF_SIZE; i = i + 4) {
 8001e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e54:	3304      	adds	r3, #4
 8001e56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8001e60:	ddd8      	ble.n	8001e14 <prvMicrophoneTxState2+0x2c>
        }
    }
}
 8001e62:	bf00      	nop
 8001e64:	3788      	adds	r7, #136	; 0x88
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000820 	.word	0x20000820

08001e70 <MicrophonePutDataToRxBuffer>:
/**
 * \brief           Microphone write RX ring buffer
 * \param[in]
 */
bool MicrophonePutDataToRxBuffer(const void* data, size_t len)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
    if (lwrb_get_free(&microphone.lwrb_rx) == 0) {
 8001e7a:	480b      	ldr	r0, [pc, #44]	; (8001ea8 <MicrophonePutDataToRxBuffer+0x38>)
 8001e7c:	f00c f95c 	bl	800e138 <lwrb_get_free>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <MicrophonePutDataToRxBuffer+0x1a>
        return false;
 8001e86:	2300      	movs	r3, #0
 8001e88:	e00a      	b.n	8001ea0 <MicrophonePutDataToRxBuffer+0x30>
    }

    return (lwrb_write(&microphone.lwrb_rx, data, len) > 0 ? true : false);
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4806      	ldr	r0, [pc, #24]	; (8001ea8 <MicrophonePutDataToRxBuffer+0x38>)
 8001e90:	f00c f852 	bl	800df38 <lwrb_write>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bf14      	ite	ne
 8001e9a:	2301      	movne	r3, #1
 8001e9c:	2300      	moveq	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000820 	.word	0x20000820

08001eac <MicrophoneGetDataFromRxBuffer>:
/**
 * \brief           Microphone get data from RX ring buffer
 * \param[in]
 */
void MicrophoneGetDataFromRxBuffer(uint16_t *data)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
    lwrb_read(&microphone.lwrb_rx, data, sizeof(data));
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <MicrophoneGetDataFromRxBuffer+0x1c>)
 8001eba:	f00c f8bd 	bl	800e038 <lwrb_read>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000820 	.word	0x20000820

08001ecc <MicrophoneSetStatus>:
/**
 * \brief           Microphone set state
 * \param[in]
 */
void MicrophoneSetStatus(microphone_status_t status)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
    microphone.status = status;
 8001ed6:	4a05      	ldr	r2, [pc, #20]	; (8001eec <MicrophoneSetStatus+0x20>)
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	f882 3550 	strb.w	r3, [r2, #1360]	; 0x550
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000820 	.word	0x20000820

08001ef0 <prvMicrophoneSetRead>:
/**
 * \brief           Microphone set read state
 * \param[in]
 */
void prvMicrophoneSetRead(bool activate)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
    microphone.read = activate;
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <prvMicrophoneSetRead+0x20>)
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	f882 3552 	strb.w	r3, [r2, #1362]	; 0x552
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000820 	.word	0x20000820

08001f14 <prvMicrophoneGetRead>:
/**
 * \brief           Microphone set read state
 * \param[in]
 */
bool prvMicrophoneGetRead(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
    return microphone.read;
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <prvMicrophoneGetRead+0x14>)
 8001f1a:	f893 3552 	ldrb.w	r3, [r3, #1362]	; 0x552
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	20000820 	.word	0x20000820

08001f2c <prvMicrophoneCRCInit>:
/**
 * \brief           CRC init
 * \param[in]
 */
void prvMicrophoneCRCInit(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
    hcrc.Instance = CRC;
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <prvMicrophoneCRCInit+0x30>)
 8001f32:	4a0b      	ldr	r2, [pc, #44]	; (8001f60 <prvMicrophoneCRCInit+0x34>)
 8001f34:	601a      	str	r2, [r3, #0]

    if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8001f36:	4809      	ldr	r0, [pc, #36]	; (8001f5c <prvMicrophoneCRCInit+0x30>)
 8001f38:	f006 ff9f 	bl	8008e7a <HAL_CRC_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <prvMicrophoneCRCInit+0x1a>
        Error_Handler();
 8001f42:	f002 fe21 	bl	8004b88 <Error_Handler>
    }

    __HAL_CRC_DR_RESET(&hcrc);
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <prvMicrophoneCRCInit+0x30>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <prvMicrophoneCRCInit+0x30>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 0201 	orr.w	r2, r2, #1
 8001f54:	609a      	str	r2, [r3, #8]
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200006e8 	.word	0x200006e8
 8001f60:	40023000 	.word	0x40023000

08001f64 <MicrophoneSetVisualizer>:
/**
 * \brief           Microphone set visualizer off/on
 * \param[in]
 */
void MicrophoneSetVisualizer(bool mode)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
    microphone.visualize = mode;
 8001f6e:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <MicrophoneSetVisualizer+0x20>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f882 3551 	strb.w	r3, [r2, #1361]	; 0x551
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000820 	.word	0x20000820

08001f88 <MicrophoneGetVisualizerStatus>:
/**
 * \brief           Microphone get visualizer status
 * \param[in]
 */
bool MicrophoneGetVisualizerStatus(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
    return microphone.visualize;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <MicrophoneGetVisualizerStatus+0x14>)
 8001f8e:	f893 3551 	ldrb.w	r3, [r3, #1361]	; 0x551
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	20000820 	.word	0x20000820

08001fa0 <MicrophoneVisualizationClearQueue>:
/**
 * \brief           Clear visualization queue
 * \param[in]
 */
void MicrophoneVisualizationClearQueue(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
    osMessageQueueReset(VisualQueueHandle);
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <MicrophoneVisualizationClearQueue+0x14>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f003 fc11 	bl	80057d0 <osMessageQueueReset>
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200006f0 	.word	0x200006f0

08001fb8 <MicrophoneVisualizationTask>:
/**
 * \brief           Visualization of microphone task RTOS
 * \param[in]
 */
void MicrophoneVisualizationTask(void *argument)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08c      	sub	sp, #48	; 0x30
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
    uint16_t msg[MICROPHONE_MID_BUFF_SIZE] = {0};
 8001fc0:	f107 0308 	add.w	r3, r7, #8
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f00e f8df 	bl	801018c <memset>

    for (;;)
    {
        if (MicrophoneGetVisualizerStatus()) {
 8001fce:	f7ff ffdb 	bl	8001f88 <MicrophoneGetVisualizerStatus>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0fa      	beq.n	8001fce <MicrophoneVisualizationTask+0x16>

            if ((HAL_GetTick() - microphone.timestamp_ms) > microphone.timeout_ms) {
 8001fd8:	f006 fe32 	bl	8008c40 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4bb7      	ldr	r3, [pc, #732]	; (80022bc <MicrophoneVisualizationTask+0x304>)
 8001fe0:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8001fe4:	1ad2      	subs	r2, r2, r3
 8001fe6:	4bb5      	ldr	r3, [pc, #724]	; (80022bc <MicrophoneVisualizationTask+0x304>)
 8001fe8:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d908      	bls.n	8002002 <MicrophoneVisualizationTask+0x4a>
                microphone.timestamp_ms = HAL_GetTick();
 8001ff0:	f006 fe26 	bl	8008c40 <HAL_GetTick>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4ab1      	ldr	r2, [pc, #708]	; (80022bc <MicrophoneVisualizationTask+0x304>)
 8001ff8:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
                PrintfConsoleCont(CLR_CLR);
 8001ffc:	48b0      	ldr	r0, [pc, #704]	; (80022c0 <MicrophoneVisualizationTask+0x308>)
 8001ffe:	f001 faf1 	bl	80035e4 <PrintfConsole>
            }

            for (int i = 0; i < MICROPHONE_MID_BUFF_SIZE; i++) {
 8002002:	2300      	movs	r3, #0
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002006:	e153      	b.n	80022b0 <MicrophoneVisualizationTask+0x2f8>

                osStatus_t event = osMessageQueueGet(VisualQueueHandle, &msg[i], NULL, 200);
 8002008:	4bae      	ldr	r3, [pc, #696]	; (80022c4 <MicrophoneVisualizationTask+0x30c>)
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	f107 0208 	add.w	r2, r7, #8
 8002010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	18d1      	adds	r1, r2, r3
 8002016:	23c8      	movs	r3, #200	; 0xc8
 8002018:	2200      	movs	r2, #0
 800201a:	f003 fb7b 	bl	8005714 <osMessageQueueGet>
 800201e:	62b8      	str	r0, [r7, #40]	; 0x28

                if (event != osOK) {
 8002020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002022:	2b00      	cmp	r3, #0
 8002024:	f040 813e 	bne.w	80022a4 <MicrophoneVisualizationTask+0x2ec>
                    continue;
                }

                if ((msg[i] > 1300) && (msg[i] < 1500)) {
 8002028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	3330      	adds	r3, #48	; 0x30
 800202e:	443b      	add	r3, r7
 8002030:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8002034:	f240 5214 	movw	r2, #1300	; 0x514
 8002038:	4293      	cmp	r3, r2
 800203a:	d910      	bls.n	800205e <MicrophoneVisualizationTask+0xa6>
 800203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	3330      	adds	r3, #48	; 0x30
 8002042:	443b      	add	r3, r7
 8002044:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8002048:	f240 52db 	movw	r2, #1499	; 0x5db
 800204c:	4293      	cmp	r3, r2
 800204e:	d806      	bhi.n	800205e <MicrophoneVisualizationTask+0xa6>
                    PrintfConsoleCRLF("|");
 8002050:	489d      	ldr	r0, [pc, #628]	; (80022c8 <MicrophoneVisualizationTask+0x310>)
 8002052:	f001 fac7 	bl	80035e4 <PrintfConsole>
 8002056:	489d      	ldr	r0, [pc, #628]	; (80022cc <MicrophoneVisualizationTask+0x314>)
 8002058:	f001 fac4 	bl	80035e4 <PrintfConsole>
 800205c:	e125      	b.n	80022aa <MicrophoneVisualizationTask+0x2f2>
                }
                else if ((msg[i] > 1500) && (msg[i] < 1800)) {
 800205e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	3330      	adds	r3, #48	; 0x30
 8002064:	443b      	add	r3, r7
 8002066:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800206a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800206e:	4293      	cmp	r3, r2
 8002070:	d90f      	bls.n	8002092 <MicrophoneVisualizationTask+0xda>
 8002072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	3330      	adds	r3, #48	; 0x30
 8002078:	443b      	add	r3, r7
 800207a:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800207e:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002082:	d206      	bcs.n	8002092 <MicrophoneVisualizationTask+0xda>
                    PrintfConsoleCRLF("||");
 8002084:	4892      	ldr	r0, [pc, #584]	; (80022d0 <MicrophoneVisualizationTask+0x318>)
 8002086:	f001 faad 	bl	80035e4 <PrintfConsole>
 800208a:	4890      	ldr	r0, [pc, #576]	; (80022cc <MicrophoneVisualizationTask+0x314>)
 800208c:	f001 faaa 	bl	80035e4 <PrintfConsole>
 8002090:	e10b      	b.n	80022aa <MicrophoneVisualizationTask+0x2f2>
                }
                else if ((msg[i] > 1800) && (msg[i] < 2000)) {
 8002092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	3330      	adds	r3, #48	; 0x30
 8002098:	443b      	add	r3, r7
 800209a:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800209e:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80020a2:	d90f      	bls.n	80020c4 <MicrophoneVisualizationTask+0x10c>
 80020a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	3330      	adds	r3, #48	; 0x30
 80020aa:	443b      	add	r3, r7
 80020ac:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 80020b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80020b4:	d206      	bcs.n	80020c4 <MicrophoneVisualizationTask+0x10c>
                    PrintfConsoleCRLF("|||");
 80020b6:	4887      	ldr	r0, [pc, #540]	; (80022d4 <MicrophoneVisualizationTask+0x31c>)
 80020b8:	f001 fa94 	bl	80035e4 <PrintfConsole>
 80020bc:	4883      	ldr	r0, [pc, #524]	; (80022cc <MicrophoneVisualizationTask+0x314>)
 80020be:	f001 fa91 	bl	80035e4 <PrintfConsole>
 80020c2:	e0f2      	b.n	80022aa <MicrophoneVisualizationTask+0x2f2>
                }
                else if ((msg[i] > 2000) && (msg[i] < 3000)) {
 80020c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	3330      	adds	r3, #48	; 0x30
 80020ca:	443b      	add	r3, r7
 80020cc:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 80020d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80020d4:	d910      	bls.n	80020f8 <MicrophoneVisualizationTask+0x140>
 80020d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	3330      	adds	r3, #48	; 0x30
 80020dc:	443b      	add	r3, r7
 80020de:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 80020e2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d806      	bhi.n	80020f8 <MicrophoneVisualizationTask+0x140>
                    PrintfConsoleCRLF("||||");
 80020ea:	487b      	ldr	r0, [pc, #492]	; (80022d8 <MicrophoneVisualizationTask+0x320>)
 80020ec:	f001 fa7a 	bl	80035e4 <PrintfConsole>
 80020f0:	4876      	ldr	r0, [pc, #472]	; (80022cc <MicrophoneVisualizationTask+0x314>)
 80020f2:	f001 fa77 	bl	80035e4 <PrintfConsole>
 80020f6:	e0d8      	b.n	80022aa <MicrophoneVisualizationTask+0x2f2>
                }
                else if ((msg[i] > 3000) && (msg[i] < 4000)) {
 80020f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	3330      	adds	r3, #48	; 0x30
 80020fe:	443b      	add	r3, r7
 8002100:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8002104:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002108:	4293      	cmp	r3, r2
 800210a:	d90f      	bls.n	800212c <MicrophoneVisualizationTask+0x174>
 800210c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	3330      	adds	r3, #48	; 0x30
 8002112:	443b      	add	r3, r7
 8002114:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8002118:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800211c:	d206      	bcs.n	800212c <MicrophoneVisualizationTask+0x174>
                    PrintfConsoleCRLF("|||||");
 800211e:	486f      	ldr	r0, [pc, #444]	; (80022dc <MicrophoneVisualizationTask+0x324>)
 8002120:	f001 fa60 	bl	80035e4 <PrintfConsole>
 8002124:	4869      	ldr	r0, [pc, #420]	; (80022cc <MicrophoneVisualizationTask+0x314>)
 8002126:	f001 fa5d 	bl	80035e4 <PrintfConsole>
 800212a:	e0be      	b.n	80022aa <MicrophoneVisualizationTask+0x2f2>
                }
                else if ((msg[i] > 4000) && (msg[i] < 5000)) {
 800212c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	3330      	adds	r3, #48	; 0x30
 8002132:	443b      	add	r3, r7
 8002134:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8002138:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800213c:	d910      	bls.n	8002160 <MicrophoneVisualizationTask+0x1a8>
 800213e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	3330      	adds	r3, #48	; 0x30
 8002144:	443b      	add	r3, r7
 8002146:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800214a:	f241 3287 	movw	r2, #4999	; 0x1387
 800214e:	4293      	cmp	r3, r2
 8002150:	d806      	bhi.n	8002160 <MicrophoneVisualizationTask+0x1a8>
                    PrintfConsoleCRLF("||||||");
 8002152:	4863      	ldr	r0, [pc, #396]	; (80022e0 <MicrophoneVisualizationTask+0x328>)
 8002154:	f001 fa46 	bl	80035e4 <PrintfConsole>
 8002158:	485c      	ldr	r0, [pc, #368]	; (80022cc <MicrophoneVisualizationTask+0x314>)
 800215a:	f001 fa43 	bl	80035e4 <PrintfConsole>
 800215e:	e0a4      	b.n	80022aa <MicrophoneVisualizationTask+0x2f2>
                }
                else if ((msg[i] > 5000) && (msg[i] < 10000)) {
 8002160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	3330      	adds	r3, #48	; 0x30
 8002166:	443b      	add	r3, r7
 8002168:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800216c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002170:	4293      	cmp	r3, r2
 8002172:	d910      	bls.n	8002196 <MicrophoneVisualizationTask+0x1de>
 8002174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	3330      	adds	r3, #48	; 0x30
 800217a:	443b      	add	r3, r7
 800217c:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8002180:	f242 720f 	movw	r2, #9999	; 0x270f
 8002184:	4293      	cmp	r3, r2
 8002186:	d806      	bhi.n	8002196 <MicrophoneVisualizationTask+0x1de>
                    PrintfConsoleCRLF("|||||||");
 8002188:	4856      	ldr	r0, [pc, #344]	; (80022e4 <MicrophoneVisualizationTask+0x32c>)
 800218a:	f001 fa2b 	bl	80035e4 <PrintfConsole>
 800218e:	484f      	ldr	r0, [pc, #316]	; (80022cc <MicrophoneVisualizationTask+0x314>)
 8002190:	f001 fa28 	bl	80035e4 <PrintfConsole>
 8002194:	e089      	b.n	80022aa <MicrophoneVisualizationTask+0x2f2>
                }
                else if ((msg[i] > 10000) && (msg[i] < 15000)) {
 8002196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	3330      	adds	r3, #48	; 0x30
 800219c:	443b      	add	r3, r7
 800219e:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 80021a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d910      	bls.n	80021cc <MicrophoneVisualizationTask+0x214>
 80021aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	3330      	adds	r3, #48	; 0x30
 80021b0:	443b      	add	r3, r7
 80021b2:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 80021b6:	f643 2297 	movw	r2, #14999	; 0x3a97
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d806      	bhi.n	80021cc <MicrophoneVisualizationTask+0x214>
                    PrintfConsoleCRLF("||||||||");
 80021be:	484a      	ldr	r0, [pc, #296]	; (80022e8 <MicrophoneVisualizationTask+0x330>)
 80021c0:	f001 fa10 	bl	80035e4 <PrintfConsole>
 80021c4:	4841      	ldr	r0, [pc, #260]	; (80022cc <MicrophoneVisualizationTask+0x314>)
 80021c6:	f001 fa0d 	bl	80035e4 <PrintfConsole>
 80021ca:	e06e      	b.n	80022aa <MicrophoneVisualizationTask+0x2f2>
                }
                else if ((msg[i] > 15000) && (msg[i] < 20000)) {
 80021cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	3330      	adds	r3, #48	; 0x30
 80021d2:	443b      	add	r3, r7
 80021d4:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 80021d8:	f643 2298 	movw	r2, #15000	; 0x3a98
 80021dc:	4293      	cmp	r3, r2
 80021de:	d910      	bls.n	8002202 <MicrophoneVisualizationTask+0x24a>
 80021e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	3330      	adds	r3, #48	; 0x30
 80021e6:	443b      	add	r3, r7
 80021e8:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 80021ec:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d806      	bhi.n	8002202 <MicrophoneVisualizationTask+0x24a>
                    PrintfConsoleCRLF("|||||||||");
 80021f4:	483d      	ldr	r0, [pc, #244]	; (80022ec <MicrophoneVisualizationTask+0x334>)
 80021f6:	f001 f9f5 	bl	80035e4 <PrintfConsole>
 80021fa:	4834      	ldr	r0, [pc, #208]	; (80022cc <MicrophoneVisualizationTask+0x314>)
 80021fc:	f001 f9f2 	bl	80035e4 <PrintfConsole>
 8002200:	e053      	b.n	80022aa <MicrophoneVisualizationTask+0x2f2>
                }
                else if ((msg[i] > 20000) && (msg[i] < 25000)) {
 8002202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	3330      	adds	r3, #48	; 0x30
 8002208:	443b      	add	r3, r7
 800220a:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800220e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002212:	4293      	cmp	r3, r2
 8002214:	d910      	bls.n	8002238 <MicrophoneVisualizationTask+0x280>
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	3330      	adds	r3, #48	; 0x30
 800221c:	443b      	add	r3, r7
 800221e:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8002222:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8002226:	4293      	cmp	r3, r2
 8002228:	d806      	bhi.n	8002238 <MicrophoneVisualizationTask+0x280>
                    PrintfConsoleCRLF("||||||||||");
 800222a:	4831      	ldr	r0, [pc, #196]	; (80022f0 <MicrophoneVisualizationTask+0x338>)
 800222c:	f001 f9da 	bl	80035e4 <PrintfConsole>
 8002230:	4826      	ldr	r0, [pc, #152]	; (80022cc <MicrophoneVisualizationTask+0x314>)
 8002232:	f001 f9d7 	bl	80035e4 <PrintfConsole>
 8002236:	e038      	b.n	80022aa <MicrophoneVisualizationTask+0x2f2>
                }
                else if ((msg[i] > 25000) && (msg[i] < 30000)) {
 8002238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	3330      	adds	r3, #48	; 0x30
 800223e:	443b      	add	r3, r7
 8002240:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8002244:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8002248:	4293      	cmp	r3, r2
 800224a:	d910      	bls.n	800226e <MicrophoneVisualizationTask+0x2b6>
 800224c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	3330      	adds	r3, #48	; 0x30
 8002252:	443b      	add	r3, r7
 8002254:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8002258:	f247 522f 	movw	r2, #29999	; 0x752f
 800225c:	4293      	cmp	r3, r2
 800225e:	d806      	bhi.n	800226e <MicrophoneVisualizationTask+0x2b6>
                    PrintfConsoleCRLF("|||||||||||");
 8002260:	4824      	ldr	r0, [pc, #144]	; (80022f4 <MicrophoneVisualizationTask+0x33c>)
 8002262:	f001 f9bf 	bl	80035e4 <PrintfConsole>
 8002266:	4819      	ldr	r0, [pc, #100]	; (80022cc <MicrophoneVisualizationTask+0x314>)
 8002268:	f001 f9bc 	bl	80035e4 <PrintfConsole>
 800226c:	e01d      	b.n	80022aa <MicrophoneVisualizationTask+0x2f2>
                }
                else if ((msg[i] > 30000) && (msg[i] < 35000)) {
 800226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	3330      	adds	r3, #48	; 0x30
 8002274:	443b      	add	r3, r7
 8002276:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800227a:	f247 5230 	movw	r2, #30000	; 0x7530
 800227e:	4293      	cmp	r3, r2
 8002280:	d912      	bls.n	80022a8 <MicrophoneVisualizationTask+0x2f0>
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	3330      	adds	r3, #48	; 0x30
 8002288:	443b      	add	r3, r7
 800228a:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800228e:	f648 02b7 	movw	r2, #34999	; 0x88b7
 8002292:	4293      	cmp	r3, r2
 8002294:	d808      	bhi.n	80022a8 <MicrophoneVisualizationTask+0x2f0>
                    PrintfConsoleCRLF("||||||||||||");
 8002296:	4818      	ldr	r0, [pc, #96]	; (80022f8 <MicrophoneVisualizationTask+0x340>)
 8002298:	f001 f9a4 	bl	80035e4 <PrintfConsole>
 800229c:	480b      	ldr	r0, [pc, #44]	; (80022cc <MicrophoneVisualizationTask+0x314>)
 800229e:	f001 f9a1 	bl	80035e4 <PrintfConsole>
 80022a2:	e002      	b.n	80022aa <MicrophoneVisualizationTask+0x2f2>
                    continue;
 80022a4:	bf00      	nop
 80022a6:	e000      	b.n	80022aa <MicrophoneVisualizationTask+0x2f2>
                }
                else {
                    continue;
 80022a8:	bf00      	nop
            for (int i = 0; i < MICROPHONE_MID_BUFF_SIZE; i++) {
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	3301      	adds	r3, #1
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b2:	2b0f      	cmp	r3, #15
 80022b4:	f77f aea8 	ble.w	8002008 <MicrophoneVisualizationTask+0x50>
        if (MicrophoneGetVisualizerStatus()) {
 80022b8:	e689      	b.n	8001fce <MicrophoneVisualizationTask+0x16>
 80022ba:	bf00      	nop
 80022bc:	20000820 	.word	0x20000820
 80022c0:	08013468 	.word	0x08013468
 80022c4:	200006f0 	.word	0x200006f0
 80022c8:	08013474 	.word	0x08013474
 80022cc:	08013430 	.word	0x08013430
 80022d0:	08013478 	.word	0x08013478
 80022d4:	0801347c 	.word	0x0801347c
 80022d8:	08013480 	.word	0x08013480
 80022dc:	08013488 	.word	0x08013488
 80022e0:	08013490 	.word	0x08013490
 80022e4:	08013498 	.word	0x08013498
 80022e8:	080134a0 	.word	0x080134a0
 80022ec:	080134ac 	.word	0x080134ac
 80022f0:	080134b8 	.word	0x080134b8
 80022f4:	080134c4 	.word	0x080134c4
 80022f8:	080134d0 	.word	0x080134d0

080022fc <PDM2PCM_init>:
/* Global variables ---------------------------------------------------------*/
PDM_Filter_Handler_t PDM1_filter_handler;
PDM_Filter_Config_t PDM1_filter_config;

void PDM2PCM_init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0

  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 8002300:	4b10      	ldr	r3, [pc, #64]	; (8002344 <PDM2PCM_init+0x48>)
 8002302:	2201      	movs	r2, #1
 8002304:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8002306:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <PDM2PCM_init+0x48>)
 8002308:	2201      	movs	r2, #1
 800230a:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <PDM2PCM_init+0x48>)
 800230e:	4a0e      	ldr	r2, [pc, #56]	; (8002348 <PDM2PCM_init+0x4c>)
 8002310:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8002312:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <PDM2PCM_init+0x48>)
 8002314:	2201      	movs	r2, #1
 8002316:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1; 
 8002318:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <PDM2PCM_init+0x48>)
 800231a:	2201      	movs	r2, #1
 800231c:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800231e:	4809      	ldr	r0, [pc, #36]	; (8002344 <PDM2PCM_init+0x48>)
 8002320:	f00d fd0c 	bl	800fd3c <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <PDM2PCM_init+0x50>)
 8002326:	2202      	movs	r2, #2
 8002328:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <PDM2PCM_init+0x50>)
 800232c:	2210      	movs	r2, #16
 800232e:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <PDM2PCM_init+0x50>)
 8002332:	2200      	movs	r2, #0
 8002334:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8002336:	4905      	ldr	r1, [pc, #20]	; (800234c <PDM2PCM_init+0x50>)
 8002338:	4802      	ldr	r0, [pc, #8]	; (8002344 <PDM2PCM_init+0x48>)
 800233a:	f00d fd89 	bl	800fe50 <PDM_Filter_setConfig>
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200006f4 	.word	0x200006f4
 8002348:	7d70a3d6 	.word	0x7d70a3d6
 800234c:	20000740 	.word	0x20000740

08002350 <RingBufUARTInit>:
// EVT - EVENT

#include "ring_buf.h"

void RingBufUARTInit(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
    lwrb_init(&data_uart.lwrb_rx, data_uart.buff_rx, sizeof(data_uart.buff_rx));
 8002354:	2208      	movs	r2, #8
 8002356:	4915      	ldr	r1, [pc, #84]	; (80023ac <RingBufUARTInit+0x5c>)
 8002358:	4815      	ldr	r0, [pc, #84]	; (80023b0 <RingBufUARTInit+0x60>)
 800235a:	f00b fd72 	bl	800de42 <lwrb_init>
    lwrb_init(&data_uart.lwrb_tx, data_uart.buff_tx, sizeof(data_uart.buff_tx));
 800235e:	2208      	movs	r2, #8
 8002360:	4914      	ldr	r1, [pc, #80]	; (80023b4 <RingBufUARTInit+0x64>)
 8002362:	4815      	ldr	r0, [pc, #84]	; (80023b8 <RingBufUARTInit+0x68>)
 8002364:	f00b fd6d 	bl	800de42 <lwrb_init>

    if (!lwrb_is_ready(&data_uart.lwrb_rx)) {
 8002368:	4811      	ldr	r0, [pc, #68]	; (80023b0 <RingBufUARTInit+0x60>)
 800236a:	f00b fd9b 	bl	800dea4 <lwrb_is_ready>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d105      	bne.n	8002380 <RingBufUARTInit+0x30>
        PrintfLogsCRLF("Error ring buf uart_rx init");
 8002374:	4811      	ldr	r0, [pc, #68]	; (80023bc <RingBufUARTInit+0x6c>)
 8002376:	f001 f917 	bl	80035a8 <PrintfLogs>
 800237a:	4811      	ldr	r0, [pc, #68]	; (80023c0 <RingBufUARTInit+0x70>)
 800237c:	f001 f914 	bl	80035a8 <PrintfLogs>
    }

    if (!lwrb_is_ready(&data_uart.lwrb_tx)) {
 8002380:	480d      	ldr	r0, [pc, #52]	; (80023b8 <RingBufUARTInit+0x68>)
 8002382:	f00b fd8f 	bl	800dea4 <lwrb_is_ready>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d105      	bne.n	8002398 <RingBufUARTInit+0x48>
        PrintfLogsCRLF("Error ring buf uart_tx init");
 800238c:	480d      	ldr	r0, [pc, #52]	; (80023c4 <RingBufUARTInit+0x74>)
 800238e:	f001 f90b 	bl	80035a8 <PrintfLogs>
 8002392:	480b      	ldr	r0, [pc, #44]	; (80023c0 <RingBufUARTInit+0x70>)
 8002394:	f001 f908 	bl	80035a8 <PrintfLogs>
    }

    lwrb_set_evt_fn(&data_uart.lwrb_rx, RingBufEvtCallback);
 8002398:	490b      	ldr	r1, [pc, #44]	; (80023c8 <RingBufUARTInit+0x78>)
 800239a:	4805      	ldr	r0, [pc, #20]	; (80023b0 <RingBufUARTInit+0x60>)
 800239c:	f00b fdb3 	bl	800df06 <lwrb_set_evt_fn>
    lwrb_set_evt_fn(&data_uart.lwrb_tx, RingBufEvtCallback);
 80023a0:	4909      	ldr	r1, [pc, #36]	; (80023c8 <RingBufUARTInit+0x78>)
 80023a2:	4805      	ldr	r0, [pc, #20]	; (80023b8 <RingBufUARTInit+0x68>)
 80023a4:	f00b fdaf 	bl	800df06 <lwrb_set_evt_fn>
}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000e64 	.word	0x20000e64
 80023b0:	20000e3c 	.word	0x20000e3c
 80023b4:	20000e6c 	.word	0x20000e6c
 80023b8:	20000e50 	.word	0x20000e50
 80023bc:	080134e0 	.word	0x080134e0
 80023c0:	080134fc 	.word	0x080134fc
 80023c4:	08013500 	.word	0x08013500
 80023c8:	0800244d 	.word	0x0800244d

080023cc <RingBufMicrophoneInit>:

void RingBufMicrophoneInit(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
    lwrb_init(&microphone.lwrb_rx, microphone.buff_rx, sizeof(microphone.buff_rx));
 80023d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d4:	4915      	ldr	r1, [pc, #84]	; (800242c <RingBufMicrophoneInit+0x60>)
 80023d6:	4816      	ldr	r0, [pc, #88]	; (8002430 <RingBufMicrophoneInit+0x64>)
 80023d8:	f00b fd33 	bl	800de42 <lwrb_init>
    lwrb_init(&microphone.lwrb_tx, microphone.buff_tx, sizeof(microphone.buff_tx));
 80023dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023e0:	4914      	ldr	r1, [pc, #80]	; (8002434 <RingBufMicrophoneInit+0x68>)
 80023e2:	4815      	ldr	r0, [pc, #84]	; (8002438 <RingBufMicrophoneInit+0x6c>)
 80023e4:	f00b fd2d 	bl	800de42 <lwrb_init>

    if (!lwrb_is_ready(&microphone.lwrb_rx)) {
 80023e8:	4811      	ldr	r0, [pc, #68]	; (8002430 <RingBufMicrophoneInit+0x64>)
 80023ea:	f00b fd5b 	bl	800dea4 <lwrb_is_ready>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d105      	bne.n	8002400 <RingBufMicrophoneInit+0x34>
        PrintfLogsCRLF("Error ring buf i2s2 rx init");
 80023f4:	4811      	ldr	r0, [pc, #68]	; (800243c <RingBufMicrophoneInit+0x70>)
 80023f6:	f001 f8d7 	bl	80035a8 <PrintfLogs>
 80023fa:	4811      	ldr	r0, [pc, #68]	; (8002440 <RingBufMicrophoneInit+0x74>)
 80023fc:	f001 f8d4 	bl	80035a8 <PrintfLogs>
    }
    if (!lwrb_is_ready(&microphone.buff_tx)) {
 8002400:	480c      	ldr	r0, [pc, #48]	; (8002434 <RingBufMicrophoneInit+0x68>)
 8002402:	f00b fd4f 	bl	800dea4 <lwrb_is_ready>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d105      	bne.n	8002418 <RingBufMicrophoneInit+0x4c>
        PrintfLogsCRLF("Error ring buf i2s2 tx init");
 800240c:	480d      	ldr	r0, [pc, #52]	; (8002444 <RingBufMicrophoneInit+0x78>)
 800240e:	f001 f8cb 	bl	80035a8 <PrintfLogs>
 8002412:	480b      	ldr	r0, [pc, #44]	; (8002440 <RingBufMicrophoneInit+0x74>)
 8002414:	f001 f8c8 	bl	80035a8 <PrintfLogs>
    }


    lwrb_set_evt_fn(&microphone.lwrb_rx, RingBufEvtCallback);
 8002418:	490b      	ldr	r1, [pc, #44]	; (8002448 <RingBufMicrophoneInit+0x7c>)
 800241a:	4805      	ldr	r0, [pc, #20]	; (8002430 <RingBufMicrophoneInit+0x64>)
 800241c:	f00b fd73 	bl	800df06 <lwrb_set_evt_fn>
    lwrb_set_evt_fn(&microphone.lwrb_tx, RingBufEvtCallback);
 8002420:	4909      	ldr	r1, [pc, #36]	; (8002448 <RingBufMicrophoneInit+0x7c>)
 8002422:	4805      	ldr	r0, [pc, #20]	; (8002438 <RingBufMicrophoneInit+0x6c>)
 8002424:	f00b fd6f 	bl	800df06 <lwrb_set_evt_fn>
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000848 	.word	0x20000848
 8002430:	20000820 	.word	0x20000820
 8002434:	20000a48 	.word	0x20000a48
 8002438:	20000834 	.word	0x20000834
 800243c:	0801351c 	.word	0x0801351c
 8002440:	080134fc 	.word	0x080134fc
 8002444:	08013538 	.word	0x08013538
 8002448:	0800244d 	.word	0x0800244d

0800244c <RingBufEvtCallback>:

void RingBufEvtCallback(struct uart *self, lwrb_evt_type_t evt, size_t bp)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	460b      	mov	r3, r1
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	72fb      	strb	r3, [r7, #11]
    switch(evt) {
 800245a:	7afb      	ldrb	r3, [r7, #11]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d005      	beq.n	800246c <RingBufEvtCallback+0x20>
 8002460:	2b02      	cmp	r3, #2
 8002462:	dc06      	bgt.n	8002472 <RingBufEvtCallback+0x26>
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <RingBufEvtCallback+0x24>
 8002468:	2b01      	cmp	r3, #1
        case LWRB_EVT_READ:
           // log_printf_crlf("Read %d bytes from ring buff event!", (int)bp);
            break;
        case LWRB_EVT_WRITE:
           // log_printf_crlf("Write %d bytes from ring buff event!", (int)bp);
            break;
 800246a:	e002      	b.n	8002472 <RingBufEvtCallback+0x26>
        case LWRB_EVT_RESET:
            //log_printf_crlf("Reset %d bytes from ring buff event!", (int)bp);
            break;
 800246c:	bf00      	nop
 800246e:	e000      	b.n	8002472 <RingBufEvtCallback+0x26>
            break;
 8002470:	bf00      	nop
    }
}
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <TimStart>:
#include "led.h"

TIM_HandleTypeDef htim1;

void TimStart(struct timeout *timeout, uint32_t timeout_ms)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
	if (timeout == NULL) {
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <TimStart+0x14>
		Error_Handler();
 800248e:	f002 fb7b 	bl	8004b88 <Error_Handler>
	}

	timeout->timestamp_ms = HAL_GetTick();
 8002492:	f006 fbd5 	bl	8008c40 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	609a      	str	r2, [r3, #8]
	timeout->timeout_ms = timeout_ms;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	605a      	str	r2, [r3, #4]
	timeout->start_flag = true;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <TimStop>:

void TimStop(struct timeout *timeout)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	if (timeout == NULL) {
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <TimStop+0x12>
		Error_Handler();
 80024be:	f002 fb63 	bl	8004b88 <Error_Handler>
	}

	timeout->start_flag = false;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <TimStarted>:

bool TimStarted(struct timeout *timeout)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
	if (timeout == NULL) {
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <TimStarted+0x12>
		Error_Handler();
 80024de:	f002 fb53 	bl	8004b88 <Error_Handler>
	}

	return timeout->start_flag;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	b2db      	uxtb	r3, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <TimCheck>:

	return false;
}

bool TimCheck(struct timeout *timeout, uint32_t msTime)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
	if ((HAL_GetTick() - timeout->timestamp_ms) > msTime) {
 80024fa:	f006 fba1 	bl	8008c40 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d201      	bcs.n	8002510 <TimCheck+0x20>
		return true;
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <TimCheck+0x22>
	}

	return false;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <MX_TIM1_Init>:

void MX_TIM1_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002522:	f107 0308 	add.w	r3, r7, #8
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002530:	463b      	mov	r3, r7
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]

    htim1.Instance = TIM1;
 8002538:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <MX_TIM1_Init+0x98>)
 800253a:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <MX_TIM1_Init+0x9c>)
 800253c:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 32000;
 800253e:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <MX_TIM1_Init+0x98>)
 8002540:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002544:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002546:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <MX_TIM1_Init+0x98>)
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 50;
 800254c:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <MX_TIM1_Init+0x98>)
 800254e:	2232      	movs	r2, #50	; 0x32
 8002550:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002552:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <MX_TIM1_Init+0x98>)
 8002554:	2200      	movs	r2, #0
 8002556:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8002558:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <MX_TIM1_Init+0x98>)
 800255a:	2200      	movs	r2, #0
 800255c:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <MX_TIM1_Init+0x98>)
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002564:	4813      	ldr	r0, [pc, #76]	; (80025b4 <MX_TIM1_Init+0x98>)
 8002566:	f008 fef3 	bl	800b350 <HAL_TIM_Base_Init>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM1_Init+0x58>
    {
    Error_Handler();
 8002570:	f002 fb0a 	bl	8004b88 <Error_Handler>
    }

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002578:	60bb      	str	r3, [r7, #8]

    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800257a:	f107 0308 	add.w	r3, r7, #8
 800257e:	4619      	mov	r1, r3
 8002580:	480c      	ldr	r0, [pc, #48]	; (80025b4 <MX_TIM1_Init+0x98>)
 8002582:	f008 ff34 	bl	800b3ee <HAL_TIM_ConfigClockSource>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM1_Init+0x74>

    {
        Error_Handler();
 800258c:	f002 fafc 	bl	8004b88 <Error_Handler>
    }

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002590:	2300      	movs	r3, #0
 8002592:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	607b      	str	r3, [r7, #4]

    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002598:	463b      	mov	r3, r7
 800259a:	4619      	mov	r1, r3
 800259c:	4805      	ldr	r0, [pc, #20]	; (80025b4 <MX_TIM1_Init+0x98>)
 800259e:	f009 f927 	bl	800b7f0 <HAL_TIMEx_MasterConfigSynchronization>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM1_Init+0x90>
    {
        Error_Handler();
 80025a8:	f002 faee 	bl	8004b88 <Error_Handler>
    }
}
 80025ac:	bf00      	nop
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000748 	.word	0x20000748
 80025b8:	40010000 	.word	0x40010000

080025bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  if(tim_baseHandle->Instance==TIM1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a1a      	ldr	r2, [pc, #104]	; (8002634 <HAL_TIM_Base_MspInit+0x78>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d12d      	bne.n	800262a <HAL_TIM_Base_MspInit+0x6e>
  {
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	4b19      	ldr	r3, [pc, #100]	; (8002638 <HAL_TIM_Base_MspInit+0x7c>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	4a18      	ldr	r2, [pc, #96]	; (8002638 <HAL_TIM_Base_MspInit+0x7c>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6453      	str	r3, [r2, #68]	; 0x44
 80025de:	4b16      	ldr	r3, [pc, #88]	; (8002638 <HAL_TIM_Base_MspInit+0x7c>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]

    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2105      	movs	r1, #5
 80025ee:	2018      	movs	r0, #24
 80025f0:	f006 fc0d 	bl	8008e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80025f4:	2018      	movs	r0, #24
 80025f6:	f006 fc26 	bl	8008e46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2105      	movs	r1, #5
 80025fe:	2019      	movs	r0, #25
 8002600:	f006 fc05 	bl	8008e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002604:	2019      	movs	r0, #25
 8002606:	f006 fc1e 	bl	8008e46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2105      	movs	r1, #5
 800260e:	201a      	movs	r0, #26
 8002610:	f006 fbfd 	bl	8008e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002614:	201a      	movs	r0, #26
 8002616:	f006 fc16 	bl	8008e46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2105      	movs	r1, #5
 800261e:	201b      	movs	r0, #27
 8002620:	f006 fbf5 	bl	8008e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002624:	201b      	movs	r0, #27
 8002626:	f006 fc0e 	bl	8008e46 <HAL_NVIC_EnableIRQ>
  }
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40010000 	.word	0x40010000
 8002638:	40023800 	.word	0x40023800

0800263c <I2S3Init>:
#include "i2s_dac.h"

I2S_HandleTypeDef hi2s3;

void I2S3Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
    hi2s3.Instance = SPI3;
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <I2S3Init+0x54>)
 8002642:	4a14      	ldr	r2, [pc, #80]	; (8002694 <I2S3Init+0x58>)
 8002644:	601a      	str	r2, [r3, #0]
    hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <I2S3Init+0x54>)
 8002648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800264c:	605a      	str	r2, [r3, #4]
    hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <I2S3Init+0x54>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
    hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8002654:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <I2S3Init+0x54>)
 8002656:	2203      	movs	r2, #3
 8002658:	60da      	str	r2, [r3, #12]
    hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800265a:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <I2S3Init+0x54>)
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
    hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <I2S3Init+0x54>)
 8002662:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002666:	615a      	str	r2, [r3, #20]
    hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <I2S3Init+0x54>)
 800266a:	2200      	movs	r2, #0
 800266c:	619a      	str	r2, [r3, #24]
    hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <I2S3Init+0x54>)
 8002670:	2200      	movs	r2, #0
 8002672:	61da      	str	r2, [r3, #28]
    hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <I2S3Init+0x54>)
 8002676:	2200      	movs	r2, #0
 8002678:	621a      	str	r2, [r3, #32]

    if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800267a:	4805      	ldr	r0, [pc, #20]	; (8002690 <I2S3Init+0x54>)
 800267c:	f007 fa1c 	bl	8009ab8 <HAL_I2S_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <I2S3Init+0x4e>
    {
      Error_Handler();
 8002686:	f002 fa7f 	bl	8004b88 <Error_Handler>
    }
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000790 	.word	0x20000790
 8002694:	40003c00 	.word	0x40003c00

08002698 <I2S2Init>:

/**
 * @brief           I2S2 init
 */
void I2S2Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
    hi2s2.Instance = SPI2;
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <I2S2Init+0x54>)
 800269e:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <I2S2Init+0x58>)
 80026a0:	601a      	str	r2, [r3, #0]
    hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 80026a2:	4b12      	ldr	r3, [pc, #72]	; (80026ec <I2S2Init+0x54>)
 80026a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026a8:	605a      	str	r2, [r3, #4]
    hi2s2.Init.Standard = I2S_STANDARD_MSB;
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <I2S2Init+0x54>)
 80026ac:	2210      	movs	r2, #16
 80026ae:	609a      	str	r2, [r3, #8]
    hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80026b0:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <I2S2Init+0x54>)
 80026b2:	2203      	movs	r2, #3
 80026b4:	60da      	str	r2, [r3, #12]
    hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <I2S2Init+0x54>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
    hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <I2S2Init+0x54>)
 80026be:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80026c2:	615a      	str	r2, [r3, #20]
    hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <I2S2Init+0x54>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	619a      	str	r2, [r3, #24]
    hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80026ca:	4b08      	ldr	r3, [pc, #32]	; (80026ec <I2S2Init+0x54>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	61da      	str	r2, [r3, #28]
    hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <I2S2Init+0x54>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	621a      	str	r2, [r3, #32]

    if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 80026d6:	4805      	ldr	r0, [pc, #20]	; (80026ec <I2S2Init+0x54>)
 80026d8:	f007 f9ee 	bl	8009ab8 <HAL_I2S_Init>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <I2S2Init+0x4e>
      Error_Handler();
 80026e2:	f002 fa51 	bl	8004b88 <Error_Handler>
    }
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	200007d8 	.word	0x200007d8
 80026f0:	40003800 	.word	0x40003800

080026f4 <HAL_I2S_RxHalfCpltCallback>:

/**
 * @brief          I2S2 RX half cplt callback
 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
    MicrophoneSetStatus(MICROPHONE_RX_STATE_1);
 80026fc:	2001      	movs	r0, #1
 80026fe:	f7ff fbe5 	bl	8001ecc <MicrophoneSetStatus>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_I2S_RxCpltCallback>:

/**
 * @brief          I2S2 RX cplt callback
 */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
    MicrophoneSetStatus(MICROPHONE_RX_STATE_2);
 8002712:	2002      	movs	r0, #2
 8002714:	f7ff fbda 	bl	8001ecc <MicrophoneSetStatus>
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_I2S_TxHalfCpltCallback>:

/**
 * @brief          I2S3 TX half cplt callback
 */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
    MicrophoneSetStatus(MICROPHONE_TX_STATE_1);
 8002728:	2003      	movs	r0, #3
 800272a:	f7ff fbcf 	bl	8001ecc <MicrophoneSetStatus>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_I2S_TxCpltCallback>:

/**
 * @brief          I2S3 TX cplt callback
 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
    MicrophoneSetStatus(MICROPHONE_TX_STATE_2);
 800273e:	2004      	movs	r0, #4
 8002740:	f7ff fbc4 	bl	8001ecc <MicrophoneSetStatus>
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <DataUartInit>:

/**
 * @brief          Data uart init function
 */
void DataUartInit(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002752:	f107 030c 	add.w	r3, r7, #12
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	605a      	str	r2, [r3, #4]
 800275c:	609a      	str	r2, [r3, #8]
 800275e:	60da      	str	r2, [r3, #12]
 8002760:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	4b3b      	ldr	r3, [pc, #236]	; (8002854 <DataUartInit+0x108>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a3a      	ldr	r2, [pc, #232]	; (8002854 <DataUartInit+0x108>)
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b38      	ldr	r3, [pc, #224]	; (8002854 <DataUartInit+0x108>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	4b34      	ldr	r3, [pc, #208]	; (8002854 <DataUartInit+0x108>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	4a33      	ldr	r2, [pc, #204]	; (8002854 <DataUartInit+0x108>)
 8002788:	f043 0304 	orr.w	r3, r3, #4
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
 800278e:	4b31      	ldr	r3, [pc, #196]	; (8002854 <DataUartInit+0x108>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	607b      	str	r3, [r7, #4]
 8002798:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin          = GPIO_PIN_11;
 800279a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800279e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode         = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull         = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed        = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a8:	2303      	movs	r3, #3
 80027aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate    = GPIO_AF7_USART3;
 80027ac:	2307      	movs	r3, #7
 80027ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b0:	f107 030c 	add.w	r3, r7, #12
 80027b4:	4619      	mov	r1, r3
 80027b6:	4828      	ldr	r0, [pc, #160]	; (8002858 <DataUartInit+0x10c>)
 80027b8:	f006 ff7e 	bl	80096b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin          = GPIO_PIN_10;
 80027bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode         = GPIO_MODE_AF_PP;
 80027c2:	2302      	movs	r3, #2
 80027c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull         = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed        = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ca:	2303      	movs	r3, #3
 80027cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate    = GPIO_AF7_USART3;
 80027ce:	2307      	movs	r3, #7
 80027d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d2:	f107 030c 	add.w	r3, r7, #12
 80027d6:	4619      	mov	r1, r3
 80027d8:	4820      	ldr	r0, [pc, #128]	; (800285c <DataUartInit+0x110>)
 80027da:	f006 ff6d 	bl	80096b8 <HAL_GPIO_Init>

    __HAL_RCC_USART3_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <DataUartInit+0x108>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a1b      	ldr	r2, [pc, #108]	; (8002854 <DataUartInit+0x108>)
 80027e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
 80027ee:	4b19      	ldr	r3, [pc, #100]	; (8002854 <DataUartInit+0x108>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]

    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2105      	movs	r1, #5
 80027fe:	2027      	movs	r0, #39	; 0x27
 8002800:	f006 fb05 	bl	8008e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002804:	2027      	movs	r0, #39	; 0x27
 8002806:	f006 fb1e 	bl	8008e46 <HAL_NVIC_EnableIRQ>

    huart3.Instance          = USART3;
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <DataUartInit+0x114>)
 800280c:	4a15      	ldr	r2, [pc, #84]	; (8002864 <DataUartInit+0x118>)
 800280e:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate     = 115200;
 8002810:	4b13      	ldr	r3, [pc, #76]	; (8002860 <DataUartInit+0x114>)
 8002812:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002816:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength   = UART_WORDLENGTH_8B;
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <DataUartInit+0x114>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits     = UART_STOPBITS_1;
 800281e:	4b10      	ldr	r3, [pc, #64]	; (8002860 <DataUartInit+0x114>)
 8002820:	2200      	movs	r2, #0
 8002822:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity       = UART_PARITY_NONE;
 8002824:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <DataUartInit+0x114>)
 8002826:	2200      	movs	r2, #0
 8002828:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode         = UART_MODE_TX_RX;
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <DataUartInit+0x114>)
 800282c:	220c      	movs	r2, #12
 800282e:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <DataUartInit+0x114>)
 8002832:	2200      	movs	r2, #0
 8002834:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002836:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <DataUartInit+0x114>)
 8002838:	2200      	movs	r2, #0
 800283a:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart3) != HAL_OK)
 800283c:	4808      	ldr	r0, [pc, #32]	; (8002860 <DataUartInit+0x114>)
 800283e:	f009 f853 	bl	800b8e8 <HAL_UART_Init>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <DataUartInit+0x100>
    {
      Error_Handler();
 8002848:	f002 f99e 	bl	8004b88 <Error_Handler>
    }
}
 800284c:	bf00      	nop
 800284e:	3720      	adds	r7, #32
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	40020400 	.word	0x40020400
 800285c:	40020800 	.word	0x40020800
 8002860:	20000d74 	.word	0x20000d74
 8002864:	40004800 	.word	0x40004800

08002868 <UARTAllInit>:

/**
 * @brief          Initialization of all uarts
 */
void UARTAllInit(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
    //DebugUartInit();
    DataUartInit();
 800286c:	f7ff ff6e 	bl	800274c <DataUartInit>
}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}

08002874 <UARTSetupReceiveChar>:
{
    return HAL_UART_Receive_IT(huart, (uint8_t*)byte, sizeof(byte)) == HAL_OK;
}

bool UARTSetupReceiveChar(UART_HandleTypeDef *huart, uint8_t *byte)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
    return HAL_UART_Receive_IT(huart, (uint8_t*)byte, sizeof(char)) == HAL_OK;
 800287e:	2201      	movs	r2, #1
 8002880:	6839      	ldr	r1, [r7, #0]
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f009 f919 	bl	800baba <HAL_UART_Receive_IT>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	bf0c      	ite	eq
 800288e:	2301      	moveq	r3, #1
 8002890:	2300      	movne	r3, #0
 8002892:	b2db      	uxtb	r3, r3
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <UARTSendByte>:
{
    return HAL_UART_Transmit(huart, (uint8_t*)msg_ptr, sizeof(msg_ptr), HAL_MAX_DELAY) == HAL_OK;
}

bool UARTSendByte(UART_HandleTypeDef *huart, uint8_t byte)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	70fb      	strb	r3, [r7, #3]
    return HAL_UART_Transmit(huart, &byte, sizeof(byte), HAL_MAX_DELAY) == HAL_OK;
 80028a8:	1cf9      	adds	r1, r7, #3
 80028aa:	f04f 33ff 	mov.w	r3, #4294967295
 80028ae:	2201      	movs	r2, #1
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f009 f870 	bl	800b996 <HAL_UART_Transmit>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf0c      	ite	eq
 80028bc:	2301      	moveq	r3, #1
 80028be:	2300      	movne	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <UARTSendByteTxBuff>:
/******************************************************************************/



bool UARTSendByteTxBuff(UART_HandleTypeDef *huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
    uint8_t msg;

    lwrb_read(&data_uart.lwrb_tx, &msg, sizeof(char));
 80028d4:	f107 030f 	add.w	r3, r7, #15
 80028d8:	2201      	movs	r2, #1
 80028da:	4619      	mov	r1, r3
 80028dc:	480a      	ldr	r0, [pc, #40]	; (8002908 <UARTSendByteTxBuff+0x3c>)
 80028de:	f00b fbab 	bl	800e038 <lwrb_read>

    return HAL_UART_Transmit(huart, &msg, sizeof(uint8_t), HAL_MAX_DELAY) == HAL_OK;
 80028e2:	f107 010f 	add.w	r1, r7, #15
 80028e6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ea:	2201      	movs	r2, #1
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f009 f852 	bl	800b996 <HAL_UART_Transmit>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000e50 	.word	0x20000e50

0800290c <HAL_UART_TxCpltCallback>:
/**
 * @brief          Interrupt callbacks
 *
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <HAL_UART_RxCpltCallback+0x38>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d10d      	bne.n	800294e <HAL_UART_RxCpltCallback+0x2e>
        IndicationLedTop();
 8002932:	f7fe fd1d 	bl	8001370 <IndicationLedTop>
        IoSystemPutDataToRxBuffer(&data_uart.keyboarb_input, sizeof(uint8_t));
 8002936:	2101      	movs	r1, #1
 8002938:	4808      	ldr	r0, [pc, #32]	; (800295c <HAL_UART_RxCpltCallback+0x3c>)
 800293a:	f000 fdd7 	bl	80034ec <IoSystemPutDataToRxBuffer>
        data_uart.flag = true;
 800293e:	4b08      	ldr	r3, [pc, #32]	; (8002960 <HAL_UART_RxCpltCallback+0x40>)
 8002940:	2201      	movs	r2, #1
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        UARTSetupReceiveChar(&huart3, &data_uart.keyboarb_input);
 8002946:	4905      	ldr	r1, [pc, #20]	; (800295c <HAL_UART_RxCpltCallback+0x3c>)
 8002948:	4806      	ldr	r0, [pc, #24]	; (8002964 <HAL_UART_RxCpltCallback+0x44>)
 800294a:	f7ff ff93 	bl	8002874 <UARTSetupReceiveChar>
    }
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40004800 	.word	0x40004800
 800295c:	20000e74 	.word	0x20000e74
 8002960:	20000e3c 	.word	0x20000e3c
 8002964:	20000d74 	.word	0x20000d74

08002968 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <ConsoleInit>:

/**
 * @brief          Console (Microrl init)
 */
void ConsoleInit(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
    microrl_init(microrl_ptr, prvConsolePrint, ConsoleExecute);
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <ConsoleInit+0x4c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a11      	ldr	r2, [pc, #68]	; (80029cc <ConsoleInit+0x50>)
 8002986:	4912      	ldr	r1, [pc, #72]	; (80029d0 <ConsoleInit+0x54>)
 8002988:	4618      	mov	r0, r3
 800298a:	f001 fd81 	bl	8004490 <microrl_init>

#if MICRORL_CFG_USE_COMPLETE
    /* Set callback for auto-completion */
    microrl_set_complete_callback(microrl_ptr, ConsoleComplete);
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <ConsoleInit+0x4c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4910      	ldr	r1, [pc, #64]	; (80029d4 <ConsoleInit+0x58>)
 8002994:	4618      	mov	r0, r3
 8002996:	f001 fdc4 	bl	8004522 <microrl_set_complete_callback>
#endif /* MICRORL_CFG_USE_COMPLETE */

#if CONSOLE_NO_PASSW
    logged_in = 1;
 800299a:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <ConsoleInit+0x5c>)
 800299c:	2201      	movs	r2, #1
 800299e:	701a      	strb	r2, [r3, #0]
    ConsolePrintHelp(microrl_ptr);
 80029a0:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <ConsoleInit+0x4c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 fb37 	bl	8003018 <ConsolePrintHelp>
    microrl_set_execute_callback(microrl_ptr, ConsoleExecuteMain);
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <ConsoleInit+0x4c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	490b      	ldr	r1, [pc, #44]	; (80029dc <ConsoleInit+0x60>)
 80029b0:	4618      	mov	r0, r3
 80029b2:	f001 fd9f 	bl	80044f4 <microrl_set_execute_callback>
#endif /* CONSOLE_NO_PASSW */

#if MICRORL_CFG_USE_CTRL_C
    /* Set callback for Ctrl+C handling */
    microrl_set_sigint_callback(microrl_ptr, ConsoleSigint);
 80029b6:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <ConsoleInit+0x4c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4909      	ldr	r1, [pc, #36]	; (80029e0 <ConsoleInit+0x64>)
 80029bc:	4618      	mov	r0, r3
 80029be:	f001 fdc7 	bl	8004550 <microrl_set_sigint_callback>
#endif /* MICRORL_CFG_USE_CTRL_C */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000400 	.word	0x20000400
 80029cc:	08002b99 	.word	0x08002b99
 80029d0:	08002a29 	.word	0x08002a29
 80029d4:	08002ef9 	.word	0x08002ef9
 80029d8:	20000e7c 	.word	0x20000e7c
 80029dc:	08002a49 	.word	0x08002a49
 80029e0:	08002ec9 	.word	0x08002ec9

080029e4 <ConsoleStart>:

/**
 * @brief          Console start
 */
void ConsoleStart(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
    MicrophoneSetVisualizer(false);
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7ff fabb 	bl	8001f64 <MicrophoneSetVisualizer>
    IoSystemClearRxQueue();
 80029ee:	f000 fd43 	bl	8003478 <IoSystemClearRxQueue>
    LogClearQueues();
 80029f2:	f000 fdc7 	bl	8003584 <LogClearQueues>
    MicrophoneVisualizationClearQueue();
 80029f6:	f7ff fad3 	bl	8001fa0 <MicrophoneVisualizationClearQueue>
    ConsoleInit();
 80029fa:	f7ff ffbf 	bl	800297c <ConsoleInit>
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <ConsoleInsertChar>:

/**
 * @brief          Console insert char
 */
void ConsoleInsertChar(char ch)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
    microrl_processing_input(microrl_ptr, &ch, 1);
 8002a0e:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <ConsoleInsertChar+0x20>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	1df9      	adds	r1, r7, #7
 8002a14:	2201      	movs	r2, #1
 8002a16:	4618      	mov	r0, r3
 8002a18:	f001 ff11 	bl	800483e <microrl_processing_input>
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000400 	.word	0x20000400

08002a28 <prvConsolePrint>:

/**
 * @brief          Console printf
 */
void prvConsolePrint(microrl_t *microrl_ptr, const char *str)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
    UNUSED(microrl_ptr);
    PrintfConsoleCont("%s", str);
 8002a32:	6839      	ldr	r1, [r7, #0]
 8002a34:	4803      	ldr	r0, [pc, #12]	; (8002a44 <prvConsolePrint+0x1c>)
 8002a36:	f000 fdd5 	bl	80035e4 <PrintfConsole>
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	080135b0 	.word	0x080135b0

08002a48 <ConsoleExecuteMain>:
/**
 * \brief           Basic menu in console
 * \param[in]
 */
#if MICRORL_CFG_USE_ECHO_OFF
int ConsoleExecuteMain(microrl_t* microrl_ptr, int argc, const char* const *argv) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
#else
int ConsoleExecute(microrl_t *microrl_ptr, int argc, const char * const *argv) {
#endif /* MICRORL_CFG_USE_ECHO_OFF || __DOXYGEN__ */
    int i = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]

    while (i < argc) {
 8002a58:	e07b      	b.n	8002b52 <ConsoleExecuteMain+0x10a>
        if (strcmp(argv[i], _CMD_HELP) == 0) {
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	4413      	add	r3, r2
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4940      	ldr	r1, [pc, #256]	; (8002b68 <ConsoleExecuteMain+0x120>)
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fd fbc2 	bl	80001f0 <strcmp>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d103      	bne.n	8002a7a <ConsoleExecuteMain+0x32>
            ConsolePrintHelp(microrl_ptr);        // print help
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 fad0 	bl	8003018 <ConsolePrintHelp>
 8002a78:	e068      	b.n	8002b4c <ConsoleExecuteMain+0x104>
        }
        else if (strcmp(argv[i], _CMD_CLEAR) == 0) {
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4939      	ldr	r1, [pc, #228]	; (8002b6c <ConsoleExecuteMain+0x124>)
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fd fbb2 	bl	80001f0 <strcmp>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d103      	bne.n	8002a9a <ConsoleExecuteMain+0x52>
            prvConsoleClearScreen(microrl_ptr);
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fa04 	bl	8002ea0 <prvConsoleClearScreen>
 8002a98:	e058      	b.n	8002b4c <ConsoleExecuteMain+0x104>
        }
        else if (strcmp(argv[i], _CMD_LOGOUT) == 0) {
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4932      	ldr	r1, [pc, #200]	; (8002b70 <ConsoleExecuteMain+0x128>)
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fd fba2 	bl	80001f0 <strcmp>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10b      	bne.n	8002aca <ConsoleExecuteMain+0x82>
            IoSystemClearRxQueue();
 8002ab2:	f000 fce1 	bl	8003478 <IoSystemClearRxQueue>
            LogClearQueues();
 8002ab6:	f000 fd65 	bl	8003584 <LogClearQueues>
            microrl_set_execute_callback(microrl_ptr, ConsoleExecute);
 8002aba:	492e      	ldr	r1, [pc, #184]	; (8002b74 <ConsoleExecuteMain+0x12c>)
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f001 fd19 	bl	80044f4 <microrl_set_execute_callback>

            IoSystemSetMode(IO_LOGS);
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	f000 fbb2 	bl	800322c <IoSystemSetMode>
 8002ac8:	e040      	b.n	8002b4c <ConsoleExecuteMain+0x104>
        }
        else if (strcmp(argv[i], _CMD_BUFF) == 0) {
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4928      	ldr	r1, [pc, #160]	; (8002b78 <ConsoleExecuteMain+0x130>)
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fd fb8a 	bl	80001f0 <strcmp>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10b      	bne.n	8002afa <ConsoleExecuteMain+0xb2>
            prvConsolePrint(microrl_ptr, "\tChoose your action with buffer: " _ENDLINE_SEQ);
 8002ae2:	4926      	ldr	r1, [pc, #152]	; (8002b7c <ConsoleExecuteMain+0x134>)
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f7ff ff9f 	bl	8002a28 <prvConsolePrint>
            ConsolePrintBuff(microrl_ptr);
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 faf8 	bl	80030e0 <ConsolePrintBuff>
            microrl_set_execute_callback(microrl_ptr, ConsoleBuff);
 8002af0:	4923      	ldr	r1, [pc, #140]	; (8002b80 <ConsoleExecuteMain+0x138>)
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f001 fcfe 	bl	80044f4 <microrl_set_execute_callback>
 8002af8:	e028      	b.n	8002b4c <ConsoleExecuteMain+0x104>
        }
        else if (strcmp(argv[i], _CMD_VISUAL) == 0) {
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	491f      	ldr	r1, [pc, #124]	; (8002b84 <ConsoleExecuteMain+0x13c>)
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fd fb72 	bl	80001f0 <strcmp>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10b      	bne.n	8002b2a <ConsoleExecuteMain+0xe2>
            prvConsolePrint(microrl_ptr, "\tChoose your action with audio visualizer: " _ENDLINE_SEQ);
 8002b12:	491d      	ldr	r1, [pc, #116]	; (8002b88 <ConsoleExecuteMain+0x140>)
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f7ff ff87 	bl	8002a28 <prvConsolePrint>
            ConsolePrintVisualizer(microrl_ptr);
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 fb0c 	bl	8003138 <ConsolePrintVisualizer>
            microrl_set_execute_callback(microrl_ptr, ConsoleVisualizer);
 8002b20:	491a      	ldr	r1, [pc, #104]	; (8002b8c <ConsoleExecuteMain+0x144>)
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f001 fce6 	bl	80044f4 <microrl_set_execute_callback>
 8002b28:	e010      	b.n	8002b4c <ConsoleExecuteMain+0x104>
        }
        else {
            prvConsolePrint(microrl_ptr, "command: '");
 8002b2a:	4919      	ldr	r1, [pc, #100]	; (8002b90 <ConsoleExecuteMain+0x148>)
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f7ff ff7b 	bl	8002a28 <prvConsolePrint>
            prvConsolePrint(microrl_ptr, (char*)argv[i]);
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f7ff ff72 	bl	8002a28 <prvConsolePrint>
            prvConsolePrint(microrl_ptr, "' Not found." _ENDLINE_SEQ);
 8002b44:	4913      	ldr	r1, [pc, #76]	; (8002b94 <ConsoleExecuteMain+0x14c>)
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f7ff ff6e 	bl	8002a28 <prvConsolePrint>
        }
        i++;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	617b      	str	r3, [r7, #20]
    while (i < argc) {
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	f6ff af7f 	blt.w	8002a5a <ConsoleExecuteMain+0x12>
    }

    return 0;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	08013554 	.word	0x08013554
 8002b6c:	0801355c 	.word	0x0801355c
 8002b70:	0801356c 	.word	0x0801356c
 8002b74:	08002b99 	.word	0x08002b99
 8002b78:	08013574 	.word	0x08013574
 8002b7c:	080135b4 	.word	0x080135b4
 8002b80:	08002cd9 	.word	0x08002cd9
 8002b84:	0801357c 	.word	0x0801357c
 8002b88:	080135d8 	.word	0x080135d8
 8002b8c:	08002df1 	.word	0x08002df1
 8002b90:	08013608 	.word	0x08013608
 8002b94:	08013614 	.word	0x08013614

08002b98 <ConsoleExecute>:
/**
 * \brief           Login menu in console
 * \param[in]
 */
int ConsoleExecute(microrl_t *microrl_ptr, int argc, const char * const *argv)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
    int i = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]

    while (i < argc) {
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	da73      	bge.n	8002c98 <ConsoleExecute+0x100>
        if (strcmp(argv[i], _CMD_LOGIN) == 0) {
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	493a      	ldr	r1, [pc, #232]	; (8002ca4 <ConsoleExecute+0x10c>)
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fd fb17 	bl	80001f0 <strcmp>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d12d      	bne.n	8002c24 <ConsoleExecute+0x8c>
            if (++i < argc) {
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	da20      	bge.n	8002c18 <ConsoleExecute+0x80>
                if (strcmp(argv[i], SESSION_ADMIN_LOGIN) == 0) {
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4931      	ldr	r1, [pc, #196]	; (8002ca8 <ConsoleExecute+0x110>)
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fd fb04 	bl	80001f0 <strcmp>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10c      	bne.n	8002c08 <ConsoleExecute+0x70>
                    prvConsolePrint(microrl_ptr, "\tEnter password:" _ENDLINE_SEQ);
 8002bee:	492f      	ldr	r1, [pc, #188]	; (8002cac <ConsoleExecute+0x114>)
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f7ff ff19 	bl	8002a28 <prvConsolePrint>
                    microrl_set_echo(microrl_ptr, MICRORL_ECHO_ONCE);
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f001 fcc0 	bl	800457e <microrl_set_echo>
                    passw_in = 1;
 8002bfe:	4b2c      	ldr	r3, [pc, #176]	; (8002cb0 <ConsoleExecute+0x118>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
                    return 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	e048      	b.n	8002c9a <ConsoleExecute+0x102>
                }
                else {
                    prvConsolePrint(microrl_ptr, "\tLogin name doesn't registered. Try again." _ENDLINE_SEQ);
 8002c08:	492a      	ldr	r1, [pc, #168]	; (8002cb4 <ConsoleExecute+0x11c>)
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f7ff ff0c 	bl	8002a28 <prvConsolePrint>
                    IndicationLedError();
 8002c10:	f7fe fc76 	bl	8001500 <IndicationLedError>
                    return 1;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e040      	b.n	8002c9a <ConsoleExecute+0x102>
                }
            }
            else {
                prvConsolePrint(microrl_ptr, "\tEnter your login after 'login' command." _ENDLINE_SEQ);
 8002c18:	4927      	ldr	r1, [pc, #156]	; (8002cb8 <ConsoleExecute+0x120>)
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f7ff ff04 	bl	8002a28 <prvConsolePrint>
                return 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	e03a      	b.n	8002c9a <ConsoleExecute+0x102>
            }
        }
        else if (passw_in == 1) {
 8002c24:	4b22      	ldr	r3, [pc, #136]	; (8002cb0 <ConsoleExecute+0x118>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d129      	bne.n	8002c80 <ConsoleExecute+0xe8>
            if (strcmp(argv[i], SESSION_ADMIN_PASSW) == 0) {
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	4413      	add	r3, r2
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4921      	ldr	r1, [pc, #132]	; (8002cbc <ConsoleExecute+0x124>)
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fd fad9 	bl	80001f0 <strcmp>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d112      	bne.n	8002c6a <ConsoleExecute+0xd2>
                prvConsolePrint(microrl_ptr, "\tLogged in successfully." _ENDLINE_SEQ);
 8002c44:	491e      	ldr	r1, [pc, #120]	; (8002cc0 <ConsoleExecute+0x128>)
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f7ff feee 	bl	8002a28 <prvConsolePrint>
                passw_in = 0;
 8002c4c:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <ConsoleExecute+0x118>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	701a      	strb	r2, [r3, #0]
                logged_in = 1;
 8002c52:	4b1c      	ldr	r3, [pc, #112]	; (8002cc4 <ConsoleExecute+0x12c>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]
                ConsolePrintHelp(microrl_ptr);
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f9dd 	bl	8003018 <ConsolePrintHelp>
                microrl_set_execute_callback(microrl_ptr, ConsoleExecuteMain);
 8002c5e:	491a      	ldr	r1, [pc, #104]	; (8002cc8 <ConsoleExecute+0x130>)
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f001 fc47 	bl	80044f4 <microrl_set_execute_callback>
                return 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	e017      	b.n	8002c9a <ConsoleExecute+0x102>
            }
            else {
                prvConsolePrint(microrl_ptr, "\tWrong password. Try again." _ENDLINE_SEQ);
 8002c6a:	4918      	ldr	r1, [pc, #96]	; (8002ccc <ConsoleExecute+0x134>)
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f7ff fedb 	bl	8002a28 <prvConsolePrint>
                IndicationLedError();
 8002c72:	f7fe fc45 	bl	8001500 <IndicationLedError>
                passw_in = 0;
 8002c76:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <ConsoleExecute+0x118>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
                return 1;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e00c      	b.n	8002c9a <ConsoleExecute+0x102>
            }
        }
        else {
            prvConsolePrint(microrl_ptr, "\tYou need to login first!" _ENDLINE_SEQ);
 8002c80:	4913      	ldr	r1, [pc, #76]	; (8002cd0 <ConsoleExecute+0x138>)
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f7ff fed0 	bl	8002a28 <prvConsolePrint>
            prvConsolePrint(microrl_ptr, "\tlogin YOUR_LOGIN"_ENDLINE_SEQ);
 8002c88:	4912      	ldr	r1, [pc, #72]	; (8002cd4 <ConsoleExecute+0x13c>)
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f7ff fecc 	bl	8002a28 <prvConsolePrint>
            IndicationLedError();
 8002c90:	f7fe fc36 	bl	8001500 <IndicationLedError>
            return 1;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <ConsoleExecute+0x102>
        }
        i++;
    }

    return 0;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	08013564 	.word	0x08013564
 8002ca8:	08013624 	.word	0x08013624
 8002cac:	0801362c 	.word	0x0801362c
 8002cb0:	20000e7d 	.word	0x20000e7d
 8002cb4:	08013640 	.word	0x08013640
 8002cb8:	08013670 	.word	0x08013670
 8002cbc:	0801369c 	.word	0x0801369c
 8002cc0:	080136a8 	.word	0x080136a8
 8002cc4:	20000e7c 	.word	0x20000e7c
 8002cc8:	08002a49 	.word	0x08002a49
 8002ccc:	080136c4 	.word	0x080136c4
 8002cd0:	080136e4 	.word	0x080136e4
 8002cd4:	08013700 	.word	0x08013700

08002cd8 <ConsoleBuff>:
/**
 * \brief           Buff menu in console
 * \param[in]
 */
int ConsoleBuff(microrl_t *microrl_ptr, int argc, const char * const *argv)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
    int i = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]

    while (i < argc) {
 8002ce8:	e060      	b.n	8002dac <ConsoleBuff+0xd4>
        if (strcmp(argv[i], _CMD_RESET) == 0) {
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4932      	ldr	r1, [pc, #200]	; (8002dc0 <ConsoleBuff+0xe8>)
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fa7a 	bl	80001f0 <strcmp>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d107      	bne.n	8002d12 <ConsoleBuff+0x3a>
            lwrb_reset(&debug_uart.lwrb_rx);
 8002d02:	4830      	ldr	r0, [pc, #192]	; (8002dc4 <ConsoleBuff+0xec>)
 8002d04:	f00b fa98 	bl	800e238 <lwrb_reset>
            prvConsolePrint(microrl_ptr, "\tBuffer successfully reseted" _ENDLINE_SEQ);
 8002d08:	492f      	ldr	r1, [pc, #188]	; (8002dc8 <ConsoleBuff+0xf0>)
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f7ff fe8c 	bl	8002a28 <prvConsolePrint>
 8002d10:	e049      	b.n	8002da6 <ConsoleBuff+0xce>
        }
        else if (strcmp(argv[i], _CMD_FREE) == 0) {
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	492b      	ldr	r1, [pc, #172]	; (8002dcc <ConsoleBuff+0xf4>)
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fa66 	bl	80001f0 <strcmp>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d107      	bne.n	8002d3a <ConsoleBuff+0x62>
            lwrb_free(&debug_uart.lwrb_rx);
 8002d2a:	4826      	ldr	r0, [pc, #152]	; (8002dc4 <ConsoleBuff+0xec>)
 8002d2c:	f00b f8d3 	bl	800ded6 <lwrb_free>
            prvConsolePrint(microrl_ptr, "\tBuffer successfully free" _ENDLINE_SEQ);
 8002d30:	4927      	ldr	r1, [pc, #156]	; (8002dd0 <ConsoleBuff+0xf8>)
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f7ff fe78 	bl	8002a28 <prvConsolePrint>
 8002d38:	e035      	b.n	8002da6 <ConsoleBuff+0xce>
        }
        else if (strcmp(argv[i], _CMD_CHECK) == 0) {
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	4413      	add	r3, r2
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4923      	ldr	r1, [pc, #140]	; (8002dd4 <ConsoleBuff+0xfc>)
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fa52 	bl	80001f0 <strcmp>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d108      	bne.n	8002d64 <ConsoleBuff+0x8c>
            prvConsolePrint(microrl_ptr, "\tHere's your buffer:  ");
 8002d52:	4921      	ldr	r1, [pc, #132]	; (8002dd8 <ConsoleBuff+0x100>)
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f7ff fe67 	bl	8002a28 <prvConsolePrint>
            // TODO insert buffer to show
            prvConsolePrint(microrl_ptr, "\t " _ENDLINE_SEQ);
 8002d5a:	4920      	ldr	r1, [pc, #128]	; (8002ddc <ConsoleBuff+0x104>)
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f7ff fe63 	bl	8002a28 <prvConsolePrint>
 8002d62:	e020      	b.n	8002da6 <ConsoleBuff+0xce>
        }
        else if (strcmp(argv[i], _CMD_BACK) == 0) {
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	491c      	ldr	r1, [pc, #112]	; (8002de0 <ConsoleBuff+0x108>)
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd fa3d 	bl	80001f0 <strcmp>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10b      	bne.n	8002d94 <ConsoleBuff+0xbc>
            prvConsolePrint(microrl_ptr, "\tBack to main menu" _ENDLINE_SEQ _ENDLINE_SEQ _ENDLINE_SEQ);
 8002d7c:	4919      	ldr	r1, [pc, #100]	; (8002de4 <ConsoleBuff+0x10c>)
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f7ff fe52 	bl	8002a28 <prvConsolePrint>
            ConsolePrintHelp(microrl_ptr);
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f947 	bl	8003018 <ConsolePrintHelp>
            microrl_set_execute_callback(microrl_ptr, ConsoleExecuteMain);
 8002d8a:	4917      	ldr	r1, [pc, #92]	; (8002de8 <ConsoleBuff+0x110>)
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f001 fbb1 	bl	80044f4 <microrl_set_execute_callback>
 8002d92:	e008      	b.n	8002da6 <ConsoleBuff+0xce>
        }
        else {
            prvConsolePrint(microrl_ptr, "\tUndefined command" _ENDLINE_SEQ);
 8002d94:	4915      	ldr	r1, [pc, #84]	; (8002dec <ConsoleBuff+0x114>)
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f7ff fe46 	bl	8002a28 <prvConsolePrint>
            IndicationLedError();
 8002d9c:	f7fe fbb0 	bl	8001500 <IndicationLedError>
            ConsolePrintBuff(microrl_ptr);
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f99d 	bl	80030e0 <ConsolePrintBuff>
        }
        i++;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	3301      	adds	r3, #1
 8002daa:	617b      	str	r3, [r7, #20]
    while (i < argc) {
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	db9a      	blt.n	8002cea <ConsoleBuff+0x12>
    }

    return 0;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	0801358c 	.word	0x0801358c
 8002dc4:	20000dfc 	.word	0x20000dfc
 8002dc8:	08013714 	.word	0x08013714
 8002dcc:	08013594 	.word	0x08013594
 8002dd0:	08013734 	.word	0x08013734
 8002dd4:	08013750 	.word	0x08013750
 8002dd8:	08013758 	.word	0x08013758
 8002ddc:	08013770 	.word	0x08013770
 8002de0:	0801359c 	.word	0x0801359c
 8002de4:	08013778 	.word	0x08013778
 8002de8:	08002a49 	.word	0x08002a49
 8002dec:	08013794 	.word	0x08013794

08002df0 <ConsoleVisualizer>:
/**
 * \brief           Visualizer menu in console
 * \param[in]
 */
int ConsoleVisualizer(microrl_t *microrl_ptr, int argc, const char * const *argv)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
    int i = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]

    while (i < argc) {
 8002e00:	e039      	b.n	8002e76 <ConsoleVisualizer+0x86>
        if (strcmp(argv[i], _CMD_SHOW) == 0) {
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	491e      	ldr	r1, [pc, #120]	; (8002e88 <ConsoleVisualizer+0x98>)
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd f9ee 	bl	80001f0 <strcmp>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <ConsoleVisualizer+0x3e>
            microphone.timestamp_ms = HAL_GetTick();
 8002e1a:	f005 ff11 	bl	8008c40 <HAL_GetTick>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4a1a      	ldr	r2, [pc, #104]	; (8002e8c <ConsoleVisualizer+0x9c>)
 8002e22:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
            MicrophoneSetVisualizer(true);
 8002e26:	2001      	movs	r0, #1
 8002e28:	f7ff f89c 	bl	8001f64 <MicrophoneSetVisualizer>
 8002e2c:	e020      	b.n	8002e70 <ConsoleVisualizer+0x80>
        }
        else if (strcmp(argv[i], _CMD_BACK) == 0) {
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	4413      	add	r3, r2
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4915      	ldr	r1, [pc, #84]	; (8002e90 <ConsoleVisualizer+0xa0>)
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd f9d8 	bl	80001f0 <strcmp>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10b      	bne.n	8002e5e <ConsoleVisualizer+0x6e>
            prvConsolePrint(microrl_ptr, "\tBack to main menu" _ENDLINE_SEQ _ENDLINE_SEQ _ENDLINE_SEQ);
 8002e46:	4913      	ldr	r1, [pc, #76]	; (8002e94 <ConsoleVisualizer+0xa4>)
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f7ff fded 	bl	8002a28 <prvConsolePrint>
            ConsolePrintHelp(microrl_ptr);
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f8e2 	bl	8003018 <ConsolePrintHelp>
            microrl_set_execute_callback(microrl_ptr, ConsoleExecuteMain);
 8002e54:	4910      	ldr	r1, [pc, #64]	; (8002e98 <ConsoleVisualizer+0xa8>)
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f001 fb4c 	bl	80044f4 <microrl_set_execute_callback>
 8002e5c:	e008      	b.n	8002e70 <ConsoleVisualizer+0x80>
        }
        else {
            prvConsolePrint(microrl_ptr, "\tUndefined command" _ENDLINE_SEQ);
 8002e5e:	490f      	ldr	r1, [pc, #60]	; (8002e9c <ConsoleVisualizer+0xac>)
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f7ff fde1 	bl	8002a28 <prvConsolePrint>
            IndicationLedError();
 8002e66:	f7fe fb4b 	bl	8001500 <IndicationLedError>
            ConsolePrintVisualizer(microrl_ptr);
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f964 	bl	8003138 <ConsolePrintVisualizer>
        }
        i++;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	3301      	adds	r3, #1
 8002e74:	617b      	str	r3, [r7, #20]
    while (i < argc) {
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	dbc1      	blt.n	8002e02 <ConsoleVisualizer+0x12>
    }

        return 0;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	08013584 	.word	0x08013584
 8002e8c:	20000820 	.word	0x20000820
 8002e90:	0801359c 	.word	0x0801359c
 8002e94:	08013778 	.word	0x08013778
 8002e98:	08002a49 	.word	0x08002a49
 8002e9c:	08013794 	.word	0x08013794

08002ea0 <prvConsoleClearScreen>:

/**
 * \brief           Clear console screen fn
 */
void prvConsoleClearScreen(microrl_t *microrl_ptr)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
    prvConsolePrint(microrl_ptr, "\033[2J" _ENDLINE_SEQ);    // ESC seq for clear entire screen
 8002ea8:	4905      	ldr	r1, [pc, #20]	; (8002ec0 <prvConsoleClearScreen+0x20>)
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff fdbc 	bl	8002a28 <prvConsolePrint>
    prvConsolePrint(microrl_ptr, "\033[H" _ENDLINE_SEQ);     // ESC seq for move cursor at left-top corner
 8002eb0:	4904      	ldr	r1, [pc, #16]	; (8002ec4 <prvConsoleClearScreen+0x24>)
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff fdb8 	bl	8002a28 <prvConsolePrint>
}
 8002eb8:	bf00      	nop
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	080137ac 	.word	0x080137ac
 8002ec4:	080137b4 	.word	0x080137b4

08002ec8 <ConsoleSigint>:
/**
 * \brief           Ctrl+C terminal signal function
 * \param[in]       mrl: \ref microrl_t working instance
 */
void ConsoleSigint(microrl_t *microrl_ptr)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
    MicrophoneSetVisualizer(false);
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f7ff f847 	bl	8001f64 <MicrophoneSetVisualizer>
    microrl_set_execute_callback(microrl_ptr, ConsoleVisualizer);
 8002ed6:	4907      	ldr	r1, [pc, #28]	; (8002ef4 <ConsoleSigint+0x2c>)
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f001 fb0b 	bl	80044f4 <microrl_set_execute_callback>
    prvConsoleClearScreen(microrl_ptr);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff ffde 	bl	8002ea0 <prvConsoleClearScreen>
    ConsolePrintVisualizer(microrl_ptr);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f927 	bl	8003138 <ConsolePrintVisualizer>
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	08002df1 	.word	0x08002df1

08002ef8 <ConsoleComplete>:


//*****************************************************************************
// completion callback for microrl library
char **ConsoleComplete(microrl_t *microrl_ptr, int argc, const char * const *argv)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
    UNUSED(microrl_ptr);
    int j = 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61fb      	str	r3, [r7, #28]

    compl_word[0] = NULL;
 8002f08:	4b3f      	ldr	r3, [pc, #252]	; (8003008 <ConsoleComplete+0x110>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]

    if (argc == 1) {
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d12b      	bne.n	8002f6c <ConsoleComplete+0x74>
        char *bit = (char *)argv[argc - 1];
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	613b      	str	r3, [r7, #16]

        for (int i = 0; i < _NUM_OF_CMD; i++) {
 8002f26:	2300      	movs	r3, #0
 8002f28:	61bb      	str	r3, [r7, #24]
 8002f2a:	e01b      	b.n	8002f64 <ConsoleComplete+0x6c>
            if (strstr(keyword[i], bit) == keyword[i]) {
 8002f2c:	4a37      	ldr	r2, [pc, #220]	; (800300c <ConsoleComplete+0x114>)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f34:	6939      	ldr	r1, [r7, #16]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f00d fda6 	bl	8010a88 <strstr>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	4933      	ldr	r1, [pc, #204]	; (800300c <ConsoleComplete+0x114>)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d109      	bne.n	8002f5e <ConsoleComplete+0x66>
                compl_word[j++] = keyword[i];
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	61fa      	str	r2, [r7, #28]
 8002f50:	492e      	ldr	r1, [pc, #184]	; (800300c <ConsoleComplete+0x114>)
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002f58:	492b      	ldr	r1, [pc, #172]	; (8003008 <ConsoleComplete+0x110>)
 8002f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i < _NUM_OF_CMD; i++) {
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	3301      	adds	r3, #1
 8002f62:	61bb      	str	r3, [r7, #24]
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	2b09      	cmp	r3, #9
 8002f68:	dde0      	ble.n	8002f2c <ConsoleComplete+0x34>
 8002f6a:	e043      	b.n	8002ff4 <ConsoleComplete+0xfc>
            }
        }
    }
    else if ((argc > 1) && ((strcmp (argv[0], _CMD_LOGIN) == 0))) {  /*If command needs subcommands */
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	dd3d      	ble.n	8002fee <ConsoleComplete+0xf6>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4926      	ldr	r1, [pc, #152]	; (8003010 <ConsoleComplete+0x118>)
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fd f939 	bl	80001f0 <strcmp>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d134      	bne.n	8002fee <ConsoleComplete+0xf6>
        /* Iterate through subcommand */
        for (int i = 0; i <  _NUM_OF_SETCLEAR_SCMD; i++) {
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	e022      	b.n	8002fd0 <ConsoleComplete+0xd8>
            if (strstr (read_save_key[i], argv[argc-1]) == read_save_key [i]) {
 8002f8a:	4a22      	ldr	r2, [pc, #136]	; (8003014 <ConsoleComplete+0x11c>)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	f00d fd70 	bl	8010a88 <strstr>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	491a      	ldr	r1, [pc, #104]	; (8003014 <ConsoleComplete+0x11c>)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d109      	bne.n	8002fca <ConsoleComplete+0xd2>
                compl_word[j++] = read_save_key[i];
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	61fa      	str	r2, [r7, #28]
 8002fbc:	4915      	ldr	r1, [pc, #84]	; (8003014 <ConsoleComplete+0x11c>)
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002fc4:	4910      	ldr	r1, [pc, #64]	; (8003008 <ConsoleComplete+0x110>)
 8002fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i <  _NUM_OF_SETCLEAR_SCMD; i++) {
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	ddd9      	ble.n	8002f8a <ConsoleComplete+0x92>
 8002fd6:	e00d      	b.n	8002ff4 <ConsoleComplete+0xfc>
            }
        }
    }
    else { /* If there is no token in cmdline, just print all available token */
        for (; j < _NUM_OF_CMD; j++) {
            compl_word[j] = keyword[j];
 8002fd8:	4a0c      	ldr	r2, [pc, #48]	; (800300c <ConsoleComplete+0x114>)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002fe0:	4909      	ldr	r1, [pc, #36]	; (8003008 <ConsoleComplete+0x110>)
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (; j < _NUM_OF_CMD; j++) {
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	3301      	adds	r3, #1
 8002fec:	61fb      	str	r3, [r7, #28]
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	2b09      	cmp	r3, #9
 8002ff2:	ddf1      	ble.n	8002fd8 <ConsoleComplete+0xe0>
        }
    }
    compl_word[j] = NULL; /* Last ptr in array always must be NULL */
 8002ff4:	4a04      	ldr	r2, [pc, #16]	; (8003008 <ConsoleComplete+0x110>)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    return compl_word;
 8002ffe:	4b02      	ldr	r3, [pc, #8]	; (8003008 <ConsoleComplete+0x110>)
}
 8003000:	4618      	mov	r0, r3
 8003002:	3720      	adds	r7, #32
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20000f38 	.word	0x20000f38
 800300c:	20000404 	.word	0x20000404
 8003010:	08013564 	.word	0x08013564
 8003014:	2000042c 	.word	0x2000042c

08003018 <ConsolePrintHelp>:

/**
 * @brief          Print "help"
 */
void ConsolePrintHelp(microrl_t *microrl_ptr)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
    char ver_str[6] = {0};
 8003020:	2300      	movs	r3, #0
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	2300      	movs	r3, #0
 8003026:	81bb      	strh	r3, [r7, #12]
    ConsoleGetVersion(ver_str);
 8003028:	f107 0308 	add.w	r3, r7, #8
 800302c:	4618      	mov	r0, r3
 800302e:	f000 f8a3 	bl	8003178 <ConsoleGetVersion>
    prvConsolePrint(microrl_ptr, _ENDLINE_SEQ);
 8003032:	491f      	ldr	r1, [pc, #124]	; (80030b0 <ConsolePrintHelp+0x98>)
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff fcf7 	bl	8002a28 <prvConsolePrint>
    prvConsolePrint(microrl_ptr, "MicroRL v");
 800303a:	491e      	ldr	r1, [pc, #120]	; (80030b4 <ConsolePrintHelp+0x9c>)
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff fcf3 	bl	8002a28 <prvConsolePrint>
    prvConsolePrint(microrl_ptr, ver_str);
 8003042:	f107 0308 	add.w	r3, r7, #8
 8003046:	4619      	mov	r1, r3
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff fced 	bl	8002a28 <prvConsolePrint>
    prvConsolePrint(microrl_ptr, " library DEMO v");
 800304e:	491a      	ldr	r1, [pc, #104]	; (80030b8 <ConsolePrintHelp+0xa0>)
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff fce9 	bl	8002a28 <prvConsolePrint>
    prvConsolePrint(microrl_ptr, _STM32_DEMO_VER);
 8003056:	4919      	ldr	r1, [pc, #100]	; (80030bc <ConsolePrintHelp+0xa4>)
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff fce5 	bl	8002a28 <prvConsolePrint>
    prvConsolePrint(microrl_ptr, _ENDLINE_SEQ);
 800305e:	4914      	ldr	r1, [pc, #80]	; (80030b0 <ConsolePrintHelp+0x98>)
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff fce1 	bl	8002a28 <prvConsolePrint>

#if MICRORL_CFG_USE_ECHO_OFF
    if (!logged_in) {
 8003066:	4b16      	ldr	r3, [pc, #88]	; (80030c0 <ConsolePrintHelp+0xa8>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d103      	bne.n	8003076 <ConsolePrintHelp+0x5e>
        prvConsolePrint(microrl_ptr, "\tlogin YOUR_LOGIN      - 'admin' in this example"_ENDLINE_SEQ);
 800306e:	4915      	ldr	r1, [pc, #84]	; (80030c4 <ConsolePrintHelp+0xac>)
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff fcd9 	bl	8002a28 <prvConsolePrint>
    }
#endif /* MICRORL_CFG_USE_ECHO_OFF */

    prvConsolePrint(microrl_ptr, "List of commands:"_ENDLINE_SEQ);
 8003076:	4914      	ldr	r1, [pc, #80]	; (80030c8 <ConsolePrintHelp+0xb0>)
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff fcd5 	bl	8002a28 <prvConsolePrint>
    prvConsolePrint(microrl_ptr, "\tclear               - clear screen"_ENDLINE_SEQ);
 800307e:	4913      	ldr	r1, [pc, #76]	; (80030cc <ConsolePrintHelp+0xb4>)
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff fcd1 	bl	8002a28 <prvConsolePrint>
    prvConsolePrint(microrl_ptr, "\tlogout              - end session"_ENDLINE_SEQ);
 8003086:	4912      	ldr	r1, [pc, #72]	; (80030d0 <ConsolePrintHelp+0xb8>)
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff fccd 	bl	8002a28 <prvConsolePrint>
    prvConsolePrint(microrl_ptr, "\tvisual              - audio visualization configuration menu"_ENDLINE_SEQ);
 800308e:	4911      	ldr	r1, [pc, #68]	; (80030d4 <ConsolePrintHelp+0xbc>)
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff fcc9 	bl	8002a28 <prvConsolePrint>
    prvConsolePrint(microrl_ptr, "\tbuff                - buff configuration menu"_ENDLINE_SEQ);
 8003096:	4910      	ldr	r1, [pc, #64]	; (80030d8 <ConsolePrintHelp+0xc0>)
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff fcc5 	bl	8002a28 <prvConsolePrint>

#if MICRORL_CFG_USE_COMPLETE
    prvConsolePrint(microrl_ptr, "Use TAB key for completion"_ENDLINE_SEQ _ENDLINE_SEQ);
 800309e:	490f      	ldr	r1, [pc, #60]	; (80030dc <ConsolePrintHelp+0xc4>)
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff fcc1 	bl	8002a28 <prvConsolePrint>
#endif /* MICRORL_CFG_USE_COMPLETE */
}
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	080137bc 	.word	0x080137bc
 80030b4:	080137c0 	.word	0x080137c0
 80030b8:	080137cc 	.word	0x080137cc
 80030bc:	080137dc 	.word	0x080137dc
 80030c0:	20000e7c 	.word	0x20000e7c
 80030c4:	080137e0 	.word	0x080137e0
 80030c8:	08013814 	.word	0x08013814
 80030cc:	08013828 	.word	0x08013828
 80030d0:	08013850 	.word	0x08013850
 80030d4:	08013878 	.word	0x08013878
 80030d8:	080138b8 	.word	0x080138b8
 80030dc:	080138ec 	.word	0x080138ec

080030e0 <ConsolePrintBuff>:

/**
 * @brief          Print buff menu
 */
void ConsolePrintBuff(microrl_t *microrl_ptr)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
    prvConsolePrint(microrl_ptr, _ENDLINE_SEQ);
 80030e8:	490d      	ldr	r1, [pc, #52]	; (8003120 <ConsolePrintBuff+0x40>)
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff fc9c 	bl	8002a28 <prvConsolePrint>
    prvConsolePrint(microrl_ptr, "List of buff commands:"_ENDLINE_SEQ);
 80030f0:	490c      	ldr	r1, [pc, #48]	; (8003124 <ConsolePrintBuff+0x44>)
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff fc98 	bl	8002a28 <prvConsolePrint>
    prvConsolePrint(microrl_ptr, "\treset               - reset buffer"_ENDLINE_SEQ);
 80030f8:	490b      	ldr	r1, [pc, #44]	; (8003128 <ConsolePrintBuff+0x48>)
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff fc94 	bl	8002a28 <prvConsolePrint>
    prvConsolePrint(microrl_ptr, "\tfree                - free buff memory"_ENDLINE_SEQ);
 8003100:	490a      	ldr	r1, [pc, #40]	; (800312c <ConsolePrintBuff+0x4c>)
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff fc90 	bl	8002a28 <prvConsolePrint>
    prvConsolePrint(microrl_ptr, "\tcheck               - check your buff"_ENDLINE_SEQ);
 8003108:	4909      	ldr	r1, [pc, #36]	; (8003130 <ConsolePrintBuff+0x50>)
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff fc8c 	bl	8002a28 <prvConsolePrint>
    prvConsolePrint(microrl_ptr, "\tback                - back to main menu"_ENDLINE_SEQ _ENDLINE_SEQ);
 8003110:	4908      	ldr	r1, [pc, #32]	; (8003134 <ConsolePrintBuff+0x54>)
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7ff fc88 	bl	8002a28 <prvConsolePrint>
}
 8003118:	bf00      	nop
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	080137bc 	.word	0x080137bc
 8003124:	0801390c 	.word	0x0801390c
 8003128:	08013928 	.word	0x08013928
 800312c:	08013950 	.word	0x08013950
 8003130:	0801397c 	.word	0x0801397c
 8003134:	080139a8 	.word	0x080139a8

08003138 <ConsolePrintVisualizer>:

/**
 * @brief          Print visualizer menu
 */
void ConsolePrintVisualizer(microrl_t *microrl_ptr)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
    prvConsolePrint(microrl_ptr, _ENDLINE_SEQ);
 8003140:	4909      	ldr	r1, [pc, #36]	; (8003168 <ConsolePrintVisualizer+0x30>)
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff fc70 	bl	8002a28 <prvConsolePrint>
    prvConsolePrint(microrl_ptr, "List of audio visualizer commands:"_ENDLINE_SEQ);
 8003148:	4908      	ldr	r1, [pc, #32]	; (800316c <ConsolePrintVisualizer+0x34>)
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff fc6c 	bl	8002a28 <prvConsolePrint>
    prvConsolePrint(microrl_ptr, "\tshow               -  show visualization"_ENDLINE_SEQ);
 8003150:	4907      	ldr	r1, [pc, #28]	; (8003170 <ConsolePrintVisualizer+0x38>)
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff fc68 	bl	8002a28 <prvConsolePrint>
    prvConsolePrint(microrl_ptr, "\tback               -  back to main menu"_ENDLINE_SEQ _ENDLINE_SEQ);
 8003158:	4906      	ldr	r1, [pc, #24]	; (8003174 <ConsolePrintVisualizer+0x3c>)
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff fc64 	bl	8002a28 <prvConsolePrint>
}
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	080137bc 	.word	0x080137bc
 800316c:	080139d8 	.word	0x080139d8
 8003170:	08013a00 	.word	0x08013a00
 8003174:	08013a2c 	.word	0x08013a2c

08003178 <ConsoleGetVersion>:

/**
 * @brief          Get console version
 */
void ConsoleGetVersion(char* ver_str)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
    uint32_t ver = microrl_get_version();
 8003180:	f001 fbde 	bl	8004940 <microrl_get_version>
 8003184:	60f8      	str	r0, [r7, #12]

    ver_str[0] = (char)((ver >> 16) & 0x000000FF) + '0';
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	0c1b      	lsrs	r3, r3, #16
 800318a:	b2db      	uxtb	r3, r3
 800318c:	3330      	adds	r3, #48	; 0x30
 800318e:	b2da      	uxtb	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	701a      	strb	r2, [r3, #0]
    ver_str[1] = '.';
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3301      	adds	r3, #1
 8003198:	222e      	movs	r2, #46	; 0x2e
 800319a:	701a      	strb	r2, [r3, #0]
    ver_str[2] = (char)((ver >> 8) & 0x000000FF) + '0';
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	0a1b      	lsrs	r3, r3, #8
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3302      	adds	r3, #2
 80031a6:	3230      	adds	r2, #48	; 0x30
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	701a      	strb	r2, [r3, #0]
    ver_str[3] = '.';
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3303      	adds	r3, #3
 80031b0:	222e      	movs	r2, #46	; 0x2e
 80031b2:	701a      	strb	r2, [r3, #0]
    ver_str[4] = (char)(ver & 0x000000FF) + '0';
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3304      	adds	r3, #4
 80031bc:	3230      	adds	r2, #48	; 0x30
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]
}
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <IoSystemInit>:

/**
 * @brief          IO init
 */
void IoSystemInit(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
    IoSystemSetMode(IO_LOGS);
 80031d0:	2001      	movs	r0, #1
 80031d2:	f000 f82b 	bl	800322c <IoSystemSetMode>

    RxTaskHandle = osThreadNew(IoSystemRxTask, NULL, &RxTask_attributes);
 80031d6:	4a0d      	ldr	r2, [pc, #52]	; (800320c <IoSystemInit+0x40>)
 80031d8:	2100      	movs	r1, #0
 80031da:	480d      	ldr	r0, [pc, #52]	; (8003210 <IoSystemInit+0x44>)
 80031dc:	f002 f80c 	bl	80051f8 <osThreadNew>
 80031e0:	4603      	mov	r3, r0
 80031e2:	4a0c      	ldr	r2, [pc, #48]	; (8003214 <IoSystemInit+0x48>)
 80031e4:	6013      	str	r3, [r2, #0]
    TxTaskHandle = osThreadNew(IoSystemTxTask, NULL, &TxTask_attributes);
 80031e6:	4a0c      	ldr	r2, [pc, #48]	; (8003218 <IoSystemInit+0x4c>)
 80031e8:	2100      	movs	r1, #0
 80031ea:	480c      	ldr	r0, [pc, #48]	; (800321c <IoSystemInit+0x50>)
 80031ec:	f002 f804 	bl	80051f8 <osThreadNew>
 80031f0:	4603      	mov	r3, r0
 80031f2:	4a0b      	ldr	r2, [pc, #44]	; (8003220 <IoSystemInit+0x54>)
 80031f4:	6013      	str	r3, [r2, #0]
    uartRxQueueHandle = osMessageQueueNew(512, sizeof(uint8_t), &uartRxQueueAttributes);
 80031f6:	4a0b      	ldr	r2, [pc, #44]	; (8003224 <IoSystemInit+0x58>)
 80031f8:	2101      	movs	r1, #1
 80031fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80031fe:	f002 f9b6 	bl	800556e <osMessageQueueNew>
 8003202:	4603      	mov	r3, r0
 8003204:	4a08      	ldr	r2, [pc, #32]	; (8003228 <IoSystemInit+0x5c>)
 8003206:	6013      	str	r3, [r2, #0]
}
 8003208:	bf00      	nop
 800320a:	bd80      	pop	{r7, pc}
 800320c:	08013c24 	.word	0x08013c24
 8003210:	08003265 	.word	0x08003265
 8003214:	20000f74 	.word	0x20000f74
 8003218:	08013c48 	.word	0x08013c48
 800321c:	080032f9 	.word	0x080032f9
 8003220:	20000f78 	.word	0x20000f78
 8003224:	08013c6c 	.word	0x08013c6c
 8003228:	20000f7c 	.word	0x20000f7c

0800322c <IoSystemSetMode>:

/**
 * @brief          Set IO mode of operation
 */
void IoSystemSetMode(IOSYS_MODE mode)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]
    io_system.mode = mode;
 8003236:	4a04      	ldr	r2, [pc, #16]	; (8003248 <IoSystemSetMode+0x1c>)
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	7113      	strb	r3, [r2, #4]
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	20000f64 	.word	0x20000f64

0800324c <IoSystemGetMode>:

/**
 * @brief          Get IO mode of operation
 */
IOSYS_MODE IoSystemGetMode(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
    return io_system.mode;
 8003250:	4b03      	ldr	r3, [pc, #12]	; (8003260 <IoSystemGetMode+0x14>)
 8003252:	791b      	ldrb	r3, [r3, #4]
}
 8003254:	4618      	mov	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	20000f64 	.word	0x20000f64

08003264 <IoSystemRxTask>:

/**
 * @brief          Receive task
 */
void IoSystemRxTask(void *argument)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
    uint8_t rx = 0x00;
 800326c:	2300      	movs	r3, #0
 800326e:	73fb      	strb	r3, [r7, #15]

    LogInit();
 8003270:	f000 f95a 	bl	8003528 <LogInit>
    ConsoleInit();
 8003274:	f7ff fb82 	bl	800297c <ConsoleInit>
    LogPrintWelcomeMsg();
 8003278:	f000 fa06 	bl	8003688 <LogPrintWelcomeMsg>

    for(;;)
    {
        uint8_t data = 0x00;
 800327c:	2300      	movs	r3, #0
 800327e:	73bb      	strb	r3, [r7, #14]

        if (lwrb_get_free(&data_uart.lwrb_rx) != 0) {
 8003280:	481a      	ldr	r0, [pc, #104]	; (80032ec <IoSystemRxTask+0x88>)
 8003282:	f00a ff59 	bl	800e138 <lwrb_get_free>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00e      	beq.n	80032aa <IoSystemRxTask+0x46>
            lwrb_read(&data_uart.lwrb_rx, &data, sizeof(char));
 800328c:	f107 030e 	add.w	r3, r7, #14
 8003290:	2201      	movs	r2, #1
 8003292:	4619      	mov	r1, r3
 8003294:	4815      	ldr	r0, [pc, #84]	; (80032ec <IoSystemRxTask+0x88>)
 8003296:	f00a fecf 	bl	800e038 <lwrb_read>
            osMessageQueuePut(uartRxQueueHandle, &data, 0, 100);
 800329a:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <IoSystemRxTask+0x8c>)
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	f107 010e 	add.w	r1, r7, #14
 80032a2:	2364      	movs	r3, #100	; 0x64
 80032a4:	2200      	movs	r2, #0
 80032a6:	f002 f9d5 	bl	8005654 <osMessageQueuePut>
        }

        if (!(IoSystemGetByte(&rx, 100))) {
 80032aa:	f107 030f 	add.w	r3, r7, #15
 80032ae:	2164      	movs	r1, #100	; 0x64
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 f87d 	bl	80033b0 <IoSystemGetByte>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f083 0301 	eor.w	r3, r3, #1
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d112      	bne.n	80032e8 <IoSystemRxTask+0x84>
            continue;
        }

        IoSystemClearRxQueue();
 80032c2:	f000 f8d9 	bl	8003478 <IoSystemClearRxQueue>

        prvIoSystemSetRxHandler(rx);
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 f88d 	bl	80033e8 <prvIoSystemSetRxHandler>
        if (io_system.rx_handler != NULL) {
 80032ce:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <IoSystemRxTask+0x90>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d004      	beq.n	80032e0 <IoSystemRxTask+0x7c>
            io_system.rx_handler(rx);
 80032d6:	4b07      	ldr	r3, [pc, #28]	; (80032f4 <IoSystemRxTask+0x90>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	7bfa      	ldrb	r2, [r7, #15]
 80032dc:	4610      	mov	r0, r2
 80032de:	4798      	blx	r3
        }

        osDelay(1);
 80032e0:	2001      	movs	r0, #1
 80032e2:	f002 f81b 	bl	800531c <osDelay>
 80032e6:	e7c9      	b.n	800327c <IoSystemRxTask+0x18>
            continue;
 80032e8:	bf00      	nop
    {
 80032ea:	e7c7      	b.n	800327c <IoSystemRxTask+0x18>
 80032ec:	20000e3c 	.word	0x20000e3c
 80032f0:	20000f7c 	.word	0x20000f7c
 80032f4:	20000f64 	.word	0x20000f64

080032f8 <IoSystemTxTask>:

/**
 * @brief          Transmit task
 */
void IoSystemTxTask(void *argument)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
    for(;;)
    {
        if (IoSystemGetMode() == IO_CONSOLE) {
 8003300:	f7ff ffa4 	bl	800324c <IoSystemGetMode>
 8003304:	4603      	mov	r3, r0
 8003306:	2b02      	cmp	r3, #2
 8003308:	d11f      	bne.n	800334a <IoSystemTxTask+0x52>
            if (!(IoSystemIsTxBufferFull())) {
 800330a:	f000 f8c1 	bl	8003490 <IoSystemIsTxBufferFull>
 800330e:	4603      	mov	r3, r0
 8003310:	f083 0301 	eor.w	r3, r3, #1
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d013      	beq.n	8003342 <IoSystemTxTask+0x4a>

                uint8_t msg = 0x00;
 800331a:	2300      	movs	r3, #0
 800331c:	73fb      	strb	r3, [r7, #15]
                osStatus_t event = osMessageQueueGet(consoleQueueHandle, &msg, NULL, 200);
 800331e:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <IoSystemTxTask+0xac>)
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	f107 010f 	add.w	r1, r7, #15
 8003326:	23c8      	movs	r3, #200	; 0xc8
 8003328:	2200      	movs	r2, #0
 800332a:	f002 f9f3 	bl	8005714 <osMessageQueueGet>
 800332e:	6138      	str	r0, [r7, #16]

                if (event != osOK) {
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d131      	bne.n	800339a <IoSystemTxTask+0xa2>
                    continue;
                }
                IoSystemPutDataToTxBuffer(&msg, sizeof(uint8_t));
 8003336:	f107 030f 	add.w	r3, r7, #15
 800333a:	2101      	movs	r1, #1
 800333c:	4618      	mov	r0, r3
 800333e:	f000 f8b7 	bl	80034b0 <IoSystemPutDataToTxBuffer>
            }
            UARTSendByteTxBuff(&huart3);
 8003342:	4819      	ldr	r0, [pc, #100]	; (80033a8 <IoSystemTxTask+0xb0>)
 8003344:	f7ff fac2 	bl	80028cc <UARTSendByteTxBuff>
 8003348:	e023      	b.n	8003392 <IoSystemTxTask+0x9a>
        }
        else if (IoSystemGetMode() == IO_LOGS) {
 800334a:	f7ff ff7f 	bl	800324c <IoSystemGetMode>
 800334e:	4603      	mov	r3, r0
 8003350:	2b01      	cmp	r3, #1
 8003352:	d11e      	bne.n	8003392 <IoSystemTxTask+0x9a>
            if (!(IoSystemIsTxBufferFull())) {
 8003354:	f000 f89c 	bl	8003490 <IoSystemIsTxBufferFull>
 8003358:	4603      	mov	r3, r0
 800335a:	f083 0301 	eor.w	r3, r3, #1
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d013      	beq.n	800338c <IoSystemTxTask+0x94>

                uint8_t msg = 0x00;
 8003364:	2300      	movs	r3, #0
 8003366:	73bb      	strb	r3, [r7, #14]
                osStatus_t event = osMessageQueueGet(logsQueueHandle, &msg, NULL, 200);
 8003368:	4b10      	ldr	r3, [pc, #64]	; (80033ac <IoSystemTxTask+0xb4>)
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	f107 010e 	add.w	r1, r7, #14
 8003370:	23c8      	movs	r3, #200	; 0xc8
 8003372:	2200      	movs	r2, #0
 8003374:	f002 f9ce 	bl	8005714 <osMessageQueueGet>
 8003378:	6178      	str	r0, [r7, #20]

                if (event != osOK) {
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10e      	bne.n	800339e <IoSystemTxTask+0xa6>
                    continue;
                }
                IoSystemPutDataToTxBuffer(&msg, sizeof(uint8_t));
 8003380:	f107 030e 	add.w	r3, r7, #14
 8003384:	2101      	movs	r1, #1
 8003386:	4618      	mov	r0, r3
 8003388:	f000 f892 	bl	80034b0 <IoSystemPutDataToTxBuffer>
            }
            UARTSendByteTxBuff(&huart3);
 800338c:	4806      	ldr	r0, [pc, #24]	; (80033a8 <IoSystemTxTask+0xb0>)
 800338e:	f7ff fa9d 	bl	80028cc <UARTSendByteTxBuff>
        }
        osDelay(1);
 8003392:	2001      	movs	r0, #1
 8003394:	f001 ffc2 	bl	800531c <osDelay>
 8003398:	e7b2      	b.n	8003300 <IoSystemTxTask+0x8>
                    continue;
 800339a:	bf00      	nop
 800339c:	e7b0      	b.n	8003300 <IoSystemTxTask+0x8>
                    continue;
 800339e:	bf00      	nop
        if (IoSystemGetMode() == IO_CONSOLE) {
 80033a0:	e7ae      	b.n	8003300 <IoSystemTxTask+0x8>
 80033a2:	bf00      	nop
 80033a4:	20000f80 	.word	0x20000f80
 80033a8:	20000d74 	.word	0x20000d74
 80033ac:	20000f84 	.word	0x20000f84

080033b0 <IoSystemGetByte>:

/**
 * @brief          IO get byte
 */
bool IoSystemGetByte(uint8_t *data, uint32_t timeout_ms)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
    *data = 0x00;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]

    osStatus_t event = osMessageQueueGet(uartRxQueueHandle, data, NULL, timeout_ms);
 80033c0:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <IoSystemGetByte+0x34>)
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2200      	movs	r2, #0
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	f002 f9a3 	bl	8005714 <osMessageQueueGet>
 80033ce:	60f8      	str	r0, [r7, #12]

    if (event == osOK) {
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <IoSystemGetByte+0x2a>
        return true;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <IoSystemGetByte+0x2c>
    }
    else {
        return false;
 80033da:	2300      	movs	r3, #0
    }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20000f7c 	.word	0x20000f7c

080033e8 <prvIoSystemSetRxHandler>:

/**
 * @brief          Set RX handler function
 */
void prvIoSystemSetRxHandler(char rx)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	71fb      	strb	r3, [r7, #7]
    if (IoSystemGetMode() == IO_CONSOLE) {
 80033f2:	f7ff ff2b 	bl	800324c <IoSystemGetMode>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d103      	bne.n	8003404 <prvIoSystemSetRxHandler+0x1c>
        io_system.rx_handler = prvIoConsoleRxHandler;
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <prvIoSystemSetRxHandler+0x30>)
 80033fe:	4a07      	ldr	r2, [pc, #28]	; (800341c <prvIoSystemSetRxHandler+0x34>)
 8003400:	601a      	str	r2, [r3, #0]
        return;
 8003402:	e005      	b.n	8003410 <prvIoSystemSetRxHandler+0x28>
//    if (IoSystemGetMode() == IO_LOGS) {
//        io_system.rx_handler = io_logs_rx_handler;
//        return;
//    }

    IoSystemSetMode(IO_LOGS);
 8003404:	2001      	movs	r0, #1
 8003406:	f7ff ff11 	bl	800322c <IoSystemSetMode>
    io_system.rx_handler = prvIoLogsRxHandler;
 800340a:	4b03      	ldr	r3, [pc, #12]	; (8003418 <prvIoSystemSetRxHandler+0x30>)
 800340c:	4a04      	ldr	r2, [pc, #16]	; (8003420 <prvIoSystemSetRxHandler+0x38>)
 800340e:	601a      	str	r2, [r3, #0]
}
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000f64 	.word	0x20000f64
 800341c:	08003425 	.word	0x08003425
 8003420:	0800343f 	.word	0x0800343f

08003424 <prvIoConsoleRxHandler>:

/**
 * @brief          IO console RX handler
 */
void prvIoConsoleRxHandler(char rx)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]
//    if (!data_uart.flag) {
//        return;
//    }

    ConsoleInsertChar(rx);
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff fae7 	bl	8002a04 <ConsoleInsertChar>

//    data_uart.flag = false;
}
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <prvIoLogsRxHandler>:

/**
 * @brief          IO logs RX handler
 */
void prvIoLogsRxHandler(char rx)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	4603      	mov	r3, r0
 8003446:	71fb      	strb	r3, [r7, #7]
    if ((rx == 'T') || (rx == 't')) {
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	2b54      	cmp	r3, #84	; 0x54
 800344c:	d002      	beq.n	8003454 <prvIoLogsRxHandler+0x16>
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	2b74      	cmp	r3, #116	; 0x74
 8003452:	d105      	bne.n	8003460 <prvIoLogsRxHandler+0x22>
        IoSystemSetMode(IO_CONSOLE);
 8003454:	2002      	movs	r0, #2
 8003456:	f7ff fee9 	bl	800322c <IoSystemSetMode>
        ConsoleStart();
 800345a:	f7ff fac3 	bl	80029e4 <ConsoleStart>
        return;
 800345e:	e008      	b.n	8003472 <prvIoLogsRxHandler+0x34>
    }

    if ((rx == 'L') || (rx == 'l')) {
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	2b4c      	cmp	r3, #76	; 0x4c
 8003464:	d002      	beq.n	800346c <prvIoLogsRxHandler+0x2e>
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	2b6c      	cmp	r3, #108	; 0x6c
 800346a:	d102      	bne.n	8003472 <prvIoLogsRxHandler+0x34>
        IoSystemSetMode(IO_LOGS);
 800346c:	2001      	movs	r0, #1
 800346e:	f7ff fedd 	bl	800322c <IoSystemSetMode>
    }
//    else if ((rx == 'X') || (rx == 'x')) {
//        io_set_mode(IO_IDLE);
//        log_clear_queues();
//    }
}
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <IoSystemClearRxQueue>:

/**
 * @brief          Clear RX queue
 */
void IoSystemClearRxQueue(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
    osMessageQueueReset(uartRxQueueHandle);
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <IoSystemClearRxQueue+0x14>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f002 f9a5 	bl	80057d0 <osMessageQueueReset>
}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000f7c 	.word	0x20000f7c

08003490 <IoSystemIsTxBufferFull>:

/**
 * @brief          Check TX buffer is full
 */
bool IoSystemIsTxBufferFull(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
    return (lwrb_get_free(&data_uart.lwrb_tx) == 0 ? true : false);
 8003494:	4805      	ldr	r0, [pc, #20]	; (80034ac <IoSystemIsTxBufferFull+0x1c>)
 8003496:	f00a fe4f 	bl	800e138 <lwrb_get_free>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000e50 	.word	0x20000e50

080034b0 <IoSystemPutDataToTxBuffer>:

/**
 * @brief         Put data to TX ring buffer
 */
bool IoSystemPutDataToTxBuffer(const void* data, size_t len)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
    if (lwrb_get_free(&data_uart.lwrb_tx) == 0) {
 80034ba:	480b      	ldr	r0, [pc, #44]	; (80034e8 <IoSystemPutDataToTxBuffer+0x38>)
 80034bc:	f00a fe3c 	bl	800e138 <lwrb_get_free>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <IoSystemPutDataToTxBuffer+0x1a>
        return false;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e00a      	b.n	80034e0 <IoSystemPutDataToTxBuffer+0x30>
    }

    return (lwrb_write(&data_uart.lwrb_tx, data, len) > 0 ? true : false);
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4806      	ldr	r0, [pc, #24]	; (80034e8 <IoSystemPutDataToTxBuffer+0x38>)
 80034d0:	f00a fd32 	bl	800df38 <lwrb_write>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	bf14      	ite	ne
 80034da:	2301      	movne	r3, #1
 80034dc:	2300      	moveq	r3, #0
 80034de:	b2db      	uxtb	r3, r3
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	20000e50 	.word	0x20000e50

080034ec <IoSystemPutDataToRxBuffer>:

/**
 * @brief          Put data to RX ring buffer
 */
bool IoSystemPutDataToRxBuffer(const void* data, size_t len)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
    if (lwrb_get_free(&data_uart.lwrb_rx) == 0) {
 80034f6:	480b      	ldr	r0, [pc, #44]	; (8003524 <IoSystemPutDataToRxBuffer+0x38>)
 80034f8:	f00a fe1e 	bl	800e138 <lwrb_get_free>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <IoSystemPutDataToRxBuffer+0x1a>
        return false;
 8003502:	2300      	movs	r3, #0
 8003504:	e00a      	b.n	800351c <IoSystemPutDataToRxBuffer+0x30>
    }

    return (lwrb_write(&data_uart.lwrb_rx, data, len) > 0 ? true : false);
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4806      	ldr	r0, [pc, #24]	; (8003524 <IoSystemPutDataToRxBuffer+0x38>)
 800350c:	f00a fd14 	bl	800df38 <lwrb_write>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	bf14      	ite	ne
 8003516:	2301      	movne	r3, #1
 8003518:	2300      	moveq	r3, #0
 800351a:	b2db      	uxtb	r3, r3
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	20000e3c 	.word	0x20000e3c

08003528 <LogInit>:

/**
 * @brief          Init logging system
 */
void LogInit(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
    consoleQueueHandle = osMessageQueueNew(512, sizeof(uint8_t), &consoleQueueAttributes);
 800352c:	4a0d      	ldr	r2, [pc, #52]	; (8003564 <LogInit+0x3c>)
 800352e:	2101      	movs	r1, #1
 8003530:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003534:	f002 f81b 	bl	800556e <osMessageQueueNew>
 8003538:	4603      	mov	r3, r0
 800353a:	4a0b      	ldr	r2, [pc, #44]	; (8003568 <LogInit+0x40>)
 800353c:	6013      	str	r3, [r2, #0]
    logsQueueHandle = osMessageQueueNew(512, sizeof(uint8_t), &logsQueueAttributes);
 800353e:	4a0b      	ldr	r2, [pc, #44]	; (800356c <LogInit+0x44>)
 8003540:	2101      	movs	r1, #1
 8003542:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003546:	f002 f812 	bl	800556e <osMessageQueueNew>
 800354a:	4603      	mov	r3, r0
 800354c:	4a08      	ldr	r2, [pc, #32]	; (8003570 <LogInit+0x48>)
 800354e:	6013      	str	r3, [r2, #0]

    lwprintf_init_ex(&console, prvLwprintfConsoleOut);
 8003550:	4908      	ldr	r1, [pc, #32]	; (8003574 <LogInit+0x4c>)
 8003552:	4809      	ldr	r0, [pc, #36]	; (8003578 <LogInit+0x50>)
 8003554:	f00a fbba 	bl	800dccc <lwprintf_init_ex>
    lwprintf_init_ex(&logs, prvLwprintfLogsOut);
 8003558:	4908      	ldr	r1, [pc, #32]	; (800357c <LogInit+0x54>)
 800355a:	4809      	ldr	r0, [pc, #36]	; (8003580 <LogInit+0x58>)
 800355c:	f00a fbb6 	bl	800dccc <lwprintf_init_ex>
}
 8003560:	bf00      	nop
 8003562:	bd80      	pop	{r7, pc}
 8003564:	08013c84 	.word	0x08013c84
 8003568:	20000f80 	.word	0x20000f80
 800356c:	08013c9c 	.word	0x08013c9c
 8003570:	20000f84 	.word	0x20000f84
 8003574:	08003655 	.word	0x08003655
 8003578:	20000f88 	.word	0x20000f88
 800357c:	08003621 	.word	0x08003621
 8003580:	20000f90 	.word	0x20000f90

08003584 <LogClearQueues>:

/**
 * @brief          Clear Queues of logs and console
 */
void LogClearQueues(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
    osMessageQueueReset(logsQueueHandle);
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <LogClearQueues+0x1c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f002 f91f 	bl	80057d0 <osMessageQueueReset>
    osMessageQueueReset(consoleQueueHandle);
 8003592:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <LogClearQueues+0x20>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f002 f91a 	bl	80057d0 <osMessageQueueReset>
}
 800359c:	bf00      	nop
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	20000f84 	.word	0x20000f84
 80035a4:	20000f80 	.word	0x20000f80

080035a8 <PrintfLogs>:

/**
 * @brief          Printf of logs
 */
int PrintfLogs(const char *fmt, ...)
{
 80035a8:	b40f      	push	{r0, r1, r2, r3}
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
    if (IoSystemGetMode() != IO_LOGS) {
 80035b0:	f7ff fe4c 	bl	800324c <IoSystemGetMode>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d001      	beq.n	80035be <PrintfLogs+0x16>
        return 0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e009      	b.n	80035d2 <PrintfLogs+0x2a>
    }

    va_list args;
    int len;

    va_start(args, fmt);
 80035be:	f107 0314 	add.w	r3, r7, #20
 80035c2:	603b      	str	r3, [r7, #0]
    len = lwprintf_vprintf_ex(&logs, fmt, args);
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	6939      	ldr	r1, [r7, #16]
 80035c8:	4805      	ldr	r0, [pc, #20]	; (80035e0 <PrintfLogs+0x38>)
 80035ca:	f00a fbaf 	bl	800dd2c <lwprintf_vprintf_ex>
 80035ce:	6078      	str	r0, [r7, #4]
    va_end(args);

    return (len);
 80035d0:	687b      	ldr	r3, [r7, #4]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035dc:	b004      	add	sp, #16
 80035de:	4770      	bx	lr
 80035e0:	20000f90 	.word	0x20000f90

080035e4 <PrintfConsole>:

/**
 * @brief          Printf of console
 */
int PrintfConsole(const char *fmt, ...)
{
 80035e4:	b40f      	push	{r0, r1, r2, r3}
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
    if (IoSystemGetMode() != IO_CONSOLE) {
 80035ec:	f7ff fe2e 	bl	800324c <IoSystemGetMode>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d001      	beq.n	80035fa <PrintfConsole+0x16>
        return 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	e009      	b.n	800360e <PrintfConsole+0x2a>
    }

    va_list args;
    int len;

    va_start(args, fmt);
 80035fa:	f107 0314 	add.w	r3, r7, #20
 80035fe:	603b      	str	r3, [r7, #0]
    len = lwprintf_vprintf_ex(&console, fmt, args);
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	6939      	ldr	r1, [r7, #16]
 8003604:	4805      	ldr	r0, [pc, #20]	; (800361c <PrintfConsole+0x38>)
 8003606:	f00a fb91 	bl	800dd2c <lwprintf_vprintf_ex>
 800360a:	6078      	str	r0, [r7, #4]
    va_end(args);

    return (len);
 800360c:	687b      	ldr	r3, [r7, #4]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003618:	b004      	add	sp, #16
 800361a:	4770      	bx	lr
 800361c:	20000f88 	.word	0x20000f88

08003620 <prvLwprintfLogsOut>:

/**
 * @brief          Printf logs out (add to logs queue)
 */
static int prvLwprintfLogsOut(int ch, lwprintf_t* p)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
    uint8_t c = (uint8_t)ch;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	73fb      	strb	r3, [r7, #15]

    if (c == '\0') {
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <prvLwprintfLogsOut+0x18>
        return ch;           //to prevent printing '0' in the end of any (char*)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	e007      	b.n	8003648 <prvLwprintfLogsOut+0x28>
    }

    osMessageQueuePut(logsQueueHandle, &ch, 0, 200);
 8003638:	4b05      	ldr	r3, [pc, #20]	; (8003650 <prvLwprintfLogsOut+0x30>)
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	1d39      	adds	r1, r7, #4
 800363e:	23c8      	movs	r3, #200	; 0xc8
 8003640:	2200      	movs	r2, #0
 8003642:	f002 f807 	bl	8005654 <osMessageQueuePut>

    return (ch);
 8003646:	687b      	ldr	r3, [r7, #4]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000f84 	.word	0x20000f84

08003654 <prvLwprintfConsoleOut>:

/**
 * @brief          Printf console out (add to console queue)
 */
static int prvLwprintfConsoleOut(int ch, lwprintf_t* p)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
    uint8_t c = (uint8_t)ch;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	73fb      	strb	r3, [r7, #15]

    if (c == '\0') {
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <prvLwprintfConsoleOut+0x18>
        return ch;           //to prevent printing '0' in the end of any (char*)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	e007      	b.n	800367c <prvLwprintfConsoleOut+0x28>
    }

    osMessageQueuePut(consoleQueueHandle, &ch, 0, 200);
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <prvLwprintfConsoleOut+0x30>)
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	1d39      	adds	r1, r7, #4
 8003672:	23c8      	movs	r3, #200	; 0xc8
 8003674:	2200      	movs	r2, #0
 8003676:	f001 ffed 	bl	8005654 <osMessageQueuePut>

    return (ch);
 800367a:	687b      	ldr	r3, [r7, #4]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20000f80 	.word	0x20000f80

08003688 <LogPrintWelcomeMsg>:

/**
 * @brief          Print welcome message at the start
 */
void LogPrintWelcomeMsg(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
    PrintfLogsCRLF("");
 800368c:	480f      	ldr	r0, [pc, #60]	; (80036cc <LogPrintWelcomeMsg+0x44>)
 800368e:	f7ff ff8b 	bl	80035a8 <PrintfLogs>
 8003692:	480f      	ldr	r0, [pc, #60]	; (80036d0 <LogPrintWelcomeMsg+0x48>)
 8003694:	f7ff ff88 	bl	80035a8 <PrintfLogs>
    PrintfLogsCRLF("");
 8003698:	480c      	ldr	r0, [pc, #48]	; (80036cc <LogPrintWelcomeMsg+0x44>)
 800369a:	f7ff ff85 	bl	80035a8 <PrintfLogs>
 800369e:	480c      	ldr	r0, [pc, #48]	; (80036d0 <LogPrintWelcomeMsg+0x48>)
 80036a0:	f7ff ff82 	bl	80035a8 <PrintfLogs>
    PrintfLogsCRLF("\tWelcome to STM32F407 Discovery firmware with FreeRTOS");
 80036a4:	480b      	ldr	r0, [pc, #44]	; (80036d4 <LogPrintWelcomeMsg+0x4c>)
 80036a6:	f7ff ff7f 	bl	80035a8 <PrintfLogs>
 80036aa:	4809      	ldr	r0, [pc, #36]	; (80036d0 <LogPrintWelcomeMsg+0x48>)
 80036ac:	f7ff ff7c 	bl	80035a8 <PrintfLogs>
    PrintfLogsCRLF("");
 80036b0:	4806      	ldr	r0, [pc, #24]	; (80036cc <LogPrintWelcomeMsg+0x44>)
 80036b2:	f7ff ff79 	bl	80035a8 <PrintfLogs>
 80036b6:	4806      	ldr	r0, [pc, #24]	; (80036d0 <LogPrintWelcomeMsg+0x48>)
 80036b8:	f7ff ff76 	bl	80035a8 <PrintfLogs>
    PrintfLogsCRLF("");
 80036bc:	4803      	ldr	r0, [pc, #12]	; (80036cc <LogPrintWelcomeMsg+0x44>)
 80036be:	f7ff ff73 	bl	80035a8 <PrintfLogs>
 80036c2:	4803      	ldr	r0, [pc, #12]	; (80036d0 <LogPrintWelcomeMsg+0x48>)
 80036c4:	f7ff ff70 	bl	80035a8 <PrintfLogs>
}
 80036c8:	bf00      	nop
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	08013adc 	.word	0x08013adc
 80036d0:	08013ae0 	.word	0x08013ae0
 80036d4:	08013ae4 	.word	0x08013ae4

080036d8 <prv_cmdline_buf_split>:
 * \param[out]      tkn_str_arr: Tokens buffer stored split words
 * \param[out]      tkn_cnt_ptr: Number of split tokens
 * \param[in]       limit: Number of command line characters to split
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
static microrlr_t prv_cmdline_buf_split(microrl_t* mrl, const char** tkn_str_arr, uint8_t* tkn_cnt_ptr, size_t limit) {
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
    uint8_t num = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	75fb      	strb	r3, [r7, #23]
    char *str = mrl->cmdline_str;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	3314      	adds	r3, #20
 80036ee:	613b      	str	r3, [r7, #16]

    /* Process complete string */
    while (*str != '\0') {
 80036f0:	e03c      	b.n	800376c <prv_cmdline_buf_split+0x94>
                    ++str;
                }
            }
        } else {
#endif /* MICRORL_CFG_USE_QUOTING */
            tkn_str_arr[num++] = str;           /* Set start of argument directly on character */
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	75fa      	strb	r2, [r7, #23]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	4413      	add	r3, r2
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	601a      	str	r2, [r3, #0]
            while ((*str != ' ' && *str != '\0')) {
 8003702:	e018      	b.n	8003736 <prv_cmdline_buf_split+0x5e>
                if (!((size_t)(str - mrl->cmdline_str) < limit)) {
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	3314      	adds	r3, #20
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	461a      	mov	r2, r3
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	4293      	cmp	r3, r2
 8003712:	d80d      	bhi.n	8003730 <prv_cmdline_buf_split+0x58>
                    tkn_str_arr[--num] = NULL;
 8003714:	7dfb      	ldrb	r3, [r7, #23]
 8003716:	3b01      	subs	r3, #1
 8003718:	75fb      	strb	r3, [r7, #23]
 800371a:	7dfb      	ldrb	r3, [r7, #23]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	4413      	add	r3, r2
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
                    *tkn_cnt_ptr = num;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	7dfa      	ldrb	r2, [r7, #23]
 800372a:	701a      	strb	r2, [r3, #0]
                    return microrlOK;
 800372c:	2300      	movs	r3, #0
 800372e:	e027      	b.n	8003780 <prv_cmdline_buf_split+0xa8>
#if MICRORL_CFG_USE_QUOTING
                if (*str == '"' || *str == '\'') {   /* Quote should not be here... */
                    *str = '\0';                /* ...add NULL termination to end token */
                }
#endif /* MICRORL_CFG_USE_QUOTING */
                ++str;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	3301      	adds	r3, #1
 8003734:	613b      	str	r3, [r7, #16]
            while ((*str != ' ' && *str != '\0')) {
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b20      	cmp	r3, #32
 800373c:	d003      	beq.n	8003746 <prv_cmdline_buf_split+0x6e>
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1de      	bne.n	8003704 <prv_cmdline_buf_split+0x2c>
            }
            if (*str == '\0') {
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d013      	beq.n	8003776 <prv_cmdline_buf_split+0x9e>
                break;
            }
            *str = '\0';
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
            ++str;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	3301      	adds	r3, #1
 8003758:	613b      	str	r3, [r7, #16]
#if MICRORL_CFG_USE_QUOTING
        }
#endif /* MICRORL_CFG_USE_QUOTING */
        if (num == MICRORL_CFG_CMD_TOKEN_NMB && *str != '\0') {     /* Check for number of tokens */
 800375a:	7dfb      	ldrb	r3, [r7, #23]
 800375c:	2b08      	cmp	r3, #8
 800375e:	d105      	bne.n	800376c <prv_cmdline_buf_split+0x94>
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <prv_cmdline_buf_split+0x94>
            return microrlERRTKNNUM;
 8003768:	2303      	movs	r3, #3
 800376a:	e009      	b.n	8003780 <prv_cmdline_buf_split+0xa8>
    while (*str != '\0') {
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1be      	bne.n	80036f2 <prv_cmdline_buf_split+0x1a>
 8003774:	e000      	b.n	8003778 <prv_cmdline_buf_split+0xa0>
                break;
 8003776:	bf00      	nop
        }
    }

    *tkn_cnt_ptr = num;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	7dfa      	ldrb	r2, [r7, #23]
 800377c:	701a      	strb	r2, [r3, #0]
    return microrlOK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <prv_cmdline_buf_insert_text>:
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \param[in]       text_str: Text to store on the command line
 * \param[in]       len: Length of text to store
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
static microrlr_t prv_cmdline_buf_insert_text(microrl_t* mrl, const char* text_str, size_t len) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
    if ((mrl->cmdlen + len) > (MICRORL_ARRAYSIZE(mrl->cmdline_str) - 1)) {
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4413      	add	r3, r2
 80037a0:	2b3c      	cmp	r3, #60	; 0x3c
 80037a2:	d901      	bls.n	80037a8 <prv_cmdline_buf_insert_text+0x1c>
        return microrlERRCLFULL;
 80037a4:	2304      	movs	r3, #4
 80037a6:	e057      	b.n	8003858 <prv_cmdline_buf_insert_text+0xcc>
    }

#if MICRORL_CFG_USE_ECHO_OFF
    if ((mrl->echo != MICRORL_ECHO_ON) && (mrl->echo_off_pos == -1)) {
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d00b      	beq.n	80037ca <prv_cmdline_buf_insert_text+0x3e>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037bc:	d105      	bne.n	80037ca <prv_cmdline_buf_insert_text+0x3e>
        mrl->echo_off_pos = mrl->cmdlen;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c2:	461a      	mov	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }
#endif /* MICRORL_CFG_USE_ECHO_OFF */
    memmove(mrl->cmdline_str + mrl->cursor + len,
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f103 0214 	add.w	r2, r3, #20
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	440b      	add	r3, r1
 80037d8:	18d0      	adds	r0, r2, r3
            mrl->cmdline_str + mrl->cursor,
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f103 0214 	add.w	r2, r3, #20
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    memmove(mrl->cmdline_str + mrl->cursor + len,
 80037e4:	18d1      	adds	r1, r2, r3
            mrl->cmdlen - mrl->cursor);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    memmove(mrl->cmdline_str + mrl->cursor + len,
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	461a      	mov	r2, r3
 80037f2:	f00c fcb1 	bl	8010158 <memmove>
    for (size_t i = 0; i < len; ++i) {
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	e00e      	b.n	800381a <prv_cmdline_buf_insert_text+0x8e>
        mrl->cmdline_str[mrl->cursor + i] = text_str[i];
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	441a      	add	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	440b      	add	r3, r1
 800380a:	7811      	ldrb	r1, [r2, #0]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4413      	add	r3, r2
 8003810:	460a      	mov	r2, r1
 8003812:	751a      	strb	r2, [r3, #20]
    for (size_t i = 0; i < len; ++i) {
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	3301      	adds	r3, #1
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	429a      	cmp	r2, r3
 8003820:	d3ec      	bcc.n	80037fc <prv_cmdline_buf_insert_text+0x70>
    }
    mrl->cursor += len;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	441a      	add	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	659a      	str	r2, [r3, #88]	; 0x58
    mrl->cmdlen += len;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	441a      	add	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	655a      	str	r2, [r3, #84]	; 0x54
    memset(&mrl->cmdline_str[mrl->cmdlen], 0x00, MICRORL_ARRAYSIZE(mrl->cmdline_str) - 1 - mrl->cmdlen);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383e:	3310      	adds	r3, #16
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4413      	add	r3, r2
 8003844:	1d18      	adds	r0, r3, #4
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384a:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 800384e:	461a      	mov	r2, r3
 8003850:	2100      	movs	r1, #0
 8003852:	f00c fc9b 	bl	801018c <memset>

    return microrlOK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <prv_cmdline_buf_backspace>:
/**
 * \brief           Remove len characters backwards at cursor
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \param[in]       len: Number of chars to remove
 */
static void prv_cmdline_buf_backspace(microrl_t* mrl, size_t len) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
    if (mrl->cursor < len) {
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d82a      	bhi.n	80038ca <prv_cmdline_buf_backspace+0x6a>
        return;
    }

    memmove(mrl->cmdline_str + mrl->cursor - len,
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f103 0214 	add.w	r2, r3, #20
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	1acb      	subs	r3, r1, r3
 8003882:	18d0      	adds	r0, r2, r3
            mrl->cmdline_str + mrl->cursor,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f103 0214 	add.w	r2, r3, #20
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    memmove(mrl->cmdline_str + mrl->cursor - len,
 800388e:	18d1      	adds	r1, r2, r3
            mrl->cmdlen - mrl->cursor + len);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003898:	1ad2      	subs	r2, r2, r3
    memmove(mrl->cmdline_str + mrl->cursor - len,
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	4413      	add	r3, r2
 800389e:	461a      	mov	r2, r3
 80038a0:	f00c fc5a 	bl	8010158 <memmove>
    mrl->cursor -= len;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	1ad2      	subs	r2, r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	659a      	str	r2, [r3, #88]	; 0x58
    mrl->cmdline_str[mrl->cmdlen] = '\0';
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	4413      	add	r3, r2
 80038b8:	2200      	movs	r2, #0
 80038ba:	751a      	strb	r2, [r3, #20]
    mrl->cmdlen -= len;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	1ad2      	subs	r2, r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	655a      	str	r2, [r3, #84]	; 0x54
 80038c8:	e000      	b.n	80038cc <prv_cmdline_buf_backspace+0x6c>
        return;
 80038ca:	bf00      	nop
}
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <prv_cmdline_buf_delete>:

/**
 * \brief           Remove one characters forward at cursor
 * \param[in,out]   mrl: \ref microrl_t working instance
 */
static void prv_cmdline_buf_delete(microrl_t* mrl) {
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
    if ((mrl->cmdlen == 0) || (mrl->cursor == mrl->cmdlen)) {
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d027      	beq.n	8003932 <prv_cmdline_buf_delete+0x60>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d021      	beq.n	8003932 <prv_cmdline_buf_delete+0x60>
        return;
    }

    memmove(mrl->cmdline_str + mrl->cursor,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f103 0214 	add.w	r2, r3, #20
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f8:	18d0      	adds	r0, r2, r3
            mrl->cmdline_str + mrl->cursor + 1,
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f103 0214 	add.w	r2, r3, #20
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003904:	3301      	adds	r3, #1
    memmove(mrl->cmdline_str + mrl->cursor,
 8003906:	18d1      	adds	r1, r2, r3
            mrl->cmdlen - mrl->cursor + 1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003910:	1ad3      	subs	r3, r2, r3
    memmove(mrl->cmdline_str + mrl->cursor,
 8003912:	3301      	adds	r3, #1
 8003914:	461a      	mov	r2, r3
 8003916:	f00c fc1f 	bl	8010158 <memmove>
    mrl->cmdline_str[mrl->cmdlen] = '\0';
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	4413      	add	r3, r2
 8003922:	2200      	movs	r2, #0
 8003924:	751a      	strb	r2, [r3, #20]
    --mrl->cmdlen;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	1e5a      	subs	r2, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	655a      	str	r2, [r3, #84]	; 0x54
 8003930:	e000      	b.n	8003934 <prv_cmdline_buf_delete+0x62>
        return;
 8003932:	bf00      	nop
}
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <prv_cmdline_buf_reset>:

/**
 * \brief           Reset command line buffer and its position pointers
 * \param[out]      mrl: \ref microrl_t working instance
 */
MICRORL_CFG_STATIC_INLINE void prv_cmdline_buf_reset(microrl_t* mrl) {
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
    memset(mrl->cmdline_str, 0x00, sizeof(mrl->cmdline_str));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3314      	adds	r3, #20
 8003946:	223d      	movs	r2, #61	; 0x3d
 8003948:	2100      	movs	r1, #0
 800394a:	4618      	mov	r0, r3
 800394c:	f00c fc1e 	bl	801018c <memset>
    mrl->cmdlen = 0;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	655a      	str	r2, [r3, #84]	; 0x54
    mrl->cursor = 0;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <prv_terminal_print_prompt>:

/**
 * \brief           Print prompt string in terminal
 * \param[in]       mrl: \ref microrl_t working instance
 */
MICRORL_CFG_STATIC_INLINE void prv_terminal_print_prompt(microrl_t* mrl) {
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
    mrl->out_fn(mrl, MICRORL_CFG_PROMPT_COLOR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4909      	ldr	r1, [pc, #36]	; (8003998 <prv_terminal_print_prompt+0x34>)
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	4798      	blx	r3
    mrl->out_fn(mrl, mrl->prompt_ptr);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6912      	ldr	r2, [r2, #16]
 800397e:	4611      	mov	r1, r2
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	4798      	blx	r3
    mrl->out_fn(mrl, MICRORL_COLOR_DEFAULT);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4904      	ldr	r1, [pc, #16]	; (800399c <prv_terminal_print_prompt+0x38>)
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	4798      	blx	r3
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	08013b1c 	.word	0x08013b1c
 800399c:	08013b24 	.word	0x08013b24

080039a0 <prv_terminal_backspace>:
/**
 * \brief           Clear the last character in the terminal command line
 *                      and move the cursor to its position
 * \param[in]       mrl: \ref microrl_t working instance
 */
MICRORL_CFG_STATIC_INLINE void prv_terminal_backspace(microrl_t* mrl) {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
    mrl->out_fn(mrl, "\033[D \033[D");
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4903      	ldr	r1, [pc, #12]	; (80039bc <prv_terminal_backspace+0x1c>)
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	4798      	blx	r3
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	08013b2c 	.word	0x08013b2c

080039c0 <prv_terminal_newline>:

/**
 * \brief           Print end line symbol defined in \ref MICRORL_CFG_END_LINE config
 * \param[in]       mrl: \ref microrl_t working instance
 */
MICRORL_CFG_STATIC_INLINE void prv_terminal_newline(microrl_t* mrl) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
    mrl->out_fn(mrl, MICRORL_CFG_END_LINE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4903      	ldr	r1, [pc, #12]	; (80039dc <prv_terminal_newline+0x1c>)
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	4798      	blx	r3
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	08013b34 	.word	0x08013b34

080039e0 <prv_cursor_generate_move>:
 *                      The passed string must be at least 7 bytes long
 * \param[in]       str: The original string before moving the cursor
 * \param[in]       offset: Positive or negative interval to move cursor
 * \return          The original string after moving the cursor
 */
static char* prv_cursor_generate_move(char* str, int32_t offset) {
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
    char c = 'C';
 80039ea:	2343      	movs	r3, #67	; 0x43
 80039ec:	75fb      	strb	r3, [r7, #23]

    if (offset > 999) {
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039f4:	db02      	blt.n	80039fc <prv_cursor_generate_move+0x1c>
        offset = 999;
 80039f6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80039fa:	603b      	str	r3, [r7, #0]
    }
    if (offset < -999) {
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003a02:	dc01      	bgt.n	8003a08 <prv_cursor_generate_move+0x28>
        offset = -999;
 8003a04:	4b33      	ldr	r3, [pc, #204]	; (8003ad4 <prv_cursor_generate_move+0xf4>)
 8003a06:	603b      	str	r3, [r7, #0]
    }
    if (offset < 0) {
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	da05      	bge.n	8003a1a <prv_cursor_generate_move+0x3a>
        offset = -offset;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	425b      	negs	r3, r3
 8003a12:	603b      	str	r3, [r7, #0]
        c = 'D';
 8003a14:	2344      	movs	r3, #68	; 0x44
 8003a16:	75fb      	strb	r3, [r7, #23]
 8003a18:	e007      	b.n	8003a2a <prv_cursor_generate_move+0x4a>
    } else if (offset == 0) {
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d104      	bne.n	8003a2a <prv_cursor_generate_move+0x4a>
        *str = '\0';
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	701a      	strb	r2, [r3, #0]
        return str;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	e04e      	b.n	8003ac8 <prv_cursor_generate_move+0xe8>
    }

#if MICRORL_CFG_USE_LIBC_STDIO
    str += sprintf(str, "\033[%d%c", offset, c);
#else
    *str++ = '\033';
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	221b      	movs	r2, #27
 8003a32:	701a      	strb	r2, [r3, #0]
    *str++ = '[';
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	607a      	str	r2, [r7, #4]
 8003a3a:	225b      	movs	r2, #91	; 0x5b
 8003a3c:	701a      	strb	r2, [r3, #0]

    char tmp_str[4] = {0};
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]
    size_t i = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	613b      	str	r3, [r7, #16]

    while (offset > 0) {
 8003a46:	e01d      	b.n	8003a84 <prv_cursor_generate_move+0xa4>
        tmp_str[i++] = (offset % 10) + '0';
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	4b23      	ldr	r3, [pc, #140]	; (8003ad8 <prv_cursor_generate_move+0xf8>)
 8003a4c:	fb83 1302 	smull	r1, r3, r3, r2
 8003a50:	1099      	asrs	r1, r3, #2
 8003a52:	17d3      	asrs	r3, r2, #31
 8003a54:	1ac9      	subs	r1, r1, r3
 8003a56:	460b      	mov	r3, r1
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	1ad1      	subs	r1, r2, r3
 8003a60:	b2ca      	uxtb	r2, r1
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1c59      	adds	r1, r3, #1
 8003a66:	6139      	str	r1, [r7, #16]
 8003a68:	3230      	adds	r2, #48	; 0x30
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	3318      	adds	r3, #24
 8003a6e:	443b      	add	r3, r7
 8003a70:	f803 2c10 	strb.w	r2, [r3, #-16]
        offset /= 10;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	4a18      	ldr	r2, [pc, #96]	; (8003ad8 <prv_cursor_generate_move+0xf8>)
 8003a78:	fb82 1203 	smull	r1, r2, r2, r3
 8003a7c:	1092      	asrs	r2, r2, #2
 8003a7e:	17db      	asrs	r3, r3, #31
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	603b      	str	r3, [r7, #0]
    while (offset > 0) {
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	dcde      	bgt.n	8003a48 <prv_cursor_generate_move+0x68>
    }

    for (size_t j = 0; j < i; ++j) {            /* Write reversed numerals to result */
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	e00e      	b.n	8003aae <prv_cursor_generate_move+0xce>
        *str++ = tmp_str[i - j - 1];
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	1e5a      	subs	r2, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	1c59      	adds	r1, r3, #1
 8003a9c:	6079      	str	r1, [r7, #4]
 8003a9e:	3218      	adds	r2, #24
 8003aa0:	443a      	add	r2, r7
 8003aa2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8003aa6:	701a      	strb	r2, [r3, #0]
    for (size_t j = 0; j < i; ++j) {            /* Write reversed numerals to result */
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d3ec      	bcc.n	8003a90 <prv_cursor_generate_move+0xb0>
    }

    *str++ = c;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	7dfa      	ldrb	r2, [r7, #23]
 8003abe:	701a      	strb	r2, [r3, #0]
    *str = '\0';
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	701a      	strb	r2, [r3, #0]
#endif /* MICRORL_CFG_USE_LIBC_STDIO */

    return str;
 8003ac6:	687b      	ldr	r3, [r7, #4]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	fffffc19 	.word	0xfffffc19
 8003ad8:	66666667 	.word	0x66666667

08003adc <prv_terminal_move_cursor>:
 * \brief           Set cursor at current position + offset (positive or negative)
 *                      in terminal command line
 * \param[in]       mrl: \ref microrl_t working instance
 * \param[in]       offset: Positive or negative interval to move cursor
 */
static void prv_terminal_move_cursor(microrl_t* mrl, int32_t offset) {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
    if (offset == 0) {
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d015      	beq.n	8003b18 <prv_terminal_move_cursor+0x3c>
        return;
    }

    char str[16] = {0};
 8003aec:	2300      	movs	r3, #0
 8003aee:	60bb      	str	r3, [r7, #8]
 8003af0:	f107 030c 	add.w	r3, r7, #12
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	609a      	str	r2, [r3, #8]
    prv_cursor_generate_move(str, offset);
 8003afc:	f107 0308 	add.w	r3, r7, #8
 8003b00:	6839      	ldr	r1, [r7, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff ff6c 	bl	80039e0 <prv_cursor_generate_move>
    mrl->out_fn(mrl, str);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f107 0208 	add.w	r2, r7, #8
 8003b10:	4611      	mov	r1, r2
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4798      	blx	r3
 8003b16:	e000      	b.n	8003b1a <prv_terminal_move_cursor+0x3e>
        return;
 8003b18:	bf00      	nop
}
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <prv_terminal_print_line>:
 * \brief           Print command line buffer to specified position
 * \param[in]       mrl: \ref microrl_t working instance
 * \param[in]       pos: Start position from which the line will be printed
 * \param[in]       reset: Flag to reset the cursor position
 */
static void prv_terminal_print_line(microrl_t* mrl, int32_t pos, uint8_t reset) {
 8003b20:	b590      	push	{r4, r7, lr}
 8003b22:	b091      	sub	sp, #68	; 0x44
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	71fb      	strb	r3, [r7, #7]
    char str[MICRORL_CFG_PRINT_BUFFER_LEN] = {0};
 8003b2e:	2300      	movs	r3, #0
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	f107 0314 	add.w	r3, r7, #20
 8003b36:	2224      	movs	r2, #36	; 0x24
 8003b38:	2100      	movs	r1, #0
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f00c fb26 	bl	801018c <memset>
    char* str_ptr = str;
 8003b40:	f107 0310 	add.w	r3, r7, #16
 8003b44:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (reset) {
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d011      	beq.n	8003b70 <prv_terminal_print_line+0x50>
#if MICRORL_CFG_USE_CARRIAGE_RETURN
        *str_ptr++ = '\r';
 8003b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b52:	220d      	movs	r2, #13
 8003b54:	701a      	strb	r2, [r3, #0]
        str_ptr = prv_cursor_generate_move(str_ptr, strlen(mrl->prompt_ptr) + pos);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fc fb52 	bl	8000204 <strlen>
 8003b60:	4602      	mov	r2, r0
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	4413      	add	r3, r2
 8003b66:	4619      	mov	r1, r3
 8003b68:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003b6a:	f7ff ff39 	bl	80039e0 <prv_cursor_generate_move>
 8003b6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        str_ptr = prv_cursor_generate_move(str_ptr, -(MICRORL_ARRAYSIZE(mrl->cmdline_str) - 1 + strlen(mrl->prompt_ptr) + 2));
        str_ptr = prv_cursor_generate_move(str_ptr, strlen(mrl->prompt_ptr) + pos);
#endif /* MICRORL_CFG_USE_CARRIAGE_RETURN */
    }

    for (size_t i = pos; i < mrl->cmdlen; ++i) {
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b74:	e033      	b.n	8003bde <prv_terminal_print_line+0xbe>
        *str_ptr = mrl->cmdline_str[i];
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3314      	adds	r3, #20
 8003b7e:	781a      	ldrb	r2, [r3, #0]
 8003b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b82:	701a      	strb	r2, [r3, #0]

#if MICRORL_CFG_USE_ECHO_OFF
        if (((int32_t)i >= mrl->echo_off_pos) && (mrl->echo != MICRORL_ECHO_ON)) {
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	dc07      	bgt.n	8003ba0 <prv_terminal_print_line+0x80>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d002      	beq.n	8003ba0 <prv_terminal_print_line+0x80>
            *str_ptr = MICRORL_CFG_ECHO_OFF_MASK;
 8003b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9c:	222a      	movs	r2, #42	; 0x2a
 8003b9e:	701a      	strb	r2, [r3, #0]
        }
#endif /* MICRORL_CFG_USE_ECHO_OFF */

        ++str_ptr;
 8003ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	63fb      	str	r3, [r7, #60]	; 0x3c

        if ((size_t)(str_ptr - str) == strlen(str)) {
 8003ba6:	f107 0310 	add.w	r3, r7, #16
 8003baa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bac:	1ad4      	subs	r4, r2, r3
 8003bae:	f107 0310 	add.w	r3, r7, #16
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fc fb26 	bl	8000204 <strlen>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	429c      	cmp	r4, r3
 8003bbc:	d10c      	bne.n	8003bd8 <prv_terminal_print_line+0xb8>
            *str_ptr = '\0';
 8003bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
            mrl->out_fn(mrl, str);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f107 0210 	add.w	r2, r7, #16
 8003bcc:	4611      	mov	r1, r2
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	4798      	blx	r3
            str_ptr = str;
 8003bd2:	f107 0310 	add.w	r3, r7, #16
 8003bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (size_t i = pos; i < mrl->cmdlen; ++i) {
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bda:	3301      	adds	r3, #1
 8003bdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d3c6      	bcc.n	8003b76 <prv_terminal_print_line+0x56>
        }
    }

    if ((size_t)(str_ptr - str + 3 + 6 + 1) > MICRORL_ARRAYSIZE(str)) {
 8003be8:	f107 0310 	add.w	r3, r7, #16
 8003bec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	330a      	adds	r3, #10
 8003bf2:	2b28      	cmp	r3, #40	; 0x28
 8003bf4:	d90c      	bls.n	8003c10 <prv_terminal_print_line+0xf0>
        *str_ptr = '\0';
 8003bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]
        mrl->out_fn(mrl, str);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f107 0210 	add.w	r2, r7, #16
 8003c04:	4611      	mov	r1, r2
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	4798      	blx	r3
        str_ptr = str;
 8003c0a:	f107 0310 	add.w	r3, r7, #16
 8003c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    *str_ptr++ = '\033';                        /* Delete all past end of text */
 8003c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c16:	221b      	movs	r2, #27
 8003c18:	701a      	strb	r2, [r3, #0]
    *str_ptr++ = '[';
 8003c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c20:	225b      	movs	r2, #91	; 0x5b
 8003c22:	701a      	strb	r2, [r3, #0]
    *str_ptr++ = 'K';
 8003c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c2a:	224b      	movs	r2, #75	; 0x4b
 8003c2c:	701a      	strb	r2, [r3, #0]
    prv_cursor_generate_move(str_ptr, mrl->cursor - mrl->cmdlen);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	4619      	mov	r1, r3
 8003c3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c3c:	f7ff fed0 	bl	80039e0 <prv_cursor_generate_move>
    mrl->out_fn(mrl, str);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f107 0210 	add.w	r2, r7, #16
 8003c48:	4611      	mov	r1, r2
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	4798      	blx	r3
}
 8003c4e:	bf00      	nop
 8003c50:	3744      	adds	r7, #68	; 0x44
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd90      	pop	{r4, r7, pc}

08003c56 <prv_hist_next_record>:
/**
 * \brief           Set the next record start position to the passed index
 * \param[in]       rbuf_ptr: Pointer to \ref microrl_hist_rbuf_t structure
 * \param[in,out]   idx_ptr: Pointer to the current record
 */
MICRORL_CFG_STATIC_INLINE void prv_hist_next_record(microrl_hist_rbuf_t* rbuf_ptr, size_t* idx_ptr) {
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
    while (rbuf_ptr->ring_buf[++(*idx_ptr)] != '\0') {
 8003c60:	e009      	b.n	8003c76 <prv_hist_next_record+0x20>
        if (*idx_ptr >= MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf)) {
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b3f      	cmp	r3, #63	; 0x3f
 8003c68:	d905      	bls.n	8003c76 <prv_hist_next_record+0x20>
            *idx_ptr -= MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	601a      	str	r2, [r3, #0]
    while (rbuf_ptr->ring_buf[++(*idx_ptr)] != '\0') {
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	5cd3      	ldrb	r3, [r2, r3]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1ea      	bne.n	8003c62 <prv_hist_next_record+0xc>
        }
    }
}
 8003c8c:	bf00      	nop
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <prv_hist_erase_older>:

/**
 * \brief           Remove older record from ring buffer
 * \param[in,out]   rbuf_ptr: Pointer to \ref microrl_hist_rbuf_t structure
 */
static void prv_hist_erase_older(microrl_hist_rbuf_t* rbuf_ptr) {
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
    size_t new_pos = rbuf_ptr->head;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	60fb      	str	r3, [r7, #12]
    prv_hist_next_record(rbuf_ptr, &new_pos);
 8003ca8:	f107 030c 	add.w	r3, r7, #12
 8003cac:	4619      	mov	r1, r3
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff ffd1 	bl	8003c56 <prv_hist_next_record>
    rbuf_ptr->head = new_pos;
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003cba:	bf00      	nop
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <prv_hist_is_space_for_new>:
 * \brief           Check space in history buffer for new record
 * \param[in]       rbuf_ptr: Pointer to \ref microrl_hist_rbuf_t structure
 * \param[in]       len: Length of new record to save in history
 * \return          Member of \ref microrl_hist_status_t enumeration
 */
static microrl_hist_status_t prv_hist_is_space_for_new(microrl_hist_rbuf_t* rbuf_ptr, size_t len) {
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	6039      	str	r1, [r7, #0]
    if (rbuf_ptr->tail >= rbuf_ptr->head) {
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d30a      	bcc.n	8003cee <prv_hist_is_space_for_new+0x2c>
        if ((MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf) - rbuf_ptr->tail + rbuf_ptr->head - 1) > len) {
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	333f      	adds	r3, #63	; 0x3f
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d20c      	bcs.n	8003d04 <prv_hist_is_space_for_new+0x42>
            return MICRORL_HIST_NOT_FULL;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e00b      	b.n	8003d06 <prv_hist_is_space_for_new+0x44>
        }
    } else {
        if ((rbuf_ptr->head - rbuf_ptr->tail - 1) > len) {
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d201      	bcs.n	8003d04 <prv_hist_is_space_for_new+0x42>
            return MICRORL_HIST_NOT_FULL;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <prv_hist_is_space_for_new+0x44>
        }
    }

    return MICRORL_HIST_FULL;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <prv_hist_restore_line>:
 * \param[in]       rbuf_ptr: Pointer to \ref microrl_hist_rbuf_t structure
 * \param[out]      line_str: Line to restore from history
 * \param[in]       dir: Record search direction, member of \ref microrl_hist_dir_t
 * \return          Size of restored line. `0` is returned, if history is empty
 */
static size_t prv_hist_restore_line(microrl_hist_rbuf_t* rbuf_ptr, char* line_str, microrl_hist_dir_t dir) {
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b08c      	sub	sp, #48	; 0x30
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	71fb      	strb	r3, [r7, #7]
    size_t cnt = 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t i = rbuf_ptr->head;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	61bb      	str	r3, [r7, #24]
    while (i != rbuf_ptr->tail) {               /* Count history records */
 8003d2a:	e008      	b.n	8003d3e <prv_hist_restore_line+0x2c>
        prv_hist_next_record(rbuf_ptr, &i);
 8003d2c:	f107 0318 	add.w	r3, r7, #24
 8003d30:	4619      	mov	r1, r3
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f7ff ff8f 	bl	8003c56 <prv_hist_next_record>
        ++cnt;
 8003d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (i != rbuf_ptr->tail) {               /* Count history records */
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d1f1      	bne.n	8003d2c <prv_hist_restore_line+0x1a>
    }

    switch (dir) {
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d002      	beq.n	8003d54 <prv_hist_restore_line+0x42>
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d012      	beq.n	8003d78 <prv_hist_restore_line+0x66>
                return 0;                       /* Empty line */
            }
            break;
        }
        default:
            break;
 8003d52:	e025      	b.n	8003da0 <prv_hist_restore_line+0x8e>
            if (cnt < rbuf_ptr->count) {
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d201      	bcs.n	8003d62 <prv_hist_restore_line+0x50>
                return 0;                       /* Impossible state, return empty line */
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e077      	b.n	8003e52 <prv_hist_restore_line+0x140>
            if (cnt != rbuf_ptr->count) {
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d016      	beq.n	8003d9a <prv_hist_restore_line+0x88>
                ++rbuf_ptr->count;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	649a      	str	r2, [r3, #72]	; 0x48
            break;
 8003d76:	e010      	b.n	8003d9a <prv_hist_restore_line+0x88>
            if (rbuf_ptr->count == 0) {
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <prv_hist_restore_line+0x72>
                return 0;                       /* Empty line */
 8003d80:	2300      	movs	r3, #0
 8003d82:	e066      	b.n	8003e52 <prv_hist_restore_line+0x140>
            if (--rbuf_ptr->count == 0) {
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d88:	1e5a      	subs	r2, r3, #1
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	649a      	str	r2, [r3, #72]	; 0x48
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d103      	bne.n	8003d9e <prv_hist_restore_line+0x8c>
                return 0;                       /* Empty line */
 8003d96:	2300      	movs	r3, #0
 8003d98:	e05b      	b.n	8003e52 <prv_hist_restore_line+0x140>
            break;
 8003d9a:	bf00      	nop
 8003d9c:	e000      	b.n	8003da0 <prv_hist_restore_line+0x8e>
            break;
 8003d9e:	bf00      	nop
    }

    size_t idx = rbuf_ptr->head;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	617b      	str	r3, [r7, #20]
    size_t j = 0;
 8003da6:	2300      	movs	r3, #0
 8003da8:	62bb      	str	r3, [r7, #40]	; 0x28
    while ((cnt - j++) != rbuf_ptr->count) {    /* Find record for 'rbuf_ptr->count' counter */
 8003daa:	e005      	b.n	8003db8 <prv_hist_restore_line+0xa6>
        prv_hist_next_record(rbuf_ptr, &idx);
 8003dac:	f107 0314 	add.w	r3, r7, #20
 8003db0:	4619      	mov	r1, r3
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f7ff ff4f 	bl	8003c56 <prv_hist_next_record>
    while ((cnt - j++) != rbuf_ptr->count) {    /* Find record for 'rbuf_ptr->count' counter */
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	62ba      	str	r2, [r7, #40]	; 0x28
 8003dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dc0:	1ad2      	subs	r2, r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d1f0      	bne.n	8003dac <prv_hist_restore_line+0x9a>
    }

    ++idx;                                      /* Move position from `\0` marker */
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	617b      	str	r3, [r7, #20]

    size_t rec_len = 0;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
    size_t k = idx;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	623b      	str	r3, [r7, #32]
    while (rbuf_ptr->ring_buf[k] != '\0') {     /* Calculating the length of the found record */
 8003dd8:	e00b      	b.n	8003df2 <prv_hist_restore_line+0xe0>
        ++k;
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	623b      	str	r3, [r7, #32]
        if (k >= MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf)) {
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	2b3f      	cmp	r3, #63	; 0x3f
 8003de4:	d902      	bls.n	8003dec <prv_hist_restore_line+0xda>
            k -= MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf);
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	3b40      	subs	r3, #64	; 0x40
 8003dea:	623b      	str	r3, [r7, #32]
        }
        ++rec_len;
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	3301      	adds	r3, #1
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
    while (rbuf_ptr->ring_buf[k] != '\0') {     /* Calculating the length of the found record */
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	4413      	add	r3, r2
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1ed      	bne.n	8003dda <prv_hist_restore_line+0xc8>
    }

    memset(line_str, 0x00, MICRORL_CFG_CMDLINE_LEN);    /* Placing the found record on the command line */
 8003dfe:	223c      	movs	r2, #60	; 0x3c
 8003e00:	2100      	movs	r1, #0
 8003e02:	68b8      	ldr	r0, [r7, #8]
 8003e04:	f00c f9c2 	bl	801018c <memset>
    if ((idx + rec_len) < MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf)) {
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	4413      	add	r3, r2
 8003e0e:	2b3f      	cmp	r3, #63	; 0x3f
 8003e10:	d808      	bhi.n	8003e24 <prv_hist_restore_line+0x112>
        memcpy(line_str, rbuf_ptr->ring_buf + idx, rec_len);
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	4413      	add	r3, r2
 8003e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	68b8      	ldr	r0, [r7, #8]
 8003e1e:	f00c f98d 	bl	801013c <memcpy>
 8003e22:	e015      	b.n	8003e50 <prv_hist_restore_line+0x13e>
    } else {
        size_t part0 = MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf) - idx;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003e2a:	61fb      	str	r3, [r7, #28]
        memcpy(line_str, rbuf_ptr->ring_buf + idx, part0);
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	4413      	add	r3, r2
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	4619      	mov	r1, r3
 8003e36:	68b8      	ldr	r0, [r7, #8]
 8003e38:	f00c f980 	bl	801013c <memcpy>
        memcpy(line_str + part0, rbuf_ptr->ring_buf, rec_len - part0);
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	18d0      	adds	r0, r2, r3
 8003e42:	68f9      	ldr	r1, [r7, #12]
 8003e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f00c f976 	bl	801013c <memcpy>
    }

    return rec_len;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3730      	adds	r7, #48	; 0x30
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <prv_hist_search>:
/**
 * \brief           Restore record to command line from history buffer
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \param[in]       dir: Member of \ref microrl_hist_dir_t enumeration
 */
static void prv_hist_search(microrl_t* mrl, microrl_hist_dir_t dir) {
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	460b      	mov	r3, r1
 8003e64:	70fb      	strb	r3, [r7, #3]
#if MICRORL_CFG_USE_ECHO_OFF
    if (mrl->echo != MICRORL_ECHO_ON) {
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d122      	bne.n	8003eb6 <prv_hist_search+0x5c>
        return;
    }
#endif /* MICRORL_CFG_USE_ECHO_OFF */

    size_t len = prv_hist_restore_line(&mrl->ring_hist, mrl->cmdline_str, dir);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	3314      	adds	r3, #20
 8003e7a:	78fa      	ldrb	r2, [r7, #3]
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	f7ff ff48 	bl	8003d12 <prv_hist_restore_line>
 8003e82:	60f8      	str	r0, [r7, #12]
    memset(&mrl->cmdline_str[len], 0x00, MICRORL_ARRAYSIZE(mrl->cmdline_str) - 1 - len);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	3310      	adds	r3, #16
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	1d18      	adds	r0, r3, #4
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8003e94:	461a      	mov	r2, r3
 8003e96:	2100      	movs	r1, #0
 8003e98:	f00c f978 	bl	801018c <memset>
    mrl->cursor = mrl->cmdlen = len;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	655a      	str	r2, [r3, #84]	; 0x54
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	659a      	str	r2, [r3, #88]	; 0x58
    prv_terminal_print_line(mrl, 0, 1);
 8003eaa:	2201      	movs	r2, #1
 8003eac:	2100      	movs	r1, #0
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff fe36 	bl	8003b20 <prv_terminal_print_line>
 8003eb4:	e000      	b.n	8003eb8 <prv_hist_search+0x5e>
        return;
 8003eb6:	bf00      	nop
}
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <prv_hist_save_line>:
 * \brief           Put record to ring buffer
 * \param[in,out]   rbuf_ptr: Pointer to \ref microrl_hist_rbuf_t structure
 * \param[in]       line_str: Record to save in history
 * \param[in]       len: Record length
 */
static void prv_hist_save_line(microrl_hist_rbuf_t* rbuf_ptr, char* line_str, size_t len) {
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b096      	sub	sp, #88	; 0x58
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
    if (len > (MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf) - 1)) {
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b3f      	cmp	r3, #63	; 0x3f
 8003ece:	d869      	bhi.n	8003fa4 <prv_hist_save_line+0xe6>
    }

    /* Don't save the same line as the last record */
    char last_record_str[MICRORL_CFG_CMDLINE_LEN + 1];
    prv_hist_restore_line(rbuf_ptr, last_record_str,
                              rbuf_ptr->count == 1 ? MICRORL_HIST_DIR_NONE : MICRORL_HIST_DIR_UP);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    prv_hist_restore_line(rbuf_ptr, last_record_str,
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	bf14      	ite	ne
 8003ed8:	2301      	movne	r3, #1
 8003eda:	2300      	moveq	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f107 0314 	add.w	r3, r7, #20
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f7ff ff13 	bl	8003d12 <prv_hist_restore_line>
    if (strcmp(line_str, last_record_str) == 0) {
 8003eec:	f107 0314 	add.w	r3, r7, #20
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	68b8      	ldr	r0, [r7, #8]
 8003ef4:	f7fc f97c 	bl	80001f0 <strcmp>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d106      	bne.n	8003f0c <prv_hist_save_line+0x4e>
        rbuf_ptr->count = 0;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	649a      	str	r2, [r3, #72]	; 0x48
        return;
 8003f04:	e04f      	b.n	8003fa6 <prv_hist_save_line+0xe8>
    }

    /* Freeing up space for saving in the ring buffer */
    while (prv_hist_is_space_for_new(rbuf_ptr, len) == MICRORL_HIST_FULL) {
        prv_hist_erase_older(rbuf_ptr);
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f7ff fec7 	bl	8003c9a <prv_hist_erase_older>
    while (prv_hist_is_space_for_new(rbuf_ptr, len) == MICRORL_HIST_FULL) {
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f7ff fed7 	bl	8003cc2 <prv_hist_is_space_for_new>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0f5      	beq.n	8003f06 <prv_hist_save_line+0x48>
    }

    if (len < (MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf) - rbuf_ptr->tail - 1)) {  /* Store record */
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d20a      	bcs.n	8003f3e <prv_hist_save_line+0x80>
        memcpy(rbuf_ptr->ring_buf + rbuf_ptr->tail + 1, line_str, len);
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2e:	3301      	adds	r3, #1
 8003f30:	4413      	add	r3, r2
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f00c f900 	bl	801013c <memcpy>
 8003f3c:	e018      	b.n	8003f70 <prv_hist_save_line+0xb2>
    } else {
        size_t part_len = MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf) - rbuf_ptr->tail - 1;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8003f46:	657b      	str	r3, [r7, #84]	; 0x54
        memcpy(rbuf_ptr->ring_buf + rbuf_ptr->tail + 1, line_str, part_len);
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4e:	3301      	adds	r3, #1
 8003f50:	4413      	add	r3, r2
 8003f52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f00c f8f0 	bl	801013c <memcpy>
        memcpy(rbuf_ptr->ring_buf, line_str + part_len, len - part_len);
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f62:	18d1      	adds	r1, r2, r3
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f00c f8e6 	bl	801013c <memcpy>
    }

    rbuf_ptr->tail = rbuf_ptr->tail + len + 1;  /* Update position pointer and navigation counter */
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4413      	add	r3, r2
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	645a      	str	r2, [r3, #68]	; 0x44
    if (rbuf_ptr->tail >= MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf)) {
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	2b3f      	cmp	r3, #63	; 0x3f
 8003f84:	d905      	bls.n	8003f92 <prv_hist_save_line+0xd4>
        rbuf_ptr->tail -= MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8a:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	645a      	str	r2, [r3, #68]	; 0x44
    }
    rbuf_ptr->ring_buf[rbuf_ptr->tail] = 0;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	2100      	movs	r1, #0
 8003f9a:	54d1      	strb	r1, [r2, r3]
    rbuf_ptr->count = 0;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	649a      	str	r2, [r3, #72]	; 0x48
 8003fa2:	e000      	b.n	8003fa6 <prv_hist_save_line+0xe8>
        return;
 8003fa4:	bf00      	nop
}
 8003fa6:	3758      	adds	r7, #88	; 0x58
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <prv_escape_process>:
 * \brief           Handle ANSI escape code sequences
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \param[in]       ch: Input character
 * \return          '1' if full escape sequence is processed, '0' otherwise
 */
static uint8_t prv_escape_process(microrl_t* mrl, char ch) {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	70fb      	strb	r3, [r7, #3]
    if (ch == '[') {
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	2b5b      	cmp	r3, #91	; 0x5b
 8003fbc:	d105      	bne.n	8003fca <prv_escape_process+0x1e>
        mrl->esc_code = MICRORL_ESC_BRACKET;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        return 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e0a7      	b.n	800411a <prv_escape_process+0x16e>
    } else if (ch == MICRORL_ESC_ANSI_DEL) {    /* Alt+BACKSPACE */
 8003fca:	78fb      	ldrb	r3, [r7, #3]
 8003fcc:	2b7f      	cmp	r3, #127	; 0x7f
 8003fce:	d10b      	bne.n	8003fe8 <prv_escape_process+0x3c>
        prv_cmdline_buf_delete(mrl);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff fc7e 	bl	80038d2 <prv_cmdline_buf_delete>
        prv_terminal_print_line(mrl, mrl->cursor, 0);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fda:	2200      	movs	r2, #0
 8003fdc:	4619      	mov	r1, r3
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff fd9e 	bl	8003b20 <prv_terminal_print_line>
        return 1;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e098      	b.n	800411a <prv_escape_process+0x16e>
    } else if (mrl->esc_code == MICRORL_ESC_BRACKET) {
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d159      	bne.n	80040a6 <prv_escape_process+0xfa>
        if (ch == 'A') {                        /* UP */
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	2b41      	cmp	r3, #65	; 0x41
 8003ff6:	d105      	bne.n	8004004 <prv_escape_process+0x58>
#if MICRORL_CFG_USE_HISTORY
            prv_hist_search(mrl, MICRORL_HIST_DIR_UP);
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff ff2d 	bl	8003e5a <prv_hist_search>
#endif /* MICRORL_CFG_USE_HISTORY */
            return 1;
 8004000:	2301      	movs	r3, #1
 8004002:	e08a      	b.n	800411a <prv_escape_process+0x16e>
        } else if (ch == 'B') {                 /* DOWN */
 8004004:	78fb      	ldrb	r3, [r7, #3]
 8004006:	2b42      	cmp	r3, #66	; 0x42
 8004008:	d105      	bne.n	8004016 <prv_escape_process+0x6a>
#if MICRORL_CFG_USE_HISTORY
            prv_hist_search(mrl, MICRORL_HIST_DIR_DOWN);
 800400a:	2102      	movs	r1, #2
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff ff24 	bl	8003e5a <prv_hist_search>
#endif /* MICRORL_CFG_USE_HISTORY */
            return 1;
 8004012:	2301      	movs	r3, #1
 8004014:	e081      	b.n	800411a <prv_escape_process+0x16e>
        } else if (ch == 'C') {                 /* RIGHT */
 8004016:	78fb      	ldrb	r3, [r7, #3]
 8004018:	2b43      	cmp	r3, #67	; 0x43
 800401a:	d110      	bne.n	800403e <prv_escape_process+0x92>
            if (mrl->cursor < mrl->cmdlen) {
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004024:	429a      	cmp	r2, r3
 8004026:	d208      	bcs.n	800403a <prv_escape_process+0x8e>
                prv_terminal_move_cursor(mrl, 1);
 8004028:	2101      	movs	r1, #1
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff fd56 	bl	8003adc <prv_terminal_move_cursor>
                ++mrl->cursor;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	659a      	str	r2, [r3, #88]	; 0x58
            }
            return 1;
 800403a:	2301      	movs	r3, #1
 800403c:	e06d      	b.n	800411a <prv_escape_process+0x16e>
        } else if (ch == 'D') {                 /* LEFT */
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	2b44      	cmp	r3, #68	; 0x44
 8004042:	d10f      	bne.n	8004064 <prv_escape_process+0xb8>
            if (mrl->cursor > 0) {
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004048:	2b00      	cmp	r3, #0
 800404a:	d009      	beq.n	8004060 <prv_escape_process+0xb4>
                prv_terminal_move_cursor(mrl, -1);
 800404c:	f04f 31ff 	mov.w	r1, #4294967295
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff fd43 	bl	8003adc <prv_terminal_move_cursor>
                --mrl->cursor;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405a:	1e5a      	subs	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	659a      	str	r2, [r3, #88]	; 0x58
            }
            return 1;
 8004060:	2301      	movs	r3, #1
 8004062:	e05a      	b.n	800411a <prv_escape_process+0x16e>
        } else if (ch == '7' || ch == '1') {
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	2b37      	cmp	r3, #55	; 0x37
 8004068:	d002      	beq.n	8004070 <prv_escape_process+0xc4>
 800406a:	78fb      	ldrb	r3, [r7, #3]
 800406c:	2b31      	cmp	r3, #49	; 0x31
 800406e:	d105      	bne.n	800407c <prv_escape_process+0xd0>
            mrl->esc_code = MICRORL_ESC_HOME;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            return 0;
 8004078:	2300      	movs	r3, #0
 800407a:	e04e      	b.n	800411a <prv_escape_process+0x16e>
        } else if (ch == '8' || ch == '4') {
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	2b38      	cmp	r3, #56	; 0x38
 8004080:	d002      	beq.n	8004088 <prv_escape_process+0xdc>
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	2b34      	cmp	r3, #52	; 0x34
 8004086:	d105      	bne.n	8004094 <prv_escape_process+0xe8>
            mrl->esc_code = MICRORL_ESC_END;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            return 0;
 8004090:	2300      	movs	r3, #0
 8004092:	e042      	b.n	800411a <prv_escape_process+0x16e>
        } else if (ch == '3') {
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	2b33      	cmp	r3, #51	; 0x33
 8004098:	d13e      	bne.n	8004118 <prv_escape_process+0x16c>
            mrl->esc_code = MICRORL_ESC_DEL;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2203      	movs	r2, #3
 800409e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            return 0;
 80040a2:	2300      	movs	r3, #0
 80040a4:	e039      	b.n	800411a <prv_escape_process+0x16e>
        }
    } else if (ch == '~') {
 80040a6:	78fb      	ldrb	r3, [r7, #3]
 80040a8:	2b7e      	cmp	r3, #126	; 0x7e
 80040aa:	d135      	bne.n	8004118 <prv_escape_process+0x16c>
        if (mrl->esc_code == MICRORL_ESC_HOME) {/* HOME */
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d10b      	bne.n	80040ce <prv_escape_process+0x122>
            prv_terminal_move_cursor(mrl, -mrl->cursor);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ba:	425b      	negs	r3, r3
 80040bc:	4619      	mov	r1, r3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff fd0c 	bl	8003adc <prv_terminal_move_cursor>
            mrl->cursor = 0;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	659a      	str	r2, [r3, #88]	; 0x58
            return 1;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e025      	b.n	800411a <prv_escape_process+0x16e>
        } else if (mrl->esc_code == MICRORL_ESC_END) {  /* END */
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d10e      	bne.n	80040f6 <prv_escape_process+0x14a>
            prv_terminal_move_cursor(mrl, mrl->cmdlen - mrl->cursor);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	4619      	mov	r1, r3
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff fcf9 	bl	8003adc <prv_terminal_move_cursor>
            mrl->cursor = mrl->cmdlen;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	659a      	str	r2, [r3, #88]	; 0x58
            return 1;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e011      	b.n	800411a <prv_escape_process+0x16e>
        } else if (mrl->esc_code == MICRORL_ESC_DEL) {  /* DELETE */
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d10b      	bne.n	8004118 <prv_escape_process+0x16c>
            prv_cmdline_buf_delete(mrl);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff fbe6 	bl	80038d2 <prv_cmdline_buf_delete>
            prv_terminal_print_line(mrl, mrl->cursor, 0);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410a:	2200      	movs	r2, #0
 800410c:	4619      	mov	r1, r3
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff fd06 	bl	8003b20 <prv_terminal_print_line>
            return 1;
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <prv_escape_process+0x16e>
        }
    }

    return 1;                                   /* Unknown escape sequence, stop processing */
 8004118:	2301      	movs	r3, #1
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <prv_handle_newline>:
/**
 * \brief           Processing input string from command line and calling execute_fn() callback
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
static microrlr_t prv_handle_newline(microrl_t* mrl) {
 8004124:	b580      	push	{r7, lr}
 8004126:	b08c      	sub	sp, #48	; 0x30
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
    const char* tkn_str_arr[MICRORL_CFG_CMD_TOKEN_NMB] = {0};
 800412c:	f107 030c 	add.w	r3, r7, #12
 8004130:	2220      	movs	r2, #32
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f00c f829 	bl	801018c <memset>
    uint8_t tkn_cnt = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	72fb      	strb	r3, [r7, #11]
    microrlr_t status = microrlOK;
 800413e:	2300      	movs	r3, #0
 8004140:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    prv_terminal_newline(mrl);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff fc3b 	bl	80039c0 <prv_terminal_newline>

    if (mrl->cmdlen == 0) {
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414e:	2b00      	cmp	r3, #0
 8004150:	d047      	beq.n	80041e2 <prv_handle_newline+0xbe>
        goto exit;
    }

#if MICRORL_CFG_USE_HISTORY
#if MICRORL_CFG_USE_ECHO_OFF
    if (mrl->echo == MICRORL_ECHO_ON) {
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8004158:	2b01      	cmp	r3, #1
 800415a:	d10a      	bne.n	8004172 <prv_handle_newline+0x4e>
#endif /* MICRORL_CFG_USE_ECHO_OFF */
        prv_hist_save_line(&mrl->ring_hist, mrl->cmdline_str, mrl->cmdlen);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f103 0114 	add.w	r1, r3, #20
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416c:	461a      	mov	r2, r3
 800416e:	f7ff fea6 	bl	8003ebe <prv_hist_save_line>
    }
#endif /* MICRORL_CFG_USE_ECHO_OFF */
#endif /* MICRORL_CFG_USE_HISTORY */

#if MICRORL_CFG_USE_ECHO_OFF
    if (mrl->echo == MICRORL_ECHO_ONCE && mrl->cmdline_str[mrl->echo_off_pos] != '\0') {
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8004178:	2b00      	cmp	r3, #0
 800417a:	d110      	bne.n	800419e <prv_handle_newline+0x7a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	4413      	add	r3, r2
 8004186:	7d1b      	ldrb	r3, [r3, #20]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <prv_handle_newline+0x7a>
        microrl_set_echo(mrl, MICRORL_ECHO_ON);
 800418c:	2101      	movs	r1, #1
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f9f5 	bl	800457e <microrl_set_echo>
        mrl->echo_off_pos = -1;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f04f 32ff 	mov.w	r2, #4294967295
 800419a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }
#endif /* MICRORL_CFG_USE_ECHO_OFF */

    status = prv_cmdline_buf_split(mrl, tkn_str_arr, &tkn_cnt, mrl->cmdlen);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a2:	f107 020b 	add.w	r2, r7, #11
 80041a6:	f107 010c 	add.w	r1, r7, #12
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff fa94 	bl	80036d8 <prv_cmdline_buf_split>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == microrlOK) {
 80041b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d108      	bne.n	80041d0 <prv_handle_newline+0xac>

        exec_status = mrl->exec_fn(mrl, tkn_cnt, tkn_str_arr);

        MICRORL_POST_COMMAND_HOOK(mrl, exec_status, tkn_cnt, tkn_str_arr);
#else
        mrl->exec_fn(mrl, tkn_cnt, tkn_str_arr);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	7afa      	ldrb	r2, [r7, #11]
 80041c4:	4611      	mov	r1, r2
 80041c6:	f107 020c 	add.w	r2, r7, #12
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	4798      	blx	r3
 80041ce:	e009      	b.n	80041e4 <prv_handle_newline+0xc0>
#endif /* MICRORL_CFG_USE_COMMAND_HOOKS */
    } else {
        mrl->out_fn(mrl, "ERROR: too many tokens");
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4909      	ldr	r1, [pc, #36]	; (80041fc <prv_handle_newline+0xd8>)
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4798      	blx	r3
        prv_terminal_newline(mrl);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff fbf0 	bl	80039c0 <prv_terminal_newline>
 80041e0:	e000      	b.n	80041e4 <prv_handle_newline+0xc0>
        goto exit;
 80041e2:	bf00      	nop
    }

exit:
    prv_terminal_print_prompt(mrl);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff fbbd 	bl	8003964 <prv_terminal_print_prompt>
    prv_cmdline_buf_reset(mrl);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff fba5 	bl	800393a <prv_cmdline_buf_reset>

    return status;
 80041f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3730      	adds	r7, #48	; 0x30
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	08013b38 	.word	0x08013b38

08004200 <prv_complite_total_len>:
/**
 * \brief           Calculate total length of all completion tokens
 * \param[in]       arr: Completion tokens array
 * \return          Total length of all completion tokens
 */
static size_t prv_complite_total_len(const char* const * argv) {
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
    size_t i;
    const char* short_str = (const char*)argv[0];
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	613b      	str	r3, [r7, #16]
    size_t shortlen = strlen(short_str);
 800420e:	6938      	ldr	r0, [r7, #16]
 8004210:	f7fb fff8 	bl	8000204 <strlen>
 8004214:	60f8      	str	r0, [r7, #12]

    for (i = 0; argv[i] != NULL; ++i) {
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	e018      	b.n	800424e <prv_complite_total_len+0x4e>
        if (strlen(argv[i]) < shortlen) {
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	4413      	add	r3, r2
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7fb ffec 	bl	8000204 <strlen>
 800422c:	4602      	mov	r2, r0
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4293      	cmp	r3, r2
 8004232:	d909      	bls.n	8004248 <prv_complite_total_len+0x48>
            short_str = argv[i];
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	4413      	add	r3, r2
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	613b      	str	r3, [r7, #16]
            shortlen = strlen(short_str);
 8004240:	6938      	ldr	r0, [r7, #16]
 8004242:	f7fb ffdf 	bl	8000204 <strlen>
 8004246:	60f8      	str	r0, [r7, #12]
    for (i = 0; argv[i] != NULL; ++i) {
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	3301      	adds	r3, #1
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	4413      	add	r3, r2
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1df      	bne.n	800421c <prv_complite_total_len+0x1c>
        }
    }

    for (i = 0; i < shortlen; ++i) {
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	e01f      	b.n	80042a2 <prv_complite_total_len+0xa2>
        for (size_t j = 0; argv[j] != NULL; ++j) {
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	e012      	b.n	800428e <prv_complite_total_len+0x8e>
            if (short_str[i] != argv[j][i]) {
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	4413      	add	r3, r2
 800426e:	781a      	ldrb	r2, [r3, #0]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	440b      	add	r3, r1
 8004278:	6819      	ldr	r1, [r3, #0]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	440b      	add	r3, r1
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d001      	beq.n	8004288 <prv_complite_total_len+0x88>
                return i;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	e011      	b.n	80042ac <prv_complite_total_len+0xac>
        for (size_t j = 0; argv[j] != NULL; ++j) {
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	3301      	adds	r3, #1
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	4413      	add	r3, r2
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1e5      	bne.n	8004268 <prv_complite_total_len+0x68>
    for (i = 0; i < shortlen; ++i) {
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	3301      	adds	r3, #1
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d3db      	bcc.n	8004262 <prv_complite_total_len+0x62>
            }
        }
    }

    return i;
 80042aa:	697b      	ldr	r3, [r7, #20]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <prv_complite_get_input>:
 * \brief           Auto-complete activities to complete input in
 *                      command line
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
static microrlr_t prv_complite_get_input(microrl_t* mrl) {
 80042b4:	b590      	push	{r4, r7, lr}
 80042b6:	b091      	sub	sp, #68	; 0x44
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
    /* Skip completion when echo is OFF */
    if (mrl->echo != MICRORL_ECHO_ON) {
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d001      	beq.n	80042ca <prv_complite_get_input+0x16>
        return microrlOK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	e0da      	b.n	8004480 <prv_complite_get_input+0x1cc>
    }

    uint8_t tkn_cnt = 0;
 80042ca:	2300      	movs	r3, #0
 80042cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    const char* tkn_str_arr[MICRORL_CFG_CMD_TOKEN_NMB] = {0};
 80042d0:	f107 0308 	add.w	r3, r7, #8
 80042d4:	2220      	movs	r2, #32
 80042d6:	2100      	movs	r1, #0
 80042d8:	4618      	mov	r0, r3
 80042da:	f00b ff57 	bl	801018c <memset>
    char** cmplt_tkn_arr;

    if (prv_cmdline_buf_split(mrl, tkn_str_arr, &tkn_cnt, mrl->cursor) != microrlOK) {
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e2:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 80042e6:	f107 0108 	add.w	r1, r7, #8
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff f9f4 	bl	80036d8 <prv_cmdline_buf_split>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <prv_complite_get_input+0x46>
        return microrlERRCPLT;
 80042f6:	2305      	movs	r3, #5
 80042f8:	e0c2      	b.n	8004480 <prv_complite_get_input+0x1cc>
    }

    if (mrl->cmdline_str[mrl->cursor - 1] == '\0') {
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fe:	3b01      	subs	r3, #1
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	4413      	add	r3, r2
 8004304:	7d1b      	ldrb	r3, [r3, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d113      	bne.n	8004332 <prv_complite_get_input+0x7e>
        /* Last char is whitespace */
        tkn_str_arr[tkn_cnt++] = "";
 800430a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	f887 202b 	strb.w	r2, [r7, #43]	; 0x2b
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	3340      	adds	r3, #64	; 0x40
 800431a:	443b      	add	r3, r7
 800431c:	4a5a      	ldr	r2, [pc, #360]	; (8004488 <prv_complite_get_input+0x1d4>)
 800431e:	f843 2c38 	str.w	r2, [r3, #-56]
        tkn_str_arr[tkn_cnt] = NULL;
 8004322:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	3340      	adds	r3, #64	; 0x40
 800432a:	443b      	add	r3, r7
 800432c:	2200      	movs	r2, #0
 800432e:	f843 2c38 	str.w	r2, [r3, #-56]
    }

    cmplt_tkn_arr = mrl->get_completion_fn(mrl, tkn_cnt, tkn_str_arr);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800433a:	4611      	mov	r1, r2
 800433c:	f107 0208 	add.w	r2, r7, #8
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	4798      	blx	r3
 8004344:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (cmplt_tkn_arr[0] == NULL) {
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <prv_complite_get_input+0x9e>
        return microrlERRCPLT;
 800434e:	2305      	movs	r3, #5
 8004350:	e096      	b.n	8004480 <prv_complite_get_input+0x1cc>
    }

    size_t i = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t len;
    size_t pos = mrl->cursor;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435a:	637b      	str	r3, [r7, #52]	; 0x34

    if (cmplt_tkn_arr[1] == NULL) {
 800435c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435e:	3304      	adds	r3, #4
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <prv_complite_get_input+0xc0>
        len = strlen(cmplt_tkn_arr[0]);
 8004366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fb ff4a 	bl	8000204 <strlen>
 8004370:	63b8      	str	r0, [r7, #56]	; 0x38
 8004372:	e028      	b.n	80043c6 <prv_complite_get_input+0x112>
    } else {
        len = prv_complite_total_len((const char* const *)cmplt_tkn_arr);
 8004374:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004376:	f7ff ff43 	bl	8004200 <prv_complite_total_len>
 800437a:	63b8      	str	r0, [r7, #56]	; 0x38
        prv_terminal_newline(mrl);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff fb1f 	bl	80039c0 <prv_terminal_newline>
        while (cmplt_tkn_arr[i] != NULL) {
 8004382:	e011      	b.n	80043a8 <prv_complite_get_input+0xf4>
            mrl->out_fn(mrl, cmplt_tkn_arr[i]);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800438a:	0092      	lsls	r2, r2, #2
 800438c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800438e:	440a      	add	r2, r1
 8004390:	6812      	ldr	r2, [r2, #0]
 8004392:	4611      	mov	r1, r2
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	4798      	blx	r3
            mrl->out_fn(mrl, " ");
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	493b      	ldr	r1, [pc, #236]	; (800448c <prv_complite_get_input+0x1d8>)
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4798      	blx	r3
            ++i;
 80043a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a4:	3301      	adds	r3, #1
 80043a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (cmplt_tkn_arr[i] != NULL) {
 80043a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043ae:	4413      	add	r3, r2
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e6      	bne.n	8004384 <prv_complite_get_input+0xd0>
        }
        prv_terminal_newline(mrl);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff fb02 	bl	80039c0 <prv_terminal_newline>
        prv_terminal_print_prompt(mrl);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff fad1 	bl	8003964 <prv_terminal_print_prompt>
        pos = 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if (len != 0) {
 80043c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d021      	beq.n	8004410 <prv_complite_get_input+0x15c>
        prv_cmdline_buf_insert_text(mrl, cmplt_tkn_arr[0] + strlen(tkn_str_arr[tkn_cnt - 1]),
 80043cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ce:	681c      	ldr	r4, [r3, #0]
 80043d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043d4:	3b01      	subs	r3, #1
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	3340      	adds	r3, #64	; 0x40
 80043da:	443b      	add	r3, r7
 80043dc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fb ff0f 	bl	8000204 <strlen>
 80043e6:	4603      	mov	r3, r0
 80043e8:	441c      	add	r4, r3
                                    len - strlen(tkn_str_arr[tkn_cnt - 1]));
 80043ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043ee:	3b01      	subs	r3, #1
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	3340      	adds	r3, #64	; 0x40
 80043f4:	443b      	add	r3, r7
 80043f6:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fb ff02 	bl	8000204 <strlen>
 8004400:	4602      	mov	r2, r0
        prv_cmdline_buf_insert_text(mrl, cmplt_tkn_arr[0] + strlen(tkn_str_arr[tkn_cnt - 1]),
 8004402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004404:	1a9b      	subs	r3, r3, r2
 8004406:	461a      	mov	r2, r3
 8004408:	4621      	mov	r1, r4
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff f9be 	bl	800378c <prv_cmdline_buf_insert_text>
    }

    /* Insert end space if completion is performed */
    if (cmplt_tkn_arr[1] == NULL) {
 8004410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004412:	3304      	adds	r3, #4
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d104      	bne.n	8004424 <prv_complite_get_input+0x170>
        prv_cmdline_buf_insert_text(mrl, " ", 1);
 800441a:	2201      	movs	r2, #1
 800441c:	491b      	ldr	r1, [pc, #108]	; (800448c <prv_complite_get_input+0x1d8>)
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff f9b4 	bl	800378c <prv_cmdline_buf_insert_text>
    }

    /* Restore whitespaces replaced with '0' when command line buffer was split */
    if (tkn_cnt != 0) {
 8004424:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004428:	2b00      	cmp	r3, #0
 800442a:	d022      	beq.n	8004472 <prv_complite_get_input+0x1be>
        for (size_t i = 0; i < (size_t)(tkn_cnt - 1); ++i) {
 800442c:	2300      	movs	r3, #0
 800442e:	633b      	str	r3, [r7, #48]	; 0x30
 8004430:	e018      	b.n	8004464 <prv_complite_get_input+0x1b0>
            memset((char*)tkn_str_arr[i] + strlen(tkn_str_arr[i]), ' ', 1);
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	3340      	adds	r3, #64	; 0x40
 8004438:	443b      	add	r3, r7
 800443a:	f853 4c38 	ldr.w	r4, [r3, #-56]
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	3340      	adds	r3, #64	; 0x40
 8004444:	443b      	add	r3, r7
 8004446:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800444a:	4618      	mov	r0, r3
 800444c:	f7fb feda 	bl	8000204 <strlen>
 8004450:	4603      	mov	r3, r0
 8004452:	4423      	add	r3, r4
 8004454:	2201      	movs	r2, #1
 8004456:	2120      	movs	r1, #32
 8004458:	4618      	mov	r0, r3
 800445a:	f00b fe97 	bl	801018c <memset>
        for (size_t i = 0; i < (size_t)(tkn_cnt - 1); ++i) {
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	3301      	adds	r3, #1
 8004462:	633b      	str	r3, [r7, #48]	; 0x30
 8004464:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004468:	3b01      	subs	r3, #1
 800446a:	461a      	mov	r2, r3
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	4293      	cmp	r3, r2
 8004470:	d3df      	bcc.n	8004432 <prv_complite_get_input+0x17e>
        }
    }

    prv_terminal_print_line(mrl, pos, 0);
 8004472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004474:	2200      	movs	r2, #0
 8004476:	4619      	mov	r1, r3
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff fb51 	bl	8003b20 <prv_terminal_print_line>

    return microrlOK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3744      	adds	r7, #68	; 0x44
 8004484:	46bd      	mov	sp, r7
 8004486:	bd90      	pop	{r4, r7, pc}
 8004488:	08013b50 	.word	0x08013b50
 800448c:	08013b54 	.word	0x08013b54

08004490 <microrl_init>:
 * \param[in,out]   mrl: microRL working instance
 * \param[in]       out_fn: Output function used for print operation
 * \brief           exec_fn: Command execute callback function
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
microrlr_t microrl_init(microrl_t* mrl, microrl_output_fn out_fn, microrl_exec_fn exec_fn) {
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
    if (mrl == NULL || out_fn == NULL || exec_fn == NULL) {
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <microrl_init+0x1e>
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <microrl_init+0x1e>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <microrl_init+0x22>
        return microrlERRPAR;
 80044ae:	2302      	movs	r3, #2
 80044b0:	e01a      	b.n	80044e8 <microrl_init+0x58>
    }

    memset(mrl, 0x00, sizeof(microrl_t));
 80044b2:	22b8      	movs	r2, #184	; 0xb8
 80044b4:	2100      	movs	r1, #0
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f00b fe68 	bl	801018c <memset>
    mrl->out_fn = out_fn;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	601a      	str	r2, [r3, #0]
    mrl->exec_fn = exec_fn;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	605a      	str	r2, [r3, #4]
    mrl->prompt_ptr = MICRORL_CFG_PROMPT_STRING;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4a09      	ldr	r2, [pc, #36]	; (80044f0 <microrl_init+0x60>)
 80044cc:	611a      	str	r2, [r3, #16]

#if MICRORL_CFG_PROMPT_ON_INIT
    prv_terminal_print_prompt(mrl);
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f7ff fa48 	bl	8003964 <prv_terminal_print_prompt>
#endif /* MICRORL_CFG_PROMPT_ON_INIT */

#if MICRORL_CFG_USE_ECHO_OFF
    mrl->echo = MICRORL_ECHO_ON;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    mrl->echo_off_pos = -1;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f04f 32ff 	mov.w	r2, #4294967295
 80044e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif /* MICRORL_CFG_USE_ECHO_OFF */

    return microrlOK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	08013b58 	.word	0x08013b58

080044f4 <microrl_set_execute_callback>:
 * \brief           Set pointer to command execute callback, that called when user press 'Enter'
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \param[in]       exec_fn: Command execute callback
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
microrlr_t microrl_set_execute_callback(microrl_t* mrl, microrl_exec_fn exec_fn) {
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
    if (mrl == NULL || exec_fn == NULL) {
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <microrl_set_execute_callback+0x16>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <microrl_set_execute_callback+0x1a>
        return microrlERRPAR;
 800450a:	2302      	movs	r3, #2
 800450c:	e003      	b.n	8004516 <microrl_set_execute_callback+0x22>
    }

    mrl->exec_fn = exec_fn;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	605a      	str	r2, [r3, #4]

    return microrlOK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <microrl_set_complete_callback>:
 * \brief           Set pointer to input complition callback, that called when user press 'Tab'
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \param[in]       get_completion_fn: Auto-complete input string callback
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
microrlr_t microrl_set_complete_callback(microrl_t* mrl, microrl_get_compl_fn get_completion_fn) {
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	6039      	str	r1, [r7, #0]
    if (mrl == NULL || get_completion_fn == NULL) {
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <microrl_set_complete_callback+0x16>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <microrl_set_complete_callback+0x1a>
        return microrlERRPAR;
 8004538:	2302      	movs	r3, #2
 800453a:	e003      	b.n	8004544 <microrl_set_complete_callback+0x22>
    }

    mrl->get_completion_fn = get_completion_fn;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	609a      	str	r2, [r3, #8]

    return microrlOK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <microrl_set_sigint_callback>:
 * \brief           Set callback for Ctrl+C terminal signal
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \param[in]       sigint_fn: Ctrl+C terminal signal callback
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
microrlr_t microrl_set_sigint_callback(microrl_t* mrl, microrl_sigint_fn sigint_fn) {
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
    if (mrl == NULL || sigint_fn == NULL) {
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <microrl_set_sigint_callback+0x16>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <microrl_set_sigint_callback+0x1a>
        return microrlERRPAR;
 8004566:	2302      	movs	r3, #2
 8004568:	e003      	b.n	8004572 <microrl_set_sigint_callback+0x22>
    }

    mrl->sigint_fn = sigint_fn;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	60da      	str	r2, [r3, #12]

    return microrlOK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <microrl_set_echo>:
 *
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \param[in]       echo: Member of \ref microrl_echo_t enumeration
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
microrlr_t microrl_set_echo(microrl_t* mrl, microrl_echo_t echo) {
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	460b      	mov	r3, r1
 8004588:	70fb      	strb	r3, [r7, #3]
    if (mrl == NULL) {
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <microrl_set_echo+0x16>
        return microrlERRPAR;
 8004590:	2302      	movs	r3, #2
 8004592:	e004      	b.n	800459e <microrl_set_echo+0x20>
    }

    mrl->echo = echo;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

    return microrlOK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
	...

080045ac <prv_control_char_process>:
 * \brief           Process ANSI control key
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \param[in]       ch: Input char to process
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
static microrlr_t prv_control_char_process(microrl_t* mrl, char ch) {
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	70fb      	strb	r3, [r7, #3]
    switch (ch) {
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	2b1b      	cmp	r3, #27
 80045bc:	dc40      	bgt.n	8004640 <prv_control_char_process+0x94>
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f340 80ed 	ble.w	800479e <prv_control_char_process+0x1f2>
 80045c4:	3b01      	subs	r3, #1
 80045c6:	2b1a      	cmp	r3, #26
 80045c8:	f200 80e9 	bhi.w	800479e <prv_control_char_process+0x1f2>
 80045cc:	a201      	add	r2, pc, #4	; (adr r2, 80045d4 <prv_control_char_process+0x28>)
 80045ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d2:	bf00      	nop
 80045d4:	080046bf 	.word	0x080046bf
 80045d8:	080046f5 	.word	0x080046f5
 80045dc:	08004789 	.word	0x08004789
 80045e0:	0800475b 	.word	0x0800475b
 80045e4:	080046a3 	.word	0x080046a3
 80045e8:	080046d5 	.word	0x080046d5
 80045ec:	0800479f 	.word	0x0800479f
 80045f0:	08004727 	.word	0x08004727
 80045f4:	08004647 	.word	0x08004647
 80045f8:	0800479f 	.word	0x0800479f
 80045fc:	0800468f 	.word	0x0800468f
 8004600:	0800479f 	.word	0x0800479f
 8004604:	0800479f 	.word	0x0800479f
 8004608:	0800471d 	.word	0x0800471d
 800460c:	0800479f 	.word	0x0800479f
 8004610:	08004713 	.word	0x08004713
 8004614:	0800479f 	.word	0x0800479f
 8004618:	08004771 	.word	0x08004771
 800461c:	0800479f 	.word	0x0800479f
 8004620:	0800479f 	.word	0x0800479f
 8004624:	0800466f 	.word	0x0800466f
 8004628:	0800479f 	.word	0x0800479f
 800462c:	0800479f 	.word	0x0800479f
 8004630:	0800479f 	.word	0x0800479f
 8004634:	0800479f 	.word	0x0800479f
 8004638:	0800479f 	.word	0x0800479f
 800463c:	08004665 	.word	0x08004665
 8004640:	2b7f      	cmp	r3, #127	; 0x7f
 8004642:	d070      	beq.n	8004726 <prv_control_char_process+0x17a>
            mrl->sigint_fn(mrl);
#endif /* MICRORL_CFG_USE_CTRL_C */
            break;
        }
        default:
            break;
 8004644:	e0ab      	b.n	800479e <prv_control_char_process+0x1f2>
            if (mrl->get_completion_fn == NULL) {
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <prv_control_char_process+0xa6>
                return microrlERRPAR;
 800464e:	2302      	movs	r3, #2
 8004650:	e0af      	b.n	80047b2 <prv_control_char_process+0x206>
            if (prv_complite_get_input(mrl) != microrlOK) {
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff fe2e 	bl	80042b4 <prv_complite_get_input>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 80a1 	beq.w	80047a2 <prv_control_char_process+0x1f6>
                return microrlERRCPLT;
 8004660:	2305      	movs	r3, #5
 8004662:	e0a6      	b.n	80047b2 <prv_control_char_process+0x206>
            mrl->escape = 1;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
            break;
 800466c:	e0a0      	b.n	80047b0 <prv_control_char_process+0x204>
            if (mrl->cursor > 0) {
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <prv_control_char_process+0xd6>
                prv_cmdline_buf_backspace(mrl, mrl->cursor);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467a:	4619      	mov	r1, r3
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7ff f8ef 	bl	8003860 <prv_cmdline_buf_backspace>
            prv_terminal_print_line(mrl, 0, 1);
 8004682:	2201      	movs	r2, #1
 8004684:	2100      	movs	r1, #0
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff fa4a 	bl	8003b20 <prv_terminal_print_line>
            break;
 800468c:	e090      	b.n	80047b0 <prv_control_char_process+0x204>
            mrl->out_fn(mrl, "\033[K");
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	494a      	ldr	r1, [pc, #296]	; (80047bc <prv_control_char_process+0x210>)
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	4798      	blx	r3
            mrl->cmdlen = mrl->cursor;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	655a      	str	r2, [r3, #84]	; 0x54
            break;
 80046a0:	e086      	b.n	80047b0 <prv_control_char_process+0x204>
            prv_terminal_move_cursor(mrl, mrl->cmdlen - mrl->cursor);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	4619      	mov	r1, r3
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff fa14 	bl	8003adc <prv_terminal_move_cursor>
            mrl->cursor = mrl->cmdlen;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	659a      	str	r2, [r3, #88]	; 0x58
            break;
 80046bc:	e078      	b.n	80047b0 <prv_control_char_process+0x204>
            prv_terminal_move_cursor(mrl, -mrl->cursor);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c2:	425b      	negs	r3, r3
 80046c4:	4619      	mov	r1, r3
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff fa08 	bl	8003adc <prv_terminal_move_cursor>
            mrl->cursor = 0;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	659a      	str	r2, [r3, #88]	; 0x58
            break;
 80046d2:	e06d      	b.n	80047b0 <prv_control_char_process+0x204>
            if (mrl->cursor < mrl->cmdlen) {
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046dc:	429a      	cmp	r2, r3
 80046de:	d262      	bcs.n	80047a6 <prv_control_char_process+0x1fa>
                prv_terminal_move_cursor(mrl, 1);
 80046e0:	2101      	movs	r1, #1
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff f9fa 	bl	8003adc <prv_terminal_move_cursor>
                ++mrl->cursor;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	659a      	str	r2, [r3, #88]	; 0x58
            break;
 80046f2:	e058      	b.n	80047a6 <prv_control_char_process+0x1fa>
            if (mrl->cursor != 0) {
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d056      	beq.n	80047aa <prv_control_char_process+0x1fe>
                prv_terminal_move_cursor(mrl, -1);
 80046fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff f9eb 	bl	8003adc <prv_terminal_move_cursor>
                --mrl->cursor;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470a:	1e5a      	subs	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	659a      	str	r2, [r3, #88]	; 0x58
            break;
 8004710:	e04b      	b.n	80047aa <prv_control_char_process+0x1fe>
            prv_hist_search(mrl, MICRORL_HIST_DIR_UP);
 8004712:	2101      	movs	r1, #1
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff fba0 	bl	8003e5a <prv_hist_search>
            break;
 800471a:	e049      	b.n	80047b0 <prv_control_char_process+0x204>
            prv_hist_search(mrl, MICRORL_HIST_DIR_DOWN);
 800471c:	2102      	movs	r1, #2
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff fb9b 	bl	8003e5a <prv_hist_search>
            break;
 8004724:	e044      	b.n	80047b0 <prv_control_char_process+0x204>
            if (mrl->cursor > 0) {
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472a:	2b00      	cmp	r3, #0
 800472c:	d03f      	beq.n	80047ae <prv_control_char_process+0x202>
                prv_cmdline_buf_backspace(mrl, 1);
 800472e:	2101      	movs	r1, #1
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff f895 	bl	8003860 <prv_cmdline_buf_backspace>
                if (mrl->cursor == mrl->cmdlen) {
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473e:	429a      	cmp	r2, r3
 8004740:	d103      	bne.n	800474a <prv_control_char_process+0x19e>
                    prv_terminal_backspace(mrl);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff f92c 	bl	80039a0 <prv_terminal_backspace>
            break;
 8004748:	e031      	b.n	80047ae <prv_control_char_process+0x202>
                    prv_terminal_print_line(mrl, mrl->cursor, 1);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	2201      	movs	r2, #1
 8004750:	4619      	mov	r1, r3
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff f9e4 	bl	8003b20 <prv_terminal_print_line>
            break;
 8004758:	e029      	b.n	80047ae <prv_control_char_process+0x202>
            prv_cmdline_buf_delete(mrl);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff f8b9 	bl	80038d2 <prv_cmdline_buf_delete>
            prv_terminal_print_line(mrl, mrl->cursor, 0);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004764:	2200      	movs	r2, #0
 8004766:	4619      	mov	r1, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff f9d9 	bl	8003b20 <prv_terminal_print_line>
            break;
 800476e:	e01f      	b.n	80047b0 <prv_control_char_process+0x204>
            prv_terminal_newline(mrl);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7ff f925 	bl	80039c0 <prv_terminal_newline>
            prv_terminal_print_prompt(mrl);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7ff f8f4 	bl	8003964 <prv_terminal_print_prompt>
            prv_terminal_print_line(mrl, 0, 0);
 800477c:	2200      	movs	r2, #0
 800477e:	2100      	movs	r1, #0
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff f9cd 	bl	8003b20 <prv_terminal_print_line>
            break;
 8004786:	e013      	b.n	80047b0 <prv_control_char_process+0x204>
            if (mrl->sigint_fn == NULL) {
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <prv_control_char_process+0x1e8>
                return microrlERRPAR;
 8004790:	2302      	movs	r3, #2
 8004792:	e00e      	b.n	80047b2 <prv_control_char_process+0x206>
            mrl->sigint_fn(mrl);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	4798      	blx	r3
            break;
 800479c:	e008      	b.n	80047b0 <prv_control_char_process+0x204>
            break;
 800479e:	bf00      	nop
 80047a0:	e006      	b.n	80047b0 <prv_control_char_process+0x204>
            break;
 80047a2:	bf00      	nop
 80047a4:	e004      	b.n	80047b0 <prv_control_char_process+0x204>
            break;
 80047a6:	bf00      	nop
 80047a8:	e002      	b.n	80047b0 <prv_control_char_process+0x204>
            break;
 80047aa:	bf00      	nop
 80047ac:	e000      	b.n	80047b0 <prv_control_char_process+0x204>
            break;
 80047ae:	bf00      	nop
    }

    return microrlOK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	08013b5c 	.word	0x08013b5c

080047c0 <prv_insert_char>:
 * \brief           Print character in terminal
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \param[in]       ch: Character to print
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
static microrlr_t prv_insert_char(microrl_t* mrl, char ch) {
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	70fb      	strb	r3, [r7, #3]
    if (prv_cmdline_buf_insert_text(mrl, &ch, 1) != microrlOK) {
 80047cc:	1cfb      	adds	r3, r7, #3
 80047ce:	2201      	movs	r2, #1
 80047d0:	4619      	mov	r1, r3
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fe ffda 	bl	800378c <prv_cmdline_buf_insert_text>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <prv_insert_char+0x22>
        return microrlERRCLFULL;
 80047de:	2304      	movs	r3, #4
 80047e0:	e029      	b.n	8004836 <prv_insert_char+0x76>
    }
    if (mrl->cursor == mrl->cmdlen) {
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d11a      	bne.n	8004824 <prv_insert_char+0x64>
        char nch[] = {0, 0};
 80047ee:	2300      	movs	r3, #0
 80047f0:	81bb      	strh	r3, [r7, #12]
        nch[0] = ch;
 80047f2:	78fb      	ldrb	r3, [r7, #3]
 80047f4:	733b      	strb	r3, [r7, #12]
#if MICRORL_CFG_USE_ECHO_OFF
        if (((int32_t)mrl->cursor >= mrl->echo_off_pos) && (mrl->echo != MICRORL_ECHO_ON)) {
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fa:	461a      	mov	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004802:	429a      	cmp	r2, r3
 8004804:	db06      	blt.n	8004814 <prv_insert_char+0x54>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800480c:	2b01      	cmp	r3, #1
 800480e:	d001      	beq.n	8004814 <prv_insert_char+0x54>
            nch[0] = MICRORL_CFG_ECHO_OFF_MASK;
 8004810:	232a      	movs	r3, #42	; 0x2a
 8004812:	733b      	strb	r3, [r7, #12]
        }
#endif /* MICRORL_CFG_USE_ECHO_OFF */
        mrl->out_fn(mrl, nch);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f107 020c 	add.w	r2, r7, #12
 800481c:	4611      	mov	r1, r2
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	4798      	blx	r3
 8004822:	e007      	b.n	8004834 <prv_insert_char+0x74>
    } else {
        prv_terminal_print_line(mrl, mrl->cursor - 1, 0);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004828:	3b01      	subs	r3, #1
 800482a:	2200      	movs	r2, #0
 800482c:	4619      	mov	r1, r3
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7ff f976 	bl	8003b20 <prv_terminal_print_line>
    }

    return microrlOK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <microrl_processing_input>:
 * \param[in]       mrl: \ref microrl_t working instance
 * \param[in]       data_ptr: Input data to process
 * \param[in]       len: Length of data for input
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
microrlr_t microrl_processing_input(microrl_t* mrl, const void* data_ptr, size_t len) {
 800483e:	b580      	push	{r7, lr}
 8004840:	b086      	sub	sp, #24
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]
    if (mrl == NULL || data_ptr == NULL || len == 0) {
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <microrl_processing_input+0x1e>
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <microrl_processing_input+0x1e>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <microrl_processing_input+0x22>
        return microrlERRPAR;
 800485c:	2302      	movs	r3, #2
 800485e:	e06b      	b.n	8004938 <microrl_processing_input+0xfa>
    }

    char* buf_ptr = (char*)data_ptr;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	617b      	str	r3, [r7, #20]

    while (len-- != 0) {
 8004864:	e060      	b.n	8004928 <microrl_processing_input+0xea>
        char ch = *buf_ptr++;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	617a      	str	r2, [r7, #20]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	74bb      	strb	r3, [r7, #18]

#if MICRORL_CFG_USE_ESC_SEQ
        if (mrl->escape) {
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00c      	beq.n	8004894 <microrl_processing_input+0x56>
            if (prv_escape_process(mrl, ch)) {
 800487a:	7cbb      	ldrb	r3, [r7, #18]
 800487c:	4619      	mov	r1, r3
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f7ff fb94 	bl	8003fac <prv_escape_process>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d04e      	beq.n	8004928 <microrl_processing_input+0xea>
                mrl->escape = 0;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
            }
            continue;
 8004892:	e049      	b.n	8004928 <microrl_processing_input+0xea>
        }
#endif /* MICRORL_CFG_USE_ESC_SEQ */

        if ((ch == MICRORL_ESC_ANSI_CR) || (ch == MICRORL_ESC_ANSI_LF)) {
 8004894:	7cbb      	ldrb	r3, [r7, #18]
 8004896:	2b0d      	cmp	r3, #13
 8004898:	d002      	beq.n	80048a0 <microrl_processing_input+0x62>
 800489a:	7cbb      	ldrb	r3, [r7, #18]
 800489c:	2b0a      	cmp	r3, #10
 800489e:	d11c      	bne.n	80048da <microrl_processing_input+0x9c>
            /*
             * Only trigger a newline if `ch` doen't follow its companion's
             * triggering a newline.
             */
            if (mrl->last_endl == (ch == MICRORL_ESC_ANSI_CR ? MICRORL_ESC_ANSI_LF : MICRORL_ESC_ANSI_CR)) {
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048a6:	461a      	mov	r2, r3
 80048a8:	7cbb      	ldrb	r3, [r7, #18]
 80048aa:	2b0d      	cmp	r3, #13
 80048ac:	d101      	bne.n	80048b2 <microrl_processing_input+0x74>
 80048ae:	230a      	movs	r3, #10
 80048b0:	e000      	b.n	80048b4 <microrl_processing_input+0x76>
 80048b2:	230d      	movs	r3, #13
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d104      	bne.n	80048c2 <microrl_processing_input+0x84>
                mrl->last_endl = 0;             /* Ignore char, but clear newline state */
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80048c0:	e032      	b.n	8004928 <microrl_processing_input+0xea>
            } else {
                mrl->last_endl = ch;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	7cba      	ldrb	r2, [r7, #18]
 80048c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
                if (prv_handle_newline(mrl) != microrlOK) {
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f7ff fc2a 	bl	8004124 <prv_handle_newline>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d028      	beq.n	8004928 <microrl_processing_input+0xea>
                    return microrlERRTKNNUM;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e02e      	b.n	8004938 <microrl_processing_input+0xfa>
                }
            }
            continue;
        }
        mrl->last_endl = 0;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        microrlr_t res = microrlOK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	74fb      	strb	r3, [r7, #19]
        if (IS_CONTROL_CHAR(ch)) {
 80048e6:	7cbb      	ldrb	r3, [r7, #18]
 80048e8:	2b1f      	cmp	r3, #31
 80048ea:	d902      	bls.n	80048f2 <microrl_processing_input+0xb4>
 80048ec:	7cbb      	ldrb	r3, [r7, #18]
 80048ee:	2b7f      	cmp	r3, #127	; 0x7f
 80048f0:	d107      	bne.n	8004902 <microrl_processing_input+0xc4>
            res = prv_control_char_process(mrl, ch);
 80048f2:	7cbb      	ldrb	r3, [r7, #18]
 80048f4:	4619      	mov	r1, r3
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f7ff fe58 	bl	80045ac <prv_control_char_process>
 80048fc:	4603      	mov	r3, r0
 80048fe:	74fb      	strb	r3, [r7, #19]
 8004900:	e00d      	b.n	800491e <microrl_processing_input+0xe0>
        } else {
            if ((ch == ' ') && (mrl->cmdlen == 0)) {    /* Skip spaces before first command line symbol */
 8004902:	7cbb      	ldrb	r3, [r7, #18]
 8004904:	2b20      	cmp	r3, #32
 8004906:	d103      	bne.n	8004910 <microrl_processing_input+0xd2>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490c:	2b00      	cmp	r3, #0
 800490e:	d011      	beq.n	8004934 <microrl_processing_input+0xf6>
                break;
            }
            res = prv_insert_char(mrl, ch);
 8004910:	7cbb      	ldrb	r3, [r7, #18]
 8004912:	4619      	mov	r1, r3
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f7ff ff53 	bl	80047c0 <prv_insert_char>
 800491a:	4603      	mov	r3, r0
 800491c:	74fb      	strb	r3, [r7, #19]
        }
        if (res != microrlOK) {
 800491e:	7cfb      	ldrb	r3, [r7, #19]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <microrl_processing_input+0xea>
            return res;
 8004924:	7cfb      	ldrb	r3, [r7, #19]
 8004926:	e007      	b.n	8004938 <microrl_processing_input+0xfa>
    while (len-- != 0) {
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	1e5a      	subs	r2, r3, #1
 800492c:	607a      	str	r2, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d199      	bne.n	8004866 <microrl_processing_input+0x28>
 8004932:	e000      	b.n	8004936 <microrl_processing_input+0xf8>
                break;
 8004934:	bf00      	nop
        }
    }

    return microrlOK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <microrl_get_version>:
 * \return          MicroRL library version number combined into an uint32_t:
 *                      - [23:16] Major version
 *                      - [15:8]  Minor version
 *                      - [7:0]   Patch version
 */
uint32_t microrl_get_version(void) {
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
    return ((MICRORL_VERSION_MAJOR << 16) | (MICRORL_VERSION_MINOR << 8) | (MICRORL_VERSION_PATCH));
 8004944:	4b02      	ldr	r3, [pc, #8]	; (8004950 <microrl_get_version+0x10>)
}
 8004946:	4618      	mov	r0, r3
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	00020500 	.word	0x00020500

08004954 <MX_FREERTOS_Init>:

/**
 * @brief          FreeRTOS tasks init
 */
void MX_FREERTOS_Init(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
    ButtonInput = osThreadNew(ButtonTask, NULL, &ButtonTask_attributes);
 8004958:	4a10      	ldr	r2, [pc, #64]	; (800499c <MX_FREERTOS_Init+0x48>)
 800495a:	2100      	movs	r1, #0
 800495c:	4810      	ldr	r0, [pc, #64]	; (80049a0 <MX_FREERTOS_Init+0x4c>)
 800495e:	f000 fc4b 	bl	80051f8 <osThreadNew>
 8004962:	4603      	mov	r3, r0
 8004964:	4a0f      	ldr	r2, [pc, #60]	; (80049a4 <MX_FREERTOS_Init+0x50>)
 8004966:	6013      	str	r3, [r2, #0]

    IndicationUpdate = osThreadNew(IndicationUpdateTask, NULL, &IndicationTask_attributes);
 8004968:	4a0f      	ldr	r2, [pc, #60]	; (80049a8 <MX_FREERTOS_Init+0x54>)
 800496a:	2100      	movs	r1, #0
 800496c:	480f      	ldr	r0, [pc, #60]	; (80049ac <MX_FREERTOS_Init+0x58>)
 800496e:	f000 fc43 	bl	80051f8 <osThreadNew>
 8004972:	4603      	mov	r3, r0
 8004974:	4a0e      	ldr	r2, [pc, #56]	; (80049b0 <MX_FREERTOS_Init+0x5c>)
 8004976:	6013      	str	r3, [r2, #0]

    MicrophoneInput = osThreadNew(MicrophoneTask, NULL, &MicrophoneTask_attributes);
 8004978:	4a0e      	ldr	r2, [pc, #56]	; (80049b4 <MX_FREERTOS_Init+0x60>)
 800497a:	2100      	movs	r1, #0
 800497c:	480e      	ldr	r0, [pc, #56]	; (80049b8 <MX_FREERTOS_Init+0x64>)
 800497e:	f000 fc3b 	bl	80051f8 <osThreadNew>
 8004982:	4603      	mov	r3, r0
 8004984:	4a0d      	ldr	r2, [pc, #52]	; (80049bc <MX_FREERTOS_Init+0x68>)
 8004986:	6013      	str	r3, [r2, #0]

    VisualizationUpdate = osThreadNew(MicrophoneVisualizationTask, NULL, &VisualizationTask_attributes);
 8004988:	4a0d      	ldr	r2, [pc, #52]	; (80049c0 <MX_FREERTOS_Init+0x6c>)
 800498a:	2100      	movs	r1, #0
 800498c:	480d      	ldr	r0, [pc, #52]	; (80049c4 <MX_FREERTOS_Init+0x70>)
 800498e:	f000 fc33 	bl	80051f8 <osThreadNew>
 8004992:	4603      	mov	r3, r0
 8004994:	4a0c      	ldr	r2, [pc, #48]	; (80049c8 <MX_FREERTOS_Init+0x74>)
 8004996:	6013      	str	r3, [r2, #0]
}
 8004998:	bf00      	nop
 800499a:	bd80      	pop	{r7, pc}
 800499c:	08013cb4 	.word	0x08013cb4
 80049a0:	08000fad 	.word	0x08000fad
 80049a4:	20000f98 	.word	0x20000f98
 80049a8:	08013cd8 	.word	0x08013cd8
 80049ac:	0800128d 	.word	0x0800128d
 80049b0:	20000f9c 	.word	0x20000f9c
 80049b4:	08013cfc 	.word	0x08013cfc
 80049b8:	08001bf1 	.word	0x08001bf1
 80049bc:	20000fa0 	.word	0x20000fa0
 80049c0:	08013d20 	.word	0x08013d20
 80049c4:	08001fb9 	.word	0x08001fb9
 80049c8:	20000fa4 	.word	0x20000fa4

080049cc <main>:

/**
 * @brief          Main endless cycle
 */
int main(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
    prvInitializeMCU();
 80049d0:	f000 f809 	bl	80049e6 <prvInitializeMCU>
    osKernelInitialize();
 80049d4:	f000 fbc6 	bl	8005164 <osKernelInitialize>
    prvInitializeDrivers();
 80049d8:	f000 f812 	bl	8004a00 <prvInitializeDrivers>
    MX_FREERTOS_Init();
 80049dc:	f7ff ffba 	bl	8004954 <MX_FREERTOS_Init>
    osKernelStart();
 80049e0:	f000 fbe4 	bl	80051ac <osKernelStart>

    for(;;)
 80049e4:	e7fe      	b.n	80049e4 <main+0x18>

080049e6 <prvInitializeMCU>:

/**
 * @brief          MCU initialization fns
 */
void prvInitializeMCU(void)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	af00      	add	r7, sp, #0
    HAL_Init();
 80049ea:	f004 f8c3 	bl	8008b74 <HAL_Init>
    prvSystemClockConfig();
 80049ee:	f000 f821 	bl	8004a34 <prvSystemClockConfig>
    prvDMAInit();
 80049f2:	f000 f8a1 	bl	8004b38 <prvDMAInit>
    MX_TIM1_Init();
 80049f6:	f7fd fd91 	bl	800251c <MX_TIM1_Init>
}
 80049fa:	bf00      	nop
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <prvInitializeDrivers>:

/**
 * @brief          Drivers init fns
 */
void prvInitializeDrivers(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
    IndicationInit();
 8004a04:	f7fc fba0 	bl	8001148 <IndicationInit>
    IndicationLedLoading();
 8004a08:	f7fc fc8a 	bl	8001320 <IndicationLedLoading>
    ButtonInit();
 8004a0c:	f7fc fa6e 	bl	8000eec <ButtonInit>

    MicrophoneInit();
 8004a10:	f7fd f8b8 	bl	8001b84 <MicrophoneInit>

    UARTAllInit();
 8004a14:	f7fd ff28 	bl	8002868 <UARTAllInit>
    RingBufUARTInit();
 8004a18:	f7fd fc9a 	bl	8002350 <RingBufUARTInit>
    UARTSetupReceiveChar(&huart3, &data_uart.keyboarb_input);
 8004a1c:	4903      	ldr	r1, [pc, #12]	; (8004a2c <prvInitializeDrivers+0x2c>)
 8004a1e:	4804      	ldr	r0, [pc, #16]	; (8004a30 <prvInitializeDrivers+0x30>)
 8004a20:	f7fd ff28 	bl	8002874 <UARTSetupReceiveChar>

    IoSystemInit();
 8004a24:	f7fe fbd2 	bl	80031cc <IoSystemInit>
}
 8004a28:	bf00      	nop
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20000e74 	.word	0x20000e74
 8004a30:	20000d74 	.word	0x20000d74

08004a34 <prvSystemClockConfig>:

/**
 * @brief          System clock configuration
 */
void prvSystemClockConfig(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b098      	sub	sp, #96	; 0x60
 8004a38:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a3e:	2230      	movs	r2, #48	; 0x30
 8004a40:	2100      	movs	r1, #0
 8004a42:	4618      	mov	r0, r3
 8004a44:	f00b fba2 	bl	801018c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a48:	f107 031c 	add.w	r3, r7, #28
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	605a      	str	r2, [r3, #4]
 8004a52:	609a      	str	r2, [r3, #8]
 8004a54:	60da      	str	r2, [r3, #12]
 8004a56:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a58:	f107 030c 	add.w	r3, r7, #12
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	605a      	str	r2, [r3, #4]
 8004a62:	609a      	str	r2, [r3, #8]
 8004a64:	60da      	str	r2, [r3, #12]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a66:	2300      	movs	r3, #0
 8004a68:	60bb      	str	r3, [r7, #8]
 8004a6a:	4b31      	ldr	r3, [pc, #196]	; (8004b30 <prvSystemClockConfig+0xfc>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	4a30      	ldr	r2, [pc, #192]	; (8004b30 <prvSystemClockConfig+0xfc>)
 8004a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a74:	6413      	str	r3, [r2, #64]	; 0x40
 8004a76:	4b2e      	ldr	r3, [pc, #184]	; (8004b30 <prvSystemClockConfig+0xfc>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	60bb      	str	r3, [r7, #8]
 8004a80:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a82:	2300      	movs	r3, #0
 8004a84:	607b      	str	r3, [r7, #4]
 8004a86:	4b2b      	ldr	r3, [pc, #172]	; (8004b34 <prvSystemClockConfig+0x100>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a2a      	ldr	r2, [pc, #168]	; (8004b34 <prvSystemClockConfig+0x100>)
 8004a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	4b28      	ldr	r3, [pc, #160]	; (8004b34 <prvSystemClockConfig+0x100>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a9a:	607b      	str	r3, [r7, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
    /** Initializes the CPU, AHB and APB busses clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004aa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004aa6:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004aac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLN = 336;
 8004ab6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004aba:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004abc:	2302      	movs	r3, #2
 8004abe:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8004ac0:	2307      	movs	r3, #7
 8004ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ac4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f005 fe69 	bl	800a7a0 <HAL_RCC_OscConfig>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <prvSystemClockConfig+0xa4>
    {
      Error_Handler();
 8004ad4:	f000 f858 	bl	8004b88 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB busses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ad8:	230f      	movs	r3, #15
 8004ada:	61fb      	str	r3, [r7, #28]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004adc:	2302      	movs	r3, #2
 8004ade:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004ae4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004aee:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004af0:	f107 031c 	add.w	r3, r7, #28
 8004af4:	2105      	movs	r1, #5
 8004af6:	4618      	mov	r0, r3
 8004af8:	f006 f8ca 	bl	800ac90 <HAL_RCC_ClockConfig>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <prvSystemClockConfig+0xd2>
    {
      Error_Handler();
 8004b02:	f000 f841 	bl	8004b88 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8004b06:	2301      	movs	r3, #1
 8004b08:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8004b0a:	23c0      	movs	r3, #192	; 0xc0
 8004b0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8004b0e:	2302      	movs	r3, #2
 8004b10:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b12:	f107 030c 	add.w	r3, r7, #12
 8004b16:	4618      	mov	r0, r3
 8004b18:	f006 fada 	bl	800b0d0 <HAL_RCCEx_PeriphCLKConfig>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <prvSystemClockConfig+0xf2>
    {
      Error_Handler();
 8004b22:	f000 f831 	bl	8004b88 <Error_Handler>
    }
}
 8004b26:	bf00      	nop
 8004b28:	3760      	adds	r7, #96	; 0x60
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40023800 	.word	0x40023800
 8004b34:	40007000 	.word	0x40007000

08004b38 <prvDMAInit>:

/**
 * @brief          DMA Init
 */
void prvDMAInit(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 8004b3e:	2300      	movs	r3, #0
 8004b40:	607b      	str	r3, [r7, #4]
 8004b42:	4b10      	ldr	r3, [pc, #64]	; (8004b84 <prvDMAInit+0x4c>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	4a0f      	ldr	r2, [pc, #60]	; (8004b84 <prvDMAInit+0x4c>)
 8004b48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b4e:	4b0d      	ldr	r3, [pc, #52]	; (8004b84 <prvDMAInit+0x4c>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b56:	607b      	str	r3, [r7, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]

    HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2105      	movs	r1, #5
 8004b5e:	200e      	movs	r0, #14
 8004b60:	f004 f955 	bl	8008e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004b64:	200e      	movs	r0, #14
 8004b66:	f004 f96e 	bl	8008e46 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2105      	movs	r1, #5
 8004b6e:	2010      	movs	r0, #16
 8004b70:	f004 f94d 	bl	8008e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004b74:	2010      	movs	r0, #16
 8004b76:	f004 f966 	bl	8008e46 <HAL_NVIC_EnableIRQ>
}
 8004b7a:	bf00      	nop
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40023800 	.word	0x40023800

08004b88 <Error_Handler>:

/**
 * @brief          Error handler
 */
void Error_Handler(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b8c:	b672      	cpsid	i
}
 8004b8e:	bf00      	nop
  __disable_irq();
  while (1)
 8004b90:	e7fe      	b.n	8004b90 <Error_Handler+0x8>
	...

08004b94 <HAL_MspInit>:

DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi3_tx;

void HAL_MspInit(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <HAL_MspInit+0x4c>)
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba2:	4a0f      	ldr	r2, [pc, #60]	; (8004be0 <HAL_MspInit+0x4c>)
 8004ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8004baa:	4b0d      	ldr	r3, [pc, #52]	; (8004be0 <HAL_MspInit+0x4c>)
 8004bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bb2:	607b      	str	r3, [r7, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	603b      	str	r3, [r7, #0]
 8004bba:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <HAL_MspInit+0x4c>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	4a08      	ldr	r2, [pc, #32]	; (8004be0 <HAL_MspInit+0x4c>)
 8004bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004bc6:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <HAL_MspInit+0x4c>)
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	683b      	ldr	r3, [r7, #0]
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	40023800 	.word	0x40023800

08004be4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08e      	sub	sp, #56	; 0x38
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	605a      	str	r2, [r3, #4]
 8004bf6:	609a      	str	r2, [r3, #8]
 8004bf8:	60da      	str	r2, [r3, #12]
 8004bfa:	611a      	str	r2, [r3, #16]

    if (i2sHandle->Instance==SPI2) {
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a90      	ldr	r2, [pc, #576]	; (8004e44 <HAL_I2S_MspInit+0x260>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d17b      	bne.n	8004cfe <HAL_I2S_MspInit+0x11a>
      __HAL_RCC_SPI2_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	623b      	str	r3, [r7, #32]
 8004c0a:	4b8f      	ldr	r3, [pc, #572]	; (8004e48 <HAL_I2S_MspInit+0x264>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	4a8e      	ldr	r2, [pc, #568]	; (8004e48 <HAL_I2S_MspInit+0x264>)
 8004c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c14:	6413      	str	r3, [r2, #64]	; 0x40
 8004c16:	4b8c      	ldr	r3, [pc, #560]	; (8004e48 <HAL_I2S_MspInit+0x264>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c1e:	623b      	str	r3, [r7, #32]
 8004c20:	6a3b      	ldr	r3, [r7, #32]

      __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c22:	2300      	movs	r3, #0
 8004c24:	61fb      	str	r3, [r7, #28]
 8004c26:	4b88      	ldr	r3, [pc, #544]	; (8004e48 <HAL_I2S_MspInit+0x264>)
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	4a87      	ldr	r2, [pc, #540]	; (8004e48 <HAL_I2S_MspInit+0x264>)
 8004c2c:	f043 0304 	orr.w	r3, r3, #4
 8004c30:	6313      	str	r3, [r2, #48]	; 0x30
 8004c32:	4b85      	ldr	r3, [pc, #532]	; (8004e48 <HAL_I2S_MspInit+0x264>)
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	61fb      	str	r3, [r7, #28]
 8004c3c:	69fb      	ldr	r3, [r7, #28]
      __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	4b81      	ldr	r3, [pc, #516]	; (8004e48 <HAL_I2S_MspInit+0x264>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	4a80      	ldr	r2, [pc, #512]	; (8004e48 <HAL_I2S_MspInit+0x264>)
 8004c48:	f043 0302 	orr.w	r3, r3, #2
 8004c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c4e:	4b7e      	ldr	r3, [pc, #504]	; (8004e48 <HAL_I2S_MspInit+0x264>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	61bb      	str	r3, [r7, #24]
 8004c58:	69bb      	ldr	r3, [r7, #24]
      /**I2S2 GPIO Configuration
      PC3     ------> I2S2_SD
      PB10     ------> I2S2_CK
      PB12     ------> I2S2_WS
      */
      GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c5e:	2302      	movs	r3, #2
 8004c60:	62bb      	str	r3, [r7, #40]	; 0x28
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	62fb      	str	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c66:	2300      	movs	r3, #0
 8004c68:	633b      	str	r3, [r7, #48]	; 0x30
      GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c6a:	2305      	movs	r3, #5
 8004c6c:	637b      	str	r3, [r7, #52]	; 0x34
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c72:	4619      	mov	r1, r3
 8004c74:	4875      	ldr	r0, [pc, #468]	; (8004e4c <HAL_I2S_MspInit+0x268>)
 8004c76:	f004 fd1f 	bl	80096b8 <HAL_GPIO_Init>

      GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8004c7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c80:	2302      	movs	r3, #2
 8004c82:	62bb      	str	r3, [r7, #40]	; 0x28
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	62fb      	str	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	633b      	str	r3, [r7, #48]	; 0x30
      GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c8c:	2305      	movs	r3, #5
 8004c8e:	637b      	str	r3, [r7, #52]	; 0x34
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c94:	4619      	mov	r1, r3
 8004c96:	486e      	ldr	r0, [pc, #440]	; (8004e50 <HAL_I2S_MspInit+0x26c>)
 8004c98:	f004 fd0e 	bl	80096b8 <HAL_GPIO_Init>

      hdma_spi2_rx.Instance = DMA1_Stream3;
 8004c9c:	4b6d      	ldr	r3, [pc, #436]	; (8004e54 <HAL_I2S_MspInit+0x270>)
 8004c9e:	4a6e      	ldr	r2, [pc, #440]	; (8004e58 <HAL_I2S_MspInit+0x274>)
 8004ca0:	601a      	str	r2, [r3, #0]
      hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8004ca2:	4b6c      	ldr	r3, [pc, #432]	; (8004e54 <HAL_I2S_MspInit+0x270>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	605a      	str	r2, [r3, #4]
      hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ca8:	4b6a      	ldr	r3, [pc, #424]	; (8004e54 <HAL_I2S_MspInit+0x270>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	609a      	str	r2, [r3, #8]
      hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cae:	4b69      	ldr	r3, [pc, #420]	; (8004e54 <HAL_I2S_MspInit+0x270>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	60da      	str	r2, [r3, #12]
      hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004cb4:	4b67      	ldr	r3, [pc, #412]	; (8004e54 <HAL_I2S_MspInit+0x270>)
 8004cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cba:	611a      	str	r2, [r3, #16]
      hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004cbc:	4b65      	ldr	r3, [pc, #404]	; (8004e54 <HAL_I2S_MspInit+0x270>)
 8004cbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cc2:	615a      	str	r2, [r3, #20]
      hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004cc4:	4b63      	ldr	r3, [pc, #396]	; (8004e54 <HAL_I2S_MspInit+0x270>)
 8004cc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004cca:	619a      	str	r2, [r3, #24]
      hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8004ccc:	4b61      	ldr	r3, [pc, #388]	; (8004e54 <HAL_I2S_MspInit+0x270>)
 8004cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cd2:	61da      	str	r2, [r3, #28]
      hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004cd4:	4b5f      	ldr	r3, [pc, #380]	; (8004e54 <HAL_I2S_MspInit+0x270>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	621a      	str	r2, [r3, #32]
      hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cda:	4b5e      	ldr	r3, [pc, #376]	; (8004e54 <HAL_I2S_MspInit+0x270>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	625a      	str	r2, [r3, #36]	; 0x24
      if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK) {
 8004ce0:	485c      	ldr	r0, [pc, #368]	; (8004e54 <HAL_I2S_MspInit+0x270>)
 8004ce2:	f004 f8e7 	bl	8008eb4 <HAL_DMA_Init>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <HAL_I2S_MspInit+0x10c>
        Error_Handler();
 8004cec:	f7ff ff4c 	bl	8004b88 <Error_Handler>
      }

      __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a58      	ldr	r2, [pc, #352]	; (8004e54 <HAL_I2S_MspInit+0x270>)
 8004cf4:	63da      	str	r2, [r3, #60]	; 0x3c
 8004cf6:	4a57      	ldr	r2, [pc, #348]	; (8004e54 <HAL_I2S_MspInit+0x270>)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6393      	str	r3, [r2, #56]	; 0x38
        Error_Handler();
      }

      __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
    }
}
 8004cfc:	e09e      	b.n	8004e3c <HAL_I2S_MspInit+0x258>
    else if(i2sHandle->Instance==SPI3) {
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a56      	ldr	r2, [pc, #344]	; (8004e5c <HAL_I2S_MspInit+0x278>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	f040 8099 	bne.w	8004e3c <HAL_I2S_MspInit+0x258>
      __HAL_RCC_SPI3_CLK_ENABLE();
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	4b4e      	ldr	r3, [pc, #312]	; (8004e48 <HAL_I2S_MspInit+0x264>)
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	4a4d      	ldr	r2, [pc, #308]	; (8004e48 <HAL_I2S_MspInit+0x264>)
 8004d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d18:	6413      	str	r3, [r2, #64]	; 0x40
 8004d1a:	4b4b      	ldr	r3, [pc, #300]	; (8004e48 <HAL_I2S_MspInit+0x264>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	4b47      	ldr	r3, [pc, #284]	; (8004e48 <HAL_I2S_MspInit+0x264>)
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	4a46      	ldr	r2, [pc, #280]	; (8004e48 <HAL_I2S_MspInit+0x264>)
 8004d30:	f043 0301 	orr.w	r3, r3, #1
 8004d34:	6313      	str	r3, [r2, #48]	; 0x30
 8004d36:	4b44      	ldr	r3, [pc, #272]	; (8004e48 <HAL_I2S_MspInit+0x264>)
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	4b40      	ldr	r3, [pc, #256]	; (8004e48 <HAL_I2S_MspInit+0x264>)
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	4a3f      	ldr	r2, [pc, #252]	; (8004e48 <HAL_I2S_MspInit+0x264>)
 8004d4c:	f043 0304 	orr.w	r3, r3, #4
 8004d50:	6313      	str	r3, [r2, #48]	; 0x30
 8004d52:	4b3d      	ldr	r3, [pc, #244]	; (8004e48 <HAL_I2S_MspInit+0x264>)
 8004d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d56:	f003 0304 	and.w	r3, r3, #4
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60bb      	str	r3, [r7, #8]
 8004d62:	4b39      	ldr	r3, [pc, #228]	; (8004e48 <HAL_I2S_MspInit+0x264>)
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	4a38      	ldr	r2, [pc, #224]	; (8004e48 <HAL_I2S_MspInit+0x264>)
 8004d68:	f043 0302 	orr.w	r3, r3, #2
 8004d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d6e:	4b36      	ldr	r3, [pc, #216]	; (8004e48 <HAL_I2S_MspInit+0x264>)
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	60bb      	str	r3, [r7, #8]
 8004d78:	68bb      	ldr	r3, [r7, #8]
      GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004d7a:	2310      	movs	r3, #16
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d7e:	2302      	movs	r3, #2
 8004d80:	62bb      	str	r3, [r7, #40]	; 0x28
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d82:	2300      	movs	r3, #0
 8004d84:	62fb      	str	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d86:	2300      	movs	r3, #0
 8004d88:	633b      	str	r3, [r7, #48]	; 0x30
      GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004d8a:	2306      	movs	r3, #6
 8004d8c:	637b      	str	r3, [r7, #52]	; 0x34
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d92:	4619      	mov	r1, r3
 8004d94:	4832      	ldr	r0, [pc, #200]	; (8004e60 <HAL_I2S_MspInit+0x27c>)
 8004d96:	f004 fc8f 	bl	80096b8 <HAL_GPIO_Init>
      GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_7;
 8004d9a:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da0:	2302      	movs	r3, #2
 8004da2:	62bb      	str	r3, [r7, #40]	; 0x28
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da4:	2300      	movs	r3, #0
 8004da6:	62fb      	str	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004da8:	2300      	movs	r3, #0
 8004daa:	633b      	str	r3, [r7, #48]	; 0x30
      GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004dac:	2306      	movs	r3, #6
 8004dae:	637b      	str	r3, [r7, #52]	; 0x34
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004db4:	4619      	mov	r1, r3
 8004db6:	4825      	ldr	r0, [pc, #148]	; (8004e4c <HAL_I2S_MspInit+0x268>)
 8004db8:	f004 fc7e 	bl	80096b8 <HAL_GPIO_Init>
      GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004dbc:	2308      	movs	r3, #8
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	62bb      	str	r3, [r7, #40]	; 0x28
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	633b      	str	r3, [r7, #48]	; 0x30
      GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004dcc:	2306      	movs	r3, #6
 8004dce:	637b      	str	r3, [r7, #52]	; 0x34
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	481e      	ldr	r0, [pc, #120]	; (8004e50 <HAL_I2S_MspInit+0x26c>)
 8004dd8:	f004 fc6e 	bl	80096b8 <HAL_GPIO_Init>
      hdma_spi3_tx.Instance = DMA1_Stream5;
 8004ddc:	4b21      	ldr	r3, [pc, #132]	; (8004e64 <HAL_I2S_MspInit+0x280>)
 8004dde:	4a22      	ldr	r2, [pc, #136]	; (8004e68 <HAL_I2S_MspInit+0x284>)
 8004de0:	601a      	str	r2, [r3, #0]
      hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8004de2:	4b20      	ldr	r3, [pc, #128]	; (8004e64 <HAL_I2S_MspInit+0x280>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	605a      	str	r2, [r3, #4]
      hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004de8:	4b1e      	ldr	r3, [pc, #120]	; (8004e64 <HAL_I2S_MspInit+0x280>)
 8004dea:	2240      	movs	r2, #64	; 0x40
 8004dec:	609a      	str	r2, [r3, #8]
      hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dee:	4b1d      	ldr	r3, [pc, #116]	; (8004e64 <HAL_I2S_MspInit+0x280>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	60da      	str	r2, [r3, #12]
      hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004df4:	4b1b      	ldr	r3, [pc, #108]	; (8004e64 <HAL_I2S_MspInit+0x280>)
 8004df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dfa:	611a      	str	r2, [r3, #16]
      hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004dfc:	4b19      	ldr	r3, [pc, #100]	; (8004e64 <HAL_I2S_MspInit+0x280>)
 8004dfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e02:	615a      	str	r2, [r3, #20]
      hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004e04:	4b17      	ldr	r3, [pc, #92]	; (8004e64 <HAL_I2S_MspInit+0x280>)
 8004e06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e0a:	619a      	str	r2, [r3, #24]
      hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8004e0c:	4b15      	ldr	r3, [pc, #84]	; (8004e64 <HAL_I2S_MspInit+0x280>)
 8004e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e12:	61da      	str	r2, [r3, #28]
      hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004e14:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <HAL_I2S_MspInit+0x280>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	621a      	str	r2, [r3, #32]
      hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e1a:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <HAL_I2S_MspInit+0x280>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	625a      	str	r2, [r3, #36]	; 0x24
      if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8004e20:	4810      	ldr	r0, [pc, #64]	; (8004e64 <HAL_I2S_MspInit+0x280>)
 8004e22:	f004 f847 	bl	8008eb4 <HAL_DMA_Init>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <HAL_I2S_MspInit+0x24c>
        Error_Handler();
 8004e2c:	f7ff feac 	bl	8004b88 <Error_Handler>
      __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a0c      	ldr	r2, [pc, #48]	; (8004e64 <HAL_I2S_MspInit+0x280>)
 8004e34:	639a      	str	r2, [r3, #56]	; 0x38
 8004e36:	4a0b      	ldr	r2, [pc, #44]	; (8004e64 <HAL_I2S_MspInit+0x280>)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004e3c:	bf00      	nop
 8004e3e:	3738      	adds	r7, #56	; 0x38
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40003800 	.word	0x40003800
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	40020800 	.word	0x40020800
 8004e50:	40020400 	.word	0x40020400
 8004e54:	20000fa8 	.word	0x20000fa8
 8004e58:	40026058 	.word	0x40026058
 8004e5c:	40003c00 	.word	0x40003c00
 8004e60:	40020000 	.word	0x40020000
 8004e64:	20001008 	.word	0x20001008
 8004e68:	40026088 	.word	0x40026088

08004e6c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
    if(hcrc->Instance==CRC) {
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a0b      	ldr	r2, [pc, #44]	; (8004ea8 <HAL_CRC_MspInit+0x3c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d10d      	bne.n	8004e9a <HAL_CRC_MspInit+0x2e>
        __HAL_RCC_CRC_CLK_ENABLE();
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	4b0a      	ldr	r3, [pc, #40]	; (8004eac <HAL_CRC_MspInit+0x40>)
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	4a09      	ldr	r2, [pc, #36]	; (8004eac <HAL_CRC_MspInit+0x40>)
 8004e88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e8e:	4b07      	ldr	r3, [pc, #28]	; (8004eac <HAL_CRC_MspInit+0x40>)
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	68fb      	ldr	r3, [r7, #12]
    }
}
 8004e9a:	bf00      	nop
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40023000 	.word	0x40023000
 8004eac:	40023800 	.word	0x40023800

08004eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0

}
 8004eb4:	bf00      	nop
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <HardFault_Handler>:

void HardFault_Handler(void)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	af00      	add	r7, sp, #0
  while (1)
 8004ec2:	e7fe      	b.n	8004ec2 <HardFault_Handler+0x4>

08004ec4 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  while (1)
 8004ec8:	e7fe      	b.n	8004ec8 <MemManage_Handler+0x4>

08004eca <BusFault_Handler>:
  {
  }
}

void BusFault_Handler(void)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	af00      	add	r7, sp, #0
  while (1)
 8004ece:	e7fe      	b.n	8004ece <BusFault_Handler+0x4>

08004ed0 <UsageFault_Handler>:
  {
  }
}

void UsageFault_Handler(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  while (1)
 8004ed4:	e7fe      	b.n	8004ed4 <UsageFault_Handler+0x4>

08004ed6 <DebugMon_Handler>:
  {
  }
}

void DebugMon_Handler(void)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	af00      	add	r7, sp, #0
}
 8004eda:	bf00      	nop
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart2);
 8004ee8:	4802      	ldr	r0, [pc, #8]	; (8004ef4 <USART2_IRQHandler+0x10>)
 8004eea:	f006 fe17 	bl	800bb1c <HAL_UART_IRQHandler>
}
 8004eee:	bf00      	nop
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000db8 	.word	0x20000db8

08004ef8 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart3);
 8004efc:	4802      	ldr	r0, [pc, #8]	; (8004f08 <USART3_IRQHandler+0x10>)
 8004efe:	f006 fe0d 	bl	800bb1c <HAL_UART_IRQHandler>
}
 8004f02:	bf00      	nop
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20000d74 	.word	0x20000d74

08004f0c <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004f10:	4802      	ldr	r0, [pc, #8]	; (8004f1c <DMA1_Stream3_IRQHandler+0x10>)
 8004f12:	f004 f967 	bl	80091e4 <HAL_DMA_IRQHandler>
}
 8004f16:	bf00      	nop
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20000fa8 	.word	0x20000fa8

08004f20 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8004f24:	4802      	ldr	r0, [pc, #8]	; (8004f30 <DMA1_Stream5_IRQHandler+0x10>)
 8004f26:	f004 f95d 	bl	80091e4 <HAL_DMA_IRQHandler>
}
 8004f2a:	bf00      	nop
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	20001008 	.word	0x20001008

08004f34 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8004f38:	f003 fe6e 	bl	8008c18 <HAL_IncTick>

#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004f3c:	f002 fcd0 	bl	80078e0 <xTaskGetSchedulerState>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d001      	beq.n	8004f4a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004f46:	f003 fbb7 	bl	80086b8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
}
 8004f4a:	bf00      	nop
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	af00      	add	r7, sp, #0
  return 1;
 8004f52:	2301      	movs	r3, #1
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <_kill>:

int _kill(int pid, int sig)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b082      	sub	sp, #8
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004f68:	f00b f8be 	bl	80100e8 <__errno>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2216      	movs	r2, #22
 8004f70:	601a      	str	r2, [r3, #0]
  return -1;
 8004f72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <_exit>:

void _exit (int status)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b082      	sub	sp, #8
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004f86:	f04f 31ff 	mov.w	r1, #4294967295
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7ff ffe7 	bl	8004f5e <_kill>
  while (1) {}    /* Make sure we hang here */
 8004f90:	e7fe      	b.n	8004f90 <_exit+0x12>

08004f92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b086      	sub	sp, #24
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	e00a      	b.n	8004fba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004fa4:	f3af 8000 	nop.w
 8004fa8:	4601      	mov	r1, r0
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	60ba      	str	r2, [r7, #8]
 8004fb0:	b2ca      	uxtb	r2, r1
 8004fb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	617b      	str	r3, [r7, #20]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	dbf0      	blt.n	8004fa4 <_read+0x12>
  }

  return len;
 8004fc2:	687b      	ldr	r3, [r7, #4]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	e009      	b.n	8004ff2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	60ba      	str	r2, [r7, #8]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	dbf1      	blt.n	8004fde <_write+0x12>
  }
  return len;
 8004ffa:	687b      	ldr	r3, [r7, #4]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <_close>:

int _close(int file)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800500c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005010:	4618      	mov	r0, r3
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800502c:	605a      	str	r2, [r3, #4]
  return 0;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <_isatty>:

int _isatty(int file)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005044:	2301      	movs	r3, #1
}
 8005046:	4618      	mov	r0, r3
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005052:	b480      	push	{r7}
 8005054:	b085      	sub	sp, #20
 8005056:	af00      	add	r7, sp, #0
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005074:	4a14      	ldr	r2, [pc, #80]	; (80050c8 <_sbrk+0x5c>)
 8005076:	4b15      	ldr	r3, [pc, #84]	; (80050cc <_sbrk+0x60>)
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005080:	4b13      	ldr	r3, [pc, #76]	; (80050d0 <_sbrk+0x64>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d102      	bne.n	800508e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005088:	4b11      	ldr	r3, [pc, #68]	; (80050d0 <_sbrk+0x64>)
 800508a:	4a12      	ldr	r2, [pc, #72]	; (80050d4 <_sbrk+0x68>)
 800508c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800508e:	4b10      	ldr	r3, [pc, #64]	; (80050d0 <_sbrk+0x64>)
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4413      	add	r3, r2
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	429a      	cmp	r2, r3
 800509a:	d207      	bcs.n	80050ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800509c:	f00b f824 	bl	80100e8 <__errno>
 80050a0:	4603      	mov	r3, r0
 80050a2:	220c      	movs	r2, #12
 80050a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050a6:	f04f 33ff 	mov.w	r3, #4294967295
 80050aa:	e009      	b.n	80050c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050ac:	4b08      	ldr	r3, [pc, #32]	; (80050d0 <_sbrk+0x64>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050b2:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <_sbrk+0x64>)
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4413      	add	r3, r2
 80050ba:	4a05      	ldr	r2, [pc, #20]	; (80050d0 <_sbrk+0x64>)
 80050bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050be:	68fb      	ldr	r3, [r7, #12]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20020000 	.word	0x20020000
 80050cc:	00000400 	.word	0x00000400
 80050d0:	20001068 	.word	0x20001068
 80050d4:	200059d8 	.word	0x200059d8

080050d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050dc:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <SystemInit+0x20>)
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e2:	4a05      	ldr	r2, [pc, #20]	; (80050f8 <SystemInit+0x20>)
 80050e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050ec:	bf00      	nop
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	e000ed00 	.word	0xe000ed00

080050fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	4603      	mov	r3, r0
 8005104:	6039      	str	r1, [r7, #0]
 8005106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510c:	2b00      	cmp	r3, #0
 800510e:	db0a      	blt.n	8005126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	b2da      	uxtb	r2, r3
 8005114:	490c      	ldr	r1, [pc, #48]	; (8005148 <__NVIC_SetPriority+0x4c>)
 8005116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800511a:	0112      	lsls	r2, r2, #4
 800511c:	b2d2      	uxtb	r2, r2
 800511e:	440b      	add	r3, r1
 8005120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005124:	e00a      	b.n	800513c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	b2da      	uxtb	r2, r3
 800512a:	4908      	ldr	r1, [pc, #32]	; (800514c <__NVIC_SetPriority+0x50>)
 800512c:	79fb      	ldrb	r3, [r7, #7]
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	3b04      	subs	r3, #4
 8005134:	0112      	lsls	r2, r2, #4
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	440b      	add	r3, r1
 800513a:	761a      	strb	r2, [r3, #24]
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	e000e100 	.word	0xe000e100
 800514c:	e000ed00 	.word	0xe000ed00

08005150 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005154:	2100      	movs	r1, #0
 8005156:	f06f 0004 	mvn.w	r0, #4
 800515a:	f7ff ffcf 	bl	80050fc <__NVIC_SetPriority>
#endif
}
 800515e:	bf00      	nop
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800516a:	f3ef 8305 	mrs	r3, IPSR
 800516e:	603b      	str	r3, [r7, #0]
  return(result);
 8005170:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005176:	f06f 0305 	mvn.w	r3, #5
 800517a:	607b      	str	r3, [r7, #4]
 800517c:	e00c      	b.n	8005198 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800517e:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <osKernelInitialize+0x44>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d105      	bne.n	8005192 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005186:	4b08      	ldr	r3, [pc, #32]	; (80051a8 <osKernelInitialize+0x44>)
 8005188:	2201      	movs	r2, #1
 800518a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800518c:	2300      	movs	r3, #0
 800518e:	607b      	str	r3, [r7, #4]
 8005190:	e002      	b.n	8005198 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005192:	f04f 33ff 	mov.w	r3, #4294967295
 8005196:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005198:	687b      	ldr	r3, [r7, #4]
}
 800519a:	4618      	mov	r0, r3
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	2000106c 	.word	0x2000106c

080051ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051b2:	f3ef 8305 	mrs	r3, IPSR
 80051b6:	603b      	str	r3, [r7, #0]
  return(result);
 80051b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80051be:	f06f 0305 	mvn.w	r3, #5
 80051c2:	607b      	str	r3, [r7, #4]
 80051c4:	e010      	b.n	80051e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80051c6:	4b0b      	ldr	r3, [pc, #44]	; (80051f4 <osKernelStart+0x48>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d109      	bne.n	80051e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80051ce:	f7ff ffbf 	bl	8005150 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80051d2:	4b08      	ldr	r3, [pc, #32]	; (80051f4 <osKernelStart+0x48>)
 80051d4:	2202      	movs	r2, #2
 80051d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80051d8:	f001 fdd0 	bl	8006d7c <vTaskStartScheduler>
      stat = osOK;
 80051dc:	2300      	movs	r3, #0
 80051de:	607b      	str	r3, [r7, #4]
 80051e0:	e002      	b.n	80051e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80051e2:	f04f 33ff 	mov.w	r3, #4294967295
 80051e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051e8:	687b      	ldr	r3, [r7, #4]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	2000106c 	.word	0x2000106c

080051f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08e      	sub	sp, #56	; 0x38
 80051fc:	af04      	add	r7, sp, #16
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005204:	2300      	movs	r3, #0
 8005206:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005208:	f3ef 8305 	mrs	r3, IPSR
 800520c:	617b      	str	r3, [r7, #20]
  return(result);
 800520e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005210:	2b00      	cmp	r3, #0
 8005212:	d17e      	bne.n	8005312 <osThreadNew+0x11a>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d07b      	beq.n	8005312 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800521a:	2380      	movs	r3, #128	; 0x80
 800521c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800521e:	2318      	movs	r3, #24
 8005220:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005222:	2300      	movs	r3, #0
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005226:	f04f 33ff 	mov.w	r3, #4294967295
 800522a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d045      	beq.n	80052be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <osThreadNew+0x48>
        name = attr->name;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d002      	beq.n	800524e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d008      	beq.n	8005266 <osThreadNew+0x6e>
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	2b38      	cmp	r3, #56	; 0x38
 8005258:	d805      	bhi.n	8005266 <osThreadNew+0x6e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <osThreadNew+0x72>
        return (NULL);
 8005266:	2300      	movs	r3, #0
 8005268:	e054      	b.n	8005314 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	089b      	lsrs	r3, r3, #2
 8005278:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00e      	beq.n	80052a0 <osThreadNew+0xa8>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	2b5b      	cmp	r3, #91	; 0x5b
 8005288:	d90a      	bls.n	80052a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800528e:	2b00      	cmp	r3, #0
 8005290:	d006      	beq.n	80052a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <osThreadNew+0xa8>
        mem = 1;
 800529a:	2301      	movs	r3, #1
 800529c:	61bb      	str	r3, [r7, #24]
 800529e:	e010      	b.n	80052c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10c      	bne.n	80052c2 <osThreadNew+0xca>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d108      	bne.n	80052c2 <osThreadNew+0xca>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d104      	bne.n	80052c2 <osThreadNew+0xca>
          mem = 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	e001      	b.n	80052c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d110      	bne.n	80052ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052d0:	9202      	str	r2, [sp, #8]
 80052d2:	9301      	str	r3, [sp, #4]
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	6a3a      	ldr	r2, [r7, #32]
 80052dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f001 fb46 	bl	8006970 <xTaskCreateStatic>
 80052e4:	4603      	mov	r3, r0
 80052e6:	613b      	str	r3, [r7, #16]
 80052e8:	e013      	b.n	8005312 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d110      	bne.n	8005312 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	f107 0310 	add.w	r3, r7, #16
 80052f8:	9301      	str	r3, [sp, #4]
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f001 fb96 	bl	8006a34 <xTaskCreate>
 8005308:	4603      	mov	r3, r0
 800530a:	2b01      	cmp	r3, #1
 800530c:	d001      	beq.n	8005312 <osThreadNew+0x11a>
            hTask = NULL;
 800530e:	2300      	movs	r3, #0
 8005310:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005312:	693b      	ldr	r3, [r7, #16]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3728      	adds	r7, #40	; 0x28
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005324:	f3ef 8305 	mrs	r3, IPSR
 8005328:	60bb      	str	r3, [r7, #8]
  return(result);
 800532a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <osDelay+0x1c>
    stat = osErrorISR;
 8005330:	f06f 0305 	mvn.w	r3, #5
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	e007      	b.n	8005348 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005338:	2300      	movs	r3, #0
 800533a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f001 fce6 	bl	8006d14 <vTaskDelay>
    }
  }

  return (stat);
 8005348:	68fb      	ldr	r3, [r7, #12]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005352:	b580      	push	{r7, lr}
 8005354:	b088      	sub	sp, #32
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800535a:	2300      	movs	r3, #0
 800535c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800535e:	f3ef 8305 	mrs	r3, IPSR
 8005362:	60bb      	str	r3, [r7, #8]
  return(result);
 8005364:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005366:	2b00      	cmp	r3, #0
 8005368:	d174      	bne.n	8005454 <osMutexNew+0x102>
    if (attr != NULL) {
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	61bb      	str	r3, [r7, #24]
 8005376:	e001      	b.n	800537c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <osMutexNew+0x3a>
      rmtx = 1U;
 8005386:	2301      	movs	r3, #1
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	e001      	b.n	8005390 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d15c      	bne.n	8005454 <osMutexNew+0x102>
      mem = -1;
 800539a:	f04f 33ff 	mov.w	r3, #4294967295
 800539e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d015      	beq.n	80053d2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d006      	beq.n	80053bc <osMutexNew+0x6a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	2b4f      	cmp	r3, #79	; 0x4f
 80053b4:	d902      	bls.n	80053bc <osMutexNew+0x6a>
          mem = 1;
 80053b6:	2301      	movs	r3, #1
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	e00c      	b.n	80053d6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d108      	bne.n	80053d6 <osMutexNew+0x84>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d104      	bne.n	80053d6 <osMutexNew+0x84>
            mem = 0;
 80053cc:	2300      	movs	r3, #0
 80053ce:	613b      	str	r3, [r7, #16]
 80053d0:	e001      	b.n	80053d6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80053d2:	2300      	movs	r3, #0
 80053d4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d112      	bne.n	8005402 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	4619      	mov	r1, r3
 80053e8:	2004      	movs	r0, #4
 80053ea:	f000 fc6c 	bl	8005cc6 <xQueueCreateMutexStatic>
 80053ee:	61f8      	str	r0, [r7, #28]
 80053f0:	e016      	b.n	8005420 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	4619      	mov	r1, r3
 80053f8:	2001      	movs	r0, #1
 80053fa:	f000 fc64 	bl	8005cc6 <xQueueCreateMutexStatic>
 80053fe:	61f8      	str	r0, [r7, #28]
 8005400:	e00e      	b.n	8005420 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10b      	bne.n	8005420 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d004      	beq.n	8005418 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800540e:	2004      	movs	r0, #4
 8005410:	f000 fc41 	bl	8005c96 <xQueueCreateMutex>
 8005414:	61f8      	str	r0, [r7, #28]
 8005416:	e003      	b.n	8005420 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005418:	2001      	movs	r0, #1
 800541a:	f000 fc3c 	bl	8005c96 <xQueueCreateMutex>
 800541e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00c      	beq.n	8005440 <osMutexNew+0xee>
        if (attr != NULL) {
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <osMutexNew+0xe2>
          name = attr->name;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	e001      	b.n	8005438 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005438:	68f9      	ldr	r1, [r7, #12]
 800543a:	69f8      	ldr	r0, [r7, #28]
 800543c:	f001 fa16 	bl	800686c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d006      	beq.n	8005454 <osMutexNew+0x102>
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	f043 0301 	orr.w	r3, r3, #1
 8005452:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005454:	69fb      	ldr	r3, [r7, #28]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3720      	adds	r7, #32
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800545e:	b580      	push	{r7, lr}
 8005460:	b086      	sub	sp, #24
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f023 0301 	bic.w	r3, r3, #1
 800546e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005478:	2300      	movs	r3, #0
 800547a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800547c:	f3ef 8305 	mrs	r3, IPSR
 8005480:	60bb      	str	r3, [r7, #8]
  return(result);
 8005482:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005488:	f06f 0305 	mvn.w	r3, #5
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	e02c      	b.n	80054ea <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d103      	bne.n	800549e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005496:	f06f 0303 	mvn.w	r3, #3
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	e025      	b.n	80054ea <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d011      	beq.n	80054c8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80054a4:	6839      	ldr	r1, [r7, #0]
 80054a6:	6938      	ldr	r0, [r7, #16]
 80054a8:	f000 fc5c 	bl	8005d64 <xQueueTakeMutexRecursive>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d01b      	beq.n	80054ea <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80054b8:	f06f 0301 	mvn.w	r3, #1
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	e014      	b.n	80054ea <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80054c0:	f06f 0302 	mvn.w	r3, #2
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	e010      	b.n	80054ea <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80054c8:	6839      	ldr	r1, [r7, #0]
 80054ca:	6938      	ldr	r0, [r7, #16]
 80054cc:	f000 ff10 	bl	80062f0 <xQueueSemaphoreTake>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d009      	beq.n	80054ea <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80054dc:	f06f 0301 	mvn.w	r3, #1
 80054e0:	617b      	str	r3, [r7, #20]
 80054e2:	e002      	b.n	80054ea <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80054e4:	f06f 0302 	mvn.w	r3, #2
 80054e8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80054ea:	697b      	ldr	r3, [r7, #20]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f023 0301 	bic.w	r3, r3, #1
 8005502:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800550c:	2300      	movs	r3, #0
 800550e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005510:	f3ef 8305 	mrs	r3, IPSR
 8005514:	60bb      	str	r3, [r7, #8]
  return(result);
 8005516:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <osMutexRelease+0x30>
    stat = osErrorISR;
 800551c:	f06f 0305 	mvn.w	r3, #5
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	e01f      	b.n	8005564 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d103      	bne.n	8005532 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800552a:	f06f 0303 	mvn.w	r3, #3
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	e018      	b.n	8005564 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d009      	beq.n	800554c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005538:	6938      	ldr	r0, [r7, #16]
 800553a:	f000 fbdf 	bl	8005cfc <xQueueGiveMutexRecursive>
 800553e:	4603      	mov	r3, r0
 8005540:	2b01      	cmp	r3, #1
 8005542:	d00f      	beq.n	8005564 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005544:	f06f 0302 	mvn.w	r3, #2
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	e00b      	b.n	8005564 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800554c:	2300      	movs	r3, #0
 800554e:	2200      	movs	r2, #0
 8005550:	2100      	movs	r1, #0
 8005552:	6938      	ldr	r0, [r7, #16]
 8005554:	f000 fc3c 	bl	8005dd0 <xQueueGenericSend>
 8005558:	4603      	mov	r3, r0
 800555a:	2b01      	cmp	r3, #1
 800555c:	d002      	beq.n	8005564 <osMutexRelease+0x70>
        stat = osErrorResource;
 800555e:	f06f 0302 	mvn.w	r3, #2
 8005562:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005564:	697b      	ldr	r3, [r7, #20]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800556e:	b580      	push	{r7, lr}
 8005570:	b08a      	sub	sp, #40	; 0x28
 8005572:	af02      	add	r7, sp, #8
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800557a:	2300      	movs	r3, #0
 800557c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800557e:	f3ef 8305 	mrs	r3, IPSR
 8005582:	613b      	str	r3, [r7, #16]
  return(result);
 8005584:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005586:	2b00      	cmp	r3, #0
 8005588:	d15f      	bne.n	800564a <osMessageQueueNew+0xdc>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d05c      	beq.n	800564a <osMessageQueueNew+0xdc>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d059      	beq.n	800564a <osMessageQueueNew+0xdc>
    mem = -1;
 8005596:	f04f 33ff 	mov.w	r3, #4294967295
 800559a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d029      	beq.n	80055f6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d012      	beq.n	80055d0 <osMessageQueueNew+0x62>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	2b4f      	cmp	r3, #79	; 0x4f
 80055b0:	d90e      	bls.n	80055d0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695a      	ldr	r2, [r3, #20]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	68b9      	ldr	r1, [r7, #8]
 80055c2:	fb01 f303 	mul.w	r3, r1, r3
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d302      	bcc.n	80055d0 <osMessageQueueNew+0x62>
        mem = 1;
 80055ca:	2301      	movs	r3, #1
 80055cc:	61bb      	str	r3, [r7, #24]
 80055ce:	e014      	b.n	80055fa <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d110      	bne.n	80055fa <osMessageQueueNew+0x8c>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10c      	bne.n	80055fa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d108      	bne.n	80055fa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d104      	bne.n	80055fa <osMessageQueueNew+0x8c>
          mem = 0;
 80055f0:	2300      	movs	r3, #0
 80055f2:	61bb      	str	r3, [r7, #24]
 80055f4:	e001      	b.n	80055fa <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80055f6:	2300      	movs	r3, #0
 80055f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d10b      	bne.n	8005618 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	2100      	movs	r1, #0
 800560a:	9100      	str	r1, [sp, #0]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 fa54 	bl	8005abc <xQueueGenericCreateStatic>
 8005614:	61f8      	str	r0, [r7, #28]
 8005616:	e008      	b.n	800562a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d105      	bne.n	800562a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800561e:	2200      	movs	r2, #0
 8005620:	68b9      	ldr	r1, [r7, #8]
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 faa8 	bl	8005b78 <xQueueGenericCreate>
 8005628:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00c      	beq.n	800564a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <osMessageQueueNew+0xd0>
        name = attr->name;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	e001      	b.n	8005642 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005642:	6979      	ldr	r1, [r7, #20]
 8005644:	69f8      	ldr	r0, [r7, #28]
 8005646:	f001 f911 	bl	800686c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800564a:	69fb      	ldr	r3, [r7, #28]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3720      	adds	r7, #32
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	4613      	mov	r3, r2
 8005662:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005668:	2300      	movs	r3, #0
 800566a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800566c:	f3ef 8305 	mrs	r3, IPSR
 8005670:	617b      	str	r3, [r7, #20]
  return(result);
 8005672:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005674:	2b00      	cmp	r3, #0
 8005676:	d028      	beq.n	80056ca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d005      	beq.n	800568a <osMessageQueuePut+0x36>
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <osMessageQueuePut+0x36>
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800568a:	f06f 0303 	mvn.w	r3, #3
 800568e:	61fb      	str	r3, [r7, #28]
 8005690:	e038      	b.n	8005704 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005692:	2300      	movs	r3, #0
 8005694:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005696:	f107 0210 	add.w	r2, r7, #16
 800569a:	2300      	movs	r3, #0
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	69b8      	ldr	r0, [r7, #24]
 80056a0:	f000 fc94 	bl	8005fcc <xQueueGenericSendFromISR>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d003      	beq.n	80056b2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80056aa:	f06f 0302 	mvn.w	r3, #2
 80056ae:	61fb      	str	r3, [r7, #28]
 80056b0:	e028      	b.n	8005704 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d025      	beq.n	8005704 <osMessageQueuePut+0xb0>
 80056b8:	4b15      	ldr	r3, [pc, #84]	; (8005710 <osMessageQueuePut+0xbc>)
 80056ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	e01c      	b.n	8005704 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <osMessageQueuePut+0x82>
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d103      	bne.n	80056de <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80056d6:	f06f 0303 	mvn.w	r3, #3
 80056da:	61fb      	str	r3, [r7, #28]
 80056dc:	e012      	b.n	8005704 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80056de:	2300      	movs	r3, #0
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	69b8      	ldr	r0, [r7, #24]
 80056e6:	f000 fb73 	bl	8005dd0 <xQueueGenericSend>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d009      	beq.n	8005704 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80056f6:	f06f 0301 	mvn.w	r3, #1
 80056fa:	61fb      	str	r3, [r7, #28]
 80056fc:	e002      	b.n	8005704 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80056fe:	f06f 0302 	mvn.w	r3, #2
 8005702:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005704:	69fb      	ldr	r3, [r7, #28]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3720      	adds	r7, #32
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	e000ed04 	.word	0xe000ed04

08005714 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005726:	2300      	movs	r3, #0
 8005728:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800572a:	f3ef 8305 	mrs	r3, IPSR
 800572e:	617b      	str	r3, [r7, #20]
  return(result);
 8005730:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005732:	2b00      	cmp	r3, #0
 8005734:	d028      	beq.n	8005788 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d005      	beq.n	8005748 <osMessageQueueGet+0x34>
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <osMessageQueueGet+0x34>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005748:	f06f 0303 	mvn.w	r3, #3
 800574c:	61fb      	str	r3, [r7, #28]
 800574e:	e037      	b.n	80057c0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005750:	2300      	movs	r3, #0
 8005752:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005754:	f107 0310 	add.w	r3, r7, #16
 8005758:	461a      	mov	r2, r3
 800575a:	68b9      	ldr	r1, [r7, #8]
 800575c:	69b8      	ldr	r0, [r7, #24]
 800575e:	f000 fec5 	bl	80064ec <xQueueReceiveFromISR>
 8005762:	4603      	mov	r3, r0
 8005764:	2b01      	cmp	r3, #1
 8005766:	d003      	beq.n	8005770 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005768:	f06f 0302 	mvn.w	r3, #2
 800576c:	61fb      	str	r3, [r7, #28]
 800576e:	e027      	b.n	80057c0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d024      	beq.n	80057c0 <osMessageQueueGet+0xac>
 8005776:	4b15      	ldr	r3, [pc, #84]	; (80057cc <osMessageQueueGet+0xb8>)
 8005778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	e01b      	b.n	80057c0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <osMessageQueueGet+0x80>
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d103      	bne.n	800579c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005794:	f06f 0303 	mvn.w	r3, #3
 8005798:	61fb      	str	r3, [r7, #28]
 800579a:	e011      	b.n	80057c0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	68b9      	ldr	r1, [r7, #8]
 80057a0:	69b8      	ldr	r0, [r7, #24]
 80057a2:	f000 fcc5 	bl	8006130 <xQueueReceive>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d009      	beq.n	80057c0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80057b2:	f06f 0301 	mvn.w	r3, #1
 80057b6:	61fb      	str	r3, [r7, #28]
 80057b8:	e002      	b.n	80057c0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80057ba:	f06f 0302 	mvn.w	r3, #2
 80057be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80057c0:	69fb      	ldr	r3, [r7, #28]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3720      	adds	r7, #32
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	e000ed04 	.word	0xe000ed04

080057d0 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057dc:	f3ef 8305 	mrs	r3, IPSR
 80057e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80057e2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 80057e8:	f06f 0305 	mvn.w	r3, #5
 80057ec:	617b      	str	r3, [r7, #20]
 80057ee:	e00c      	b.n	800580a <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d103      	bne.n	80057fe <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 80057f6:	f06f 0303 	mvn.w	r3, #3
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	e005      	b.n	800580a <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 8005802:	2100      	movs	r1, #0
 8005804:	6938      	ldr	r0, [r7, #16]
 8005806:	f000 f8c9 	bl	800599c <xQueueGenericReset>
  }

  return (stat);
 800580a:	697b      	ldr	r3, [r7, #20]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4a07      	ldr	r2, [pc, #28]	; (8005840 <vApplicationGetIdleTaskMemory+0x2c>)
 8005824:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	4a06      	ldr	r2, [pc, #24]	; (8005844 <vApplicationGetIdleTaskMemory+0x30>)
 800582a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2280      	movs	r2, #128	; 0x80
 8005830:	601a      	str	r2, [r3, #0]
}
 8005832:	bf00      	nop
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	20001070 	.word	0x20001070
 8005844:	200010cc 	.word	0x200010cc

08005848 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4a07      	ldr	r2, [pc, #28]	; (8005874 <vApplicationGetTimerTaskMemory+0x2c>)
 8005858:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	4a06      	ldr	r2, [pc, #24]	; (8005878 <vApplicationGetTimerTaskMemory+0x30>)
 800585e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005866:	601a      	str	r2, [r3, #0]
}
 8005868:	bf00      	nop
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	200012cc 	.word	0x200012cc
 8005878:	20001328 	.word	0x20001328

0800587c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f103 0208 	add.w	r2, r3, #8
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f04f 32ff 	mov.w	r2, #4294967295
 8005894:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f103 0208 	add.w	r2, r3, #8
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f103 0208 	add.w	r2, r3, #8
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80058d6:	b480      	push	{r7}
 80058d8:	b085      	sub	sp, #20
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ec:	d103      	bne.n	80058f6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	e00c      	b.n	8005910 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3308      	adds	r3, #8
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	e002      	b.n	8005904 <vListInsert+0x2e>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	429a      	cmp	r2, r3
 800590e:	d2f6      	bcs.n	80058fe <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	601a      	str	r2, [r3, #0]
}
 800593c:	bf00      	nop
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6892      	ldr	r2, [r2, #8]
 800595e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	6852      	ldr	r2, [r2, #4]
 8005968:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	429a      	cmp	r2, r3
 8005972:	d103      	bne.n	800597c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	1e5a      	subs	r2, r3, #1
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80059a6:	2301      	movs	r3, #1
 80059a8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10a      	bne.n	80059ca <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80059c6:	bf00      	nop
 80059c8:	e7fe      	b.n	80059c8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d05d      	beq.n	8005a8c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d059      	beq.n	8005a8c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e0:	2100      	movs	r1, #0
 80059e2:	fba3 2302 	umull	r2, r3, r3, r2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d000      	beq.n	80059ec <xQueueGenericReset+0x50>
 80059ea:	2101      	movs	r1, #1
 80059ec:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d14c      	bne.n	8005a8c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80059f2:	f002 fdd1 	bl	8008598 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059fe:	6939      	ldr	r1, [r7, #16]
 8005a00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a02:	fb01 f303 	mul.w	r3, r1, r3
 8005a06:	441a      	add	r2, r3
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a22:	3b01      	subs	r3, #1
 8005a24:	6939      	ldr	r1, [r7, #16]
 8005a26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a28:	fb01 f303 	mul.w	r3, r1, r3
 8005a2c:	441a      	add	r2, r3
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	22ff      	movs	r2, #255	; 0xff
 8005a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	22ff      	movs	r2, #255	; 0xff
 8005a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d114      	bne.n	8005a72 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01a      	beq.n	8005a86 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	3310      	adds	r3, #16
 8005a54:	4618      	mov	r0, r3
 8005a56:	f001 fd01 	bl	800745c <xTaskRemoveFromEventList>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d012      	beq.n	8005a86 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005a60:	4b15      	ldr	r3, [pc, #84]	; (8005ab8 <xQueueGenericReset+0x11c>)
 8005a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	e009      	b.n	8005a86 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	3310      	adds	r3, #16
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7ff ff00 	bl	800587c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	3324      	adds	r3, #36	; 0x24
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7ff fefb 	bl	800587c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8005a86:	f002 fdb7 	bl	80085f8 <vPortExitCritical>
 8005a8a:	e001      	b.n	8005a90 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10a      	bne.n	8005aac <xQueueGenericReset+0x110>
        __asm volatile
 8005a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9a:	f383 8811 	msr	BASEPRI, r3
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	60bb      	str	r3, [r7, #8]
    }
 8005aa8:	bf00      	nop
 8005aaa:	e7fe      	b.n	8005aaa <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8005aac:	697b      	ldr	r3, [r7, #20]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08c      	sub	sp, #48	; 0x30
 8005ac0:	af02      	add	r7, sp, #8
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10a      	bne.n	8005aea <xQueueGenericCreateStatic+0x2e>
        __asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	623b      	str	r3, [r7, #32]
    }
 8005ae6:	bf00      	nop
 8005ae8:	e7fe      	b.n	8005ae8 <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d030      	beq.n	8005b52 <xQueueGenericCreateStatic+0x96>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d02d      	beq.n	8005b52 <xQueueGenericCreateStatic+0x96>
            ( pxStaticQueue != NULL ) &&
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <xQueueGenericCreateStatic+0x46>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d027      	beq.n	8005b52 <xQueueGenericCreateStatic+0x96>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d102      	bne.n	8005b0e <xQueueGenericCreateStatic+0x52>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d121      	bne.n	8005b52 <xQueueGenericCreateStatic+0x96>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8005b0e:	2350      	movs	r3, #80	; 0x50
 8005b10:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2b50      	cmp	r3, #80	; 0x50
 8005b16:	d00a      	beq.n	8005b2e <xQueueGenericCreateStatic+0x72>
        __asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	61fb      	str	r3, [r7, #28]
    }
 8005b2a:	bf00      	nop
 8005b2c:	e7fe      	b.n	8005b2c <xQueueGenericCreateStatic+0x70>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8005b2e:	697b      	ldr	r3, [r7, #20]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b3c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	4613      	mov	r3, r2
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f866 	bl	8005c1c <prvInitialiseNewQueue>
 8005b50:	e00d      	b.n	8005b6e <xQueueGenericCreateStatic+0xb2>
        }
        else
        {
            configASSERT( pxNewQueue );
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <xQueueGenericCreateStatic+0xb2>
        __asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	61bb      	str	r3, [r7, #24]
    }
 8005b6a:	bf00      	nop
 8005b6c:	e7fe      	b.n	8005b6c <xQueueGenericCreateStatic+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005b70:	4618      	mov	r0, r3
 8005b72:	3728      	adds	r7, #40	; 0x28
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08a      	sub	sp, #40	; 0x28
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	4613      	mov	r3, r2
 8005b84:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d032      	beq.n	8005bf6 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005b90:	2100      	movs	r1, #0
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	fba3 2302 	umull	r2, r3, r3, r2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d000      	beq.n	8005ba0 <xQueueGenericCreate+0x28>
 8005b9e:	2101      	movs	r1, #1
 8005ba0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d127      	bne.n	8005bf6 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005bae:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8005bb2:	d820      	bhi.n	8005bf6 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	fb02 f303 	mul.w	r3, r2, r3
 8005bbc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	3350      	adds	r3, #80	; 0x50
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f002 fe0a 	bl	80087dc <pvPortMalloc>
 8005bc8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d020      	beq.n	8005c12 <xQueueGenericCreate+0x9a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	3350      	adds	r3, #80	; 0x50
 8005bd8:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005be2:	79fa      	ldrb	r2, [r7, #7]
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	4613      	mov	r3, r2
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	68b9      	ldr	r1, [r7, #8]
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f814 	bl	8005c1c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8005bf4:	e00d      	b.n	8005c12 <xQueueGenericCreate+0x9a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10a      	bne.n	8005c12 <xQueueGenericCreate+0x9a>
        __asm volatile
 8005bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	613b      	str	r3, [r7, #16]
    }
 8005c0e:	bf00      	nop
 8005c10:	e7fe      	b.n	8005c10 <xQueueGenericCreate+0x98>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005c12:	69fb      	ldr	r3, [r7, #28]
    }
 8005c14:	4618      	mov	r0, r3
 8005c16:	3720      	adds	r7, #32
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d103      	bne.n	8005c38 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	e002      	b.n	8005c3e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	69b8      	ldr	r0, [r7, #24]
 8005c4e:	f7ff fea5 	bl	800599c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	78fa      	ldrb	r2, [r7, #3]
 8005c56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005c5a:	bf00      	nop
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b082      	sub	sp, #8
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00e      	beq.n	8005c8e <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005c82:	2300      	movs	r3, #0
 8005c84:	2200      	movs	r2, #0
 8005c86:	2100      	movs	r1, #0
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f8a1 	bl	8005dd0 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b086      	sub	sp, #24
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	617b      	str	r3, [r7, #20]
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005ca8:	79fb      	ldrb	r3, [r7, #7]
 8005caa:	461a      	mov	r2, r3
 8005cac:	6939      	ldr	r1, [r7, #16]
 8005cae:	6978      	ldr	r0, [r7, #20]
 8005cb0:	f7ff ff62 	bl	8005b78 <xQueueGenericCreate>
 8005cb4:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f7ff ffd3 	bl	8005c62 <prvInitialiseMutex>

        return xNewQueue;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
    }
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <xQueueCreateMutexStatic>:

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
                                           StaticQueue_t * pxStaticQueue )
    {
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b088      	sub	sp, #32
 8005cca:	af02      	add	r7, sp, #8
 8005ccc:	4603      	mov	r3, r0
 8005cce:	6039      	str	r1, [r7, #0]
 8005cd0:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	613b      	str	r3, [r7, #16]

        /* Prevent compiler warnings about unused parameters if
         * configUSE_TRACE_FACILITY does not equal 1. */
        ( void ) ucQueueType;

        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005cda:	79fb      	ldrb	r3, [r7, #7]
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	6939      	ldr	r1, [r7, #16]
 8005ce4:	6978      	ldr	r0, [r7, #20]
 8005ce6:	f7ff fee9 	bl	8005abc <xQueueGenericCreateStatic>
 8005cea:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f7ff ffb8 	bl	8005c62 <prvInitialiseMutex>

        return xNewQueue;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
    }
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
    {
 8005cfc:	b590      	push	{r4, r7, lr}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	613b      	str	r3, [r7, #16]

        configASSERT( pxMutex );
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10a      	bne.n	8005d24 <xQueueGiveMutexRecursive+0x28>
        __asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	60fb      	str	r3, [r7, #12]
    }
 8005d20:	bf00      	nop
 8005d22:	e7fe      	b.n	8005d22 <xQueueGiveMutexRecursive+0x26>
         * change outside of this task.  If this task does not hold the mutex then
         * pxMutexHolder can never coincidentally equal the tasks handle, and as
         * this is the only condition we are interested in it does not matter if
         * pxMutexHolder is accessed simultaneously by another task.  Therefore no
         * mutual exclusion is required to test the pxMutexHolder variable. */
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	689c      	ldr	r4, [r3, #8]
 8005d28:	f001 fdca 	bl	80078c0 <xTaskGetCurrentTaskHandle>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	429c      	cmp	r4, r3
 8005d30:	d111      	bne.n	8005d56 <xQueueGiveMutexRecursive+0x5a>
            /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
             * the task handle, therefore no underflow check is required.  Also,
             * uxRecursiveCallCount is only modified by the mutex holder, and as
             * there can only be one, no mutual exclusion is required to modify the
             * uxRecursiveCallCount member. */
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	1e5a      	subs	r2, r3, #1
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	60da      	str	r2, [r3, #12]

            /* Has the recursive call count unwound to 0? */
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d105      	bne.n	8005d50 <xQueueGiveMutexRecursive+0x54>
            {
                /* Return the mutex.  This will automatically unblock any other
                 * task that might be waiting to access the mutex. */
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005d44:	2300      	movs	r3, #0
 8005d46:	2200      	movs	r2, #0
 8005d48:	2100      	movs	r1, #0
 8005d4a:	6938      	ldr	r0, [r7, #16]
 8005d4c:	f000 f840 	bl	8005dd0 <xQueueGenericSend>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
 8005d50:	2301      	movs	r3, #1
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	e001      	b.n	8005d5a <xQueueGiveMutexRecursive+0x5e>
        }
        else
        {
            /* The mutex cannot be given because the calling task is not the
             * holder. */
            xReturn = pdFAIL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	617b      	str	r3, [r7, #20]

            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        return xReturn;
 8005d5a:	697b      	ldr	r3, [r7, #20]
    }
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	371c      	adds	r7, #28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd90      	pop	{r4, r7, pc}

08005d64 <xQueueTakeMutexRecursive>:

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait )
    {
 8005d64:	b590      	push	{r4, r7, lr}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	613b      	str	r3, [r7, #16]

        configASSERT( pxMutex );
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10a      	bne.n	8005d8e <xQueueTakeMutexRecursive+0x2a>
        __asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	60fb      	str	r3, [r7, #12]
    }
 8005d8a:	bf00      	nop
 8005d8c:	e7fe      	b.n	8005d8c <xQueueTakeMutexRecursive+0x28>
        /* Comments regarding mutual exclusion as per those within
         * xQueueGiveMutexRecursive(). */

        traceTAKE_MUTEX_RECURSIVE( pxMutex );

        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	689c      	ldr	r4, [r3, #8]
 8005d92:	f001 fd95 	bl	80078c0 <xTaskGetCurrentTaskHandle>
 8005d96:	4603      	mov	r3, r0
 8005d98:	429c      	cmp	r4, r3
 8005d9a:	d107      	bne.n	8005dac <xQueueTakeMutexRecursive+0x48>
        {
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 8005da6:	2301      	movs	r3, #1
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	e00c      	b.n	8005dc6 <xQueueTakeMutexRecursive+0x62>
        }
        else
        {
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	6938      	ldr	r0, [r7, #16]
 8005db0:	f000 fa9e 	bl	80062f0 <xQueueSemaphoreTake>
 8005db4:	6178      	str	r0, [r7, #20]

            /* pdPASS will only be returned if the mutex was successfully
             * obtained.  The calling task may have entered the Blocked state
             * before reaching here. */
            if( xReturn != pdFAIL )
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d004      	beq.n	8005dc6 <xQueueTakeMutexRecursive+0x62>
            {
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	60da      	str	r2, [r3, #12]
            {
                traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
            }
        }

        return xReturn;
 8005dc6:	697b      	ldr	r3, [r7, #20]
    }
 8005dc8:	4618      	mov	r0, r3
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd90      	pop	{r4, r7, pc}

08005dd0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08e      	sub	sp, #56	; 0x38
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005dde:	2300      	movs	r3, #0
 8005de0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10a      	bne.n	8005e02 <xQueueGenericSend+0x32>
        __asm volatile
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005dfe:	bf00      	nop
 8005e00:	e7fe      	b.n	8005e00 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d103      	bne.n	8005e10 <xQueueGenericSend+0x40>
 8005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <xQueueGenericSend+0x44>
 8005e10:	2301      	movs	r3, #1
 8005e12:	e000      	b.n	8005e16 <xQueueGenericSend+0x46>
 8005e14:	2300      	movs	r3, #0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10a      	bne.n	8005e30 <xQueueGenericSend+0x60>
        __asm volatile
 8005e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1e:	f383 8811 	msr	BASEPRI, r3
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005e2c:	bf00      	nop
 8005e2e:	e7fe      	b.n	8005e2e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d103      	bne.n	8005e3e <xQueueGenericSend+0x6e>
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d101      	bne.n	8005e42 <xQueueGenericSend+0x72>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e000      	b.n	8005e44 <xQueueGenericSend+0x74>
 8005e42:	2300      	movs	r3, #0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10a      	bne.n	8005e5e <xQueueGenericSend+0x8e>
        __asm volatile
 8005e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4c:	f383 8811 	msr	BASEPRI, r3
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	623b      	str	r3, [r7, #32]
    }
 8005e5a:	bf00      	nop
 8005e5c:	e7fe      	b.n	8005e5c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e5e:	f001 fd3f 	bl	80078e0 <xTaskGetSchedulerState>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d102      	bne.n	8005e6e <xQueueGenericSend+0x9e>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <xQueueGenericSend+0xa2>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e000      	b.n	8005e74 <xQueueGenericSend+0xa4>
 8005e72:	2300      	movs	r3, #0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10a      	bne.n	8005e8e <xQueueGenericSend+0xbe>
        __asm volatile
 8005e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	61fb      	str	r3, [r7, #28]
    }
 8005e8a:	bf00      	nop
 8005e8c:	e7fe      	b.n	8005e8c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005e8e:	f002 fb83 	bl	8008598 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d302      	bcc.n	8005ea4 <xQueueGenericSend+0xd4>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d129      	bne.n	8005ef8 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	68b9      	ldr	r1, [r7, #8]
 8005ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eaa:	f000 fbce 	bl	800664a <prvCopyDataToQueue>
 8005eae:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d010      	beq.n	8005eda <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	3324      	adds	r3, #36	; 0x24
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f001 facd 	bl	800745c <xTaskRemoveFromEventList>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d013      	beq.n	8005ef0 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005ec8:	4b3f      	ldr	r3, [pc, #252]	; (8005fc8 <xQueueGenericSend+0x1f8>)
 8005eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	e00a      	b.n	8005ef0 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8005eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d007      	beq.n	8005ef0 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8005ee0:	4b39      	ldr	r3, [pc, #228]	; (8005fc8 <xQueueGenericSend+0x1f8>)
 8005ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005ef0:	f002 fb82 	bl	80085f8 <vPortExitCritical>
                return pdPASS;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e063      	b.n	8005fc0 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d103      	bne.n	8005f06 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005efe:	f002 fb7b 	bl	80085f8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	e05c      	b.n	8005fc0 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d106      	bne.n	8005f1a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005f0c:	f107 0314 	add.w	r3, r7, #20
 8005f10:	4618      	mov	r0, r3
 8005f12:	f001 fb7b 	bl	800760c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005f16:	2301      	movs	r3, #1
 8005f18:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005f1a:	f002 fb6d 	bl	80085f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005f1e:	f000 ff97 	bl	8006e50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005f22:	f002 fb39 	bl	8008598 <vPortEnterCritical>
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f2c:	b25b      	sxtb	r3, r3
 8005f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f32:	d103      	bne.n	8005f3c <xQueueGenericSend+0x16c>
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f42:	b25b      	sxtb	r3, r3
 8005f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f48:	d103      	bne.n	8005f52 <xQueueGenericSend+0x182>
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f52:	f002 fb51 	bl	80085f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f56:	1d3a      	adds	r2, r7, #4
 8005f58:	f107 0314 	add.w	r3, r7, #20
 8005f5c:	4611      	mov	r1, r2
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f001 fb6a 	bl	8007638 <xTaskCheckForTimeOut>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d124      	bne.n	8005fb4 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f6c:	f000 fc65 	bl	800683a <prvIsQueueFull>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d018      	beq.n	8005fa8 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	3310      	adds	r3, #16
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	4611      	mov	r1, r2
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f001 fa02 	bl	8007388 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f86:	f000 fbf0 	bl	800676a <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005f8a:	f000 ff6f 	bl	8006e6c <xTaskResumeAll>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f47f af7c 	bne.w	8005e8e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8005f96:	4b0c      	ldr	r3, [pc, #48]	; (8005fc8 <xQueueGenericSend+0x1f8>)
 8005f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	e772      	b.n	8005e8e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005faa:	f000 fbde 	bl	800676a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005fae:	f000 ff5d 	bl	8006e6c <xTaskResumeAll>
 8005fb2:	e76c      	b.n	8005e8e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fb6:	f000 fbd8 	bl	800676a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005fba:	f000 ff57 	bl	8006e6c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8005fbe:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3738      	adds	r7, #56	; 0x38
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	e000ed04 	.word	0xe000ed04

08005fcc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b092      	sub	sp, #72	; 0x48
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
 8005fd8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8005fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10a      	bne.n	8005ffa <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8005ff6:	bf00      	nop
 8005ff8:	e7fe      	b.n	8005ff8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d103      	bne.n	8006008 <xQueueGenericSendFromISR+0x3c>
 8006000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <xQueueGenericSendFromISR+0x40>
 8006008:	2301      	movs	r3, #1
 800600a:	e000      	b.n	800600e <xQueueGenericSendFromISR+0x42>
 800600c:	2300      	movs	r3, #0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10a      	bne.n	8006028 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8006012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006024:	bf00      	nop
 8006026:	e7fe      	b.n	8006026 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	2b02      	cmp	r3, #2
 800602c:	d103      	bne.n	8006036 <xQueueGenericSendFromISR+0x6a>
 800602e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <xQueueGenericSendFromISR+0x6e>
 8006036:	2301      	movs	r3, #1
 8006038:	e000      	b.n	800603c <xQueueGenericSendFromISR+0x70>
 800603a:	2300      	movs	r3, #0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10a      	bne.n	8006056 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006052:	bf00      	nop
 8006054:	e7fe      	b.n	8006054 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006056:	f002 fb81 	bl	800875c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800605a:	f3ef 8211 	mrs	r2, BASEPRI
 800605e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	623a      	str	r2, [r7, #32]
 8006070:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8006072:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006074:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800607a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800607c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607e:	429a      	cmp	r2, r3
 8006080:	d302      	bcc.n	8006088 <xQueueGenericSendFromISR+0xbc>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b02      	cmp	r3, #2
 8006086:	d146      	bne.n	8006116 <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8006088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800608a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800608e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006096:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	68b9      	ldr	r1, [r7, #8]
 800609c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800609e:	f000 fad4 	bl	800664a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80060a2:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80060a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060aa:	d112      	bne.n	80060d2 <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d02d      	beq.n	8006110 <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060b6:	3324      	adds	r3, #36	; 0x24
 80060b8:	4618      	mov	r0, r3
 80060ba:	f001 f9cf 	bl	800745c <xTaskRemoveFromEventList>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d025      	beq.n	8006110 <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d022      	beq.n	8006110 <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	e01e      	b.n	8006110 <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80060d2:	f000 ffd7 	bl	8007084 <uxTaskGetNumberOfTasks>
 80060d6:	6338      	str	r0, [r7, #48]	; 0x30
 80060d8:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80060dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060de:	429a      	cmp	r2, r3
 80060e0:	d916      	bls.n	8006110 <xQueueGenericSendFromISR+0x144>
 80060e2:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80060e6:	2b7f      	cmp	r3, #127	; 0x7f
 80060e8:	d10a      	bne.n	8006100 <xQueueGenericSendFromISR+0x134>
        __asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	61bb      	str	r3, [r7, #24]
    }
 80060fc:	bf00      	nop
 80060fe:	e7fe      	b.n	80060fe <xQueueGenericSendFromISR+0x132>
 8006100:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006104:	3301      	adds	r3, #1
 8006106:	b2db      	uxtb	r3, r3
 8006108:	b25a      	sxtb	r2, r3
 800610a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800610c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8006110:	2301      	movs	r3, #1
 8006112:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8006114:	e001      	b.n	800611a <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8006116:	2300      	movs	r3, #0
 8006118:	647b      	str	r3, [r7, #68]	; 0x44
 800611a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800611c:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006124:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006128:	4618      	mov	r0, r3
 800612a:	3748      	adds	r7, #72	; 0x48
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08c      	sub	sp, #48	; 0x30
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800613c:	2300      	movs	r3, #0
 800613e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <xQueueReceive+0x30>
        __asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	623b      	str	r3, [r7, #32]
    }
 800615c:	bf00      	nop
 800615e:	e7fe      	b.n	800615e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d103      	bne.n	800616e <xQueueReceive+0x3e>
 8006166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <xQueueReceive+0x42>
 800616e:	2301      	movs	r3, #1
 8006170:	e000      	b.n	8006174 <xQueueReceive+0x44>
 8006172:	2300      	movs	r3, #0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10a      	bne.n	800618e <xQueueReceive+0x5e>
        __asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	61fb      	str	r3, [r7, #28]
    }
 800618a:	bf00      	nop
 800618c:	e7fe      	b.n	800618c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800618e:	f001 fba7 	bl	80078e0 <xTaskGetSchedulerState>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d102      	bne.n	800619e <xQueueReceive+0x6e>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <xQueueReceive+0x72>
 800619e:	2301      	movs	r3, #1
 80061a0:	e000      	b.n	80061a4 <xQueueReceive+0x74>
 80061a2:	2300      	movs	r3, #0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10a      	bne.n	80061be <xQueueReceive+0x8e>
        __asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	61bb      	str	r3, [r7, #24]
    }
 80061ba:	bf00      	nop
 80061bc:	e7fe      	b.n	80061bc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80061be:	f002 f9eb 	bl	8008598 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d01f      	beq.n	800620e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061ce:	68b9      	ldr	r1, [r7, #8]
 80061d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061d2:	f000 faa4 	bl	800671e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	1e5a      	subs	r2, r3, #1
 80061da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061dc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00f      	beq.n	8006206 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	3310      	adds	r3, #16
 80061ea:	4618      	mov	r0, r3
 80061ec:	f001 f936 	bl	800745c <xTaskRemoveFromEventList>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d007      	beq.n	8006206 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80061f6:	4b3d      	ldr	r3, [pc, #244]	; (80062ec <xQueueReceive+0x1bc>)
 80061f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006206:	f002 f9f7 	bl	80085f8 <vPortExitCritical>
                return pdPASS;
 800620a:	2301      	movs	r3, #1
 800620c:	e069      	b.n	80062e2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d103      	bne.n	800621c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006214:	f002 f9f0 	bl	80085f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8006218:	2300      	movs	r3, #0
 800621a:	e062      	b.n	80062e2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	2b00      	cmp	r3, #0
 8006220:	d106      	bne.n	8006230 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006222:	f107 0310 	add.w	r3, r7, #16
 8006226:	4618      	mov	r0, r3
 8006228:	f001 f9f0 	bl	800760c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800622c:	2301      	movs	r3, #1
 800622e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006230:	f002 f9e2 	bl	80085f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006234:	f000 fe0c 	bl	8006e50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006238:	f002 f9ae 	bl	8008598 <vPortEnterCritical>
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006242:	b25b      	sxtb	r3, r3
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006248:	d103      	bne.n	8006252 <xQueueReceive+0x122>
 800624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006258:	b25b      	sxtb	r3, r3
 800625a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625e:	d103      	bne.n	8006268 <xQueueReceive+0x138>
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006268:	f002 f9c6 	bl	80085f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800626c:	1d3a      	adds	r2, r7, #4
 800626e:	f107 0310 	add.w	r3, r7, #16
 8006272:	4611      	mov	r1, r2
 8006274:	4618      	mov	r0, r3
 8006276:	f001 f9df 	bl	8007638 <xTaskCheckForTimeOut>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d123      	bne.n	80062c8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006282:	f000 fac4 	bl	800680e <prvIsQueueEmpty>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d017      	beq.n	80062bc <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	3324      	adds	r3, #36	; 0x24
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	4611      	mov	r1, r2
 8006294:	4618      	mov	r0, r3
 8006296:	f001 f877 	bl	8007388 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800629a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800629c:	f000 fa65 	bl	800676a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80062a0:	f000 fde4 	bl	8006e6c <xTaskResumeAll>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d189      	bne.n	80061be <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80062aa:	4b10      	ldr	r3, [pc, #64]	; (80062ec <xQueueReceive+0x1bc>)
 80062ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	e780      	b.n	80061be <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80062bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062be:	f000 fa54 	bl	800676a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80062c2:	f000 fdd3 	bl	8006e6c <xTaskResumeAll>
 80062c6:	e77a      	b.n	80061be <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80062c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ca:	f000 fa4e 	bl	800676a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80062ce:	f000 fdcd 	bl	8006e6c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062d4:	f000 fa9b 	bl	800680e <prvIsQueueEmpty>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f43f af6f 	beq.w	80061be <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80062e0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3730      	adds	r7, #48	; 0x30
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	e000ed04 	.word	0xe000ed04

080062f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b08c      	sub	sp, #48	; 0x30
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80062fa:	2300      	movs	r3, #0
 80062fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8006302:	2300      	movs	r3, #0
 8006304:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10a      	bne.n	8006322 <xQueueSemaphoreTake+0x32>
        __asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	61bb      	str	r3, [r7, #24]
    }
 800631e:	bf00      	nop
 8006320:	e7fe      	b.n	8006320 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00a      	beq.n	8006340 <xQueueSemaphoreTake+0x50>
        __asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	617b      	str	r3, [r7, #20]
    }
 800633c:	bf00      	nop
 800633e:	e7fe      	b.n	800633e <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006340:	f001 face 	bl	80078e0 <xTaskGetSchedulerState>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d102      	bne.n	8006350 <xQueueSemaphoreTake+0x60>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <xQueueSemaphoreTake+0x64>
 8006350:	2301      	movs	r3, #1
 8006352:	e000      	b.n	8006356 <xQueueSemaphoreTake+0x66>
 8006354:	2300      	movs	r3, #0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10a      	bne.n	8006370 <xQueueSemaphoreTake+0x80>
        __asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	613b      	str	r3, [r7, #16]
    }
 800636c:	bf00      	nop
 800636e:	e7fe      	b.n	800636e <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006370:	f002 f912 	bl	8008598 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006378:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d024      	beq.n	80063ca <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	1e5a      	subs	r2, r3, #1
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d104      	bne.n	800639a <xQueueSemaphoreTake+0xaa>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006390:	f001 fc94 	bl	8007cbc <pvTaskIncrementMutexHeldCount>
 8006394:	4602      	mov	r2, r0
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00f      	beq.n	80063c2 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	3310      	adds	r3, #16
 80063a6:	4618      	mov	r0, r3
 80063a8:	f001 f858 	bl	800745c <xTaskRemoveFromEventList>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d007      	beq.n	80063c2 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80063b2:	4b4d      	ldr	r3, [pc, #308]	; (80064e8 <xQueueSemaphoreTake+0x1f8>)
 80063b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80063c2:	f002 f919 	bl	80085f8 <vPortExitCritical>
                return pdPASS;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e089      	b.n	80064de <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d103      	bne.n	80063d8 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80063d0:	f002 f912 	bl	80085f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80063d4:	2300      	movs	r3, #0
 80063d6:	e082      	b.n	80064de <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d106      	bne.n	80063ec <xQueueSemaphoreTake+0xfc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80063de:	f107 0308 	add.w	r3, r7, #8
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 f912 	bl	800760c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80063e8:	2301      	movs	r3, #1
 80063ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80063ec:	f002 f904 	bl	80085f8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80063f0:	f000 fd2e 	bl	8006e50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80063f4:	f002 f8d0 	bl	8008598 <vPortEnterCritical>
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063fe:	b25b      	sxtb	r3, r3
 8006400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006404:	d103      	bne.n	800640e <xQueueSemaphoreTake+0x11e>
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006414:	b25b      	sxtb	r3, r3
 8006416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641a:	d103      	bne.n	8006424 <xQueueSemaphoreTake+0x134>
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006424:	f002 f8e8 	bl	80085f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006428:	463a      	mov	r2, r7
 800642a:	f107 0308 	add.w	r3, r7, #8
 800642e:	4611      	mov	r1, r2
 8006430:	4618      	mov	r0, r3
 8006432:	f001 f901 	bl	8007638 <xTaskCheckForTimeOut>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d132      	bne.n	80064a2 <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800643c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800643e:	f000 f9e6 	bl	800680e <prvIsQueueEmpty>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d026      	beq.n	8006496 <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d109      	bne.n	8006464 <xQueueSemaphoreTake+0x174>
                    {
                        taskENTER_CRITICAL();
 8006450:	f002 f8a2 	bl	8008598 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	4618      	mov	r0, r3
 800645a:	f001 fa5f 	bl	800791c <xTaskPriorityInherit>
 800645e:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 8006460:	f002 f8ca 	bl	80085f8 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	3324      	adds	r3, #36	; 0x24
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	4611      	mov	r1, r2
 800646c:	4618      	mov	r0, r3
 800646e:	f000 ff8b 	bl	8007388 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006472:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006474:	f000 f979 	bl	800676a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006478:	f000 fcf8 	bl	8006e6c <xTaskResumeAll>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	f47f af76 	bne.w	8006370 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8006484:	4b18      	ldr	r3, [pc, #96]	; (80064e8 <xQueueSemaphoreTake+0x1f8>)
 8006486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	e76c      	b.n	8006370 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8006496:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006498:	f000 f967 	bl	800676a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800649c:	f000 fce6 	bl	8006e6c <xTaskResumeAll>
 80064a0:	e766      	b.n	8006370 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80064a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064a4:	f000 f961 	bl	800676a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80064a8:	f000 fce0 	bl	8006e6c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064ae:	f000 f9ae 	bl	800680e <prvIsQueueEmpty>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f43f af5b 	beq.w	8006370 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80064ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00d      	beq.n	80064dc <xQueueSemaphoreTake+0x1ec>
                    {
                        taskENTER_CRITICAL();
 80064c0:	f002 f86a 	bl	8008598 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80064c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064c6:	f000 f8a8 	bl	800661a <prvGetDisinheritPriorityAfterTimeout>
 80064ca:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	69f9      	ldr	r1, [r7, #28]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f001 fb48 	bl	8007b68 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80064d8:	f002 f88e 	bl	80085f8 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80064dc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3730      	adds	r7, #48	; 0x30
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	e000ed04 	.word	0xe000ed04

080064ec <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b090      	sub	sp, #64	; 0x40
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80064fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006514:	bf00      	nop
 8006516:	e7fe      	b.n	8006516 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d103      	bne.n	8006526 <xQueueReceiveFromISR+0x3a>
 800651e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <xQueueReceiveFromISR+0x3e>
 8006526:	2301      	movs	r3, #1
 8006528:	e000      	b.n	800652c <xQueueReceiveFromISR+0x40>
 800652a:	2300      	movs	r3, #0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	623b      	str	r3, [r7, #32]
    }
 8006542:	bf00      	nop
 8006544:	e7fe      	b.n	8006544 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006546:	f002 f909 	bl	800875c <vPortValidateInterruptPriority>
        __asm volatile
 800654a:	f3ef 8211 	mrs	r2, BASEPRI
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	61fa      	str	r2, [r7, #28]
 8006560:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8006562:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006564:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800656c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656e:	2b00      	cmp	r3, #0
 8006570:	d046      	beq.n	8006600 <xQueueReceiveFromISR+0x114>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8006572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006578:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800657c:	68b9      	ldr	r1, [r7, #8]
 800657e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006580:	f000 f8cd 	bl	800671e <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	1e5a      	subs	r2, r3, #1
 8006588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658a:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800658c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006594:	d112      	bne.n	80065bc <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d02d      	beq.n	80065fa <xQueueReceiveFromISR+0x10e>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800659e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a0:	3310      	adds	r3, #16
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 ff5a 	bl	800745c <xTaskRemoveFromEventList>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d025      	beq.n	80065fa <xQueueReceiveFromISR+0x10e>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d022      	beq.n	80065fa <xQueueReceiveFromISR+0x10e>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	e01e      	b.n	80065fa <xQueueReceiveFromISR+0x10e>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 80065bc:	f000 fd62 	bl	8007084 <uxTaskGetNumberOfTasks>
 80065c0:	62b8      	str	r0, [r7, #40]	; 0x28
 80065c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80065c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d916      	bls.n	80065fa <xQueueReceiveFromISR+0x10e>
 80065cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80065d0:	2b7f      	cmp	r3, #127	; 0x7f
 80065d2:	d10a      	bne.n	80065ea <xQueueReceiveFromISR+0xfe>
        __asm volatile
 80065d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d8:	f383 8811 	msr	BASEPRI, r3
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	617b      	str	r3, [r7, #20]
    }
 80065e6:	bf00      	nop
 80065e8:	e7fe      	b.n	80065e8 <xQueueReceiveFromISR+0xfc>
 80065ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065ee:	3301      	adds	r3, #1
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	b25a      	sxtb	r2, r3
 80065f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80065fa:	2301      	movs	r3, #1
 80065fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065fe:	e001      	b.n	8006604 <xQueueReceiveFromISR+0x118>
        }
        else
        {
            xReturn = pdFAIL;
 8006600:	2300      	movs	r3, #0
 8006602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006606:	613b      	str	r3, [r7, #16]
        __asm volatile
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f383 8811 	msr	BASEPRI, r3
    }
 800660e:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006612:	4618      	mov	r0, r3
 8006614:	3740      	adds	r7, #64	; 0x40
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800661a:	b480      	push	{r7}
 800661c:	b085      	sub	sp, #20
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	2b00      	cmp	r3, #0
 8006628:	d006      	beq.n	8006638 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	e001      	b.n	800663c <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006638:	2300      	movs	r3, #0
 800663a:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800663c:	68fb      	ldr	r3, [r7, #12]
    }
 800663e:	4618      	mov	r0, r3
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b086      	sub	sp, #24
 800664e:	af00      	add	r7, sp, #0
 8006650:	60f8      	str	r0, [r7, #12]
 8006652:	60b9      	str	r1, [r7, #8]
 8006654:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006656:	2300      	movs	r3, #0
 8006658:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10d      	bne.n	8006684 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d14d      	bne.n	800670c <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	4618      	mov	r0, r3
 8006676:	f001 f9e1 	bl	8007a3c <xTaskPriorityDisinherit>
 800667a:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	609a      	str	r2, [r3, #8]
 8006682:	e043      	b.n	800670c <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d119      	bne.n	80066be <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6858      	ldr	r0, [r3, #4]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	461a      	mov	r2, r3
 8006694:	68b9      	ldr	r1, [r7, #8]
 8006696:	f009 fd51 	bl	801013c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	441a      	add	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d32b      	bcc.n	800670c <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	605a      	str	r2, [r3, #4]
 80066bc:	e026      	b.n	800670c <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	68d8      	ldr	r0, [r3, #12]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	461a      	mov	r2, r3
 80066c8:	68b9      	ldr	r1, [r7, #8]
 80066ca:	f009 fd37 	bl	801013c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	425b      	negs	r3, r3
 80066d8:	441a      	add	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d207      	bcs.n	80066fa <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	689a      	ldr	r2, [r3, #8]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	425b      	negs	r3, r3
 80066f4:	441a      	add	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d105      	bne.n	800670c <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	3b01      	subs	r3, #1
 800670a:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	1c5a      	adds	r2, r3, #1
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8006714:	697b      	ldr	r3, [r7, #20]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b082      	sub	sp, #8
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672c:	2b00      	cmp	r3, #0
 800672e:	d018      	beq.n	8006762 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006738:	441a      	add	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	429a      	cmp	r2, r3
 8006748:	d303      	bcc.n	8006752 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68d9      	ldr	r1, [r3, #12]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	461a      	mov	r2, r3
 800675c:	6838      	ldr	r0, [r7, #0]
 800675e:	f009 fced 	bl	801013c <memcpy>
    }
}
 8006762:	bf00      	nop
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006772:	f001 ff11 	bl	8008598 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800677c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800677e:	e011      	b.n	80067a4 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006784:	2b00      	cmp	r3, #0
 8006786:	d012      	beq.n	80067ae <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3324      	adds	r3, #36	; 0x24
 800678c:	4618      	mov	r0, r3
 800678e:	f000 fe65 	bl	800745c <xTaskRemoveFromEventList>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8006798:	f000 ffb4 	bl	8007704 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800679c:	7bfb      	ldrb	r3, [r7, #15]
 800679e:	3b01      	subs	r3, #1
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80067a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	dce9      	bgt.n	8006780 <prvUnlockQueue+0x16>
 80067ac:	e000      	b.n	80067b0 <prvUnlockQueue+0x46>
                    break;
 80067ae:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	22ff      	movs	r2, #255	; 0xff
 80067b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80067b8:	f001 ff1e 	bl	80085f8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80067bc:	f001 feec 	bl	8008598 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067c6:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80067c8:	e011      	b.n	80067ee <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d012      	beq.n	80067f8 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3310      	adds	r3, #16
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 fe40 	bl	800745c <xTaskRemoveFromEventList>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80067e2:	f000 ff8f 	bl	8007704 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80067e6:	7bbb      	ldrb	r3, [r7, #14]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80067ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	dce9      	bgt.n	80067ca <prvUnlockQueue+0x60>
 80067f6:	e000      	b.n	80067fa <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80067f8:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	22ff      	movs	r2, #255	; 0xff
 80067fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8006802:	f001 fef9 	bl	80085f8 <vPortExitCritical>
}
 8006806:	bf00      	nop
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b084      	sub	sp, #16
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006816:	f001 febf 	bl	8008598 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681e:	2b00      	cmp	r3, #0
 8006820:	d102      	bne.n	8006828 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006822:	2301      	movs	r3, #1
 8006824:	60fb      	str	r3, [r7, #12]
 8006826:	e001      	b.n	800682c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006828:	2300      	movs	r3, #0
 800682a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800682c:	f001 fee4 	bl	80085f8 <vPortExitCritical>

    return xReturn;
 8006830:	68fb      	ldr	r3, [r7, #12]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006842:	f001 fea9 	bl	8008598 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684e:	429a      	cmp	r2, r3
 8006850:	d102      	bne.n	8006858 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8006852:	2301      	movs	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	e001      	b.n	800685c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800685c:	f001 fecc 	bl	80085f8 <vPortExitCritical>

    return xReturn;
 8006860:	68fb      	ldr	r3, [r7, #12]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
	...

0800686c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8006876:	2300      	movs	r3, #0
 8006878:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	60fb      	str	r3, [r7, #12]
    }
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d024      	beq.n	80068e6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800689c:	2300      	movs	r3, #0
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	e01e      	b.n	80068e0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80068a2:	4a18      	ldr	r2, [pc, #96]	; (8006904 <vQueueAddToRegistry+0x98>)
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	4413      	add	r3, r2
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d105      	bne.n	80068be <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	00db      	lsls	r3, r3, #3
 80068b6:	4a13      	ldr	r2, [pc, #76]	; (8006904 <vQueueAddToRegistry+0x98>)
 80068b8:	4413      	add	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]
                    break;
 80068bc:	e013      	b.n	80068e6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10a      	bne.n	80068da <vQueueAddToRegistry+0x6e>
 80068c4:	4a0f      	ldr	r2, [pc, #60]	; (8006904 <vQueueAddToRegistry+0x98>)
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d104      	bne.n	80068da <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	4a0b      	ldr	r2, [pc, #44]	; (8006904 <vQueueAddToRegistry+0x98>)
 80068d6:	4413      	add	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	3301      	adds	r3, #1
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	2b07      	cmp	r3, #7
 80068e4:	d9dd      	bls.n	80068a2 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d005      	beq.n	80068f8 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80068f8:	bf00      	nop
 80068fa:	371c      	adds	r7, #28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	20001728 	.word	0x20001728

08006908 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006918:	f001 fe3e 	bl	8008598 <vPortEnterCritical>
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006922:	b25b      	sxtb	r3, r3
 8006924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006928:	d103      	bne.n	8006932 <vQueueWaitForMessageRestricted+0x2a>
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006938:	b25b      	sxtb	r3, r3
 800693a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693e:	d103      	bne.n	8006948 <vQueueWaitForMessageRestricted+0x40>
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006948:	f001 fe56 	bl	80085f8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006950:	2b00      	cmp	r3, #0
 8006952:	d106      	bne.n	8006962 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	3324      	adds	r3, #36	; 0x24
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	68b9      	ldr	r1, [r7, #8]
 800695c:	4618      	mov	r0, r3
 800695e:	f000 fd37 	bl	80073d0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006962:	6978      	ldr	r0, [r7, #20]
 8006964:	f7ff ff01 	bl	800676a <prvUnlockQueue>
    }
 8006968:	bf00      	nop
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8006970:	b580      	push	{r7, lr}
 8006972:	b08e      	sub	sp, #56	; 0x38
 8006974:	af04      	add	r7, sp, #16
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800697e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <xTaskCreateStatic+0x2a>
        __asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	623b      	str	r3, [r7, #32]
    }
 8006996:	bf00      	nop
 8006998:	e7fe      	b.n	8006998 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 800699a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10a      	bne.n	80069b6 <xTaskCreateStatic+0x46>
        __asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	61fb      	str	r3, [r7, #28]
    }
 80069b2:	bf00      	nop
 80069b4:	e7fe      	b.n	80069b4 <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 80069b6:	235c      	movs	r3, #92	; 0x5c
 80069b8:	613b      	str	r3, [r7, #16]
            configASSERT( xSize == sizeof( TCB_t ) );
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b5c      	cmp	r3, #92	; 0x5c
 80069be:	d00a      	beq.n	80069d6 <xTaskCreateStatic+0x66>
        __asm volatile
 80069c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	61bb      	str	r3, [r7, #24]
    }
 80069d2:	bf00      	nop
 80069d4:	e7fe      	b.n	80069d4 <xTaskCreateStatic+0x64>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069d6:	693b      	ldr	r3, [r7, #16]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d023      	beq.n	8006a26 <xTaskCreateStatic+0xb6>
 80069de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d020      	beq.n	8006a26 <xTaskCreateStatic+0xb6>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e6:	627b      	str	r3, [r7, #36]	; 0x24
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80069e8:	225c      	movs	r2, #92	; 0x5c
 80069ea:	2100      	movs	r1, #0
 80069ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069ee:	f009 fbcd 	bl	801018c <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069f6:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a00:	2300      	movs	r3, #0
 8006a02:	9303      	str	r3, [sp, #12]
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	9302      	str	r3, [sp, #8]
 8006a08:	f107 0314 	add.w	r3, r7, #20
 8006a0c:	9301      	str	r3, [sp, #4]
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	68b9      	ldr	r1, [r7, #8]
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 f855 	bl	8006ac8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006a1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a20:	f000 f8e0 	bl	8006be4 <prvAddNewTaskToReadyList>
 8006a24:	e001      	b.n	8006a2a <xTaskCreateStatic+0xba>
        }
        else
        {
            xReturn = NULL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8006a2a:	697b      	ldr	r3, [r7, #20]
    }
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3728      	adds	r7, #40	; 0x28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08c      	sub	sp, #48	; 0x30
 8006a38:	af04      	add	r7, sp, #16
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	603b      	str	r3, [r7, #0]
 8006a40:	4613      	mov	r3, r2
 8006a42:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a44:	88fb      	ldrh	r3, [r7, #6]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f001 fec7 	bl	80087dc <pvPortMalloc>
 8006a4e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d013      	beq.n	8006a7e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a56:	205c      	movs	r0, #92	; 0x5c
 8006a58:	f001 fec0 	bl	80087dc <pvPortMalloc>
 8006a5c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d008      	beq.n	8006a76 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8006a64:	225c      	movs	r2, #92	; 0x5c
 8006a66:	2100      	movs	r1, #0
 8006a68:	69f8      	ldr	r0, [r7, #28]
 8006a6a:	f009 fb8f 	bl	801018c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	631a      	str	r2, [r3, #48]	; 0x30
 8006a74:	e005      	b.n	8006a82 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8006a76:	6978      	ldr	r0, [r7, #20]
 8006a78:	f001 ff6a 	bl	8008950 <vPortFree>
 8006a7c:	e001      	b.n	8006a82 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d017      	beq.n	8006ab8 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a90:	88fa      	ldrh	r2, [r7, #6]
 8006a92:	2300      	movs	r3, #0
 8006a94:	9303      	str	r3, [sp, #12]
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	9302      	str	r3, [sp, #8]
 8006a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9c:	9301      	str	r3, [sp, #4]
 8006a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68b9      	ldr	r1, [r7, #8]
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 f80e 	bl	8006ac8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006aac:	69f8      	ldr	r0, [r7, #28]
 8006aae:	f000 f899 	bl	8006be4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	61bb      	str	r3, [r7, #24]
 8006ab6:	e002      	b.n	8006abe <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8006abc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006abe:	69bb      	ldr	r3, [r7, #24]
    }
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3720      	adds	r7, #32
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	461a      	mov	r2, r3
 8006ae0:	21a5      	movs	r1, #165	; 0xa5
 8006ae2:	f009 fb53 	bl	801018c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006af0:	3b01      	subs	r3, #1
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	f023 0307 	bic.w	r3, r3, #7
 8006afe:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	f003 0307 	and.w	r3, r3, #7
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <prvInitialiseNewTask+0x58>
        __asm volatile
 8006b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	617b      	str	r3, [r7, #20]
    }
 8006b1c:	bf00      	nop
 8006b1e:	e7fe      	b.n	8006b1e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d01e      	beq.n	8006b64 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b26:	2300      	movs	r3, #0
 8006b28:	61fb      	str	r3, [r7, #28]
 8006b2a:	e012      	b.n	8006b52 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	4413      	add	r3, r2
 8006b32:	7819      	ldrb	r1, [r3, #0]
 8006b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	4413      	add	r3, r2
 8006b3a:	3334      	adds	r3, #52	; 0x34
 8006b3c:	460a      	mov	r2, r1
 8006b3e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	4413      	add	r3, r2
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d006      	beq.n	8006b5a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	61fb      	str	r3, [r7, #28]
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	2b0f      	cmp	r3, #15
 8006b56:	d9e9      	bls.n	8006b2c <prvInitialiseNewTask+0x64>
 8006b58:	e000      	b.n	8006b5c <prvInitialiseNewTask+0x94>
            {
                break;
 8006b5a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8006b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b66:	2b37      	cmp	r3, #55	; 0x37
 8006b68:	d90a      	bls.n	8006b80 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	613b      	str	r3, [r7, #16]
    }
 8006b7c:	bf00      	nop
 8006b7e:	e7fe      	b.n	8006b7e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b82:	2b37      	cmp	r3, #55	; 0x37
 8006b84:	d901      	bls.n	8006b8a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b86:	2337      	movs	r3, #55	; 0x37
 8006b88:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b8e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8006b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b94:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	3304      	adds	r3, #4
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fe fe8e 	bl	80058bc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba2:	3318      	adds	r3, #24
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7fe fe89 	bl	80058bc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bae:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bbe:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	68f9      	ldr	r1, [r7, #12]
 8006bc4:	69b8      	ldr	r0, [r7, #24]
 8006bc6:	f001 fbbb 	bl	8008340 <pxPortInitialiseStack>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bce:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d002      	beq.n	8006bdc <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bda:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006bdc:	bf00      	nop
 8006bde:	3720      	adds	r7, #32
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006bec:	f001 fcd4 	bl	8008598 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006bf0:	4b41      	ldr	r3, [pc, #260]	; (8006cf8 <prvAddNewTaskToReadyList+0x114>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	4a40      	ldr	r2, [pc, #256]	; (8006cf8 <prvAddNewTaskToReadyList+0x114>)
 8006bf8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006bfa:	4b40      	ldr	r3, [pc, #256]	; (8006cfc <prvAddNewTaskToReadyList+0x118>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d109      	bne.n	8006c16 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006c02:	4a3e      	ldr	r2, [pc, #248]	; (8006cfc <prvAddNewTaskToReadyList+0x118>)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c08:	4b3b      	ldr	r3, [pc, #236]	; (8006cf8 <prvAddNewTaskToReadyList+0x114>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d110      	bne.n	8006c32 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006c10:	f000 fd9c 	bl	800774c <prvInitialiseTaskLists>
 8006c14:	e00d      	b.n	8006c32 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006c16:	4b3a      	ldr	r3, [pc, #232]	; (8006d00 <prvAddNewTaskToReadyList+0x11c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d109      	bne.n	8006c32 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c1e:	4b37      	ldr	r3, [pc, #220]	; (8006cfc <prvAddNewTaskToReadyList+0x118>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d802      	bhi.n	8006c32 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006c2c:	4a33      	ldr	r2, [pc, #204]	; (8006cfc <prvAddNewTaskToReadyList+0x118>)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006c32:	4b34      	ldr	r3, [pc, #208]	; (8006d04 <prvAddNewTaskToReadyList+0x120>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3301      	adds	r3, #1
 8006c38:	4a32      	ldr	r2, [pc, #200]	; (8006d04 <prvAddNewTaskToReadyList+0x120>)
 8006c3a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c3c:	4b31      	ldr	r3, [pc, #196]	; (8006d04 <prvAddNewTaskToReadyList+0x120>)
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c48:	4b2f      	ldr	r3, [pc, #188]	; (8006d08 <prvAddNewTaskToReadyList+0x124>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d903      	bls.n	8006c58 <prvAddNewTaskToReadyList+0x74>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	4a2c      	ldr	r2, [pc, #176]	; (8006d08 <prvAddNewTaskToReadyList+0x124>)
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5c:	492b      	ldr	r1, [pc, #172]	; (8006d0c <prvAddNewTaskToReadyList+0x128>)
 8006c5e:	4613      	mov	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	440b      	add	r3, r1
 8006c68:	3304      	adds	r3, #4
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	60fb      	str	r3, [r7, #12]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	609a      	str	r2, [r3, #8]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	60da      	str	r2, [r3, #12]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	3204      	adds	r2, #4
 8006c84:	605a      	str	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	1d1a      	adds	r2, r3, #4
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	609a      	str	r2, [r3, #8]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c92:	4613      	mov	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4a1c      	ldr	r2, [pc, #112]	; (8006d0c <prvAddNewTaskToReadyList+0x128>)
 8006c9c:	441a      	add	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	615a      	str	r2, [r3, #20]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca6:	4919      	ldr	r1, [pc, #100]	; (8006d0c <prvAddNewTaskToReadyList+0x128>)
 8006ca8:	4613      	mov	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	440b      	add	r3, r1
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	1c59      	adds	r1, r3, #1
 8006cb6:	4815      	ldr	r0, [pc, #84]	; (8006d0c <prvAddNewTaskToReadyList+0x128>)
 8006cb8:	4613      	mov	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4403      	add	r3, r0
 8006cc2:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8006cc4:	f001 fc98 	bl	80085f8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006cc8:	4b0d      	ldr	r3, [pc, #52]	; (8006d00 <prvAddNewTaskToReadyList+0x11c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00e      	beq.n	8006cee <prvAddNewTaskToReadyList+0x10a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <prvAddNewTaskToReadyList+0x118>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d207      	bcs.n	8006cee <prvAddNewTaskToReadyList+0x10a>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006cde:	4b0c      	ldr	r3, [pc, #48]	; (8006d10 <prvAddNewTaskToReadyList+0x12c>)
 8006ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006cee:	bf00      	nop
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20001c3c 	.word	0x20001c3c
 8006cfc:	20001768 	.word	0x20001768
 8006d00:	20001c48 	.word	0x20001c48
 8006d04:	20001c58 	.word	0x20001c58
 8006d08:	20001c44 	.word	0x20001c44
 8006d0c:	2000176c 	.word	0x2000176c
 8006d10:	e000ed04 	.word	0xe000ed04

08006d14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d017      	beq.n	8006d56 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8006d26:	4b13      	ldr	r3, [pc, #76]	; (8006d74 <vTaskDelay+0x60>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00a      	beq.n	8006d44 <vTaskDelay+0x30>
        __asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	60bb      	str	r3, [r7, #8]
    }
 8006d40:	bf00      	nop
 8006d42:	e7fe      	b.n	8006d42 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8006d44:	f000 f884 	bl	8006e50 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d48:	2100      	movs	r1, #0
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 ffca 	bl	8007ce4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8006d50:	f000 f88c 	bl	8006e6c <xTaskResumeAll>
 8006d54:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d107      	bne.n	8006d6c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8006d5c:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <vTaskDelay+0x64>)
 8006d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8006d6c:	bf00      	nop
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20001c64 	.word	0x20001c64
 8006d78:	e000ed04 	.word	0xe000ed04

08006d7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b08a      	sub	sp, #40	; 0x28
 8006d80:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8006d82:	2300      	movs	r3, #0
 8006d84:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d8a:	463a      	mov	r2, r7
 8006d8c:	1d39      	adds	r1, r7, #4
 8006d8e:	f107 0308 	add.w	r3, r7, #8
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7fe fd3e 	bl	8005814 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	9202      	str	r2, [sp, #8]
 8006da0:	9301      	str	r3, [sp, #4]
 8006da2:	2300      	movs	r3, #0
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	2300      	movs	r3, #0
 8006da8:	460a      	mov	r2, r1
 8006daa:	4922      	ldr	r1, [pc, #136]	; (8006e34 <vTaskStartScheduler+0xb8>)
 8006dac:	4822      	ldr	r0, [pc, #136]	; (8006e38 <vTaskStartScheduler+0xbc>)
 8006dae:	f7ff fddf 	bl	8006970 <xTaskCreateStatic>
 8006db2:	4603      	mov	r3, r0
 8006db4:	4a21      	ldr	r2, [pc, #132]	; (8006e3c <vTaskStartScheduler+0xc0>)
 8006db6:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8006db8:	4b20      	ldr	r3, [pc, #128]	; (8006e3c <vTaskStartScheduler+0xc0>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	617b      	str	r3, [r7, #20]
 8006dc4:	e001      	b.n	8006dca <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	617b      	str	r3, [r7, #20]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d102      	bne.n	8006dd6 <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 8006dd0:	f000 fff6 	bl	8007dc0 <xTimerCreateTimerTask>
 8006dd4:	6178      	str	r0, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d116      	bne.n	8006e0a <vTaskStartScheduler+0x8e>
        __asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	613b      	str	r3, [r7, #16]
    }
 8006dee:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8006df0:	4b13      	ldr	r3, [pc, #76]	; (8006e40 <vTaskStartScheduler+0xc4>)
 8006df2:	f04f 32ff 	mov.w	r2, #4294967295
 8006df6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006df8:	4b12      	ldr	r3, [pc, #72]	; (8006e44 <vTaskStartScheduler+0xc8>)
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006dfe:	4b12      	ldr	r3, [pc, #72]	; (8006e48 <vTaskStartScheduler+0xcc>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8006e04:	f001 fb26 	bl	8008454 <xPortStartScheduler>
 8006e08:	e00e      	b.n	8006e28 <vTaskStartScheduler+0xac>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e10:	d10a      	bne.n	8006e28 <vTaskStartScheduler+0xac>
        __asm volatile
 8006e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	60fb      	str	r3, [r7, #12]
    }
 8006e24:	bf00      	nop
 8006e26:	e7fe      	b.n	8006e26 <vTaskStartScheduler+0xaa>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006e28:	4b08      	ldr	r3, [pc, #32]	; (8006e4c <vTaskStartScheduler+0xd0>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
}
 8006e2c:	bf00      	nop
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	08013ba8 	.word	0x08013ba8
 8006e38:	0800771d 	.word	0x0800771d
 8006e3c:	20001c60 	.word	0x20001c60
 8006e40:	20001c5c 	.word	0x20001c5c
 8006e44:	20001c48 	.word	0x20001c48
 8006e48:	20001c40 	.word	0x20001c40
 8006e4c:	20000438 	.word	0x20000438

08006e50 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e50:	b480      	push	{r7}
 8006e52:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006e54:	4b04      	ldr	r3, [pc, #16]	; (8006e68 <vTaskSuspendAll+0x18>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	4a03      	ldr	r2, [pc, #12]	; (8006e68 <vTaskSuspendAll+0x18>)
 8006e5c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006e5e:	bf00      	nop
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	20001c64 	.word	0x20001c64

08006e6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b088      	sub	sp, #32
 8006e70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006e72:	2300      	movs	r3, #0
 8006e74:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006e76:	2300      	movs	r3, #0
 8006e78:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8006e7a:	4b71      	ldr	r3, [pc, #452]	; (8007040 <xTaskResumeAll+0x1d4>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10a      	bne.n	8006e98 <xTaskResumeAll+0x2c>
        __asm volatile
 8006e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	607b      	str	r3, [r7, #4]
    }
 8006e94:	bf00      	nop
 8006e96:	e7fe      	b.n	8006e96 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006e98:	f001 fb7e 	bl	8008598 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006e9c:	4b68      	ldr	r3, [pc, #416]	; (8007040 <xTaskResumeAll+0x1d4>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	4a67      	ldr	r2, [pc, #412]	; (8007040 <xTaskResumeAll+0x1d4>)
 8006ea4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ea6:	4b66      	ldr	r3, [pc, #408]	; (8007040 <xTaskResumeAll+0x1d4>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f040 80c1 	bne.w	8007032 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006eb0:	4b64      	ldr	r3, [pc, #400]	; (8007044 <xTaskResumeAll+0x1d8>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 80bc 	beq.w	8007032 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006eba:	e08b      	b.n	8006fd4 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ebc:	4b62      	ldr	r3, [pc, #392]	; (8007048 <xTaskResumeAll+0x1dc>)
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec8:	613b      	str	r3, [r7, #16]
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	69fa      	ldr	r2, [r7, #28]
 8006ed0:	6a12      	ldr	r2, [r2, #32]
 8006ed2:	609a      	str	r2, [r3, #8]
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	6a1b      	ldr	r3, [r3, #32]
 8006ed8:	69fa      	ldr	r2, [r7, #28]
 8006eda:	69d2      	ldr	r2, [r2, #28]
 8006edc:	605a      	str	r2, [r3, #4]
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	3318      	adds	r3, #24
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d103      	bne.n	8006ef2 <xTaskResumeAll+0x86>
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	6a1a      	ldr	r2, [r3, #32]
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	605a      	str	r2, [r3, #4]
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	629a      	str	r2, [r3, #40]	; 0x28
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	1e5a      	subs	r2, r3, #1
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	60fb      	str	r3, [r7, #12]
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	69fa      	ldr	r2, [r7, #28]
 8006f0e:	68d2      	ldr	r2, [r2, #12]
 8006f10:	609a      	str	r2, [r3, #8]
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	69fa      	ldr	r2, [r7, #28]
 8006f18:	6892      	ldr	r2, [r2, #8]
 8006f1a:	605a      	str	r2, [r3, #4]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	3304      	adds	r3, #4
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d103      	bne.n	8006f30 <xTaskResumeAll+0xc4>
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	68da      	ldr	r2, [r3, #12]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	605a      	str	r2, [r3, #4]
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	2200      	movs	r2, #0
 8006f34:	615a      	str	r2, [r3, #20]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	1e5a      	subs	r2, r3, #1
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f44:	4b41      	ldr	r3, [pc, #260]	; (800704c <xTaskResumeAll+0x1e0>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d903      	bls.n	8006f54 <xTaskResumeAll+0xe8>
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f50:	4a3e      	ldr	r2, [pc, #248]	; (800704c <xTaskResumeAll+0x1e0>)
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f58:	493d      	ldr	r1, [pc, #244]	; (8007050 <xTaskResumeAll+0x1e4>)
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	440b      	add	r3, r1
 8006f64:	3304      	adds	r3, #4
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	60bb      	str	r3, [r7, #8]
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	609a      	str	r2, [r3, #8]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	689a      	ldr	r2, [r3, #8]
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	60da      	str	r2, [r3, #12]
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	69fa      	ldr	r2, [r7, #28]
 8006f7e:	3204      	adds	r2, #4
 8006f80:	605a      	str	r2, [r3, #4]
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	1d1a      	adds	r2, r3, #4
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	609a      	str	r2, [r3, #8]
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4a2e      	ldr	r2, [pc, #184]	; (8007050 <xTaskResumeAll+0x1e4>)
 8006f98:	441a      	add	r2, r3
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	615a      	str	r2, [r3, #20]
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa2:	492b      	ldr	r1, [pc, #172]	; (8007050 <xTaskResumeAll+0x1e4>)
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4413      	add	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	440b      	add	r3, r1
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	1c59      	adds	r1, r3, #1
 8006fb2:	4827      	ldr	r0, [pc, #156]	; (8007050 <xTaskResumeAll+0x1e4>)
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4403      	add	r3, r0
 8006fbe:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc4:	4b23      	ldr	r3, [pc, #140]	; (8007054 <xTaskResumeAll+0x1e8>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d302      	bcc.n	8006fd4 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8006fce:	4b22      	ldr	r3, [pc, #136]	; (8007058 <xTaskResumeAll+0x1ec>)
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fd4:	4b1c      	ldr	r3, [pc, #112]	; (8007048 <xTaskResumeAll+0x1dc>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f47f af6f 	bne.w	8006ebc <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006fe4:	f000 fc50 	bl	8007888 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006fe8:	4b1c      	ldr	r3, [pc, #112]	; (800705c <xTaskResumeAll+0x1f0>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d010      	beq.n	8007016 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006ff4:	f000 f852 	bl	800709c <xTaskIncrementTick>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d002      	beq.n	8007004 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8006ffe:	4b16      	ldr	r3, [pc, #88]	; (8007058 <xTaskResumeAll+0x1ec>)
 8007000:	2201      	movs	r2, #1
 8007002:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	3b01      	subs	r3, #1
 8007008:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1f1      	bne.n	8006ff4 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8007010:	4b12      	ldr	r3, [pc, #72]	; (800705c <xTaskResumeAll+0x1f0>)
 8007012:	2200      	movs	r2, #0
 8007014:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007016:	4b10      	ldr	r3, [pc, #64]	; (8007058 <xTaskResumeAll+0x1ec>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d009      	beq.n	8007032 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800701e:	2301      	movs	r3, #1
 8007020:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007022:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <xTaskResumeAll+0x1f4>)
 8007024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007032:	f001 fae1 	bl	80085f8 <vPortExitCritical>

    return xAlreadyYielded;
 8007036:	69bb      	ldr	r3, [r7, #24]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3720      	adds	r7, #32
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	20001c64 	.word	0x20001c64
 8007044:	20001c3c 	.word	0x20001c3c
 8007048:	20001bfc 	.word	0x20001bfc
 800704c:	20001c44 	.word	0x20001c44
 8007050:	2000176c 	.word	0x2000176c
 8007054:	20001768 	.word	0x20001768
 8007058:	20001c50 	.word	0x20001c50
 800705c:	20001c4c 	.word	0x20001c4c
 8007060:	e000ed04 	.word	0xe000ed04

08007064 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800706a:	4b05      	ldr	r3, [pc, #20]	; (8007080 <xTaskGetTickCount+0x1c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8007070:	687b      	ldr	r3, [r7, #4]
}
 8007072:	4618      	mov	r0, r3
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	20001c40 	.word	0x20001c40

08007084 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8007084:	b480      	push	{r7}
 8007086:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8007088:	4b03      	ldr	r3, [pc, #12]	; (8007098 <uxTaskGetNumberOfTasks+0x14>)
 800708a:	681b      	ldr	r3, [r3, #0]
}
 800708c:	4618      	mov	r0, r3
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	20001c3c 	.word	0x20001c3c

0800709c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08a      	sub	sp, #40	; 0x28
 80070a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80070a2:	2300      	movs	r3, #0
 80070a4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070a6:	4b7e      	ldr	r3, [pc, #504]	; (80072a0 <xTaskIncrementTick+0x204>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f040 80ed 	bne.w	800728a <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070b0:	4b7c      	ldr	r3, [pc, #496]	; (80072a4 <xTaskIncrementTick+0x208>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3301      	adds	r3, #1
 80070b6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80070b8:	4a7a      	ldr	r2, [pc, #488]	; (80072a4 <xTaskIncrementTick+0x208>)
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d120      	bne.n	8007106 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80070c4:	4b78      	ldr	r3, [pc, #480]	; (80072a8 <xTaskIncrementTick+0x20c>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <xTaskIncrementTick+0x48>
        __asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	607b      	str	r3, [r7, #4]
    }
 80070e0:	bf00      	nop
 80070e2:	e7fe      	b.n	80070e2 <xTaskIncrementTick+0x46>
 80070e4:	4b70      	ldr	r3, [pc, #448]	; (80072a8 <xTaskIncrementTick+0x20c>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	61fb      	str	r3, [r7, #28]
 80070ea:	4b70      	ldr	r3, [pc, #448]	; (80072ac <xTaskIncrementTick+0x210>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a6e      	ldr	r2, [pc, #440]	; (80072a8 <xTaskIncrementTick+0x20c>)
 80070f0:	6013      	str	r3, [r2, #0]
 80070f2:	4a6e      	ldr	r2, [pc, #440]	; (80072ac <xTaskIncrementTick+0x210>)
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	4b6d      	ldr	r3, [pc, #436]	; (80072b0 <xTaskIncrementTick+0x214>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3301      	adds	r3, #1
 80070fe:	4a6c      	ldr	r2, [pc, #432]	; (80072b0 <xTaskIncrementTick+0x214>)
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	f000 fbc1 	bl	8007888 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007106:	4b6b      	ldr	r3, [pc, #428]	; (80072b4 <xTaskIncrementTick+0x218>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6a3a      	ldr	r2, [r7, #32]
 800710c:	429a      	cmp	r2, r3
 800710e:	f0c0 80a7 	bcc.w	8007260 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007112:	4b65      	ldr	r3, [pc, #404]	; (80072a8 <xTaskIncrementTick+0x20c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d104      	bne.n	8007126 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800711c:	4b65      	ldr	r3, [pc, #404]	; (80072b4 <xTaskIncrementTick+0x218>)
 800711e:	f04f 32ff 	mov.w	r2, #4294967295
 8007122:	601a      	str	r2, [r3, #0]
                    break;
 8007124:	e09c      	b.n	8007260 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007126:	4b60      	ldr	r3, [pc, #384]	; (80072a8 <xTaskIncrementTick+0x20c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8007136:	6a3a      	ldr	r2, [r7, #32]
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	429a      	cmp	r2, r3
 800713c:	d203      	bcs.n	8007146 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800713e:	4a5d      	ldr	r2, [pc, #372]	; (80072b4 <xTaskIncrementTick+0x218>)
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8007144:	e08c      	b.n	8007260 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	613b      	str	r3, [r7, #16]
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	68d2      	ldr	r2, [r2, #12]
 8007154:	609a      	str	r2, [r3, #8]
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	69ba      	ldr	r2, [r7, #24]
 800715c:	6892      	ldr	r2, [r2, #8]
 800715e:	605a      	str	r2, [r3, #4]
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	3304      	adds	r3, #4
 8007168:	429a      	cmp	r2, r3
 800716a:	d103      	bne.n	8007174 <xTaskIncrementTick+0xd8>
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	68da      	ldr	r2, [r3, #12]
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	605a      	str	r2, [r3, #4]
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	2200      	movs	r2, #0
 8007178:	615a      	str	r2, [r3, #20]
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	1e5a      	subs	r2, r3, #1
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007188:	2b00      	cmp	r3, #0
 800718a:	d01e      	beq.n	80071ca <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	69ba      	ldr	r2, [r7, #24]
 8007198:	6a12      	ldr	r2, [r2, #32]
 800719a:	609a      	str	r2, [r3, #8]
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	69d2      	ldr	r2, [r2, #28]
 80071a4:	605a      	str	r2, [r3, #4]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	3318      	adds	r3, #24
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d103      	bne.n	80071ba <xTaskIncrementTick+0x11e>
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	6a1a      	ldr	r2, [r3, #32]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	605a      	str	r2, [r3, #4]
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	2200      	movs	r2, #0
 80071be:	629a      	str	r2, [r3, #40]	; 0x28
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	1e5a      	subs	r2, r3, #1
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ce:	4b3a      	ldr	r3, [pc, #232]	; (80072b8 <xTaskIncrementTick+0x21c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d903      	bls.n	80071de <xTaskIncrementTick+0x142>
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071da:	4a37      	ldr	r2, [pc, #220]	; (80072b8 <xTaskIncrementTick+0x21c>)
 80071dc:	6013      	str	r3, [r2, #0]
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e2:	4936      	ldr	r1, [pc, #216]	; (80072bc <xTaskIncrementTick+0x220>)
 80071e4:	4613      	mov	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	440b      	add	r3, r1
 80071ee:	3304      	adds	r3, #4
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	60bb      	str	r3, [r7, #8]
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	609a      	str	r2, [r3, #8]
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	689a      	ldr	r2, [r3, #8]
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	60da      	str	r2, [r3, #12]
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	3204      	adds	r2, #4
 800720a:	605a      	str	r2, [r3, #4]
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	1d1a      	adds	r2, r3, #4
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	609a      	str	r2, [r3, #8]
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007218:	4613      	mov	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4a26      	ldr	r2, [pc, #152]	; (80072bc <xTaskIncrementTick+0x220>)
 8007222:	441a      	add	r2, r3
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	615a      	str	r2, [r3, #20]
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800722c:	4923      	ldr	r1, [pc, #140]	; (80072bc <xTaskIncrementTick+0x220>)
 800722e:	4613      	mov	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	440b      	add	r3, r1
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	1c59      	adds	r1, r3, #1
 800723c:	481f      	ldr	r0, [pc, #124]	; (80072bc <xTaskIncrementTick+0x220>)
 800723e:	4613      	mov	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4413      	add	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4403      	add	r3, r0
 8007248:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800724e:	4b1c      	ldr	r3, [pc, #112]	; (80072c0 <xTaskIncrementTick+0x224>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	429a      	cmp	r2, r3
 8007256:	f67f af5c 	bls.w	8007112 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800725a:	2301      	movs	r3, #1
 800725c:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800725e:	e758      	b.n	8007112 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007260:	4b17      	ldr	r3, [pc, #92]	; (80072c0 <xTaskIncrementTick+0x224>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007266:	4915      	ldr	r1, [pc, #84]	; (80072bc <xTaskIncrementTick+0x220>)
 8007268:	4613      	mov	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	440b      	add	r3, r1
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d901      	bls.n	800727c <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8007278:	2301      	movs	r3, #1
 800727a:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800727c:	4b11      	ldr	r3, [pc, #68]	; (80072c4 <xTaskIncrementTick+0x228>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d007      	beq.n	8007294 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8007284:	2301      	movs	r3, #1
 8007286:	627b      	str	r3, [r7, #36]	; 0x24
 8007288:	e004      	b.n	8007294 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800728a:	4b0f      	ldr	r3, [pc, #60]	; (80072c8 <xTaskIncrementTick+0x22c>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3301      	adds	r3, #1
 8007290:	4a0d      	ldr	r2, [pc, #52]	; (80072c8 <xTaskIncrementTick+0x22c>)
 8007292:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8007294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007296:	4618      	mov	r0, r3
 8007298:	3728      	adds	r7, #40	; 0x28
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	20001c64 	.word	0x20001c64
 80072a4:	20001c40 	.word	0x20001c40
 80072a8:	20001bf4 	.word	0x20001bf4
 80072ac:	20001bf8 	.word	0x20001bf8
 80072b0:	20001c54 	.word	0x20001c54
 80072b4:	20001c5c 	.word	0x20001c5c
 80072b8:	20001c44 	.word	0x20001c44
 80072bc:	2000176c 	.word	0x2000176c
 80072c0:	20001768 	.word	0x20001768
 80072c4:	20001c50 	.word	0x20001c50
 80072c8:	20001c4c 	.word	0x20001c4c

080072cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072d2:	4b28      	ldr	r3, [pc, #160]	; (8007374 <vTaskSwitchContext+0xa8>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80072da:	4b27      	ldr	r3, [pc, #156]	; (8007378 <vTaskSwitchContext+0xac>)
 80072dc:	2201      	movs	r2, #1
 80072de:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80072e0:	e041      	b.n	8007366 <vTaskSwitchContext+0x9a>
        xYieldPending = pdFALSE;
 80072e2:	4b25      	ldr	r3, [pc, #148]	; (8007378 <vTaskSwitchContext+0xac>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e8:	4b24      	ldr	r3, [pc, #144]	; (800737c <vTaskSwitchContext+0xb0>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	60fb      	str	r3, [r7, #12]
 80072ee:	e010      	b.n	8007312 <vTaskSwitchContext+0x46>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10a      	bne.n	800730c <vTaskSwitchContext+0x40>
        __asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	607b      	str	r3, [r7, #4]
    }
 8007308:	bf00      	nop
 800730a:	e7fe      	b.n	800730a <vTaskSwitchContext+0x3e>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	3b01      	subs	r3, #1
 8007310:	60fb      	str	r3, [r7, #12]
 8007312:	491b      	ldr	r1, [pc, #108]	; (8007380 <vTaskSwitchContext+0xb4>)
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	4613      	mov	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	440b      	add	r3, r1
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d0e4      	beq.n	80072f0 <vTaskSwitchContext+0x24>
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	4613      	mov	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4a13      	ldr	r2, [pc, #76]	; (8007380 <vTaskSwitchContext+0xb4>)
 8007332:	4413      	add	r3, r2
 8007334:	60bb      	str	r3, [r7, #8]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	605a      	str	r2, [r3, #4]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	3308      	adds	r3, #8
 8007348:	429a      	cmp	r2, r3
 800734a:	d104      	bne.n	8007356 <vTaskSwitchContext+0x8a>
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	605a      	str	r2, [r3, #4]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	4a09      	ldr	r2, [pc, #36]	; (8007384 <vTaskSwitchContext+0xb8>)
 800735e:	6013      	str	r3, [r2, #0]
 8007360:	4a06      	ldr	r2, [pc, #24]	; (800737c <vTaskSwitchContext+0xb0>)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6013      	str	r3, [r2, #0]
}
 8007366:	bf00      	nop
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	20001c64 	.word	0x20001c64
 8007378:	20001c50 	.word	0x20001c50
 800737c:	20001c44 	.word	0x20001c44
 8007380:	2000176c 	.word	0x2000176c
 8007384:	20001768 	.word	0x20001768

08007388 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10a      	bne.n	80073ae <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8007398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	60fb      	str	r3, [r7, #12]
    }
 80073aa:	bf00      	nop
 80073ac:	e7fe      	b.n	80073ac <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073ae:	4b07      	ldr	r3, [pc, #28]	; (80073cc <vTaskPlaceOnEventList+0x44>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3318      	adds	r3, #24
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7fe fa8d 	bl	80058d6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073bc:	2101      	movs	r1, #1
 80073be:	6838      	ldr	r0, [r7, #0]
 80073c0:	f000 fc90 	bl	8007ce4 <prvAddCurrentTaskToDelayedList>
}
 80073c4:	bf00      	nop
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	20001768 	.word	0x20001768

080073d0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10a      	bne.n	80073f8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	613b      	str	r3, [r7, #16]
    }
 80073f4:	bf00      	nop
 80073f6:	e7fe      	b.n	80073f6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	617b      	str	r3, [r7, #20]
 80073fe:	4b16      	ldr	r3, [pc, #88]	; (8007458 <vTaskPlaceOnEventListRestricted+0x88>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	61da      	str	r2, [r3, #28]
 8007406:	4b14      	ldr	r3, [pc, #80]	; (8007458 <vTaskPlaceOnEventListRestricted+0x88>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	6892      	ldr	r2, [r2, #8]
 800740e:	621a      	str	r2, [r3, #32]
 8007410:	4b11      	ldr	r3, [pc, #68]	; (8007458 <vTaskPlaceOnEventListRestricted+0x88>)
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	3218      	adds	r2, #24
 800741a:	605a      	str	r2, [r3, #4]
 800741c:	4b0e      	ldr	r3, [pc, #56]	; (8007458 <vTaskPlaceOnEventListRestricted+0x88>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f103 0218 	add.w	r2, r3, #24
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	609a      	str	r2, [r3, #8]
 8007428:	4b0b      	ldr	r3, [pc, #44]	; (8007458 <vTaskPlaceOnEventListRestricted+0x88>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	629a      	str	r2, [r3, #40]	; 0x28
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	1c5a      	adds	r2, r3, #1
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8007440:	f04f 33ff 	mov.w	r3, #4294967295
 8007444:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007446:	6879      	ldr	r1, [r7, #4]
 8007448:	68b8      	ldr	r0, [r7, #8]
 800744a:	f000 fc4b 	bl	8007ce4 <prvAddCurrentTaskToDelayedList>
    }
 800744e:	bf00      	nop
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20001768 	.word	0x20001768

0800745c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800745c:	b480      	push	{r7}
 800745e:	b08b      	sub	sp, #44	; 0x2c
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10a      	bne.n	8007488 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	60fb      	str	r3, [r7, #12]
    }
 8007484:	bf00      	nop
 8007486:	e7fe      	b.n	8007486 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748c:	61fb      	str	r3, [r7, #28]
 800748e:	6a3b      	ldr	r3, [r7, #32]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	6a3a      	ldr	r2, [r7, #32]
 8007494:	6a12      	ldr	r2, [r2, #32]
 8007496:	609a      	str	r2, [r3, #8]
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	6a3a      	ldr	r2, [r7, #32]
 800749e:	69d2      	ldr	r2, [r2, #28]
 80074a0:	605a      	str	r2, [r3, #4]
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	3318      	adds	r3, #24
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d103      	bne.n	80074b6 <xTaskRemoveFromEventList+0x5a>
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	6a1a      	ldr	r2, [r3, #32]
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	605a      	str	r2, [r3, #4]
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	2200      	movs	r2, #0
 80074ba:	629a      	str	r2, [r3, #40]	; 0x28
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	1e5a      	subs	r2, r3, #1
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074c6:	4b4b      	ldr	r3, [pc, #300]	; (80075f4 <xTaskRemoveFromEventList+0x198>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d15f      	bne.n	800758e <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80074ce:	6a3b      	ldr	r3, [r7, #32]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	6a3a      	ldr	r2, [r7, #32]
 80074da:	68d2      	ldr	r2, [r2, #12]
 80074dc:	609a      	str	r2, [r3, #8]
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	6a3a      	ldr	r2, [r7, #32]
 80074e4:	6892      	ldr	r2, [r2, #8]
 80074e6:	605a      	str	r2, [r3, #4]
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	3304      	adds	r3, #4
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d103      	bne.n	80074fc <xTaskRemoveFromEventList+0xa0>
 80074f4:	6a3b      	ldr	r3, [r7, #32]
 80074f6:	68da      	ldr	r2, [r3, #12]
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	605a      	str	r2, [r3, #4]
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	2200      	movs	r2, #0
 8007500:	615a      	str	r2, [r3, #20]
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	1e5a      	subs	r2, r3, #1
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007510:	4b39      	ldr	r3, [pc, #228]	; (80075f8 <xTaskRemoveFromEventList+0x19c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	429a      	cmp	r2, r3
 8007516:	d903      	bls.n	8007520 <xTaskRemoveFromEventList+0xc4>
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751c:	4a36      	ldr	r2, [pc, #216]	; (80075f8 <xTaskRemoveFromEventList+0x19c>)
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007524:	4935      	ldr	r1, [pc, #212]	; (80075fc <xTaskRemoveFromEventList+0x1a0>)
 8007526:	4613      	mov	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	440b      	add	r3, r1
 8007530:	3304      	adds	r3, #4
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	613b      	str	r3, [r7, #16]
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	609a      	str	r2, [r3, #8]
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	689a      	ldr	r2, [r3, #8]
 8007540:	6a3b      	ldr	r3, [r7, #32]
 8007542:	60da      	str	r2, [r3, #12]
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	6a3a      	ldr	r2, [r7, #32]
 800754a:	3204      	adds	r2, #4
 800754c:	605a      	str	r2, [r3, #4]
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	1d1a      	adds	r2, r3, #4
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	609a      	str	r2, [r3, #8]
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800755a:	4613      	mov	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4a26      	ldr	r2, [pc, #152]	; (80075fc <xTaskRemoveFromEventList+0x1a0>)
 8007564:	441a      	add	r2, r3
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	615a      	str	r2, [r3, #20]
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800756e:	4923      	ldr	r1, [pc, #140]	; (80075fc <xTaskRemoveFromEventList+0x1a0>)
 8007570:	4613      	mov	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4413      	add	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	440b      	add	r3, r1
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	1c59      	adds	r1, r3, #1
 800757e:	481f      	ldr	r0, [pc, #124]	; (80075fc <xTaskRemoveFromEventList+0x1a0>)
 8007580:	4613      	mov	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4403      	add	r3, r0
 800758a:	6019      	str	r1, [r3, #0]
 800758c:	e01b      	b.n	80075c6 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800758e:	4b1c      	ldr	r3, [pc, #112]	; (8007600 <xTaskRemoveFromEventList+0x1a4>)
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	61bb      	str	r3, [r7, #24]
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	61da      	str	r2, [r3, #28]
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	689a      	ldr	r2, [r3, #8]
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	621a      	str	r2, [r3, #32]
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	6a3a      	ldr	r2, [r7, #32]
 80075a8:	3218      	adds	r2, #24
 80075aa:	605a      	str	r2, [r3, #4]
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	f103 0218 	add.w	r2, r3, #24
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	609a      	str	r2, [r3, #8]
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	4a11      	ldr	r2, [pc, #68]	; (8007600 <xTaskRemoveFromEventList+0x1a4>)
 80075ba:	629a      	str	r2, [r3, #40]	; 0x28
 80075bc:	4b10      	ldr	r3, [pc, #64]	; (8007600 <xTaskRemoveFromEventList+0x1a4>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3301      	adds	r3, #1
 80075c2:	4a0f      	ldr	r2, [pc, #60]	; (8007600 <xTaskRemoveFromEventList+0x1a4>)
 80075c4:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075c6:	6a3b      	ldr	r3, [r7, #32]
 80075c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ca:	4b0e      	ldr	r3, [pc, #56]	; (8007604 <xTaskRemoveFromEventList+0x1a8>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d905      	bls.n	80075e0 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80075d4:	2301      	movs	r3, #1
 80075d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80075d8:	4b0b      	ldr	r3, [pc, #44]	; (8007608 <xTaskRemoveFromEventList+0x1ac>)
 80075da:	2201      	movs	r2, #1
 80075dc:	601a      	str	r2, [r3, #0]
 80075de:	e001      	b.n	80075e4 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 80075e0:	2300      	movs	r3, #0
 80075e2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	372c      	adds	r7, #44	; 0x2c
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	20001c64 	.word	0x20001c64
 80075f8:	20001c44 	.word	0x20001c44
 80075fc:	2000176c 	.word	0x2000176c
 8007600:	20001bfc 	.word	0x20001bfc
 8007604:	20001768 	.word	0x20001768
 8007608:	20001c50 	.word	0x20001c50

0800760c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007614:	4b06      	ldr	r3, [pc, #24]	; (8007630 <vTaskInternalSetTimeOutState+0x24>)
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800761c:	4b05      	ldr	r3, [pc, #20]	; (8007634 <vTaskInternalSetTimeOutState+0x28>)
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	605a      	str	r2, [r3, #4]
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	20001c54 	.word	0x20001c54
 8007634:	20001c40 	.word	0x20001c40

08007638 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b088      	sub	sp, #32
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10a      	bne.n	800765e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8007648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764c:	f383 8811 	msr	BASEPRI, r3
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	613b      	str	r3, [r7, #16]
    }
 800765a:	bf00      	nop
 800765c:	e7fe      	b.n	800765c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10a      	bne.n	800767a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8007664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007668:	f383 8811 	msr	BASEPRI, r3
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	60fb      	str	r3, [r7, #12]
    }
 8007676:	bf00      	nop
 8007678:	e7fe      	b.n	8007678 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800767a:	f000 ff8d 	bl	8008598 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800767e:	4b1f      	ldr	r3, [pc, #124]	; (80076fc <xTaskCheckForTimeOut+0xc4>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007696:	d102      	bne.n	800769e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007698:	2300      	movs	r3, #0
 800769a:	61fb      	str	r3, [r7, #28]
 800769c:	e026      	b.n	80076ec <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	4b17      	ldr	r3, [pc, #92]	; (8007700 <xTaskCheckForTimeOut+0xc8>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d00a      	beq.n	80076c0 <xTaskCheckForTimeOut+0x88>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d305      	bcc.n	80076c0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80076b4:	2301      	movs	r3, #1
 80076b6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	2200      	movs	r2, #0
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	e015      	b.n	80076ec <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d20b      	bcs.n	80076e2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	1ad2      	subs	r2, r2, r3
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7ff ff98 	bl	800760c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80076dc:	2300      	movs	r3, #0
 80076de:	61fb      	str	r3, [r7, #28]
 80076e0:	e004      	b.n	80076ec <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2200      	movs	r2, #0
 80076e6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80076e8:	2301      	movs	r3, #1
 80076ea:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80076ec:	f000 ff84 	bl	80085f8 <vPortExitCritical>

    return xReturn;
 80076f0:	69fb      	ldr	r3, [r7, #28]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3720      	adds	r7, #32
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	20001c40 	.word	0x20001c40
 8007700:	20001c54 	.word	0x20001c54

08007704 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007704:	b480      	push	{r7}
 8007706:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8007708:	4b03      	ldr	r3, [pc, #12]	; (8007718 <vTaskMissedYield+0x14>)
 800770a:	2201      	movs	r2, #1
 800770c:	601a      	str	r2, [r3, #0]
}
 800770e:	bf00      	nop
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	20001c50 	.word	0x20001c50

0800771c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007724:	f000 f852 	bl	80077cc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007728:	4b06      	ldr	r3, [pc, #24]	; (8007744 <prvIdleTask+0x28>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d9f9      	bls.n	8007724 <prvIdleTask+0x8>
            {
                taskYIELD();
 8007730:	4b05      	ldr	r3, [pc, #20]	; (8007748 <prvIdleTask+0x2c>)
 8007732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007736:	601a      	str	r2, [r3, #0]
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8007740:	e7f0      	b.n	8007724 <prvIdleTask+0x8>
 8007742:	bf00      	nop
 8007744:	2000176c 	.word	0x2000176c
 8007748:	e000ed04 	.word	0xe000ed04

0800774c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007752:	2300      	movs	r3, #0
 8007754:	607b      	str	r3, [r7, #4]
 8007756:	e00c      	b.n	8007772 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	4613      	mov	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4a12      	ldr	r2, [pc, #72]	; (80077ac <prvInitialiseTaskLists+0x60>)
 8007764:	4413      	add	r3, r2
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe f888 	bl	800587c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	3301      	adds	r3, #1
 8007770:	607b      	str	r3, [r7, #4]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b37      	cmp	r3, #55	; 0x37
 8007776:	d9ef      	bls.n	8007758 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007778:	480d      	ldr	r0, [pc, #52]	; (80077b0 <prvInitialiseTaskLists+0x64>)
 800777a:	f7fe f87f 	bl	800587c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800777e:	480d      	ldr	r0, [pc, #52]	; (80077b4 <prvInitialiseTaskLists+0x68>)
 8007780:	f7fe f87c 	bl	800587c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8007784:	480c      	ldr	r0, [pc, #48]	; (80077b8 <prvInitialiseTaskLists+0x6c>)
 8007786:	f7fe f879 	bl	800587c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800778a:	480c      	ldr	r0, [pc, #48]	; (80077bc <prvInitialiseTaskLists+0x70>)
 800778c:	f7fe f876 	bl	800587c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8007790:	480b      	ldr	r0, [pc, #44]	; (80077c0 <prvInitialiseTaskLists+0x74>)
 8007792:	f7fe f873 	bl	800587c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8007796:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <prvInitialiseTaskLists+0x78>)
 8007798:	4a05      	ldr	r2, [pc, #20]	; (80077b0 <prvInitialiseTaskLists+0x64>)
 800779a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800779c:	4b0a      	ldr	r3, [pc, #40]	; (80077c8 <prvInitialiseTaskLists+0x7c>)
 800779e:	4a05      	ldr	r2, [pc, #20]	; (80077b4 <prvInitialiseTaskLists+0x68>)
 80077a0:	601a      	str	r2, [r3, #0]
}
 80077a2:	bf00      	nop
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	2000176c 	.word	0x2000176c
 80077b0:	20001bcc 	.word	0x20001bcc
 80077b4:	20001be0 	.word	0x20001be0
 80077b8:	20001bfc 	.word	0x20001bfc
 80077bc:	20001c10 	.word	0x20001c10
 80077c0:	20001c28 	.word	0x20001c28
 80077c4:	20001bf4 	.word	0x20001bf4
 80077c8:	20001bf8 	.word	0x20001bf8

080077cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077d2:	e019      	b.n	8007808 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80077d4:	f000 fee0 	bl	8008598 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077d8:	4b10      	ldr	r3, [pc, #64]	; (800781c <prvCheckTasksWaitingTermination+0x50>)
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3304      	adds	r3, #4
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fe f8af 	bl	8005948 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80077ea:	4b0d      	ldr	r3, [pc, #52]	; (8007820 <prvCheckTasksWaitingTermination+0x54>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3b01      	subs	r3, #1
 80077f0:	4a0b      	ldr	r2, [pc, #44]	; (8007820 <prvCheckTasksWaitingTermination+0x54>)
 80077f2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80077f4:	4b0b      	ldr	r3, [pc, #44]	; (8007824 <prvCheckTasksWaitingTermination+0x58>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	4a0a      	ldr	r2, [pc, #40]	; (8007824 <prvCheckTasksWaitingTermination+0x58>)
 80077fc:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80077fe:	f000 fefb 	bl	80085f8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f810 	bl	8007828 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007808:	4b06      	ldr	r3, [pc, #24]	; (8007824 <prvCheckTasksWaitingTermination+0x58>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e1      	bne.n	80077d4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8007810:	bf00      	nop
 8007812:	bf00      	nop
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20001c10 	.word	0x20001c10
 8007820:	20001c3c 	.word	0x20001c3c
 8007824:	20001c24 	.word	0x20001c24

08007828 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007836:	2b00      	cmp	r3, #0
 8007838:	d108      	bne.n	800784c <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783e:	4618      	mov	r0, r3
 8007840:	f001 f886 	bl	8008950 <vPortFree>
                vPortFree( pxTCB );
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f001 f883 	bl	8008950 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800784a:	e018      	b.n	800787e <prvDeleteTCB+0x56>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007852:	2b01      	cmp	r3, #1
 8007854:	d103      	bne.n	800785e <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f001 f87a 	bl	8008950 <vPortFree>
    }
 800785c:	e00f      	b.n	800787e <prvDeleteTCB+0x56>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007864:	2b02      	cmp	r3, #2
 8007866:	d00a      	beq.n	800787e <prvDeleteTCB+0x56>
        __asm volatile
 8007868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	60fb      	str	r3, [r7, #12]
    }
 800787a:	bf00      	nop
 800787c:	e7fe      	b.n	800787c <prvDeleteTCB+0x54>
    }
 800787e:	bf00      	nop
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
	...

08007888 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007888:	b480      	push	{r7}
 800788a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800788c:	4b0a      	ldr	r3, [pc, #40]	; (80078b8 <prvResetNextTaskUnblockTime+0x30>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d104      	bne.n	80078a0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007896:	4b09      	ldr	r3, [pc, #36]	; (80078bc <prvResetNextTaskUnblockTime+0x34>)
 8007898:	f04f 32ff 	mov.w	r2, #4294967295
 800789c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800789e:	e005      	b.n	80078ac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80078a0:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <prvResetNextTaskUnblockTime+0x30>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a04      	ldr	r2, [pc, #16]	; (80078bc <prvResetNextTaskUnblockTime+0x34>)
 80078aa:	6013      	str	r3, [r2, #0]
}
 80078ac:	bf00      	nop
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	20001bf4 	.word	0x20001bf4
 80078bc:	20001c5c 	.word	0x20001c5c

080078c0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 80078c6:	4b05      	ldr	r3, [pc, #20]	; (80078dc <xTaskGetCurrentTaskHandle+0x1c>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	607b      	str	r3, [r7, #4]

        return xReturn;
 80078cc:	687b      	ldr	r3, [r7, #4]
    }
 80078ce:	4618      	mov	r0, r3
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	20001768 	.word	0x20001768

080078e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80078e6:	4b0b      	ldr	r3, [pc, #44]	; (8007914 <xTaskGetSchedulerState+0x34>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d102      	bne.n	80078f4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80078ee:	2301      	movs	r3, #1
 80078f0:	607b      	str	r3, [r7, #4]
 80078f2:	e008      	b.n	8007906 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078f4:	4b08      	ldr	r3, [pc, #32]	; (8007918 <xTaskGetSchedulerState+0x38>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d102      	bne.n	8007902 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80078fc:	2302      	movs	r3, #2
 80078fe:	607b      	str	r3, [r7, #4]
 8007900:	e001      	b.n	8007906 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007902:	2300      	movs	r3, #0
 8007904:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007906:	687b      	ldr	r3, [r7, #4]
    }
 8007908:	4618      	mov	r0, r3
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr
 8007914:	20001c48 	.word	0x20001c48
 8007918:	20001c64 	.word	0x20001c64

0800791c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800791c:	b580      	push	{r7, lr}
 800791e:	b086      	sub	sp, #24
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8007928:	2300      	movs	r3, #0
 800792a:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d079      	beq.n	8007a26 <xTaskPriorityInherit+0x10a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007936:	4b3e      	ldr	r3, [pc, #248]	; (8007a30 <xTaskPriorityInherit+0x114>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793c:	429a      	cmp	r2, r3
 800793e:	d269      	bcs.n	8007a14 <xTaskPriorityInherit+0xf8>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	2b00      	cmp	r3, #0
 8007946:	db06      	blt.n	8007956 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007948:	4b39      	ldr	r3, [pc, #228]	; (8007a30 <xTaskPriorityInherit+0x114>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	6959      	ldr	r1, [r3, #20]
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795e:	4613      	mov	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4a33      	ldr	r2, [pc, #204]	; (8007a34 <xTaskPriorityInherit+0x118>)
 8007968:	4413      	add	r3, r2
 800796a:	4299      	cmp	r1, r3
 800796c:	d14a      	bne.n	8007a04 <xTaskPriorityInherit+0xe8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	3304      	adds	r3, #4
 8007972:	4618      	mov	r0, r3
 8007974:	f7fd ffe8 	bl	8005948 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007978:	4b2d      	ldr	r3, [pc, #180]	; (8007a30 <xTaskPriorityInherit+0x114>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007986:	4b2c      	ldr	r3, [pc, #176]	; (8007a38 <xTaskPriorityInherit+0x11c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	429a      	cmp	r2, r3
 800798c:	d903      	bls.n	8007996 <xTaskPriorityInherit+0x7a>
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007992:	4a29      	ldr	r2, [pc, #164]	; (8007a38 <xTaskPriorityInherit+0x11c>)
 8007994:	6013      	str	r3, [r2, #0]
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800799a:	4926      	ldr	r1, [pc, #152]	; (8007a34 <xTaskPriorityInherit+0x118>)
 800799c:	4613      	mov	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	440b      	add	r3, r1
 80079a6:	3304      	adds	r3, #4
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	609a      	str	r2, [r3, #8]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	689a      	ldr	r2, [r3, #8]
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	60da      	str	r2, [r3, #12]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	3204      	adds	r2, #4
 80079c2:	605a      	str	r2, [r3, #4]
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	1d1a      	adds	r2, r3, #4
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	609a      	str	r2, [r3, #8]
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d0:	4613      	mov	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4a16      	ldr	r2, [pc, #88]	; (8007a34 <xTaskPriorityInherit+0x118>)
 80079da:	441a      	add	r2, r3
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	615a      	str	r2, [r3, #20]
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e4:	4913      	ldr	r1, [pc, #76]	; (8007a34 <xTaskPriorityInherit+0x118>)
 80079e6:	4613      	mov	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	440b      	add	r3, r1
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	1c59      	adds	r1, r3, #1
 80079f4:	480f      	ldr	r0, [pc, #60]	; (8007a34 <xTaskPriorityInherit+0x118>)
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4403      	add	r3, r0
 8007a00:	6019      	str	r1, [r3, #0]
 8007a02:	e004      	b.n	8007a0e <xTaskPriorityInherit+0xf2>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a04:	4b0a      	ldr	r3, [pc, #40]	; (8007a30 <xTaskPriorityInherit+0x114>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	617b      	str	r3, [r7, #20]
 8007a12:	e008      	b.n	8007a26 <xTaskPriorityInherit+0x10a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a18:	4b05      	ldr	r3, [pc, #20]	; (8007a30 <xTaskPriorityInherit+0x114>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d201      	bcs.n	8007a26 <xTaskPriorityInherit+0x10a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8007a22:	2301      	movs	r3, #1
 8007a24:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007a26:	697b      	ldr	r3, [r7, #20]
    }
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20001768 	.word	0x20001768
 8007a34:	2000176c 	.word	0x2000176c
 8007a38:	20001c44 	.word	0x20001c44

08007a3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b088      	sub	sp, #32
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d07e      	beq.n	8007b50 <xTaskPriorityDisinherit+0x114>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007a52:	4b42      	ldr	r3, [pc, #264]	; (8007b5c <xTaskPriorityDisinherit+0x120>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d00a      	beq.n	8007a72 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	613b      	str	r3, [r7, #16]
    }
 8007a6e:	bf00      	nop
 8007a70:	e7fe      	b.n	8007a70 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10a      	bne.n	8007a90 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	60fb      	str	r3, [r7, #12]
    }
 8007a8c:	bf00      	nop
 8007a8e:	e7fe      	b.n	8007a8e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a94:	1e5a      	subs	r2, r3, #1
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d054      	beq.n	8007b50 <xTaskPriorityDisinherit+0x114>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d150      	bne.n	8007b50 <xTaskPriorityDisinherit+0x114>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7fd ff48 	bl	8005948 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad0:	4b23      	ldr	r3, [pc, #140]	; (8007b60 <xTaskPriorityDisinherit+0x124>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d903      	bls.n	8007ae0 <xTaskPriorityDisinherit+0xa4>
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007adc:	4a20      	ldr	r2, [pc, #128]	; (8007b60 <xTaskPriorityDisinherit+0x124>)
 8007ade:	6013      	str	r3, [r2, #0]
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae4:	491f      	ldr	r1, [pc, #124]	; (8007b64 <xTaskPriorityDisinherit+0x128>)
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	440b      	add	r3, r1
 8007af0:	3304      	adds	r3, #4
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	617b      	str	r3, [r7, #20]
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	609a      	str	r2, [r3, #8]
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	60da      	str	r2, [r3, #12]
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	69ba      	ldr	r2, [r7, #24]
 8007b0a:	3204      	adds	r2, #4
 8007b0c:	605a      	str	r2, [r3, #4]
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	1d1a      	adds	r2, r3, #4
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	609a      	str	r2, [r3, #8]
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4413      	add	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4a10      	ldr	r2, [pc, #64]	; (8007b64 <xTaskPriorityDisinherit+0x128>)
 8007b24:	441a      	add	r2, r3
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	615a      	str	r2, [r3, #20]
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2e:	490d      	ldr	r1, [pc, #52]	; (8007b64 <xTaskPriorityDisinherit+0x128>)
 8007b30:	4613      	mov	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	440b      	add	r3, r1
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	1c59      	adds	r1, r3, #1
 8007b3e:	4809      	ldr	r0, [pc, #36]	; (8007b64 <xTaskPriorityDisinherit+0x128>)
 8007b40:	4613      	mov	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4403      	add	r3, r0
 8007b4a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007b50:	69fb      	ldr	r3, [r7, #28]
    }
 8007b52:	4618      	mov	r0, r3
 8007b54:	3720      	adds	r7, #32
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	20001768 	.word	0x20001768
 8007b60:	20001c44 	.word	0x20001c44
 8007b64:	2000176c 	.word	0x2000176c

08007b68 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08a      	sub	sp, #40	; 0x28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007b76:	2301      	movs	r3, #1
 8007b78:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 8093 	beq.w	8007ca8 <vTaskPriorityDisinheritAfterTimeout+0x140>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8007b82:	6a3b      	ldr	r3, [r7, #32]
 8007b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10a      	bne.n	8007ba0 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	613b      	str	r3, [r7, #16]
    }
 8007b9c:	bf00      	nop
 8007b9e:	e7fe      	b.n	8007b9e <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d902      	bls.n	8007bb0 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	627b      	str	r3, [r7, #36]	; 0x24
 8007bae:	e002      	b.n	8007bb6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bb4:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8007bb6:	6a3b      	ldr	r3, [r7, #32]
 8007bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d073      	beq.n	8007ca8 <vTaskPriorityDisinheritAfterTimeout+0x140>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bc4:	69fa      	ldr	r2, [r7, #28]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d16e      	bne.n	8007ca8 <vTaskPriorityDisinheritAfterTimeout+0x140>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8007bca:	4b39      	ldr	r3, [pc, #228]	; (8007cb0 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6a3a      	ldr	r2, [r7, #32]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d10a      	bne.n	8007bea <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	60fb      	str	r3, [r7, #12]
    }
 8007be6:	bf00      	nop
 8007be8:	e7fe      	b.n	8007be8 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bee:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007bf6:	6a3b      	ldr	r3, [r7, #32]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	db04      	blt.n	8007c08 <vTaskPriorityDisinheritAfterTimeout+0xa0>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c04:	6a3b      	ldr	r3, [r7, #32]
 8007c06:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	6959      	ldr	r1, [r3, #20]
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4a27      	ldr	r2, [pc, #156]	; (8007cb4 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8007c18:	4413      	add	r3, r2
 8007c1a:	4299      	cmp	r1, r3
 8007c1c:	d144      	bne.n	8007ca8 <vTaskPriorityDisinheritAfterTimeout+0x140>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c1e:	6a3b      	ldr	r3, [r7, #32]
 8007c20:	3304      	adds	r3, #4
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fd fe90 	bl	8005948 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c2c:	4b22      	ldr	r3, [pc, #136]	; (8007cb8 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d903      	bls.n	8007c3c <vTaskPriorityDisinheritAfterTimeout+0xd4>
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c38:	4a1f      	ldr	r2, [pc, #124]	; (8007cb8 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8007c3a:	6013      	str	r3, [r2, #0]
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c40:	491c      	ldr	r1, [pc, #112]	; (8007cb4 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8007c42:	4613      	mov	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	440b      	add	r3, r1
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	617b      	str	r3, [r7, #20]
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	609a      	str	r2, [r3, #8]
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	689a      	ldr	r2, [r3, #8]
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	60da      	str	r2, [r3, #12]
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	6a3a      	ldr	r2, [r7, #32]
 8007c66:	3204      	adds	r2, #4
 8007c68:	605a      	str	r2, [r3, #4]
 8007c6a:	6a3b      	ldr	r3, [r7, #32]
 8007c6c:	1d1a      	adds	r2, r3, #4
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	609a      	str	r2, [r3, #8]
 8007c72:	6a3b      	ldr	r3, [r7, #32]
 8007c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c76:	4613      	mov	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4413      	add	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4a0d      	ldr	r2, [pc, #52]	; (8007cb4 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8007c80:	441a      	add	r2, r3
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	615a      	str	r2, [r3, #20]
 8007c86:	6a3b      	ldr	r3, [r7, #32]
 8007c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8a:	490a      	ldr	r1, [pc, #40]	; (8007cb4 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	440b      	add	r3, r1
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	1c59      	adds	r1, r3, #1
 8007c9a:	4806      	ldr	r0, [pc, #24]	; (8007cb4 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4403      	add	r3, r0
 8007ca6:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007ca8:	bf00      	nop
 8007caa:	3728      	adds	r7, #40	; 0x28
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	20001768 	.word	0x20001768
 8007cb4:	2000176c 	.word	0x2000176c
 8007cb8:	20001c44 	.word	0x20001c44

08007cbc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8007cbc:	b480      	push	{r7}
 8007cbe:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8007cc0:	4b07      	ldr	r3, [pc, #28]	; (8007ce0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d004      	beq.n	8007cd2 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8007cc8:	4b05      	ldr	r3, [pc, #20]	; (8007ce0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007cce:	3201      	adds	r2, #1
 8007cd0:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 8007cd2:	4b03      	ldr	r3, [pc, #12]	; (8007ce0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
    }
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	20001768 	.word	0x20001768

08007ce4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007cee:	4b2e      	ldr	r3, [pc, #184]	; (8007da8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cf4:	4b2d      	ldr	r3, [pc, #180]	; (8007dac <prvAddCurrentTaskToDelayedList+0xc8>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fd fe24 	bl	8005948 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d06:	d124      	bne.n	8007d52 <prvAddCurrentTaskToDelayedList+0x6e>
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d021      	beq.n	8007d52 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d0e:	4b28      	ldr	r3, [pc, #160]	; (8007db0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	613b      	str	r3, [r7, #16]
 8007d14:	4b25      	ldr	r3, [pc, #148]	; (8007dac <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	609a      	str	r2, [r3, #8]
 8007d1c:	4b23      	ldr	r3, [pc, #140]	; (8007dac <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	6892      	ldr	r2, [r2, #8]
 8007d24:	60da      	str	r2, [r3, #12]
 8007d26:	4b21      	ldr	r3, [pc, #132]	; (8007dac <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	3204      	adds	r2, #4
 8007d30:	605a      	str	r2, [r3, #4]
 8007d32:	4b1e      	ldr	r3, [pc, #120]	; (8007dac <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	1d1a      	adds	r2, r3, #4
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	609a      	str	r2, [r3, #8]
 8007d3c:	4b1b      	ldr	r3, [pc, #108]	; (8007dac <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a1b      	ldr	r2, [pc, #108]	; (8007db0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8007d42:	615a      	str	r2, [r3, #20]
 8007d44:	4b1a      	ldr	r3, [pc, #104]	; (8007db0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	4a19      	ldr	r2, [pc, #100]	; (8007db0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8007d4c:	6013      	str	r3, [r2, #0]
 8007d4e:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007d50:	e026      	b.n	8007da0 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4413      	add	r3, r2
 8007d58:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d5a:	4b14      	ldr	r3, [pc, #80]	; (8007dac <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d209      	bcs.n	8007d7e <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d6a:	4b12      	ldr	r3, [pc, #72]	; (8007db4 <prvAddCurrentTaskToDelayedList+0xd0>)
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	4b0f      	ldr	r3, [pc, #60]	; (8007dac <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4619      	mov	r1, r3
 8007d76:	4610      	mov	r0, r2
 8007d78:	f7fd fdad 	bl	80058d6 <vListInsert>
}
 8007d7c:	e010      	b.n	8007da0 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d7e:	4b0e      	ldr	r3, [pc, #56]	; (8007db8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3304      	adds	r3, #4
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	f7fd fda3 	bl	80058d6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8007d90:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <prvAddCurrentTaskToDelayedList+0xd8>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d202      	bcs.n	8007da0 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8007d9a:	4a08      	ldr	r2, [pc, #32]	; (8007dbc <prvAddCurrentTaskToDelayedList+0xd8>)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6013      	str	r3, [r2, #0]
}
 8007da0:	bf00      	nop
 8007da2:	3718      	adds	r7, #24
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20001c40 	.word	0x20001c40
 8007dac:	20001768 	.word	0x20001768
 8007db0:	20001c28 	.word	0x20001c28
 8007db4:	20001bf8 	.word	0x20001bf8
 8007db8:	20001bf4 	.word	0x20001bf4
 8007dbc:	20001c5c 	.word	0x20001c5c

08007dc0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b08a      	sub	sp, #40	; 0x28
 8007dc4:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007dca:	f000 fa79 	bl	80082c0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007dce:	4b1c      	ldr	r3, [pc, #112]	; (8007e40 <xTimerCreateTimerTask+0x80>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d021      	beq.n	8007e1a <xTimerCreateTimerTask+0x5a>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60fb      	str	r3, [r7, #12]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60bb      	str	r3, [r7, #8]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007dde:	1d3a      	adds	r2, r7, #4
 8007de0:	f107 0108 	add.w	r1, r7, #8
 8007de4:	f107 030c 	add.w	r3, r7, #12
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fd fd2d 	bl	8005848 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8007dee:	6879      	ldr	r1, [r7, #4]
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	9202      	str	r2, [sp, #8]
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	2302      	movs	r3, #2
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	460a      	mov	r2, r1
 8007e00:	4910      	ldr	r1, [pc, #64]	; (8007e44 <xTimerCreateTimerTask+0x84>)
 8007e02:	4811      	ldr	r0, [pc, #68]	; (8007e48 <xTimerCreateTimerTask+0x88>)
 8007e04:	f7fe fdb4 	bl	8006970 <xTaskCreateStatic>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	4a10      	ldr	r2, [pc, #64]	; (8007e4c <xTimerCreateTimerTask+0x8c>)
 8007e0c:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 8007e0e:	4b0f      	ldr	r3, [pc, #60]	; (8007e4c <xTimerCreateTimerTask+0x8c>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <xTimerCreateTimerTask+0x5a>
                {
                    xReturn = pdPASS;
 8007e16:	2301      	movs	r3, #1
 8007e18:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10a      	bne.n	8007e36 <xTimerCreateTimerTask+0x76>
        __asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	613b      	str	r3, [r7, #16]
    }
 8007e32:	bf00      	nop
 8007e34:	e7fe      	b.n	8007e34 <xTimerCreateTimerTask+0x74>
        return xReturn;
 8007e36:	697b      	ldr	r3, [r7, #20]
    }
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	20001c98 	.word	0x20001c98
 8007e44:	08013bb0 	.word	0x08013bb0
 8007e48:	08007ef5 	.word	0x08007ef5
 8007e4c:	20001c9c 	.word	0x20001c9c

08007e50 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007e5c:	e008      	b.n	8007e70 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	4413      	add	r3, r2
 8007e66:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	699a      	ldr	r2, [r3, #24]
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	18d1      	adds	r1, r2, r3
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 f8dd 	bl	800803c <prvInsertTimerInActiveList>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1ea      	bne.n	8007e5e <prvReloadTimer+0xe>
        }
    }
 8007e88:	bf00      	nop
 8007e8a:	bf00      	nop
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e9e:	4b14      	ldr	r3, [pc, #80]	; (8007ef0 <prvProcessExpiredTimer+0x5c>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fd fd4b 	bl	8005948 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007eb8:	f003 0304 	and.w	r3, r3, #4
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d005      	beq.n	8007ecc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	6879      	ldr	r1, [r7, #4]
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f7ff ffc3 	bl	8007e50 <prvReloadTimer>
 8007eca:	e008      	b.n	8007ede <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ed2:	f023 0301 	bic.w	r3, r3, #1
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	4798      	blx	r3
    }
 8007ee6:	bf00      	nop
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	20001c90 	.word	0x20001c90

08007ef4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007efc:	f107 0308 	add.w	r3, r7, #8
 8007f00:	4618      	mov	r0, r3
 8007f02:	f000 f857 	bl	8007fb4 <prvGetNextExpireTime>
 8007f06:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 f803 	bl	8007f18 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007f12:	f000 f8d5 	bl	80080c0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f16:	e7f1      	b.n	8007efc <prvTimerTask+0x8>

08007f18 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007f22:	f7fe ff95 	bl	8006e50 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f26:	f107 0308 	add.w	r3, r7, #8
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 f866 	bl	8007ffc <prvSampleTimeNow>
 8007f30:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d130      	bne.n	8007f9a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10a      	bne.n	8007f54 <prvProcessTimerOrBlockTask+0x3c>
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d806      	bhi.n	8007f54 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007f46:	f7fe ff91 	bl	8006e6c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f4a:	68f9      	ldr	r1, [r7, #12]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7ff ffa1 	bl	8007e94 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007f52:	e024      	b.n	8007f9e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d008      	beq.n	8007f6c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f5a:	4b13      	ldr	r3, [pc, #76]	; (8007fa8 <prvProcessTimerOrBlockTask+0x90>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <prvProcessTimerOrBlockTask+0x50>
 8007f64:	2301      	movs	r3, #1
 8007f66:	e000      	b.n	8007f6a <prvProcessTimerOrBlockTask+0x52>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f6c:	4b0f      	ldr	r3, [pc, #60]	; (8007fac <prvProcessTimerOrBlockTask+0x94>)
 8007f6e:	6818      	ldr	r0, [r3, #0]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	f7fe fcc5 	bl	8006908 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007f7e:	f7fe ff75 	bl	8006e6c <xTaskResumeAll>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10a      	bne.n	8007f9e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007f88:	4b09      	ldr	r3, [pc, #36]	; (8007fb0 <prvProcessTimerOrBlockTask+0x98>)
 8007f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f8e:	601a      	str	r2, [r3, #0]
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	f3bf 8f6f 	isb	sy
    }
 8007f98:	e001      	b.n	8007f9e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007f9a:	f7fe ff67 	bl	8006e6c <xTaskResumeAll>
    }
 8007f9e:	bf00      	nop
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20001c94 	.word	0x20001c94
 8007fac:	20001c98 	.word	0x20001c98
 8007fb0:	e000ed04 	.word	0xe000ed04

08007fb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007fbc:	4b0e      	ldr	r3, [pc, #56]	; (8007ff8 <prvGetNextExpireTime+0x44>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <prvGetNextExpireTime+0x16>
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	e000      	b.n	8007fcc <prvGetNextExpireTime+0x18>
 8007fca:	2200      	movs	r2, #0
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d105      	bne.n	8007fe4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fd8:	4b07      	ldr	r3, [pc, #28]	; (8007ff8 <prvGetNextExpireTime+0x44>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	60fb      	str	r3, [r7, #12]
 8007fe2:	e001      	b.n	8007fe8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
    }
 8007fea:	4618      	mov	r0, r3
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	20001c90 	.word	0x20001c90

08007ffc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8008004:	f7ff f82e 	bl	8007064 <xTaskGetTickCount>
 8008008:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800800a:	4b0b      	ldr	r3, [pc, #44]	; (8008038 <prvSampleTimeNow+0x3c>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	429a      	cmp	r2, r3
 8008012:	d205      	bcs.n	8008020 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008014:	f000 f92e 	bl	8008274 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	e002      	b.n	8008026 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8008026:	4a04      	ldr	r2, [pc, #16]	; (8008038 <prvSampleTimeNow+0x3c>)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800802c:	68fb      	ldr	r3, [r7, #12]
    }
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	20001ca0 	.word	0x20001ca0

0800803c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800804a:	2300      	movs	r3, #0
 800804c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	429a      	cmp	r2, r3
 8008060:	d812      	bhi.n	8008088 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	1ad2      	subs	r2, r2, r3
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	429a      	cmp	r2, r3
 800806e:	d302      	bcc.n	8008076 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8008070:	2301      	movs	r3, #1
 8008072:	617b      	str	r3, [r7, #20]
 8008074:	e01b      	b.n	80080ae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008076:	4b10      	ldr	r3, [pc, #64]	; (80080b8 <prvInsertTimerInActiveList+0x7c>)
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3304      	adds	r3, #4
 800807e:	4619      	mov	r1, r3
 8008080:	4610      	mov	r0, r2
 8008082:	f7fd fc28 	bl	80058d6 <vListInsert>
 8008086:	e012      	b.n	80080ae <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	429a      	cmp	r2, r3
 800808e:	d206      	bcs.n	800809e <prvInsertTimerInActiveList+0x62>
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	429a      	cmp	r2, r3
 8008096:	d302      	bcc.n	800809e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8008098:	2301      	movs	r3, #1
 800809a:	617b      	str	r3, [r7, #20]
 800809c:	e007      	b.n	80080ae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800809e:	4b07      	ldr	r3, [pc, #28]	; (80080bc <prvInsertTimerInActiveList+0x80>)
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	3304      	adds	r3, #4
 80080a6:	4619      	mov	r1, r3
 80080a8:	4610      	mov	r0, r2
 80080aa:	f7fd fc14 	bl	80058d6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80080ae:	697b      	ldr	r3, [r7, #20]
    }
 80080b0:	4618      	mov	r0, r3
 80080b2:	3718      	adds	r7, #24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	20001c94 	.word	0x20001c94
 80080bc:	20001c90 	.word	0x20001c90

080080c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b08a      	sub	sp, #40	; 0x28
 80080c4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080c6:	e0c2      	b.n	800824e <prvProcessReceivedCommands+0x18e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	da18      	bge.n	8008100 <prvProcessReceivedCommands+0x40>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80080ce:	1d3b      	adds	r3, r7, #4
 80080d0:	3304      	adds	r3, #4
 80080d2:	627b      	str	r3, [r7, #36]	; 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10a      	bne.n	80080f0 <prvProcessReceivedCommands+0x30>
        __asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	61bb      	str	r3, [r7, #24]
    }
 80080ec:	bf00      	nop
 80080ee:	e7fe      	b.n	80080ee <prvProcessReceivedCommands+0x2e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f6:	6850      	ldr	r0, [r2, #4]
 80080f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080fa:	6892      	ldr	r2, [r2, #8]
 80080fc:	4611      	mov	r1, r2
 80080fe:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	f2c0 80a2 	blt.w	800824c <prvProcessReceivedCommands+0x18c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800810c:	6a3b      	ldr	r3, [r7, #32]
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d004      	beq.n	800811e <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008114:	6a3b      	ldr	r3, [r7, #32]
 8008116:	3304      	adds	r3, #4
 8008118:	4618      	mov	r0, r3
 800811a:	f7fd fc15 	bl	8005948 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800811e:	463b      	mov	r3, r7
 8008120:	4618      	mov	r0, r3
 8008122:	f7ff ff6b 	bl	8007ffc <prvSampleTimeNow>
 8008126:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	3b01      	subs	r3, #1
 800812c:	2b08      	cmp	r3, #8
 800812e:	f200 808e 	bhi.w	800824e <prvProcessReceivedCommands+0x18e>
 8008132:	a201      	add	r2, pc, #4	; (adr r2, 8008138 <prvProcessReceivedCommands+0x78>)
 8008134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008138:	0800815d 	.word	0x0800815d
 800813c:	0800815d 	.word	0x0800815d
 8008140:	080081c5 	.word	0x080081c5
 8008144:	080081d9 	.word	0x080081d9
 8008148:	08008223 	.word	0x08008223
 800814c:	0800815d 	.word	0x0800815d
 8008150:	0800815d 	.word	0x0800815d
 8008154:	080081c5 	.word	0x080081c5
 8008158:	080081d9 	.word	0x080081d9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800815c:	6a3b      	ldr	r3, [r7, #32]
 800815e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008162:	f043 0301 	orr.w	r3, r3, #1
 8008166:	b2da      	uxtb	r2, r3
 8008168:	6a3b      	ldr	r3, [r7, #32]
 800816a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	6a3b      	ldr	r3, [r7, #32]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	18d1      	adds	r1, r2, r3
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	69fa      	ldr	r2, [r7, #28]
 800817a:	6a38      	ldr	r0, [r7, #32]
 800817c:	f7ff ff5e 	bl	800803c <prvInsertTimerInActiveList>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d063      	beq.n	800824e <prvProcessReceivedCommands+0x18e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008186:	6a3b      	ldr	r3, [r7, #32]
 8008188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800818c:	f003 0304 	and.w	r3, r3, #4
 8008190:	2b00      	cmp	r3, #0
 8008192:	d009      	beq.n	80081a8 <prvProcessReceivedCommands+0xe8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	6a3b      	ldr	r3, [r7, #32]
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	4413      	add	r3, r2
 800819c:	69fa      	ldr	r2, [r7, #28]
 800819e:	4619      	mov	r1, r3
 80081a0:	6a38      	ldr	r0, [r7, #32]
 80081a2:	f7ff fe55 	bl	8007e50 <prvReloadTimer>
 80081a6:	e008      	b.n	80081ba <prvProcessReceivedCommands+0xfa>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081ae:	f023 0301 	bic.w	r3, r3, #1
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081ba:	6a3b      	ldr	r3, [r7, #32]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	6a38      	ldr	r0, [r7, #32]
 80081c0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80081c2:	e044      	b.n	800824e <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80081c4:	6a3b      	ldr	r3, [r7, #32]
 80081c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081ca:	f023 0301 	bic.w	r3, r3, #1
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	6a3b      	ldr	r3, [r7, #32]
 80081d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80081d6:	e03a      	b.n	800824e <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081de:	f043 0301 	orr.w	r3, r3, #1
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	6a3b      	ldr	r3, [r7, #32]
 80081e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	6a3b      	ldr	r3, [r7, #32]
 80081ee:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10a      	bne.n	800820e <prvProcessReceivedCommands+0x14e>
        __asm volatile
 80081f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	617b      	str	r3, [r7, #20]
    }
 800820a:	bf00      	nop
 800820c:	e7fe      	b.n	800820c <prvProcessReceivedCommands+0x14c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800820e:	6a3b      	ldr	r3, [r7, #32]
 8008210:	699a      	ldr	r2, [r3, #24]
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	18d1      	adds	r1, r2, r3
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	69fa      	ldr	r2, [r7, #28]
 800821a:	6a38      	ldr	r0, [r7, #32]
 800821c:	f7ff ff0e 	bl	800803c <prvInsertTimerInActiveList>
                        break;
 8008220:	e015      	b.n	800824e <prvProcessReceivedCommands+0x18e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008228:	f003 0302 	and.w	r3, r3, #2
 800822c:	2b00      	cmp	r3, #0
 800822e:	d103      	bne.n	8008238 <prvProcessReceivedCommands+0x178>
                            {
                                vPortFree( pxTimer );
 8008230:	6a38      	ldr	r0, [r7, #32]
 8008232:	f000 fb8d 	bl	8008950 <vPortFree>
 8008236:	e00a      	b.n	800824e <prvProcessReceivedCommands+0x18e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800823e:	f023 0301 	bic.w	r3, r3, #1
 8008242:	b2da      	uxtb	r2, r3
 8008244:	6a3b      	ldr	r3, [r7, #32]
 8008246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800824a:	e000      	b.n	800824e <prvProcessReceivedCommands+0x18e>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800824c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800824e:	4b08      	ldr	r3, [pc, #32]	; (8008270 <prvProcessReceivedCommands+0x1b0>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	1d39      	adds	r1, r7, #4
 8008254:	2200      	movs	r2, #0
 8008256:	4618      	mov	r0, r3
 8008258:	f7fd ff6a 	bl	8006130 <xQueueReceive>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	f47f af32 	bne.w	80080c8 <prvProcessReceivedCommands+0x8>
        }
    }
 8008264:	bf00      	nop
 8008266:	bf00      	nop
 8008268:	3728      	adds	r7, #40	; 0x28
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	20001c98 	.word	0x20001c98

08008274 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800827a:	e009      	b.n	8008290 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800827c:	4b0e      	ldr	r3, [pc, #56]	; (80082b8 <prvSwitchTimerLists+0x44>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8008286:	f04f 31ff 	mov.w	r1, #4294967295
 800828a:	6838      	ldr	r0, [r7, #0]
 800828c:	f7ff fe02 	bl	8007e94 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008290:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <prvSwitchTimerLists+0x44>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1f0      	bne.n	800827c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800829a:	4b07      	ldr	r3, [pc, #28]	; (80082b8 <prvSwitchTimerLists+0x44>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80082a0:	4b06      	ldr	r3, [pc, #24]	; (80082bc <prvSwitchTimerLists+0x48>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a04      	ldr	r2, [pc, #16]	; (80082b8 <prvSwitchTimerLists+0x44>)
 80082a6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80082a8:	4a04      	ldr	r2, [pc, #16]	; (80082bc <prvSwitchTimerLists+0x48>)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6013      	str	r3, [r2, #0]
    }
 80082ae:	bf00      	nop
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	20001c90 	.word	0x20001c90
 80082bc:	20001c94 	.word	0x20001c94

080082c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80082c6:	f000 f967 	bl	8008598 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80082ca:	4b15      	ldr	r3, [pc, #84]	; (8008320 <prvCheckForValidListAndQueue+0x60>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d120      	bne.n	8008314 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 80082d2:	4814      	ldr	r0, [pc, #80]	; (8008324 <prvCheckForValidListAndQueue+0x64>)
 80082d4:	f7fd fad2 	bl	800587c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80082d8:	4813      	ldr	r0, [pc, #76]	; (8008328 <prvCheckForValidListAndQueue+0x68>)
 80082da:	f7fd facf 	bl	800587c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80082de:	4b13      	ldr	r3, [pc, #76]	; (800832c <prvCheckForValidListAndQueue+0x6c>)
 80082e0:	4a10      	ldr	r2, [pc, #64]	; (8008324 <prvCheckForValidListAndQueue+0x64>)
 80082e2:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80082e4:	4b12      	ldr	r3, [pc, #72]	; (8008330 <prvCheckForValidListAndQueue+0x70>)
 80082e6:	4a10      	ldr	r2, [pc, #64]	; (8008328 <prvCheckForValidListAndQueue+0x68>)
 80082e8:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80082ea:	2300      	movs	r3, #0
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	4b11      	ldr	r3, [pc, #68]	; (8008334 <prvCheckForValidListAndQueue+0x74>)
 80082f0:	4a11      	ldr	r2, [pc, #68]	; (8008338 <prvCheckForValidListAndQueue+0x78>)
 80082f2:	2110      	movs	r1, #16
 80082f4:	200a      	movs	r0, #10
 80082f6:	f7fd fbe1 	bl	8005abc <xQueueGenericCreateStatic>
 80082fa:	4603      	mov	r3, r0
 80082fc:	4a08      	ldr	r2, [pc, #32]	; (8008320 <prvCheckForValidListAndQueue+0x60>)
 80082fe:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8008300:	4b07      	ldr	r3, [pc, #28]	; (8008320 <prvCheckForValidListAndQueue+0x60>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d005      	beq.n	8008314 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008308:	4b05      	ldr	r3, [pc, #20]	; (8008320 <prvCheckForValidListAndQueue+0x60>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	490b      	ldr	r1, [pc, #44]	; (800833c <prvCheckForValidListAndQueue+0x7c>)
 800830e:	4618      	mov	r0, r3
 8008310:	f7fe faac 	bl	800686c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008314:	f000 f970 	bl	80085f8 <vPortExitCritical>
    }
 8008318:	bf00      	nop
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	20001c98 	.word	0x20001c98
 8008324:	20001c68 	.word	0x20001c68
 8008328:	20001c7c 	.word	0x20001c7c
 800832c:	20001c90 	.word	0x20001c90
 8008330:	20001c94 	.word	0x20001c94
 8008334:	20001d44 	.word	0x20001d44
 8008338:	20001ca4 	.word	0x20001ca4
 800833c:	08013bb8 	.word	0x08013bb8

08008340 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	3b04      	subs	r3, #4
 8008350:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008358:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	3b04      	subs	r3, #4
 800835e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f023 0201 	bic.w	r2, r3, #1
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3b04      	subs	r3, #4
 800836e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008370:	4a0c      	ldr	r2, [pc, #48]	; (80083a4 <pxPortInitialiseStack+0x64>)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	3b14      	subs	r3, #20
 800837a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3b04      	subs	r3, #4
 8008386:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f06f 0202 	mvn.w	r2, #2
 800838e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	3b20      	subs	r3, #32
 8008394:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8008396:	68fb      	ldr	r3, [r7, #12]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	080083a9 	.word	0x080083a9

080083a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80083ae:	2300      	movs	r3, #0
 80083b0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80083b2:	4b12      	ldr	r3, [pc, #72]	; (80083fc <prvTaskExitError+0x54>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ba:	d00a      	beq.n	80083d2 <prvTaskExitError+0x2a>
        __asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	60fb      	str	r3, [r7, #12]
    }
 80083ce:	bf00      	nop
 80083d0:	e7fe      	b.n	80083d0 <prvTaskExitError+0x28>
        __asm volatile
 80083d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	60bb      	str	r3, [r7, #8]
    }
 80083e4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80083e6:	bf00      	nop
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d0fc      	beq.n	80083e8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80083ee:	bf00      	nop
 80083f0:	bf00      	nop
 80083f2:	3714      	adds	r7, #20
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	2000043c 	.word	0x2000043c

08008400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008400:	4b07      	ldr	r3, [pc, #28]	; (8008420 <pxCurrentTCBConst2>)
 8008402:	6819      	ldr	r1, [r3, #0]
 8008404:	6808      	ldr	r0, [r1, #0]
 8008406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840a:	f380 8809 	msr	PSP, r0
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f04f 0000 	mov.w	r0, #0
 8008416:	f380 8811 	msr	BASEPRI, r0
 800841a:	4770      	bx	lr
 800841c:	f3af 8000 	nop.w

08008420 <pxCurrentTCBConst2>:
 8008420:	20001768 	.word	0x20001768
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop

08008428 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008428:	4808      	ldr	r0, [pc, #32]	; (800844c <prvPortStartFirstTask+0x24>)
 800842a:	6800      	ldr	r0, [r0, #0]
 800842c:	6800      	ldr	r0, [r0, #0]
 800842e:	f380 8808 	msr	MSP, r0
 8008432:	f04f 0000 	mov.w	r0, #0
 8008436:	f380 8814 	msr	CONTROL, r0
 800843a:	b662      	cpsie	i
 800843c:	b661      	cpsie	f
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	df00      	svc	0
 8008448:	bf00      	nop
 800844a:	0000      	.short	0x0000
 800844c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008450:	bf00      	nop
 8008452:	bf00      	nop

08008454 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800845a:	4b46      	ldr	r3, [pc, #280]	; (8008574 <xPortStartScheduler+0x120>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a46      	ldr	r2, [pc, #280]	; (8008578 <xPortStartScheduler+0x124>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d10a      	bne.n	800847a <xPortStartScheduler+0x26>
        __asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	613b      	str	r3, [r7, #16]
    }
 8008476:	bf00      	nop
 8008478:	e7fe      	b.n	8008478 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800847a:	4b3e      	ldr	r3, [pc, #248]	; (8008574 <xPortStartScheduler+0x120>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a3f      	ldr	r2, [pc, #252]	; (800857c <xPortStartScheduler+0x128>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d10a      	bne.n	800849a <xPortStartScheduler+0x46>
        __asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	60fb      	str	r3, [r7, #12]
    }
 8008496:	bf00      	nop
 8008498:	e7fe      	b.n	8008498 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800849a:	4b39      	ldr	r3, [pc, #228]	; (8008580 <xPortStartScheduler+0x12c>)
 800849c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	22ff      	movs	r2, #255	; 0xff
 80084aa:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084b4:	78fb      	ldrb	r3, [r7, #3]
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	4b31      	ldr	r3, [pc, #196]	; (8008584 <xPortStartScheduler+0x130>)
 80084c0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084c2:	4b31      	ldr	r3, [pc, #196]	; (8008588 <xPortStartScheduler+0x134>)
 80084c4:	2207      	movs	r2, #7
 80084c6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084c8:	e009      	b.n	80084de <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80084ca:	4b2f      	ldr	r3, [pc, #188]	; (8008588 <xPortStartScheduler+0x134>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	4a2d      	ldr	r2, [pc, #180]	; (8008588 <xPortStartScheduler+0x134>)
 80084d2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80084d4:	78fb      	ldrb	r3, [r7, #3]
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	005b      	lsls	r3, r3, #1
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084de:	78fb      	ldrb	r3, [r7, #3]
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084e6:	2b80      	cmp	r3, #128	; 0x80
 80084e8:	d0ef      	beq.n	80084ca <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084ea:	4b27      	ldr	r3, [pc, #156]	; (8008588 <xPortStartScheduler+0x134>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f1c3 0307 	rsb	r3, r3, #7
 80084f2:	2b04      	cmp	r3, #4
 80084f4:	d00a      	beq.n	800850c <xPortStartScheduler+0xb8>
        __asm volatile
 80084f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	60bb      	str	r3, [r7, #8]
    }
 8008508:	bf00      	nop
 800850a:	e7fe      	b.n	800850a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800850c:	4b1e      	ldr	r3, [pc, #120]	; (8008588 <xPortStartScheduler+0x134>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	021b      	lsls	r3, r3, #8
 8008512:	4a1d      	ldr	r2, [pc, #116]	; (8008588 <xPortStartScheduler+0x134>)
 8008514:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008516:	4b1c      	ldr	r3, [pc, #112]	; (8008588 <xPortStartScheduler+0x134>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800851e:	4a1a      	ldr	r2, [pc, #104]	; (8008588 <xPortStartScheduler+0x134>)
 8008520:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	b2da      	uxtb	r2, r3
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800852a:	4b18      	ldr	r3, [pc, #96]	; (800858c <xPortStartScheduler+0x138>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a17      	ldr	r2, [pc, #92]	; (800858c <xPortStartScheduler+0x138>)
 8008530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008534:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008536:	4b15      	ldr	r3, [pc, #84]	; (800858c <xPortStartScheduler+0x138>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a14      	ldr	r2, [pc, #80]	; (800858c <xPortStartScheduler+0x138>)
 800853c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008540:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008542:	f000 f8db 	bl	80086fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008546:	4b12      	ldr	r3, [pc, #72]	; (8008590 <xPortStartScheduler+0x13c>)
 8008548:	2200      	movs	r2, #0
 800854a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800854c:	f000 f8fa 	bl	8008744 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008550:	4b10      	ldr	r3, [pc, #64]	; (8008594 <xPortStartScheduler+0x140>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a0f      	ldr	r2, [pc, #60]	; (8008594 <xPortStartScheduler+0x140>)
 8008556:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800855a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800855c:	f7ff ff64 	bl	8008428 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008560:	f7fe feb4 	bl	80072cc <vTaskSwitchContext>
    prvTaskExitError();
 8008564:	f7ff ff20 	bl	80083a8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3718      	adds	r7, #24
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	e000ed00 	.word	0xe000ed00
 8008578:	410fc271 	.word	0x410fc271
 800857c:	410fc270 	.word	0x410fc270
 8008580:	e000e400 	.word	0xe000e400
 8008584:	20001d94 	.word	0x20001d94
 8008588:	20001d98 	.word	0x20001d98
 800858c:	e000ed20 	.word	0xe000ed20
 8008590:	2000043c 	.word	0x2000043c
 8008594:	e000ef34 	.word	0xe000ef34

08008598 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
        __asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	607b      	str	r3, [r7, #4]
    }
 80085b0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80085b2:	4b0f      	ldr	r3, [pc, #60]	; (80085f0 <vPortEnterCritical+0x58>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	3301      	adds	r3, #1
 80085b8:	4a0d      	ldr	r2, [pc, #52]	; (80085f0 <vPortEnterCritical+0x58>)
 80085ba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80085bc:	4b0c      	ldr	r3, [pc, #48]	; (80085f0 <vPortEnterCritical+0x58>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d10f      	bne.n	80085e4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80085c4:	4b0b      	ldr	r3, [pc, #44]	; (80085f4 <vPortEnterCritical+0x5c>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00a      	beq.n	80085e4 <vPortEnterCritical+0x4c>
        __asm volatile
 80085ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	603b      	str	r3, [r7, #0]
    }
 80085e0:	bf00      	nop
 80085e2:	e7fe      	b.n	80085e2 <vPortEnterCritical+0x4a>
    }
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	2000043c 	.word	0x2000043c
 80085f4:	e000ed04 	.word	0xe000ed04

080085f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80085fe:	4b12      	ldr	r3, [pc, #72]	; (8008648 <vPortExitCritical+0x50>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10a      	bne.n	800861c <vPortExitCritical+0x24>
        __asm volatile
 8008606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860a:	f383 8811 	msr	BASEPRI, r3
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	607b      	str	r3, [r7, #4]
    }
 8008618:	bf00      	nop
 800861a:	e7fe      	b.n	800861a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800861c:	4b0a      	ldr	r3, [pc, #40]	; (8008648 <vPortExitCritical+0x50>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3b01      	subs	r3, #1
 8008622:	4a09      	ldr	r2, [pc, #36]	; (8008648 <vPortExitCritical+0x50>)
 8008624:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008626:	4b08      	ldr	r3, [pc, #32]	; (8008648 <vPortExitCritical+0x50>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d105      	bne.n	800863a <vPortExitCritical+0x42>
 800862e:	2300      	movs	r3, #0
 8008630:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	f383 8811 	msr	BASEPRI, r3
    }
 8008638:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800863a:	bf00      	nop
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	2000043c 	.word	0x2000043c
 800864c:	00000000 	.word	0x00000000

08008650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008650:	f3ef 8009 	mrs	r0, PSP
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	4b15      	ldr	r3, [pc, #84]	; (80086b0 <pxCurrentTCBConst>)
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	f01e 0f10 	tst.w	lr, #16
 8008660:	bf08      	it	eq
 8008662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866a:	6010      	str	r0, [r2, #0]
 800866c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008670:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008674:	f380 8811 	msr	BASEPRI, r0
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f7fe fe24 	bl	80072cc <vTaskSwitchContext>
 8008684:	f04f 0000 	mov.w	r0, #0
 8008688:	f380 8811 	msr	BASEPRI, r0
 800868c:	bc09      	pop	{r0, r3}
 800868e:	6819      	ldr	r1, [r3, #0]
 8008690:	6808      	ldr	r0, [r1, #0]
 8008692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008696:	f01e 0f10 	tst.w	lr, #16
 800869a:	bf08      	it	eq
 800869c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80086a0:	f380 8809 	msr	PSP, r0
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	f3af 8000 	nop.w

080086b0 <pxCurrentTCBConst>:
 80086b0:	20001768 	.word	0x20001768
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80086b4:	bf00      	nop
 80086b6:	bf00      	nop

080086b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
        __asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	607b      	str	r3, [r7, #4]
    }
 80086d0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80086d2:	f7fe fce3 	bl	800709c <xTaskIncrementTick>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d003      	beq.n	80086e4 <xPortSysTickHandler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80086dc:	4b06      	ldr	r3, [pc, #24]	; (80086f8 <xPortSysTickHandler+0x40>)
 80086de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	2300      	movs	r3, #0
 80086e6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	f383 8811 	msr	BASEPRI, r3
    }
 80086ee:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80086f0:	bf00      	nop
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	e000ed04 	.word	0xe000ed04

080086fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80086fc:	b480      	push	{r7}
 80086fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008700:	4b0b      	ldr	r3, [pc, #44]	; (8008730 <vPortSetupTimerInterrupt+0x34>)
 8008702:	2200      	movs	r2, #0
 8008704:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008706:	4b0b      	ldr	r3, [pc, #44]	; (8008734 <vPortSetupTimerInterrupt+0x38>)
 8008708:	2200      	movs	r2, #0
 800870a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800870c:	4b0a      	ldr	r3, [pc, #40]	; (8008738 <vPortSetupTimerInterrupt+0x3c>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a0a      	ldr	r2, [pc, #40]	; (800873c <vPortSetupTimerInterrupt+0x40>)
 8008712:	fba2 2303 	umull	r2, r3, r2, r3
 8008716:	099b      	lsrs	r3, r3, #6
 8008718:	4a09      	ldr	r2, [pc, #36]	; (8008740 <vPortSetupTimerInterrupt+0x44>)
 800871a:	3b01      	subs	r3, #1
 800871c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800871e:	4b04      	ldr	r3, [pc, #16]	; (8008730 <vPortSetupTimerInterrupt+0x34>)
 8008720:	2207      	movs	r2, #7
 8008722:	601a      	str	r2, [r3, #0]
}
 8008724:	bf00      	nop
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	e000e010 	.word	0xe000e010
 8008734:	e000e018 	.word	0xe000e018
 8008738:	20000434 	.word	0x20000434
 800873c:	10624dd3 	.word	0x10624dd3
 8008740:	e000e014 	.word	0xe000e014

08008744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008754 <vPortEnableVFP+0x10>
 8008748:	6801      	ldr	r1, [r0, #0]
 800874a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800874e:	6001      	str	r1, [r0, #0]
 8008750:	4770      	bx	lr
 8008752:	0000      	.short	0x0000
 8008754:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008758:	bf00      	nop
 800875a:	bf00      	nop

0800875c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008762:	f3ef 8305 	mrs	r3, IPSR
 8008766:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b0f      	cmp	r3, #15
 800876c:	d914      	bls.n	8008798 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800876e:	4a17      	ldr	r2, [pc, #92]	; (80087cc <vPortValidateInterruptPriority+0x70>)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4413      	add	r3, r2
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008778:	4b15      	ldr	r3, [pc, #84]	; (80087d0 <vPortValidateInterruptPriority+0x74>)
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	7afa      	ldrb	r2, [r7, #11]
 800877e:	429a      	cmp	r2, r3
 8008780:	d20a      	bcs.n	8008798 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8008782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	607b      	str	r3, [r7, #4]
    }
 8008794:	bf00      	nop
 8008796:	e7fe      	b.n	8008796 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008798:	4b0e      	ldr	r3, [pc, #56]	; (80087d4 <vPortValidateInterruptPriority+0x78>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80087a0:	4b0d      	ldr	r3, [pc, #52]	; (80087d8 <vPortValidateInterruptPriority+0x7c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d90a      	bls.n	80087be <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	603b      	str	r3, [r7, #0]
    }
 80087ba:	bf00      	nop
 80087bc:	e7fe      	b.n	80087bc <vPortValidateInterruptPriority+0x60>
    }
 80087be:	bf00      	nop
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	e000e3f0 	.word	0xe000e3f0
 80087d0:	20001d94 	.word	0x20001d94
 80087d4:	e000ed0c 	.word	0xe000ed0c
 80087d8:	20001d98 	.word	0x20001d98

080087dc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b08a      	sub	sp, #40	; 0x28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80087e4:	2300      	movs	r3, #0
 80087e6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80087e8:	f7fe fb32 	bl	8006e50 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80087ec:	4b53      	ldr	r3, [pc, #332]	; (800893c <pvPortMalloc+0x160>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d101      	bne.n	80087f8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80087f4:	f000 f908 	bl	8008a08 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d012      	beq.n	8008824 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80087fe:	2208      	movs	r2, #8
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f003 0307 	and.w	r3, r3, #7
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	3308      	adds	r3, #8
 800880a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	43db      	mvns	r3, r3
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	429a      	cmp	r2, r3
 8008814:	d804      	bhi.n	8008820 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	4413      	add	r3, r2
 800881c:	607b      	str	r3, [r7, #4]
 800881e:	e001      	b.n	8008824 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8008820:	2300      	movs	r3, #0
 8008822:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	db70      	blt.n	800890c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d06d      	beq.n	800890c <pvPortMalloc+0x130>
 8008830:	4b43      	ldr	r3, [pc, #268]	; (8008940 <pvPortMalloc+0x164>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	429a      	cmp	r2, r3
 8008838:	d868      	bhi.n	800890c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800883a:	4b42      	ldr	r3, [pc, #264]	; (8008944 <pvPortMalloc+0x168>)
 800883c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800883e:	4b41      	ldr	r3, [pc, #260]	; (8008944 <pvPortMalloc+0x168>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008844:	e004      	b.n	8008850 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8008846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008848:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	429a      	cmp	r2, r3
 8008858:	d903      	bls.n	8008862 <pvPortMalloc+0x86>
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1f1      	bne.n	8008846 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008862:	4b36      	ldr	r3, [pc, #216]	; (800893c <pvPortMalloc+0x160>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008868:	429a      	cmp	r2, r3
 800886a:	d04f      	beq.n	800890c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800886c:	6a3b      	ldr	r3, [r7, #32]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2208      	movs	r2, #8
 8008872:	4413      	add	r3, r2
 8008874:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	6a3b      	ldr	r3, [r7, #32]
 800887c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	685a      	ldr	r2, [r3, #4]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	1ad2      	subs	r2, r2, r3
 8008886:	2308      	movs	r3, #8
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	429a      	cmp	r2, r3
 800888c:	d91f      	bls.n	80088ce <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800888e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4413      	add	r3, r2
 8008894:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f003 0307 	and.w	r3, r3, #7
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00a      	beq.n	80088b6 <pvPortMalloc+0xda>
        __asm volatile
 80088a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	613b      	str	r3, [r7, #16]
    }
 80088b2:	bf00      	nop
 80088b4:	e7fe      	b.n	80088b4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	1ad2      	subs	r2, r2, r3
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80088c8:	6978      	ldr	r0, [r7, #20]
 80088ca:	f000 f8f9 	bl	8008ac0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088ce:	4b1c      	ldr	r3, [pc, #112]	; (8008940 <pvPortMalloc+0x164>)
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	4a19      	ldr	r2, [pc, #100]	; (8008940 <pvPortMalloc+0x164>)
 80088da:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088dc:	4b18      	ldr	r3, [pc, #96]	; (8008940 <pvPortMalloc+0x164>)
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	4b19      	ldr	r3, [pc, #100]	; (8008948 <pvPortMalloc+0x16c>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d203      	bcs.n	80088f0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80088e8:	4b15      	ldr	r3, [pc, #84]	; (8008940 <pvPortMalloc+0x164>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a16      	ldr	r2, [pc, #88]	; (8008948 <pvPortMalloc+0x16c>)
 80088ee:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80088f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80088f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80088fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fe:	2200      	movs	r2, #0
 8008900:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008902:	4b12      	ldr	r3, [pc, #72]	; (800894c <pvPortMalloc+0x170>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3301      	adds	r3, #1
 8008908:	4a10      	ldr	r2, [pc, #64]	; (800894c <pvPortMalloc+0x170>)
 800890a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800890c:	f7fe faae 	bl	8006e6c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	f003 0307 	and.w	r3, r3, #7
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00a      	beq.n	8008930 <pvPortMalloc+0x154>
        __asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	60fb      	str	r3, [r7, #12]
    }
 800892c:	bf00      	nop
 800892e:	e7fe      	b.n	800892e <pvPortMalloc+0x152>
    return pvReturn;
 8008930:	69fb      	ldr	r3, [r7, #28]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3728      	adds	r7, #40	; 0x28
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	200059a4 	.word	0x200059a4
 8008940:	200059a8 	.word	0x200059a8
 8008944:	2000599c 	.word	0x2000599c
 8008948:	200059ac 	.word	0x200059ac
 800894c:	200059b0 	.word	0x200059b0

08008950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d049      	beq.n	80089f6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008962:	2308      	movs	r3, #8
 8008964:	425b      	negs	r3, r3
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	4413      	add	r3, r2
 800896a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	db0a      	blt.n	800898e <vPortFree+0x3e>
        __asm volatile
 8008978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897c:	f383 8811 	msr	BASEPRI, r3
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	60fb      	str	r3, [r7, #12]
    }
 800898a:	bf00      	nop
 800898c:	e7fe      	b.n	800898c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00a      	beq.n	80089ac <vPortFree+0x5c>
        __asm volatile
 8008996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899a:	f383 8811 	msr	BASEPRI, r3
 800899e:	f3bf 8f6f 	isb	sy
 80089a2:	f3bf 8f4f 	dsb	sy
 80089a6:	60bb      	str	r3, [r7, #8]
    }
 80089a8:	bf00      	nop
 80089aa:	e7fe      	b.n	80089aa <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	0fdb      	lsrs	r3, r3, #31
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d01c      	beq.n	80089f6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d118      	bne.n	80089f6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80089d0:	f7fe fa3e 	bl	8006e50 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	685a      	ldr	r2, [r3, #4]
 80089d8:	4b09      	ldr	r3, [pc, #36]	; (8008a00 <vPortFree+0xb0>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4413      	add	r3, r2
 80089de:	4a08      	ldr	r2, [pc, #32]	; (8008a00 <vPortFree+0xb0>)
 80089e0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089e2:	6938      	ldr	r0, [r7, #16]
 80089e4:	f000 f86c 	bl	8008ac0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80089e8:	4b06      	ldr	r3, [pc, #24]	; (8008a04 <vPortFree+0xb4>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3301      	adds	r3, #1
 80089ee:	4a05      	ldr	r2, [pc, #20]	; (8008a04 <vPortFree+0xb4>)
 80089f0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80089f2:	f7fe fa3b 	bl	8006e6c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80089f6:	bf00      	nop
 80089f8:	3718      	adds	r7, #24
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	200059a8 	.word	0x200059a8
 8008a04:	200059b4 	.word	0x200059b4

08008a08 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a0e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008a12:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008a14:	4b25      	ldr	r3, [pc, #148]	; (8008aac <prvHeapInit+0xa4>)
 8008a16:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f003 0307 	and.w	r3, r3, #7
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00c      	beq.n	8008a3c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	3307      	adds	r3, #7
 8008a26:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f023 0307 	bic.w	r3, r3, #7
 8008a2e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	4a1d      	ldr	r2, [pc, #116]	; (8008aac <prvHeapInit+0xa4>)
 8008a38:	4413      	add	r3, r2
 8008a3a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a40:	4a1b      	ldr	r2, [pc, #108]	; (8008ab0 <prvHeapInit+0xa8>)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008a46:	4b1a      	ldr	r3, [pc, #104]	; (8008ab0 <prvHeapInit+0xa8>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	4413      	add	r3, r2
 8008a52:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008a54:	2208      	movs	r2, #8
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	1a9b      	subs	r3, r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f023 0307 	bic.w	r3, r3, #7
 8008a62:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	4a13      	ldr	r2, [pc, #76]	; (8008ab4 <prvHeapInit+0xac>)
 8008a68:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008a6a:	4b12      	ldr	r3, [pc, #72]	; (8008ab4 <prvHeapInit+0xac>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008a72:	4b10      	ldr	r3, [pc, #64]	; (8008ab4 <prvHeapInit+0xac>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2200      	movs	r2, #0
 8008a78:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	1ad2      	subs	r2, r2, r3
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a88:	4b0a      	ldr	r3, [pc, #40]	; (8008ab4 <prvHeapInit+0xac>)
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	4a08      	ldr	r2, [pc, #32]	; (8008ab8 <prvHeapInit+0xb0>)
 8008a96:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	4a07      	ldr	r2, [pc, #28]	; (8008abc <prvHeapInit+0xb4>)
 8008a9e:	6013      	str	r3, [r2, #0]
}
 8008aa0:	bf00      	nop
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	20001d9c 	.word	0x20001d9c
 8008ab0:	2000599c 	.word	0x2000599c
 8008ab4:	200059a4 	.word	0x200059a4
 8008ab8:	200059ac 	.word	0x200059ac
 8008abc:	200059a8 	.word	0x200059a8

08008ac0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ac8:	4b28      	ldr	r3, [pc, #160]	; (8008b6c <prvInsertBlockIntoFreeList+0xac>)
 8008aca:	60fb      	str	r3, [r7, #12]
 8008acc:	e002      	b.n	8008ad4 <prvInsertBlockIntoFreeList+0x14>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	60fb      	str	r3, [r7, #12]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d8f7      	bhi.n	8008ace <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	4413      	add	r3, r2
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d108      	bne.n	8008b02 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	441a      	add	r2, r3
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	441a      	add	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d118      	bne.n	8008b48 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	4b15      	ldr	r3, [pc, #84]	; (8008b70 <prvInsertBlockIntoFreeList+0xb0>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d00d      	beq.n	8008b3e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	685a      	ldr	r2, [r3, #4]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	441a      	add	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	e008      	b.n	8008b50 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b3e:	4b0c      	ldr	r3, [pc, #48]	; (8008b70 <prvInsertBlockIntoFreeList+0xb0>)
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	601a      	str	r2, [r3, #0]
 8008b46:	e003      	b.n	8008b50 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d002      	beq.n	8008b5e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008b5e:	bf00      	nop
 8008b60:	3714      	adds	r7, #20
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	2000599c 	.word	0x2000599c
 8008b70:	200059a4 	.word	0x200059a4

08008b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008b78:	4b0e      	ldr	r3, [pc, #56]	; (8008bb4 <HAL_Init+0x40>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a0d      	ldr	r2, [pc, #52]	; (8008bb4 <HAL_Init+0x40>)
 8008b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008b84:	4b0b      	ldr	r3, [pc, #44]	; (8008bb4 <HAL_Init+0x40>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a0a      	ldr	r2, [pc, #40]	; (8008bb4 <HAL_Init+0x40>)
 8008b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008b90:	4b08      	ldr	r3, [pc, #32]	; (8008bb4 <HAL_Init+0x40>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a07      	ldr	r2, [pc, #28]	; (8008bb4 <HAL_Init+0x40>)
 8008b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008b9c:	2003      	movs	r0, #3
 8008b9e:	f000 f92b 	bl	8008df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	f000 f808 	bl	8008bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008ba8:	f7fb fff4 	bl	8004b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	40023c00 	.word	0x40023c00

08008bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008bc0:	4b12      	ldr	r3, [pc, #72]	; (8008c0c <HAL_InitTick+0x54>)
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	4b12      	ldr	r3, [pc, #72]	; (8008c10 <HAL_InitTick+0x58>)
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	4619      	mov	r1, r3
 8008bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 f943 	bl	8008e62 <HAL_SYSTICK_Config>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e00e      	b.n	8008c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2b0f      	cmp	r3, #15
 8008bea:	d80a      	bhi.n	8008c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008bec:	2200      	movs	r2, #0
 8008bee:	6879      	ldr	r1, [r7, #4]
 8008bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf4:	f000 f90b 	bl	8008e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008bf8:	4a06      	ldr	r2, [pc, #24]	; (8008c14 <HAL_InitTick+0x5c>)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	e000      	b.n	8008c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	20000434 	.word	0x20000434
 8008c10:	20000444 	.word	0x20000444
 8008c14:	20000440 	.word	0x20000440

08008c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008c1c:	4b06      	ldr	r3, [pc, #24]	; (8008c38 <HAL_IncTick+0x20>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	461a      	mov	r2, r3
 8008c22:	4b06      	ldr	r3, [pc, #24]	; (8008c3c <HAL_IncTick+0x24>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4413      	add	r3, r2
 8008c28:	4a04      	ldr	r2, [pc, #16]	; (8008c3c <HAL_IncTick+0x24>)
 8008c2a:	6013      	str	r3, [r2, #0]
}
 8008c2c:	bf00      	nop
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	20000444 	.word	0x20000444
 8008c3c:	200059b8 	.word	0x200059b8

08008c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c40:	b480      	push	{r7}
 8008c42:	af00      	add	r7, sp, #0
  return uwTick;
 8008c44:	4b03      	ldr	r3, [pc, #12]	; (8008c54 <HAL_GetTick+0x14>)
 8008c46:	681b      	ldr	r3, [r3, #0]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	200059b8 	.word	0x200059b8

08008c58 <__NVIC_SetPriorityGrouping>:
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f003 0307 	and.w	r3, r3, #7
 8008c66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008c68:	4b0c      	ldr	r3, [pc, #48]	; (8008c9c <__NVIC_SetPriorityGrouping+0x44>)
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008c74:	4013      	ands	r3, r2
 8008c76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008c8a:	4a04      	ldr	r2, [pc, #16]	; (8008c9c <__NVIC_SetPriorityGrouping+0x44>)
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	60d3      	str	r3, [r2, #12]
}
 8008c90:	bf00      	nop
 8008c92:	3714      	adds	r7, #20
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr
 8008c9c:	e000ed00 	.word	0xe000ed00

08008ca0 <__NVIC_GetPriorityGrouping>:
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ca4:	4b04      	ldr	r3, [pc, #16]	; (8008cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	0a1b      	lsrs	r3, r3, #8
 8008caa:	f003 0307 	and.w	r3, r3, #7
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	e000ed00 	.word	0xe000ed00

08008cbc <__NVIC_EnableIRQ>:
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	db0b      	blt.n	8008ce6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008cce:	79fb      	ldrb	r3, [r7, #7]
 8008cd0:	f003 021f 	and.w	r2, r3, #31
 8008cd4:	4907      	ldr	r1, [pc, #28]	; (8008cf4 <__NVIC_EnableIRQ+0x38>)
 8008cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cda:	095b      	lsrs	r3, r3, #5
 8008cdc:	2001      	movs	r0, #1
 8008cde:	fa00 f202 	lsl.w	r2, r0, r2
 8008ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008ce6:	bf00      	nop
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	e000e100 	.word	0xe000e100

08008cf8 <__NVIC_SetPriority>:
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	4603      	mov	r3, r0
 8008d00:	6039      	str	r1, [r7, #0]
 8008d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	db0a      	blt.n	8008d22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	490c      	ldr	r1, [pc, #48]	; (8008d44 <__NVIC_SetPriority+0x4c>)
 8008d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d16:	0112      	lsls	r2, r2, #4
 8008d18:	b2d2      	uxtb	r2, r2
 8008d1a:	440b      	add	r3, r1
 8008d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008d20:	e00a      	b.n	8008d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	4908      	ldr	r1, [pc, #32]	; (8008d48 <__NVIC_SetPriority+0x50>)
 8008d28:	79fb      	ldrb	r3, [r7, #7]
 8008d2a:	f003 030f 	and.w	r3, r3, #15
 8008d2e:	3b04      	subs	r3, #4
 8008d30:	0112      	lsls	r2, r2, #4
 8008d32:	b2d2      	uxtb	r2, r2
 8008d34:	440b      	add	r3, r1
 8008d36:	761a      	strb	r2, [r3, #24]
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr
 8008d44:	e000e100 	.word	0xe000e100
 8008d48:	e000ed00 	.word	0xe000ed00

08008d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b089      	sub	sp, #36	; 0x24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f003 0307 	and.w	r3, r3, #7
 8008d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	f1c3 0307 	rsb	r3, r3, #7
 8008d66:	2b04      	cmp	r3, #4
 8008d68:	bf28      	it	cs
 8008d6a:	2304      	movcs	r3, #4
 8008d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	3304      	adds	r3, #4
 8008d72:	2b06      	cmp	r3, #6
 8008d74:	d902      	bls.n	8008d7c <NVIC_EncodePriority+0x30>
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	3b03      	subs	r3, #3
 8008d7a:	e000      	b.n	8008d7e <NVIC_EncodePriority+0x32>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d80:	f04f 32ff 	mov.w	r2, #4294967295
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8a:	43da      	mvns	r2, r3
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	401a      	ands	r2, r3
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d94:	f04f 31ff 	mov.w	r1, #4294967295
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d9e:	43d9      	mvns	r1, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008da4:	4313      	orrs	r3, r2
         );
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3724      	adds	r7, #36	; 0x24
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
	...

08008db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008dc4:	d301      	bcc.n	8008dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e00f      	b.n	8008dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008dca:	4a0a      	ldr	r2, [pc, #40]	; (8008df4 <SysTick_Config+0x40>)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008dd2:	210f      	movs	r1, #15
 8008dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd8:	f7ff ff8e 	bl	8008cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008ddc:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <SysTick_Config+0x40>)
 8008dde:	2200      	movs	r2, #0
 8008de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008de2:	4b04      	ldr	r3, [pc, #16]	; (8008df4 <SysTick_Config+0x40>)
 8008de4:	2207      	movs	r2, #7
 8008de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	e000e010 	.word	0xe000e010

08008df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f7ff ff29 	bl	8008c58 <__NVIC_SetPriorityGrouping>
}
 8008e06:	bf00      	nop
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b086      	sub	sp, #24
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	4603      	mov	r3, r0
 8008e16:	60b9      	str	r1, [r7, #8]
 8008e18:	607a      	str	r2, [r7, #4]
 8008e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008e20:	f7ff ff3e 	bl	8008ca0 <__NVIC_GetPriorityGrouping>
 8008e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	68b9      	ldr	r1, [r7, #8]
 8008e2a:	6978      	ldr	r0, [r7, #20]
 8008e2c:	f7ff ff8e 	bl	8008d4c <NVIC_EncodePriority>
 8008e30:	4602      	mov	r2, r0
 8008e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e36:	4611      	mov	r1, r2
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7ff ff5d 	bl	8008cf8 <__NVIC_SetPriority>
}
 8008e3e:	bf00      	nop
 8008e40:	3718      	adds	r7, #24
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b082      	sub	sp, #8
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7ff ff31 	bl	8008cbc <__NVIC_EnableIRQ>
}
 8008e5a:	bf00      	nop
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b082      	sub	sp, #8
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f7ff ffa2 	bl	8008db4 <SysTick_Config>
 8008e70:	4603      	mov	r3, r0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b082      	sub	sp, #8
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d101      	bne.n	8008e8c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e00e      	b.n	8008eaa <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	795b      	ldrb	r3, [r3, #5]
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d105      	bne.n	8008ea2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7fb ffe5 	bl	8004e6c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
	...

08008eb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b086      	sub	sp, #24
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008ec0:	f7ff febe 	bl	8008c40 <HAL_GetTick>
 8008ec4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d101      	bne.n	8008ed0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e099      	b.n	8009004 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f022 0201 	bic.w	r2, r2, #1
 8008eee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008ef0:	e00f      	b.n	8008f12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008ef2:	f7ff fea5 	bl	8008c40 <HAL_GetTick>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	1ad3      	subs	r3, r2, r3
 8008efc:	2b05      	cmp	r3, #5
 8008efe:	d908      	bls.n	8008f12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2220      	movs	r2, #32
 8008f04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2203      	movs	r2, #3
 8008f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	e078      	b.n	8009004 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 0301 	and.w	r3, r3, #1
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1e8      	bne.n	8008ef2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008f28:	697a      	ldr	r2, [r7, #20]
 8008f2a:	4b38      	ldr	r3, [pc, #224]	; (800900c <HAL_DMA_Init+0x158>)
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	685a      	ldr	r2, [r3, #4]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008f56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a1b      	ldr	r3, [r3, #32]
 8008f5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f68:	2b04      	cmp	r3, #4
 8008f6a:	d107      	bne.n	8008f7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f74:	4313      	orrs	r3, r2
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	697a      	ldr	r2, [r7, #20]
 8008f82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	f023 0307 	bic.w	r3, r3, #7
 8008f92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa2:	2b04      	cmp	r3, #4
 8008fa4:	d117      	bne.n	8008fd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00e      	beq.n	8008fd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fb01 	bl	80095c0 <DMA_CheckFifoParam>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d008      	beq.n	8008fd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2240      	movs	r2, #64	; 0x40
 8008fc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e016      	b.n	8009004 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	697a      	ldr	r2, [r7, #20]
 8008fdc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fab8 	bl	8009554 <DMA_CalcBaseAndBitshift>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fec:	223f      	movs	r2, #63	; 0x3f
 8008fee:	409a      	lsls	r2, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3718      	adds	r7, #24
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	f010803f 	.word	0xf010803f

08009010 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
 800901c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009026:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800902e:	2b01      	cmp	r3, #1
 8009030:	d101      	bne.n	8009036 <HAL_DMA_Start_IT+0x26>
 8009032:	2302      	movs	r3, #2
 8009034:	e040      	b.n	80090b8 <HAL_DMA_Start_IT+0xa8>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b01      	cmp	r3, #1
 8009048:	d12f      	bne.n	80090aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2202      	movs	r2, #2
 800904e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	68b9      	ldr	r1, [r7, #8]
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f000 fa4a 	bl	80094f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009068:	223f      	movs	r2, #63	; 0x3f
 800906a:	409a      	lsls	r2, r3
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f042 0216 	orr.w	r2, r2, #22
 800907e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009084:	2b00      	cmp	r3, #0
 8009086:	d007      	beq.n	8009098 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f042 0208 	orr.w	r2, r2, #8
 8009096:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f042 0201 	orr.w	r2, r2, #1
 80090a6:	601a      	str	r2, [r3, #0]
 80090a8:	e005      	b.n	80090b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80090b2:	2302      	movs	r3, #2
 80090b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80090b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3718      	adds	r7, #24
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80090ce:	f7ff fdb7 	bl	8008c40 <HAL_GetTick>
 80090d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d008      	beq.n	80090f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2280      	movs	r2, #128	; 0x80
 80090e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e052      	b.n	8009198 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f022 0216 	bic.w	r2, r2, #22
 8009100:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	695a      	ldr	r2, [r3, #20]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009110:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009116:	2b00      	cmp	r3, #0
 8009118:	d103      	bne.n	8009122 <HAL_DMA_Abort+0x62>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800911e:	2b00      	cmp	r3, #0
 8009120:	d007      	beq.n	8009132 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f022 0208 	bic.w	r2, r2, #8
 8009130:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f022 0201 	bic.w	r2, r2, #1
 8009140:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009142:	e013      	b.n	800916c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009144:	f7ff fd7c 	bl	8008c40 <HAL_GetTick>
 8009148:	4602      	mov	r2, r0
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	2b05      	cmp	r3, #5
 8009150:	d90c      	bls.n	800916c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2220      	movs	r2, #32
 8009156:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2203      	movs	r2, #3
 800915c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8009168:	2303      	movs	r3, #3
 800916a:	e015      	b.n	8009198 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0301 	and.w	r3, r3, #1
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1e4      	bne.n	8009144 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800917e:	223f      	movs	r2, #63	; 0x3f
 8009180:	409a      	lsls	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d004      	beq.n	80091be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2280      	movs	r2, #128	; 0x80
 80091b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	e00c      	b.n	80091d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2205      	movs	r2, #5
 80091c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f022 0201 	bic.w	r2, r2, #1
 80091d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80091ec:	2300      	movs	r3, #0
 80091ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80091f0:	4b8e      	ldr	r3, [pc, #568]	; (800942c <HAL_DMA_IRQHandler+0x248>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a8e      	ldr	r2, [pc, #568]	; (8009430 <HAL_DMA_IRQHandler+0x24c>)
 80091f6:	fba2 2303 	umull	r2, r3, r2, r3
 80091fa:	0a9b      	lsrs	r3, r3, #10
 80091fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009202:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800920e:	2208      	movs	r2, #8
 8009210:	409a      	lsls	r2, r3
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	4013      	ands	r3, r2
 8009216:	2b00      	cmp	r3, #0
 8009218:	d01a      	beq.n	8009250 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 0304 	and.w	r3, r3, #4
 8009224:	2b00      	cmp	r3, #0
 8009226:	d013      	beq.n	8009250 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f022 0204 	bic.w	r2, r2, #4
 8009236:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800923c:	2208      	movs	r2, #8
 800923e:	409a      	lsls	r2, r3
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009248:	f043 0201 	orr.w	r2, r3, #1
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009254:	2201      	movs	r2, #1
 8009256:	409a      	lsls	r2, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	4013      	ands	r3, r2
 800925c:	2b00      	cmp	r3, #0
 800925e:	d012      	beq.n	8009286 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00b      	beq.n	8009286 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009272:	2201      	movs	r2, #1
 8009274:	409a      	lsls	r2, r3
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800927e:	f043 0202 	orr.w	r2, r3, #2
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800928a:	2204      	movs	r2, #4
 800928c:	409a      	lsls	r2, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	4013      	ands	r3, r2
 8009292:	2b00      	cmp	r3, #0
 8009294:	d012      	beq.n	80092bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 0302 	and.w	r3, r3, #2
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00b      	beq.n	80092bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092a8:	2204      	movs	r2, #4
 80092aa:	409a      	lsls	r2, r3
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092b4:	f043 0204 	orr.w	r2, r3, #4
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092c0:	2210      	movs	r2, #16
 80092c2:	409a      	lsls	r2, r3
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	4013      	ands	r3, r2
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d043      	beq.n	8009354 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 0308 	and.w	r3, r3, #8
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d03c      	beq.n	8009354 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092de:	2210      	movs	r2, #16
 80092e0:	409a      	lsls	r2, r3
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d018      	beq.n	8009326 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d108      	bne.n	8009314 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009306:	2b00      	cmp	r3, #0
 8009308:	d024      	beq.n	8009354 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	4798      	blx	r3
 8009312:	e01f      	b.n	8009354 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009318:	2b00      	cmp	r3, #0
 800931a:	d01b      	beq.n	8009354 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	4798      	blx	r3
 8009324:	e016      	b.n	8009354 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009330:	2b00      	cmp	r3, #0
 8009332:	d107      	bne.n	8009344 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f022 0208 	bic.w	r2, r2, #8
 8009342:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009348:	2b00      	cmp	r3, #0
 800934a:	d003      	beq.n	8009354 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009358:	2220      	movs	r2, #32
 800935a:	409a      	lsls	r2, r3
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	4013      	ands	r3, r2
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 808f 	beq.w	8009484 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 0310 	and.w	r3, r3, #16
 8009370:	2b00      	cmp	r3, #0
 8009372:	f000 8087 	beq.w	8009484 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800937a:	2220      	movs	r2, #32
 800937c:	409a      	lsls	r2, r3
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009388:	b2db      	uxtb	r3, r3
 800938a:	2b05      	cmp	r3, #5
 800938c:	d136      	bne.n	80093fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f022 0216 	bic.w	r2, r2, #22
 800939c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	695a      	ldr	r2, [r3, #20]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d103      	bne.n	80093be <HAL_DMA_IRQHandler+0x1da>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d007      	beq.n	80093ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f022 0208 	bic.w	r2, r2, #8
 80093cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093d2:	223f      	movs	r2, #63	; 0x3f
 80093d4:	409a      	lsls	r2, r3
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d07e      	beq.n	80094f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	4798      	blx	r3
        }
        return;
 80093fa:	e079      	b.n	80094f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009406:	2b00      	cmp	r3, #0
 8009408:	d01d      	beq.n	8009446 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d10d      	bne.n	8009434 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800941c:	2b00      	cmp	r3, #0
 800941e:	d031      	beq.n	8009484 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	4798      	blx	r3
 8009428:	e02c      	b.n	8009484 <HAL_DMA_IRQHandler+0x2a0>
 800942a:	bf00      	nop
 800942c:	20000434 	.word	0x20000434
 8009430:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009438:	2b00      	cmp	r3, #0
 800943a:	d023      	beq.n	8009484 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	4798      	blx	r3
 8009444:	e01e      	b.n	8009484 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10f      	bne.n	8009474 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f022 0210 	bic.w	r2, r2, #16
 8009462:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009478:	2b00      	cmp	r3, #0
 800947a:	d003      	beq.n	8009484 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009488:	2b00      	cmp	r3, #0
 800948a:	d032      	beq.n	80094f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009490:	f003 0301 	and.w	r3, r3, #1
 8009494:	2b00      	cmp	r3, #0
 8009496:	d022      	beq.n	80094de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2205      	movs	r2, #5
 800949c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f022 0201 	bic.w	r2, r2, #1
 80094ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	3301      	adds	r3, #1
 80094b4:	60bb      	str	r3, [r7, #8]
 80094b6:	697a      	ldr	r2, [r7, #20]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d307      	bcc.n	80094cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1f2      	bne.n	80094b0 <HAL_DMA_IRQHandler+0x2cc>
 80094ca:	e000      	b.n	80094ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80094cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d005      	beq.n	80094f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	4798      	blx	r3
 80094ee:	e000      	b.n	80094f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80094f0:	bf00      	nop
    }
  }
}
 80094f2:	3718      	adds	r7, #24
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
 8009504:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009514:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	2b40      	cmp	r3, #64	; 0x40
 8009524:	d108      	bne.n	8009538 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009536:	e007      	b.n	8009548 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	60da      	str	r2, [r3, #12]
}
 8009548:	bf00      	nop
 800954a:	3714      	adds	r7, #20
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	b2db      	uxtb	r3, r3
 8009562:	3b10      	subs	r3, #16
 8009564:	4a14      	ldr	r2, [pc, #80]	; (80095b8 <DMA_CalcBaseAndBitshift+0x64>)
 8009566:	fba2 2303 	umull	r2, r3, r2, r3
 800956a:	091b      	lsrs	r3, r3, #4
 800956c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800956e:	4a13      	ldr	r2, [pc, #76]	; (80095bc <DMA_CalcBaseAndBitshift+0x68>)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	4413      	add	r3, r2
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	461a      	mov	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2b03      	cmp	r3, #3
 8009580:	d909      	bls.n	8009596 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800958a:	f023 0303 	bic.w	r3, r3, #3
 800958e:	1d1a      	adds	r2, r3, #4
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	659a      	str	r2, [r3, #88]	; 0x58
 8009594:	e007      	b.n	80095a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800959e:	f023 0303 	bic.w	r3, r3, #3
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3714      	adds	r7, #20
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	aaaaaaab 	.word	0xaaaaaaab
 80095bc:	08013d5c 	.word	0x08013d5c

080095c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095c8:	2300      	movs	r3, #0
 80095ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d11f      	bne.n	800961a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	2b03      	cmp	r3, #3
 80095de:	d856      	bhi.n	800968e <DMA_CheckFifoParam+0xce>
 80095e0:	a201      	add	r2, pc, #4	; (adr r2, 80095e8 <DMA_CheckFifoParam+0x28>)
 80095e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e6:	bf00      	nop
 80095e8:	080095f9 	.word	0x080095f9
 80095ec:	0800960b 	.word	0x0800960b
 80095f0:	080095f9 	.word	0x080095f9
 80095f4:	0800968f 	.word	0x0800968f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d046      	beq.n	8009692 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009608:	e043      	b.n	8009692 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009612:	d140      	bne.n	8009696 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009618:	e03d      	b.n	8009696 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	699b      	ldr	r3, [r3, #24]
 800961e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009622:	d121      	bne.n	8009668 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	2b03      	cmp	r3, #3
 8009628:	d837      	bhi.n	800969a <DMA_CheckFifoParam+0xda>
 800962a:	a201      	add	r2, pc, #4	; (adr r2, 8009630 <DMA_CheckFifoParam+0x70>)
 800962c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009630:	08009641 	.word	0x08009641
 8009634:	08009647 	.word	0x08009647
 8009638:	08009641 	.word	0x08009641
 800963c:	08009659 	.word	0x08009659
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	73fb      	strb	r3, [r7, #15]
      break;
 8009644:	e030      	b.n	80096a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800964e:	2b00      	cmp	r3, #0
 8009650:	d025      	beq.n	800969e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009656:	e022      	b.n	800969e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009660:	d11f      	bne.n	80096a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009666:	e01c      	b.n	80096a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	2b02      	cmp	r3, #2
 800966c:	d903      	bls.n	8009676 <DMA_CheckFifoParam+0xb6>
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	2b03      	cmp	r3, #3
 8009672:	d003      	beq.n	800967c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009674:	e018      	b.n	80096a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	73fb      	strb	r3, [r7, #15]
      break;
 800967a:	e015      	b.n	80096a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00e      	beq.n	80096a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	73fb      	strb	r3, [r7, #15]
      break;
 800968c:	e00b      	b.n	80096a6 <DMA_CheckFifoParam+0xe6>
      break;
 800968e:	bf00      	nop
 8009690:	e00a      	b.n	80096a8 <DMA_CheckFifoParam+0xe8>
      break;
 8009692:	bf00      	nop
 8009694:	e008      	b.n	80096a8 <DMA_CheckFifoParam+0xe8>
      break;
 8009696:	bf00      	nop
 8009698:	e006      	b.n	80096a8 <DMA_CheckFifoParam+0xe8>
      break;
 800969a:	bf00      	nop
 800969c:	e004      	b.n	80096a8 <DMA_CheckFifoParam+0xe8>
      break;
 800969e:	bf00      	nop
 80096a0:	e002      	b.n	80096a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80096a2:	bf00      	nop
 80096a4:	e000      	b.n	80096a8 <DMA_CheckFifoParam+0xe8>
      break;
 80096a6:	bf00      	nop
    }
  } 
  
  return status; 
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3714      	adds	r7, #20
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop

080096b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b089      	sub	sp, #36	; 0x24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80096c2:	2300      	movs	r3, #0
 80096c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80096c6:	2300      	movs	r3, #0
 80096c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80096ca:	2300      	movs	r3, #0
 80096cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80096ce:	2300      	movs	r3, #0
 80096d0:	61fb      	str	r3, [r7, #28]
 80096d2:	e16b      	b.n	80099ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80096d4:	2201      	movs	r2, #1
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	fa02 f303 	lsl.w	r3, r2, r3
 80096dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	697a      	ldr	r2, [r7, #20]
 80096e4:	4013      	ands	r3, r2
 80096e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80096e8:	693a      	ldr	r2, [r7, #16]
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	f040 815a 	bne.w	80099a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	f003 0303 	and.w	r3, r3, #3
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d005      	beq.n	800970a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009706:	2b02      	cmp	r3, #2
 8009708:	d130      	bne.n	800976c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	005b      	lsls	r3, r3, #1
 8009714:	2203      	movs	r2, #3
 8009716:	fa02 f303 	lsl.w	r3, r2, r3
 800971a:	43db      	mvns	r3, r3
 800971c:	69ba      	ldr	r2, [r7, #24]
 800971e:	4013      	ands	r3, r2
 8009720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	68da      	ldr	r2, [r3, #12]
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	005b      	lsls	r3, r3, #1
 800972a:	fa02 f303 	lsl.w	r3, r2, r3
 800972e:	69ba      	ldr	r2, [r7, #24]
 8009730:	4313      	orrs	r3, r2
 8009732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	69ba      	ldr	r2, [r7, #24]
 8009738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009740:	2201      	movs	r2, #1
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	fa02 f303 	lsl.w	r3, r2, r3
 8009748:	43db      	mvns	r3, r3
 800974a:	69ba      	ldr	r2, [r7, #24]
 800974c:	4013      	ands	r3, r2
 800974e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	091b      	lsrs	r3, r3, #4
 8009756:	f003 0201 	and.w	r2, r3, #1
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	fa02 f303 	lsl.w	r3, r2, r3
 8009760:	69ba      	ldr	r2, [r7, #24]
 8009762:	4313      	orrs	r3, r2
 8009764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	69ba      	ldr	r2, [r7, #24]
 800976a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	f003 0303 	and.w	r3, r3, #3
 8009774:	2b03      	cmp	r3, #3
 8009776:	d017      	beq.n	80097a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	005b      	lsls	r3, r3, #1
 8009782:	2203      	movs	r2, #3
 8009784:	fa02 f303 	lsl.w	r3, r2, r3
 8009788:	43db      	mvns	r3, r3
 800978a:	69ba      	ldr	r2, [r7, #24]
 800978c:	4013      	ands	r3, r2
 800978e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	689a      	ldr	r2, [r3, #8]
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	005b      	lsls	r3, r3, #1
 8009798:	fa02 f303 	lsl.w	r3, r2, r3
 800979c:	69ba      	ldr	r2, [r7, #24]
 800979e:	4313      	orrs	r3, r2
 80097a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	69ba      	ldr	r2, [r7, #24]
 80097a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	f003 0303 	and.w	r3, r3, #3
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d123      	bne.n	80097fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	08da      	lsrs	r2, r3, #3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	3208      	adds	r2, #8
 80097bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	f003 0307 	and.w	r3, r3, #7
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	220f      	movs	r2, #15
 80097cc:	fa02 f303 	lsl.w	r3, r2, r3
 80097d0:	43db      	mvns	r3, r3
 80097d2:	69ba      	ldr	r2, [r7, #24]
 80097d4:	4013      	ands	r3, r2
 80097d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	691a      	ldr	r2, [r3, #16]
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	f003 0307 	and.w	r3, r3, #7
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	fa02 f303 	lsl.w	r3, r2, r3
 80097e8:	69ba      	ldr	r2, [r7, #24]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	08da      	lsrs	r2, r3, #3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	3208      	adds	r2, #8
 80097f6:	69b9      	ldr	r1, [r7, #24]
 80097f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	005b      	lsls	r3, r3, #1
 8009806:	2203      	movs	r2, #3
 8009808:	fa02 f303 	lsl.w	r3, r2, r3
 800980c:	43db      	mvns	r3, r3
 800980e:	69ba      	ldr	r2, [r7, #24]
 8009810:	4013      	ands	r3, r2
 8009812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	f003 0203 	and.w	r2, r3, #3
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	005b      	lsls	r3, r3, #1
 8009820:	fa02 f303 	lsl.w	r3, r2, r3
 8009824:	69ba      	ldr	r2, [r7, #24]
 8009826:	4313      	orrs	r3, r2
 8009828:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	69ba      	ldr	r2, [r7, #24]
 800982e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 80b4 	beq.w	80099a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800983e:	2300      	movs	r3, #0
 8009840:	60fb      	str	r3, [r7, #12]
 8009842:	4b60      	ldr	r3, [pc, #384]	; (80099c4 <HAL_GPIO_Init+0x30c>)
 8009844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009846:	4a5f      	ldr	r2, [pc, #380]	; (80099c4 <HAL_GPIO_Init+0x30c>)
 8009848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800984c:	6453      	str	r3, [r2, #68]	; 0x44
 800984e:	4b5d      	ldr	r3, [pc, #372]	; (80099c4 <HAL_GPIO_Init+0x30c>)
 8009850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009856:	60fb      	str	r3, [r7, #12]
 8009858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800985a:	4a5b      	ldr	r2, [pc, #364]	; (80099c8 <HAL_GPIO_Init+0x310>)
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	089b      	lsrs	r3, r3, #2
 8009860:	3302      	adds	r3, #2
 8009862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	f003 0303 	and.w	r3, r3, #3
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	220f      	movs	r2, #15
 8009872:	fa02 f303 	lsl.w	r3, r2, r3
 8009876:	43db      	mvns	r3, r3
 8009878:	69ba      	ldr	r2, [r7, #24]
 800987a:	4013      	ands	r3, r2
 800987c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4a52      	ldr	r2, [pc, #328]	; (80099cc <HAL_GPIO_Init+0x314>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d02b      	beq.n	80098de <HAL_GPIO_Init+0x226>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4a51      	ldr	r2, [pc, #324]	; (80099d0 <HAL_GPIO_Init+0x318>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d025      	beq.n	80098da <HAL_GPIO_Init+0x222>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a50      	ldr	r2, [pc, #320]	; (80099d4 <HAL_GPIO_Init+0x31c>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d01f      	beq.n	80098d6 <HAL_GPIO_Init+0x21e>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a4f      	ldr	r2, [pc, #316]	; (80099d8 <HAL_GPIO_Init+0x320>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d019      	beq.n	80098d2 <HAL_GPIO_Init+0x21a>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a4e      	ldr	r2, [pc, #312]	; (80099dc <HAL_GPIO_Init+0x324>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d013      	beq.n	80098ce <HAL_GPIO_Init+0x216>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4a4d      	ldr	r2, [pc, #308]	; (80099e0 <HAL_GPIO_Init+0x328>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d00d      	beq.n	80098ca <HAL_GPIO_Init+0x212>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a4c      	ldr	r2, [pc, #304]	; (80099e4 <HAL_GPIO_Init+0x32c>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d007      	beq.n	80098c6 <HAL_GPIO_Init+0x20e>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a4b      	ldr	r2, [pc, #300]	; (80099e8 <HAL_GPIO_Init+0x330>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d101      	bne.n	80098c2 <HAL_GPIO_Init+0x20a>
 80098be:	2307      	movs	r3, #7
 80098c0:	e00e      	b.n	80098e0 <HAL_GPIO_Init+0x228>
 80098c2:	2308      	movs	r3, #8
 80098c4:	e00c      	b.n	80098e0 <HAL_GPIO_Init+0x228>
 80098c6:	2306      	movs	r3, #6
 80098c8:	e00a      	b.n	80098e0 <HAL_GPIO_Init+0x228>
 80098ca:	2305      	movs	r3, #5
 80098cc:	e008      	b.n	80098e0 <HAL_GPIO_Init+0x228>
 80098ce:	2304      	movs	r3, #4
 80098d0:	e006      	b.n	80098e0 <HAL_GPIO_Init+0x228>
 80098d2:	2303      	movs	r3, #3
 80098d4:	e004      	b.n	80098e0 <HAL_GPIO_Init+0x228>
 80098d6:	2302      	movs	r3, #2
 80098d8:	e002      	b.n	80098e0 <HAL_GPIO_Init+0x228>
 80098da:	2301      	movs	r3, #1
 80098dc:	e000      	b.n	80098e0 <HAL_GPIO_Init+0x228>
 80098de:	2300      	movs	r3, #0
 80098e0:	69fa      	ldr	r2, [r7, #28]
 80098e2:	f002 0203 	and.w	r2, r2, #3
 80098e6:	0092      	lsls	r2, r2, #2
 80098e8:	4093      	lsls	r3, r2
 80098ea:	69ba      	ldr	r2, [r7, #24]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80098f0:	4935      	ldr	r1, [pc, #212]	; (80099c8 <HAL_GPIO_Init+0x310>)
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	089b      	lsrs	r3, r3, #2
 80098f6:	3302      	adds	r3, #2
 80098f8:	69ba      	ldr	r2, [r7, #24]
 80098fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80098fe:	4b3b      	ldr	r3, [pc, #236]	; (80099ec <HAL_GPIO_Init+0x334>)
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	43db      	mvns	r3, r3
 8009908:	69ba      	ldr	r2, [r7, #24]
 800990a:	4013      	ands	r3, r2
 800990c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009916:	2b00      	cmp	r3, #0
 8009918:	d003      	beq.n	8009922 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800991a:	69ba      	ldr	r2, [r7, #24]
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	4313      	orrs	r3, r2
 8009920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009922:	4a32      	ldr	r2, [pc, #200]	; (80099ec <HAL_GPIO_Init+0x334>)
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009928:	4b30      	ldr	r3, [pc, #192]	; (80099ec <HAL_GPIO_Init+0x334>)
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	43db      	mvns	r3, r3
 8009932:	69ba      	ldr	r2, [r7, #24]
 8009934:	4013      	ands	r3, r2
 8009936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009940:	2b00      	cmp	r3, #0
 8009942:	d003      	beq.n	800994c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009944:	69ba      	ldr	r2, [r7, #24]
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	4313      	orrs	r3, r2
 800994a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800994c:	4a27      	ldr	r2, [pc, #156]	; (80099ec <HAL_GPIO_Init+0x334>)
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009952:	4b26      	ldr	r3, [pc, #152]	; (80099ec <HAL_GPIO_Init+0x334>)
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	43db      	mvns	r3, r3
 800995c:	69ba      	ldr	r2, [r7, #24]
 800995e:	4013      	ands	r3, r2
 8009960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800996a:	2b00      	cmp	r3, #0
 800996c:	d003      	beq.n	8009976 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800996e:	69ba      	ldr	r2, [r7, #24]
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	4313      	orrs	r3, r2
 8009974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009976:	4a1d      	ldr	r2, [pc, #116]	; (80099ec <HAL_GPIO_Init+0x334>)
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800997c:	4b1b      	ldr	r3, [pc, #108]	; (80099ec <HAL_GPIO_Init+0x334>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	43db      	mvns	r3, r3
 8009986:	69ba      	ldr	r2, [r7, #24]
 8009988:	4013      	ands	r3, r2
 800998a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009994:	2b00      	cmp	r3, #0
 8009996:	d003      	beq.n	80099a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009998:	69ba      	ldr	r2, [r7, #24]
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	4313      	orrs	r3, r2
 800999e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80099a0:	4a12      	ldr	r2, [pc, #72]	; (80099ec <HAL_GPIO_Init+0x334>)
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	3301      	adds	r3, #1
 80099aa:	61fb      	str	r3, [r7, #28]
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	2b0f      	cmp	r3, #15
 80099b0:	f67f ae90 	bls.w	80096d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80099b4:	bf00      	nop
 80099b6:	bf00      	nop
 80099b8:	3724      	adds	r7, #36	; 0x24
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	40023800 	.word	0x40023800
 80099c8:	40013800 	.word	0x40013800
 80099cc:	40020000 	.word	0x40020000
 80099d0:	40020400 	.word	0x40020400
 80099d4:	40020800 	.word	0x40020800
 80099d8:	40020c00 	.word	0x40020c00
 80099dc:	40021000 	.word	0x40021000
 80099e0:	40021400 	.word	0x40021400
 80099e4:	40021800 	.word	0x40021800
 80099e8:	40021c00 	.word	0x40021c00
 80099ec:	40013c00 	.word	0x40013c00

080099f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b085      	sub	sp, #20
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	460b      	mov	r3, r1
 80099fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	691a      	ldr	r2, [r3, #16]
 8009a00:	887b      	ldrh	r3, [r7, #2]
 8009a02:	4013      	ands	r3, r2
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d002      	beq.n	8009a0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	73fb      	strb	r3, [r7, #15]
 8009a0c:	e001      	b.n	8009a12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	460b      	mov	r3, r1
 8009a2a:	807b      	strh	r3, [r7, #2]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009a30:	787b      	ldrb	r3, [r7, #1]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d003      	beq.n	8009a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009a36:	887a      	ldrh	r2, [r7, #2]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009a3c:	e003      	b.n	8009a46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009a3e:	887b      	ldrh	r3, [r7, #2]
 8009a40:	041a      	lsls	r2, r3, #16
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	619a      	str	r2, [r3, #24]
}
 8009a46:	bf00      	nop
 8009a48:	370c      	adds	r7, #12
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009a52:	b480      	push	{r7}
 8009a54:	b085      	sub	sp, #20
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	695b      	ldr	r3, [r3, #20]
 8009a62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009a64:	887a      	ldrh	r2, [r7, #2]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	4013      	ands	r3, r2
 8009a6a:	041a      	lsls	r2, r3, #16
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	43d9      	mvns	r1, r3
 8009a70:	887b      	ldrh	r3, [r7, #2]
 8009a72:	400b      	ands	r3, r1
 8009a74:	431a      	orrs	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	619a      	str	r2, [r3, #24]
}
 8009a7a:	bf00      	nop
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
	...

08009a88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	4603      	mov	r3, r0
 8009a90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009a92:	4b08      	ldr	r3, [pc, #32]	; (8009ab4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009a94:	695a      	ldr	r2, [r3, #20]
 8009a96:	88fb      	ldrh	r3, [r7, #6]
 8009a98:	4013      	ands	r3, r2
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d006      	beq.n	8009aac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009a9e:	4a05      	ldr	r2, [pc, #20]	; (8009ab4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009aa0:	88fb      	ldrh	r3, [r7, #6]
 8009aa2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009aa4:	88fb      	ldrh	r3, [r7, #6]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7f7 fb3c 	bl	8001124 <HAL_GPIO_EXTI_Callback>
  }
}
 8009aac:	bf00      	nop
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	40013c00 	.word	0x40013c00

08009ab8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b088      	sub	sp, #32
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d101      	bne.n	8009aca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e128      	b.n	8009d1c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d109      	bne.n	8009aea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a90      	ldr	r2, [pc, #576]	; (8009d24 <HAL_I2S_Init+0x26c>)
 8009ae2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f7fb f87d 	bl	8004be4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2202      	movs	r2, #2
 8009aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	69db      	ldr	r3, [r3, #28]
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	6812      	ldr	r2, [r2, #0]
 8009afc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8009b00:	f023 030f 	bic.w	r3, r3, #15
 8009b04:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	695b      	ldr	r3, [r3, #20]
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d060      	beq.n	8009bd8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d102      	bne.n	8009b24 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8009b1e:	2310      	movs	r3, #16
 8009b20:	617b      	str	r3, [r7, #20]
 8009b22:	e001      	b.n	8009b28 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8009b24:	2320      	movs	r3, #32
 8009b26:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	2b20      	cmp	r3, #32
 8009b2e:	d802      	bhi.n	8009b36 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	005b      	lsls	r3, r3, #1
 8009b34:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8009b36:	2001      	movs	r0, #1
 8009b38:	f001 fbac 	bl	800b294 <HAL_RCCEx_GetPeriphCLKFreq>
 8009b3c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b46:	d125      	bne.n	8009b94 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d010      	beq.n	8009b72 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	005b      	lsls	r3, r3, #1
 8009b62:	461a      	mov	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	695b      	ldr	r3, [r3, #20]
 8009b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b6c:	3305      	adds	r3, #5
 8009b6e:	613b      	str	r3, [r7, #16]
 8009b70:	e01f      	b.n	8009bb2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	00db      	lsls	r3, r3, #3
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	005b      	lsls	r3, r3, #1
 8009b84:	461a      	mov	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	695b      	ldr	r3, [r3, #20]
 8009b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b8e:	3305      	adds	r3, #5
 8009b90:	613b      	str	r3, [r7, #16]
 8009b92:	e00e      	b.n	8009bb2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	4413      	add	r3, r2
 8009ba2:	005b      	lsls	r3, r3, #1
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	695b      	ldr	r3, [r3, #20]
 8009baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bae:	3305      	adds	r3, #5
 8009bb0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	4a5c      	ldr	r2, [pc, #368]	; (8009d28 <HAL_I2S_Init+0x270>)
 8009bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bba:	08db      	lsrs	r3, r3, #3
 8009bbc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	f003 0301 	and.w	r3, r3, #1
 8009bc4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8009bc6:	693a      	ldr	r2, [r7, #16]
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	085b      	lsrs	r3, r3, #1
 8009bce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	021b      	lsls	r3, r3, #8
 8009bd4:	61bb      	str	r3, [r7, #24]
 8009bd6:	e003      	b.n	8009be0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8009bd8:	2302      	movs	r3, #2
 8009bda:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d902      	bls.n	8009bec <HAL_I2S_Init+0x134>
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	2bff      	cmp	r3, #255	; 0xff
 8009bea:	d907      	bls.n	8009bfc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bf0:	f043 0210 	orr.w	r2, r3, #16
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e08f      	b.n	8009d1c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	691a      	ldr	r2, [r3, #16]
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	ea42 0103 	orr.w	r1, r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	69fa      	ldr	r2, [r7, #28]
 8009c0c:	430a      	orrs	r2, r1
 8009c0e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	69db      	ldr	r3, [r3, #28]
 8009c16:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8009c1a:	f023 030f 	bic.w	r3, r3, #15
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	6851      	ldr	r1, [r2, #4]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	6892      	ldr	r2, [r2, #8]
 8009c26:	4311      	orrs	r1, r2
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	68d2      	ldr	r2, [r2, #12]
 8009c2c:	4311      	orrs	r1, r2
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	6992      	ldr	r2, [r2, #24]
 8009c32:	430a      	orrs	r2, r1
 8009c34:	431a      	orrs	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c3e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6a1b      	ldr	r3, [r3, #32]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d161      	bne.n	8009d0c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a38      	ldr	r2, [pc, #224]	; (8009d2c <HAL_I2S_Init+0x274>)
 8009c4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a37      	ldr	r2, [pc, #220]	; (8009d30 <HAL_I2S_Init+0x278>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d101      	bne.n	8009c5c <HAL_I2S_Init+0x1a4>
 8009c58:	4b36      	ldr	r3, [pc, #216]	; (8009d34 <HAL_I2S_Init+0x27c>)
 8009c5a:	e001      	b.n	8009c60 <HAL_I2S_Init+0x1a8>
 8009c5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009c60:	69db      	ldr	r3, [r3, #28]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	6812      	ldr	r2, [r2, #0]
 8009c66:	4932      	ldr	r1, [pc, #200]	; (8009d30 <HAL_I2S_Init+0x278>)
 8009c68:	428a      	cmp	r2, r1
 8009c6a:	d101      	bne.n	8009c70 <HAL_I2S_Init+0x1b8>
 8009c6c:	4a31      	ldr	r2, [pc, #196]	; (8009d34 <HAL_I2S_Init+0x27c>)
 8009c6e:	e001      	b.n	8009c74 <HAL_I2S_Init+0x1bc>
 8009c70:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8009c74:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8009c78:	f023 030f 	bic.w	r3, r3, #15
 8009c7c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a2b      	ldr	r2, [pc, #172]	; (8009d30 <HAL_I2S_Init+0x278>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d101      	bne.n	8009c8c <HAL_I2S_Init+0x1d4>
 8009c88:	4b2a      	ldr	r3, [pc, #168]	; (8009d34 <HAL_I2S_Init+0x27c>)
 8009c8a:	e001      	b.n	8009c90 <HAL_I2S_Init+0x1d8>
 8009c8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009c90:	2202      	movs	r2, #2
 8009c92:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a25      	ldr	r2, [pc, #148]	; (8009d30 <HAL_I2S_Init+0x278>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d101      	bne.n	8009ca2 <HAL_I2S_Init+0x1ea>
 8009c9e:	4b25      	ldr	r3, [pc, #148]	; (8009d34 <HAL_I2S_Init+0x27c>)
 8009ca0:	e001      	b.n	8009ca6 <HAL_I2S_Init+0x1ee>
 8009ca2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009ca6:	69db      	ldr	r3, [r3, #28]
 8009ca8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cb2:	d003      	beq.n	8009cbc <HAL_I2S_Init+0x204>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d103      	bne.n	8009cc4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8009cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cc0:	613b      	str	r3, [r7, #16]
 8009cc2:	e001      	b.n	8009cc8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	699b      	ldr	r3, [r3, #24]
 8009ce4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	897b      	ldrh	r3, [r7, #10]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009cf4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a0d      	ldr	r2, [pc, #52]	; (8009d30 <HAL_I2S_Init+0x278>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d101      	bne.n	8009d04 <HAL_I2S_Init+0x24c>
 8009d00:	4b0c      	ldr	r3, [pc, #48]	; (8009d34 <HAL_I2S_Init+0x27c>)
 8009d02:	e001      	b.n	8009d08 <HAL_I2S_Init+0x250>
 8009d04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009d08:	897a      	ldrh	r2, [r7, #10]
 8009d0a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3720      	adds	r7, #32
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	0800a1d7 	.word	0x0800a1d7
 8009d28:	cccccccd 	.word	0xcccccccd
 8009d2c:	0800a2ed 	.word	0x0800a2ed
 8009d30:	40003800 	.word	0x40003800
 8009d34:	40003400 	.word	0x40003400

08009d38 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b086      	sub	sp, #24
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	4613      	mov	r3, r2
 8009d44:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d002      	beq.n	8009d52 <HAL_I2S_Transmit_DMA+0x1a>
 8009d4c:	88fb      	ldrh	r3, [r7, #6]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e08e      	b.n	8009e74 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d101      	bne.n	8009d66 <HAL_I2S_Transmit_DMA+0x2e>
 8009d62:	2302      	movs	r3, #2
 8009d64:	e086      	b.n	8009e74 <HAL_I2S_Transmit_DMA+0x13c>
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d005      	beq.n	8009d86 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8009d82:	2302      	movs	r3, #2
 8009d84:	e076      	b.n	8009e74 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2203      	movs	r2, #3
 8009d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2200      	movs	r2, #0
 8009d92:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	69db      	ldr	r3, [r3, #28]
 8009da0:	f003 0307 	and.w	r3, r3, #7
 8009da4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	2b03      	cmp	r3, #3
 8009daa:	d002      	beq.n	8009db2 <HAL_I2S_Transmit_DMA+0x7a>
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	2b05      	cmp	r3, #5
 8009db0:	d10a      	bne.n	8009dc8 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8009db2:	88fb      	ldrh	r3, [r7, #6]
 8009db4:	005b      	lsls	r3, r3, #1
 8009db6:	b29a      	uxth	r2, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8009dbc:	88fb      	ldrh	r3, [r7, #6]
 8009dbe:	005b      	lsls	r3, r3, #1
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009dc6:	e005      	b.n	8009dd4 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	88fa      	ldrh	r2, [r7, #6]
 8009dcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	88fa      	ldrh	r2, [r7, #6]
 8009dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd8:	4a28      	ldr	r2, [pc, #160]	; (8009e7c <HAL_I2S_Transmit_DMA+0x144>)
 8009dda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de0:	4a27      	ldr	r2, [pc, #156]	; (8009e80 <HAL_I2S_Transmit_DMA+0x148>)
 8009de2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de8:	4a26      	ldr	r2, [pc, #152]	; (8009e84 <HAL_I2S_Transmit_DMA+0x14c>)
 8009dea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8009df4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8009dfc:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e02:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8009e04:	f7ff f904 	bl	8009010 <HAL_DMA_Start_IT>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00f      	beq.n	8009e2e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e12:	f043 0208 	orr.w	r2, r3, #8
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e022      	b.n	8009e74 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	69db      	ldr	r3, [r3, #28]
 8009e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d107      	bne.n	8009e4c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	69da      	ldr	r2, [r3, #28]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009e4a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	f003 0302 	and.w	r3, r3, #2
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d107      	bne.n	8009e6a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	685a      	ldr	r2, [r3, #4]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f042 0202 	orr.w	r2, r2, #2
 8009e68:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3718      	adds	r7, #24
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	0800a057 	.word	0x0800a057
 8009e80:	0800a015 	.word	0x0800a015
 8009e84:	0800a0d1 	.word	0x0800a0d1

08009e88 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	4613      	mov	r3, r2
 8009e94:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <HAL_I2S_Receive_DMA+0x1a>
 8009e9c:	88fb      	ldrh	r3, [r7, #6]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d101      	bne.n	8009ea6 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e0a1      	b.n	8009fea <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d101      	bne.n	8009eb6 <HAL_I2S_Receive_DMA+0x2e>
 8009eb2:	2302      	movs	r3, #2
 8009eb4:	e099      	b.n	8009fea <HAL_I2S_Receive_DMA+0x162>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d005      	beq.n	8009ed6 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8009ed2:	2302      	movs	r3, #2
 8009ed4:	e089      	b.n	8009fea <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2204      	movs	r2, #4
 8009eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	68ba      	ldr	r2, [r7, #8]
 8009ee8:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	69db      	ldr	r3, [r3, #28]
 8009ef0:	f003 0307 	and.w	r3, r3, #7
 8009ef4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	2b03      	cmp	r3, #3
 8009efa:	d002      	beq.n	8009f02 <HAL_I2S_Receive_DMA+0x7a>
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	2b05      	cmp	r3, #5
 8009f00:	d10a      	bne.n	8009f18 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8009f02:	88fb      	ldrh	r3, [r7, #6]
 8009f04:	005b      	lsls	r3, r3, #1
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8009f0c:	88fb      	ldrh	r3, [r7, #6]
 8009f0e:	005b      	lsls	r3, r3, #1
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	865a      	strh	r2, [r3, #50]	; 0x32
 8009f16:	e005      	b.n	8009f24 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	88fa      	ldrh	r2, [r7, #6]
 8009f1c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	88fa      	ldrh	r2, [r7, #6]
 8009f22:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f28:	4a32      	ldr	r2, [pc, #200]	; (8009ff4 <HAL_I2S_Receive_DMA+0x16c>)
 8009f2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f30:	4a31      	ldr	r2, [pc, #196]	; (8009ff8 <HAL_I2S_Receive_DMA+0x170>)
 8009f32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f38:	4a30      	ldr	r2, [pc, #192]	; (8009ffc <HAL_I2S_Receive_DMA+0x174>)
 8009f3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	69db      	ldr	r3, [r3, #28]
 8009f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f4a:	d10a      	bne.n	8009f62 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	613b      	str	r3, [r7, #16]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	613b      	str	r3, [r7, #16]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	613b      	str	r3, [r7, #16]
 8009f60:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	330c      	adds	r3, #12
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f72:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009f78:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8009f7a:	f7ff f849 	bl	8009010 <HAL_DMA_Start_IT>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00f      	beq.n	8009fa4 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f88:	f043 0208 	orr.w	r2, r3, #8
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e022      	b.n	8009fea <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	69db      	ldr	r3, [r3, #28]
 8009faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d107      	bne.n	8009fc2 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	69da      	ldr	r2, [r3, #28]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009fc0:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	f003 0301 	and.w	r3, r3, #1
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d107      	bne.n	8009fe0 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	685a      	ldr	r2, [r3, #4]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f042 0201 	orr.w	r2, r2, #1
 8009fde:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3718      	adds	r7, #24
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	0800a0b5 	.word	0x0800a0b5
 8009ff8:	0800a073 	.word	0x0800a073
 8009ffc:	0800a0d1 	.word	0x0800a0d1

0800a000 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a020:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	69db      	ldr	r3, [r3, #28]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d10e      	bne.n	800a048 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	685a      	ldr	r2, [r3, #4]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f022 0202 	bic.w	r2, r2, #2
 800a038:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2200      	movs	r2, #0
 800a03e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2201      	movs	r2, #1
 800a044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f7f8 fb74 	bl	8002736 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800a04e:	bf00      	nop
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b084      	sub	sp, #16
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a062:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f7f8 fb5b 	bl	8002720 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800a06a:	bf00      	nop
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b084      	sub	sp, #16
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07e:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	69db      	ldr	r3, [r3, #28]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d10e      	bne.n	800a0a6 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	685a      	ldr	r2, [r3, #4]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f022 0201 	bic.w	r2, r2, #1
 800a096:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2200      	movs	r2, #0
 800a09c:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f7f8 fb2f 	bl	800270a <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800a0ac:	bf00      	nop
 800a0ae:	3710      	adds	r7, #16
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f7f8 fb16 	bl	80026f4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800a0c8:	bf00      	nop
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0dc:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	685a      	ldr	r2, [r3, #4]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f022 0203 	bic.w	r2, r2, #3
 800a0ec:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a106:	f043 0208 	orr.w	r2, r3, #8
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800a10e:	68f8      	ldr	r0, [r7, #12]
 800a110:	f7ff ff76 	bl	800a000 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800a114:	bf00      	nop
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a128:	881a      	ldrh	r2, [r3, #0]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a134:	1c9a      	adds	r2, r3, #2
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a13e:	b29b      	uxth	r3, r3
 800a140:	3b01      	subs	r3, #1
 800a142:	b29a      	uxth	r2, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10e      	bne.n	800a170 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	685a      	ldr	r2, [r3, #4]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a160:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2201      	movs	r2, #1
 800a166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f7f8 fae3 	bl	8002736 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800a170:	bf00      	nop
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	68da      	ldr	r2, [r3, #12]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18a:	b292      	uxth	r2, r2
 800a18c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a192:	1c9a      	adds	r2, r3, #2
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10e      	bne.n	800a1ce <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	685a      	ldr	r2, [r3, #4]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a1be:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f7f8 fa9e 	bl	800270a <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800a1ce:	bf00      	nop
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b086      	sub	sp, #24
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b04      	cmp	r3, #4
 800a1f0:	d13a      	bne.n	800a268 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	f003 0301 	and.w	r3, r3, #1
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d109      	bne.n	800a210 <I2S_IRQHandler+0x3a>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a206:	2b40      	cmp	r3, #64	; 0x40
 800a208:	d102      	bne.n	800a210 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f7ff ffb4 	bl	800a178 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a216:	2b40      	cmp	r3, #64	; 0x40
 800a218:	d126      	bne.n	800a268 <I2S_IRQHandler+0x92>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	f003 0320 	and.w	r3, r3, #32
 800a224:	2b20      	cmp	r3, #32
 800a226:	d11f      	bne.n	800a268 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	685a      	ldr	r2, [r3, #4]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a236:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800a238:	2300      	movs	r3, #0
 800a23a:	613b      	str	r3, [r7, #16]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	613b      	str	r3, [r7, #16]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	613b      	str	r3, [r7, #16]
 800a24c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2201      	movs	r2, #1
 800a252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a25a:	f043 0202 	orr.w	r2, r3, #2
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f7ff fecc 	bl	800a000 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	2b03      	cmp	r3, #3
 800a272:	d136      	bne.n	800a2e2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	f003 0302 	and.w	r3, r3, #2
 800a27a:	2b02      	cmp	r3, #2
 800a27c:	d109      	bne.n	800a292 <I2S_IRQHandler+0xbc>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a288:	2b80      	cmp	r3, #128	; 0x80
 800a28a:	d102      	bne.n	800a292 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f7ff ff45 	bl	800a11c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f003 0308 	and.w	r3, r3, #8
 800a298:	2b08      	cmp	r3, #8
 800a29a:	d122      	bne.n	800a2e2 <I2S_IRQHandler+0x10c>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	f003 0320 	and.w	r3, r3, #32
 800a2a6:	2b20      	cmp	r3, #32
 800a2a8:	d11b      	bne.n	800a2e2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	685a      	ldr	r2, [r3, #4]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a2b8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	60fb      	str	r3, [r7, #12]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	60fb      	str	r3, [r7, #12]
 800a2c6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2d4:	f043 0204 	orr.w	r2, r3, #4
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f7ff fe8f 	bl	800a000 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a2e2:	bf00      	nop
 800a2e4:	3718      	adds	r7, #24
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
	...

0800a2ec <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b088      	sub	sp, #32
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a92      	ldr	r2, [pc, #584]	; (800a54c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d101      	bne.n	800a30a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800a306:	4b92      	ldr	r3, [pc, #584]	; (800a550 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a308:	e001      	b.n	800a30e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800a30a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a8b      	ldr	r2, [pc, #556]	; (800a54c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d101      	bne.n	800a328 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800a324:	4b8a      	ldr	r3, [pc, #552]	; (800a550 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a326:	e001      	b.n	800a32c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800a328:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a338:	d004      	beq.n	800a344 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f040 8099 	bne.w	800a476 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	f003 0302 	and.w	r3, r3, #2
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d107      	bne.n	800a35e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a354:	2b00      	cmp	r3, #0
 800a356:	d002      	beq.n	800a35e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 f925 	bl	800a5a8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	f003 0301 	and.w	r3, r3, #1
 800a364:	2b01      	cmp	r3, #1
 800a366:	d107      	bne.n	800a378 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d002      	beq.n	800a378 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f9c8 	bl	800a708 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a37e:	2b40      	cmp	r3, #64	; 0x40
 800a380:	d13a      	bne.n	800a3f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	f003 0320 	and.w	r3, r3, #32
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d035      	beq.n	800a3f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a6e      	ldr	r2, [pc, #440]	; (800a54c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d101      	bne.n	800a39a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800a396:	4b6e      	ldr	r3, [pc, #440]	; (800a550 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a398:	e001      	b.n	800a39e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800a39a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a39e:	685a      	ldr	r2, [r3, #4]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4969      	ldr	r1, [pc, #420]	; (800a54c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a3a6:	428b      	cmp	r3, r1
 800a3a8:	d101      	bne.n	800a3ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800a3aa:	4b69      	ldr	r3, [pc, #420]	; (800a550 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a3ac:	e001      	b.n	800a3b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800a3ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a3b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a3b6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	685a      	ldr	r2, [r3, #4]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a3c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	60fb      	str	r3, [r7, #12]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	60fb      	str	r3, [r7, #12]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	60fb      	str	r3, [r7, #12]
 800a3dc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ea:	f043 0202 	orr.w	r2, r3, #2
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f7ff fe04 	bl	800a000 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	f003 0308 	and.w	r3, r3, #8
 800a3fe:	2b08      	cmp	r3, #8
 800a400:	f040 80c3 	bne.w	800a58a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	f003 0320 	and.w	r3, r3, #32
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	f000 80bd 	beq.w	800a58a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	685a      	ldr	r2, [r3, #4]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a41e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a49      	ldr	r2, [pc, #292]	; (800a54c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d101      	bne.n	800a42e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800a42a:	4b49      	ldr	r3, [pc, #292]	; (800a550 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a42c:	e001      	b.n	800a432 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800a42e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a432:	685a      	ldr	r2, [r3, #4]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4944      	ldr	r1, [pc, #272]	; (800a54c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a43a:	428b      	cmp	r3, r1
 800a43c:	d101      	bne.n	800a442 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800a43e:	4b44      	ldr	r3, [pc, #272]	; (800a550 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a440:	e001      	b.n	800a446 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800a442:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a446:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a44a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800a44c:	2300      	movs	r3, #0
 800a44e:	60bb      	str	r3, [r7, #8]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	60bb      	str	r3, [r7, #8]
 800a458:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2201      	movs	r2, #1
 800a45e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a466:	f043 0204 	orr.w	r2, r3, #4
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f7ff fdc6 	bl	800a000 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a474:	e089      	b.n	800a58a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	f003 0302 	and.w	r3, r3, #2
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d107      	bne.n	800a490 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a486:	2b00      	cmp	r3, #0
 800a488:	d002      	beq.n	800a490 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f8be 	bl	800a60c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800a490:	69fb      	ldr	r3, [r7, #28]
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	2b01      	cmp	r3, #1
 800a498:	d107      	bne.n	800a4aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d002      	beq.n	800a4aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 f8fd 	bl	800a6a4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a4aa:	69fb      	ldr	r3, [r7, #28]
 800a4ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4b0:	2b40      	cmp	r3, #64	; 0x40
 800a4b2:	d12f      	bne.n	800a514 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	f003 0320 	and.w	r3, r3, #32
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d02a      	beq.n	800a514 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	685a      	ldr	r2, [r3, #4]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a4cc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a1e      	ldr	r2, [pc, #120]	; (800a54c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d101      	bne.n	800a4dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800a4d8:	4b1d      	ldr	r3, [pc, #116]	; (800a550 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a4da:	e001      	b.n	800a4e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800a4dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a4e0:	685a      	ldr	r2, [r3, #4]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4919      	ldr	r1, [pc, #100]	; (800a54c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a4e8:	428b      	cmp	r3, r1
 800a4ea:	d101      	bne.n	800a4f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800a4ec:	4b18      	ldr	r3, [pc, #96]	; (800a550 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a4ee:	e001      	b.n	800a4f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800a4f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a4f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a4f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a506:	f043 0202 	orr.w	r2, r3, #2
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f7ff fd76 	bl	800a000 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	f003 0308 	and.w	r3, r3, #8
 800a51a:	2b08      	cmp	r3, #8
 800a51c:	d136      	bne.n	800a58c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	f003 0320 	and.w	r3, r3, #32
 800a524:	2b00      	cmp	r3, #0
 800a526:	d031      	beq.n	800a58c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a07      	ldr	r2, [pc, #28]	; (800a54c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d101      	bne.n	800a536 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800a532:	4b07      	ldr	r3, [pc, #28]	; (800a550 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a534:	e001      	b.n	800a53a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800a536:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a53a:	685a      	ldr	r2, [r3, #4]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4902      	ldr	r1, [pc, #8]	; (800a54c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a542:	428b      	cmp	r3, r1
 800a544:	d106      	bne.n	800a554 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800a546:	4b02      	ldr	r3, [pc, #8]	; (800a550 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a548:	e006      	b.n	800a558 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800a54a:	bf00      	nop
 800a54c:	40003800 	.word	0x40003800
 800a550:	40003400 	.word	0x40003400
 800a554:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a558:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a55c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	685a      	ldr	r2, [r3, #4]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a56c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2201      	movs	r2, #1
 800a572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a57a:	f043 0204 	orr.w	r2, r3, #4
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7ff fd3c 	bl	800a000 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a588:	e000      	b.n	800a58c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a58a:	bf00      	nop
}
 800a58c:	bf00      	nop
 800a58e:	3720      	adds	r7, #32
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800a59c:	bf00      	nop
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b4:	1c99      	adds	r1, r3, #2
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	6251      	str	r1, [r2, #36]	; 0x24
 800a5ba:	881a      	ldrh	r2, [r3, #0]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d113      	bne.n	800a602 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	685a      	ldr	r2, [r3, #4]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a5e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d106      	bne.n	800a602 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f7ff ffc9 	bl	800a594 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a602:	bf00      	nop
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
	...

0800a60c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a618:	1c99      	adds	r1, r3, #2
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	6251      	str	r1, [r2, #36]	; 0x24
 800a61e:	8819      	ldrh	r1, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a1d      	ldr	r2, [pc, #116]	; (800a69c <I2SEx_TxISR_I2SExt+0x90>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d101      	bne.n	800a62e <I2SEx_TxISR_I2SExt+0x22>
 800a62a:	4b1d      	ldr	r3, [pc, #116]	; (800a6a0 <I2SEx_TxISR_I2SExt+0x94>)
 800a62c:	e001      	b.n	800a632 <I2SEx_TxISR_I2SExt+0x26>
 800a62e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a632:	460a      	mov	r2, r1
 800a634:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	3b01      	subs	r3, #1
 800a63e:	b29a      	uxth	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a648:	b29b      	uxth	r3, r3
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d121      	bne.n	800a692 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a12      	ldr	r2, [pc, #72]	; (800a69c <I2SEx_TxISR_I2SExt+0x90>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d101      	bne.n	800a65c <I2SEx_TxISR_I2SExt+0x50>
 800a658:	4b11      	ldr	r3, [pc, #68]	; (800a6a0 <I2SEx_TxISR_I2SExt+0x94>)
 800a65a:	e001      	b.n	800a660 <I2SEx_TxISR_I2SExt+0x54>
 800a65c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a660:	685a      	ldr	r2, [r3, #4]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	490d      	ldr	r1, [pc, #52]	; (800a69c <I2SEx_TxISR_I2SExt+0x90>)
 800a668:	428b      	cmp	r3, r1
 800a66a:	d101      	bne.n	800a670 <I2SEx_TxISR_I2SExt+0x64>
 800a66c:	4b0c      	ldr	r3, [pc, #48]	; (800a6a0 <I2SEx_TxISR_I2SExt+0x94>)
 800a66e:	e001      	b.n	800a674 <I2SEx_TxISR_I2SExt+0x68>
 800a670:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a674:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a678:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a67e:	b29b      	uxth	r3, r3
 800a680:	2b00      	cmp	r3, #0
 800a682:	d106      	bne.n	800a692 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2201      	movs	r2, #1
 800a688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f7ff ff81 	bl	800a594 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a692:	bf00      	nop
 800a694:	3708      	adds	r7, #8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	40003800 	.word	0x40003800
 800a6a0:	40003400 	.word	0x40003400

0800a6a4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	68d8      	ldr	r0, [r3, #12]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b6:	1c99      	adds	r1, r3, #2
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	62d1      	str	r1, [r2, #44]	; 0x2c
 800a6bc:	b282      	uxth	r2, r0
 800a6be:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	3b01      	subs	r3, #1
 800a6c8:	b29a      	uxth	r2, r3
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d113      	bne.n	800a700 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	685a      	ldr	r2, [r3, #4]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a6e6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d106      	bne.n	800a700 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f7ff ff4a 	bl	800a594 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a700:	bf00      	nop
 800a702:	3708      	adds	r7, #8
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a20      	ldr	r2, [pc, #128]	; (800a798 <I2SEx_RxISR_I2SExt+0x90>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d101      	bne.n	800a71e <I2SEx_RxISR_I2SExt+0x16>
 800a71a:	4b20      	ldr	r3, [pc, #128]	; (800a79c <I2SEx_RxISR_I2SExt+0x94>)
 800a71c:	e001      	b.n	800a722 <I2SEx_RxISR_I2SExt+0x1a>
 800a71e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a722:	68d8      	ldr	r0, [r3, #12]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a728:	1c99      	adds	r1, r3, #2
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800a72e:	b282      	uxth	r2, r0
 800a730:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a736:	b29b      	uxth	r3, r3
 800a738:	3b01      	subs	r3, #1
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a744:	b29b      	uxth	r3, r3
 800a746:	2b00      	cmp	r3, #0
 800a748:	d121      	bne.n	800a78e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a12      	ldr	r2, [pc, #72]	; (800a798 <I2SEx_RxISR_I2SExt+0x90>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d101      	bne.n	800a758 <I2SEx_RxISR_I2SExt+0x50>
 800a754:	4b11      	ldr	r3, [pc, #68]	; (800a79c <I2SEx_RxISR_I2SExt+0x94>)
 800a756:	e001      	b.n	800a75c <I2SEx_RxISR_I2SExt+0x54>
 800a758:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a75c:	685a      	ldr	r2, [r3, #4]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	490d      	ldr	r1, [pc, #52]	; (800a798 <I2SEx_RxISR_I2SExt+0x90>)
 800a764:	428b      	cmp	r3, r1
 800a766:	d101      	bne.n	800a76c <I2SEx_RxISR_I2SExt+0x64>
 800a768:	4b0c      	ldr	r3, [pc, #48]	; (800a79c <I2SEx_RxISR_I2SExt+0x94>)
 800a76a:	e001      	b.n	800a770 <I2SEx_RxISR_I2SExt+0x68>
 800a76c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a770:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a774:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d106      	bne.n	800a78e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f7ff ff03 	bl	800a594 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a78e:	bf00      	nop
 800a790:	3708      	adds	r7, #8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	40003800 	.word	0x40003800
 800a79c:	40003400 	.word	0x40003400

0800a7a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d101      	bne.n	800a7b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e267      	b.n	800ac82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 0301 	and.w	r3, r3, #1
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d075      	beq.n	800a8aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a7be:	4b88      	ldr	r3, [pc, #544]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	f003 030c 	and.w	r3, r3, #12
 800a7c6:	2b04      	cmp	r3, #4
 800a7c8:	d00c      	beq.n	800a7e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a7ca:	4b85      	ldr	r3, [pc, #532]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a7d2:	2b08      	cmp	r3, #8
 800a7d4:	d112      	bne.n	800a7fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a7d6:	4b82      	ldr	r3, [pc, #520]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7e2:	d10b      	bne.n	800a7fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7e4:	4b7e      	ldr	r3, [pc, #504]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d05b      	beq.n	800a8a8 <HAL_RCC_OscConfig+0x108>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d157      	bne.n	800a8a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e242      	b.n	800ac82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a804:	d106      	bne.n	800a814 <HAL_RCC_OscConfig+0x74>
 800a806:	4b76      	ldr	r3, [pc, #472]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a75      	ldr	r2, [pc, #468]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a80c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a810:	6013      	str	r3, [r2, #0]
 800a812:	e01d      	b.n	800a850 <HAL_RCC_OscConfig+0xb0>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a81c:	d10c      	bne.n	800a838 <HAL_RCC_OscConfig+0x98>
 800a81e:	4b70      	ldr	r3, [pc, #448]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a6f      	ldr	r2, [pc, #444]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a828:	6013      	str	r3, [r2, #0]
 800a82a:	4b6d      	ldr	r3, [pc, #436]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a6c      	ldr	r2, [pc, #432]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a834:	6013      	str	r3, [r2, #0]
 800a836:	e00b      	b.n	800a850 <HAL_RCC_OscConfig+0xb0>
 800a838:	4b69      	ldr	r3, [pc, #420]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a68      	ldr	r2, [pc, #416]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a83e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a842:	6013      	str	r3, [r2, #0]
 800a844:	4b66      	ldr	r3, [pc, #408]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a65      	ldr	r2, [pc, #404]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a84a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a84e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d013      	beq.n	800a880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a858:	f7fe f9f2 	bl	8008c40 <HAL_GetTick>
 800a85c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a85e:	e008      	b.n	800a872 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a860:	f7fe f9ee 	bl	8008c40 <HAL_GetTick>
 800a864:	4602      	mov	r2, r0
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	1ad3      	subs	r3, r2, r3
 800a86a:	2b64      	cmp	r3, #100	; 0x64
 800a86c:	d901      	bls.n	800a872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a86e:	2303      	movs	r3, #3
 800a870:	e207      	b.n	800ac82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a872:	4b5b      	ldr	r3, [pc, #364]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d0f0      	beq.n	800a860 <HAL_RCC_OscConfig+0xc0>
 800a87e:	e014      	b.n	800a8aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a880:	f7fe f9de 	bl	8008c40 <HAL_GetTick>
 800a884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a886:	e008      	b.n	800a89a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a888:	f7fe f9da 	bl	8008c40 <HAL_GetTick>
 800a88c:	4602      	mov	r2, r0
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	2b64      	cmp	r3, #100	; 0x64
 800a894:	d901      	bls.n	800a89a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a896:	2303      	movs	r3, #3
 800a898:	e1f3      	b.n	800ac82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a89a:	4b51      	ldr	r3, [pc, #324]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d1f0      	bne.n	800a888 <HAL_RCC_OscConfig+0xe8>
 800a8a6:	e000      	b.n	800a8aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 0302 	and.w	r3, r3, #2
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d063      	beq.n	800a97e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a8b6:	4b4a      	ldr	r3, [pc, #296]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	f003 030c 	and.w	r3, r3, #12
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00b      	beq.n	800a8da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a8c2:	4b47      	ldr	r3, [pc, #284]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a8ca:	2b08      	cmp	r3, #8
 800a8cc:	d11c      	bne.n	800a908 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a8ce:	4b44      	ldr	r3, [pc, #272]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d116      	bne.n	800a908 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a8da:	4b41      	ldr	r3, [pc, #260]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f003 0302 	and.w	r3, r3, #2
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d005      	beq.n	800a8f2 <HAL_RCC_OscConfig+0x152>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d001      	beq.n	800a8f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e1c7      	b.n	800ac82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8f2:	4b3b      	ldr	r3, [pc, #236]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	00db      	lsls	r3, r3, #3
 800a900:	4937      	ldr	r1, [pc, #220]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a902:	4313      	orrs	r3, r2
 800a904:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a906:	e03a      	b.n	800a97e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d020      	beq.n	800a952 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a910:	4b34      	ldr	r3, [pc, #208]	; (800a9e4 <HAL_RCC_OscConfig+0x244>)
 800a912:	2201      	movs	r2, #1
 800a914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a916:	f7fe f993 	bl	8008c40 <HAL_GetTick>
 800a91a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a91c:	e008      	b.n	800a930 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a91e:	f7fe f98f 	bl	8008c40 <HAL_GetTick>
 800a922:	4602      	mov	r2, r0
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	1ad3      	subs	r3, r2, r3
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d901      	bls.n	800a930 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a92c:	2303      	movs	r3, #3
 800a92e:	e1a8      	b.n	800ac82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a930:	4b2b      	ldr	r3, [pc, #172]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f003 0302 	and.w	r3, r3, #2
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d0f0      	beq.n	800a91e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a93c:	4b28      	ldr	r3, [pc, #160]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	691b      	ldr	r3, [r3, #16]
 800a948:	00db      	lsls	r3, r3, #3
 800a94a:	4925      	ldr	r1, [pc, #148]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a94c:	4313      	orrs	r3, r2
 800a94e:	600b      	str	r3, [r1, #0]
 800a950:	e015      	b.n	800a97e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a952:	4b24      	ldr	r3, [pc, #144]	; (800a9e4 <HAL_RCC_OscConfig+0x244>)
 800a954:	2200      	movs	r2, #0
 800a956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a958:	f7fe f972 	bl	8008c40 <HAL_GetTick>
 800a95c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a95e:	e008      	b.n	800a972 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a960:	f7fe f96e 	bl	8008c40 <HAL_GetTick>
 800a964:	4602      	mov	r2, r0
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	1ad3      	subs	r3, r2, r3
 800a96a:	2b02      	cmp	r3, #2
 800a96c:	d901      	bls.n	800a972 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a96e:	2303      	movs	r3, #3
 800a970:	e187      	b.n	800ac82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a972:	4b1b      	ldr	r3, [pc, #108]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f003 0302 	and.w	r3, r3, #2
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1f0      	bne.n	800a960 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f003 0308 	and.w	r3, r3, #8
 800a986:	2b00      	cmp	r3, #0
 800a988:	d036      	beq.n	800a9f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	695b      	ldr	r3, [r3, #20]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d016      	beq.n	800a9c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a992:	4b15      	ldr	r3, [pc, #84]	; (800a9e8 <HAL_RCC_OscConfig+0x248>)
 800a994:	2201      	movs	r2, #1
 800a996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a998:	f7fe f952 	bl	8008c40 <HAL_GetTick>
 800a99c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a99e:	e008      	b.n	800a9b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a9a0:	f7fe f94e 	bl	8008c40 <HAL_GetTick>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	d901      	bls.n	800a9b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a9ae:	2303      	movs	r3, #3
 800a9b0:	e167      	b.n	800ac82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a9b2:	4b0b      	ldr	r3, [pc, #44]	; (800a9e0 <HAL_RCC_OscConfig+0x240>)
 800a9b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9b6:	f003 0302 	and.w	r3, r3, #2
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d0f0      	beq.n	800a9a0 <HAL_RCC_OscConfig+0x200>
 800a9be:	e01b      	b.n	800a9f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a9c0:	4b09      	ldr	r3, [pc, #36]	; (800a9e8 <HAL_RCC_OscConfig+0x248>)
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a9c6:	f7fe f93b 	bl	8008c40 <HAL_GetTick>
 800a9ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a9cc:	e00e      	b.n	800a9ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a9ce:	f7fe f937 	bl	8008c40 <HAL_GetTick>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d907      	bls.n	800a9ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a9dc:	2303      	movs	r3, #3
 800a9de:	e150      	b.n	800ac82 <HAL_RCC_OscConfig+0x4e2>
 800a9e0:	40023800 	.word	0x40023800
 800a9e4:	42470000 	.word	0x42470000
 800a9e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a9ec:	4b88      	ldr	r3, [pc, #544]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800a9ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9f0:	f003 0302 	and.w	r3, r3, #2
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d1ea      	bne.n	800a9ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f003 0304 	and.w	r3, r3, #4
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f000 8097 	beq.w	800ab34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa06:	2300      	movs	r3, #0
 800aa08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa0a:	4b81      	ldr	r3, [pc, #516]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800aa0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10f      	bne.n	800aa36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa16:	2300      	movs	r3, #0
 800aa18:	60bb      	str	r3, [r7, #8]
 800aa1a:	4b7d      	ldr	r3, [pc, #500]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800aa1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1e:	4a7c      	ldr	r2, [pc, #496]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800aa20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa24:	6413      	str	r3, [r2, #64]	; 0x40
 800aa26:	4b7a      	ldr	r3, [pc, #488]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800aa28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa2e:	60bb      	str	r3, [r7, #8]
 800aa30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aa32:	2301      	movs	r3, #1
 800aa34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa36:	4b77      	ldr	r3, [pc, #476]	; (800ac14 <HAL_RCC_OscConfig+0x474>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d118      	bne.n	800aa74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aa42:	4b74      	ldr	r3, [pc, #464]	; (800ac14 <HAL_RCC_OscConfig+0x474>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a73      	ldr	r2, [pc, #460]	; (800ac14 <HAL_RCC_OscConfig+0x474>)
 800aa48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aa4e:	f7fe f8f7 	bl	8008c40 <HAL_GetTick>
 800aa52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa54:	e008      	b.n	800aa68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa56:	f7fe f8f3 	bl	8008c40 <HAL_GetTick>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	1ad3      	subs	r3, r2, r3
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d901      	bls.n	800aa68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800aa64:	2303      	movs	r3, #3
 800aa66:	e10c      	b.n	800ac82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa68:	4b6a      	ldr	r3, [pc, #424]	; (800ac14 <HAL_RCC_OscConfig+0x474>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d0f0      	beq.n	800aa56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d106      	bne.n	800aa8a <HAL_RCC_OscConfig+0x2ea>
 800aa7c:	4b64      	ldr	r3, [pc, #400]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800aa7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa80:	4a63      	ldr	r2, [pc, #396]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800aa82:	f043 0301 	orr.w	r3, r3, #1
 800aa86:	6713      	str	r3, [r2, #112]	; 0x70
 800aa88:	e01c      	b.n	800aac4 <HAL_RCC_OscConfig+0x324>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	2b05      	cmp	r3, #5
 800aa90:	d10c      	bne.n	800aaac <HAL_RCC_OscConfig+0x30c>
 800aa92:	4b5f      	ldr	r3, [pc, #380]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800aa94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa96:	4a5e      	ldr	r2, [pc, #376]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800aa98:	f043 0304 	orr.w	r3, r3, #4
 800aa9c:	6713      	str	r3, [r2, #112]	; 0x70
 800aa9e:	4b5c      	ldr	r3, [pc, #368]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800aaa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaa2:	4a5b      	ldr	r2, [pc, #364]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800aaa4:	f043 0301 	orr.w	r3, r3, #1
 800aaa8:	6713      	str	r3, [r2, #112]	; 0x70
 800aaaa:	e00b      	b.n	800aac4 <HAL_RCC_OscConfig+0x324>
 800aaac:	4b58      	ldr	r3, [pc, #352]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800aaae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aab0:	4a57      	ldr	r2, [pc, #348]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800aab2:	f023 0301 	bic.w	r3, r3, #1
 800aab6:	6713      	str	r3, [r2, #112]	; 0x70
 800aab8:	4b55      	ldr	r3, [pc, #340]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800aaba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aabc:	4a54      	ldr	r2, [pc, #336]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800aabe:	f023 0304 	bic.w	r3, r3, #4
 800aac2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d015      	beq.n	800aaf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aacc:	f7fe f8b8 	bl	8008c40 <HAL_GetTick>
 800aad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aad2:	e00a      	b.n	800aaea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aad4:	f7fe f8b4 	bl	8008c40 <HAL_GetTick>
 800aad8:	4602      	mov	r2, r0
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	f241 3288 	movw	r2, #5000	; 0x1388
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d901      	bls.n	800aaea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800aae6:	2303      	movs	r3, #3
 800aae8:	e0cb      	b.n	800ac82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aaea:	4b49      	ldr	r3, [pc, #292]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800aaec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaee:	f003 0302 	and.w	r3, r3, #2
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d0ee      	beq.n	800aad4 <HAL_RCC_OscConfig+0x334>
 800aaf6:	e014      	b.n	800ab22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aaf8:	f7fe f8a2 	bl	8008c40 <HAL_GetTick>
 800aafc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aafe:	e00a      	b.n	800ab16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab00:	f7fe f89e 	bl	8008c40 <HAL_GetTick>
 800ab04:	4602      	mov	r2, r0
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d901      	bls.n	800ab16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ab12:	2303      	movs	r3, #3
 800ab14:	e0b5      	b.n	800ac82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab16:	4b3e      	ldr	r3, [pc, #248]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800ab18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab1a:	f003 0302 	and.w	r3, r3, #2
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d1ee      	bne.n	800ab00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ab22:	7dfb      	ldrb	r3, [r7, #23]
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d105      	bne.n	800ab34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab28:	4b39      	ldr	r3, [pc, #228]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800ab2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2c:	4a38      	ldr	r2, [pc, #224]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800ab2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	699b      	ldr	r3, [r3, #24]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	f000 80a1 	beq.w	800ac80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ab3e:	4b34      	ldr	r3, [pc, #208]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	f003 030c 	and.w	r3, r3, #12
 800ab46:	2b08      	cmp	r3, #8
 800ab48:	d05c      	beq.n	800ac04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	699b      	ldr	r3, [r3, #24]
 800ab4e:	2b02      	cmp	r3, #2
 800ab50:	d141      	bne.n	800abd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab52:	4b31      	ldr	r3, [pc, #196]	; (800ac18 <HAL_RCC_OscConfig+0x478>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab58:	f7fe f872 	bl	8008c40 <HAL_GetTick>
 800ab5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab5e:	e008      	b.n	800ab72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab60:	f7fe f86e 	bl	8008c40 <HAL_GetTick>
 800ab64:	4602      	mov	r2, r0
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	1ad3      	subs	r3, r2, r3
 800ab6a:	2b02      	cmp	r3, #2
 800ab6c:	d901      	bls.n	800ab72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ab6e:	2303      	movs	r3, #3
 800ab70:	e087      	b.n	800ac82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab72:	4b27      	ldr	r3, [pc, #156]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1f0      	bne.n	800ab60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	69da      	ldr	r2, [r3, #28]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a1b      	ldr	r3, [r3, #32]
 800ab86:	431a      	orrs	r2, r3
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8c:	019b      	lsls	r3, r3, #6
 800ab8e:	431a      	orrs	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab94:	085b      	lsrs	r3, r3, #1
 800ab96:	3b01      	subs	r3, #1
 800ab98:	041b      	lsls	r3, r3, #16
 800ab9a:	431a      	orrs	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba0:	061b      	lsls	r3, r3, #24
 800aba2:	491b      	ldr	r1, [pc, #108]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800aba4:	4313      	orrs	r3, r2
 800aba6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aba8:	4b1b      	ldr	r3, [pc, #108]	; (800ac18 <HAL_RCC_OscConfig+0x478>)
 800abaa:	2201      	movs	r2, #1
 800abac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abae:	f7fe f847 	bl	8008c40 <HAL_GetTick>
 800abb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800abb4:	e008      	b.n	800abc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800abb6:	f7fe f843 	bl	8008c40 <HAL_GetTick>
 800abba:	4602      	mov	r2, r0
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	1ad3      	subs	r3, r2, r3
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	d901      	bls.n	800abc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800abc4:	2303      	movs	r3, #3
 800abc6:	e05c      	b.n	800ac82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800abc8:	4b11      	ldr	r3, [pc, #68]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d0f0      	beq.n	800abb6 <HAL_RCC_OscConfig+0x416>
 800abd4:	e054      	b.n	800ac80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abd6:	4b10      	ldr	r3, [pc, #64]	; (800ac18 <HAL_RCC_OscConfig+0x478>)
 800abd8:	2200      	movs	r2, #0
 800abda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abdc:	f7fe f830 	bl	8008c40 <HAL_GetTick>
 800abe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800abe2:	e008      	b.n	800abf6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800abe4:	f7fe f82c 	bl	8008c40 <HAL_GetTick>
 800abe8:	4602      	mov	r2, r0
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	1ad3      	subs	r3, r2, r3
 800abee:	2b02      	cmp	r3, #2
 800abf0:	d901      	bls.n	800abf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800abf2:	2303      	movs	r3, #3
 800abf4:	e045      	b.n	800ac82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800abf6:	4b06      	ldr	r3, [pc, #24]	; (800ac10 <HAL_RCC_OscConfig+0x470>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d1f0      	bne.n	800abe4 <HAL_RCC_OscConfig+0x444>
 800ac02:	e03d      	b.n	800ac80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	699b      	ldr	r3, [r3, #24]
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d107      	bne.n	800ac1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e038      	b.n	800ac82 <HAL_RCC_OscConfig+0x4e2>
 800ac10:	40023800 	.word	0x40023800
 800ac14:	40007000 	.word	0x40007000
 800ac18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ac1c:	4b1b      	ldr	r3, [pc, #108]	; (800ac8c <HAL_RCC_OscConfig+0x4ec>)
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	699b      	ldr	r3, [r3, #24]
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d028      	beq.n	800ac7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d121      	bne.n	800ac7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d11a      	bne.n	800ac7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ac4c:	4013      	ands	r3, r2
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ac52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d111      	bne.n	800ac7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac62:	085b      	lsrs	r3, r3, #1
 800ac64:	3b01      	subs	r3, #1
 800ac66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d107      	bne.n	800ac7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d001      	beq.n	800ac80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	e000      	b.n	800ac82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3718      	adds	r7, #24
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	40023800 	.word	0x40023800

0800ac90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d101      	bne.n	800aca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	e0cc      	b.n	800ae3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aca4:	4b68      	ldr	r3, [pc, #416]	; (800ae48 <HAL_RCC_ClockConfig+0x1b8>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 0307 	and.w	r3, r3, #7
 800acac:	683a      	ldr	r2, [r7, #0]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d90c      	bls.n	800accc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acb2:	4b65      	ldr	r3, [pc, #404]	; (800ae48 <HAL_RCC_ClockConfig+0x1b8>)
 800acb4:	683a      	ldr	r2, [r7, #0]
 800acb6:	b2d2      	uxtb	r2, r2
 800acb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800acba:	4b63      	ldr	r3, [pc, #396]	; (800ae48 <HAL_RCC_ClockConfig+0x1b8>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 0307 	and.w	r3, r3, #7
 800acc2:	683a      	ldr	r2, [r7, #0]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d001      	beq.n	800accc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800acc8:	2301      	movs	r3, #1
 800acca:	e0b8      	b.n	800ae3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f003 0302 	and.w	r3, r3, #2
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d020      	beq.n	800ad1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 0304 	and.w	r3, r3, #4
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d005      	beq.n	800acf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ace4:	4b59      	ldr	r3, [pc, #356]	; (800ae4c <HAL_RCC_ClockConfig+0x1bc>)
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	4a58      	ldr	r2, [pc, #352]	; (800ae4c <HAL_RCC_ClockConfig+0x1bc>)
 800acea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800acee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f003 0308 	and.w	r3, r3, #8
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d005      	beq.n	800ad08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800acfc:	4b53      	ldr	r3, [pc, #332]	; (800ae4c <HAL_RCC_ClockConfig+0x1bc>)
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	4a52      	ldr	r2, [pc, #328]	; (800ae4c <HAL_RCC_ClockConfig+0x1bc>)
 800ad02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ad06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad08:	4b50      	ldr	r3, [pc, #320]	; (800ae4c <HAL_RCC_ClockConfig+0x1bc>)
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	494d      	ldr	r1, [pc, #308]	; (800ae4c <HAL_RCC_ClockConfig+0x1bc>)
 800ad16:	4313      	orrs	r3, r2
 800ad18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f003 0301 	and.w	r3, r3, #1
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d044      	beq.n	800adb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d107      	bne.n	800ad3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad2e:	4b47      	ldr	r3, [pc, #284]	; (800ae4c <HAL_RCC_ClockConfig+0x1bc>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d119      	bne.n	800ad6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e07f      	b.n	800ae3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d003      	beq.n	800ad4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ad4a:	2b03      	cmp	r3, #3
 800ad4c:	d107      	bne.n	800ad5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad4e:	4b3f      	ldr	r3, [pc, #252]	; (800ae4c <HAL_RCC_ClockConfig+0x1bc>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d109      	bne.n	800ad6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e06f      	b.n	800ae3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad5e:	4b3b      	ldr	r3, [pc, #236]	; (800ae4c <HAL_RCC_ClockConfig+0x1bc>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 0302 	and.w	r3, r3, #2
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d101      	bne.n	800ad6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e067      	b.n	800ae3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ad6e:	4b37      	ldr	r3, [pc, #220]	; (800ae4c <HAL_RCC_ClockConfig+0x1bc>)
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	f023 0203 	bic.w	r2, r3, #3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	4934      	ldr	r1, [pc, #208]	; (800ae4c <HAL_RCC_ClockConfig+0x1bc>)
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ad80:	f7fd ff5e 	bl	8008c40 <HAL_GetTick>
 800ad84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad86:	e00a      	b.n	800ad9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad88:	f7fd ff5a 	bl	8008c40 <HAL_GetTick>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	1ad3      	subs	r3, r2, r3
 800ad92:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d901      	bls.n	800ad9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ad9a:	2303      	movs	r3, #3
 800ad9c:	e04f      	b.n	800ae3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad9e:	4b2b      	ldr	r3, [pc, #172]	; (800ae4c <HAL_RCC_ClockConfig+0x1bc>)
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	f003 020c 	and.w	r2, r3, #12
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	429a      	cmp	r2, r3
 800adae:	d1eb      	bne.n	800ad88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800adb0:	4b25      	ldr	r3, [pc, #148]	; (800ae48 <HAL_RCC_ClockConfig+0x1b8>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f003 0307 	and.w	r3, r3, #7
 800adb8:	683a      	ldr	r2, [r7, #0]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d20c      	bcs.n	800add8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adbe:	4b22      	ldr	r3, [pc, #136]	; (800ae48 <HAL_RCC_ClockConfig+0x1b8>)
 800adc0:	683a      	ldr	r2, [r7, #0]
 800adc2:	b2d2      	uxtb	r2, r2
 800adc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800adc6:	4b20      	ldr	r3, [pc, #128]	; (800ae48 <HAL_RCC_ClockConfig+0x1b8>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f003 0307 	and.w	r3, r3, #7
 800adce:	683a      	ldr	r2, [r7, #0]
 800add0:	429a      	cmp	r2, r3
 800add2:	d001      	beq.n	800add8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	e032      	b.n	800ae3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 0304 	and.w	r3, r3, #4
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d008      	beq.n	800adf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ade4:	4b19      	ldr	r3, [pc, #100]	; (800ae4c <HAL_RCC_ClockConfig+0x1bc>)
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	4916      	ldr	r1, [pc, #88]	; (800ae4c <HAL_RCC_ClockConfig+0x1bc>)
 800adf2:	4313      	orrs	r3, r2
 800adf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f003 0308 	and.w	r3, r3, #8
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d009      	beq.n	800ae16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ae02:	4b12      	ldr	r3, [pc, #72]	; (800ae4c <HAL_RCC_ClockConfig+0x1bc>)
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	691b      	ldr	r3, [r3, #16]
 800ae0e:	00db      	lsls	r3, r3, #3
 800ae10:	490e      	ldr	r1, [pc, #56]	; (800ae4c <HAL_RCC_ClockConfig+0x1bc>)
 800ae12:	4313      	orrs	r3, r2
 800ae14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ae16:	f000 f821 	bl	800ae5c <HAL_RCC_GetSysClockFreq>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	4b0b      	ldr	r3, [pc, #44]	; (800ae4c <HAL_RCC_ClockConfig+0x1bc>)
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	091b      	lsrs	r3, r3, #4
 800ae22:	f003 030f 	and.w	r3, r3, #15
 800ae26:	490a      	ldr	r1, [pc, #40]	; (800ae50 <HAL_RCC_ClockConfig+0x1c0>)
 800ae28:	5ccb      	ldrb	r3, [r1, r3]
 800ae2a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae2e:	4a09      	ldr	r2, [pc, #36]	; (800ae54 <HAL_RCC_ClockConfig+0x1c4>)
 800ae30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ae32:	4b09      	ldr	r3, [pc, #36]	; (800ae58 <HAL_RCC_ClockConfig+0x1c8>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7fd febe 	bl	8008bb8 <HAL_InitTick>

  return HAL_OK;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	40023c00 	.word	0x40023c00
 800ae4c:	40023800 	.word	0x40023800
 800ae50:	08013d44 	.word	0x08013d44
 800ae54:	20000434 	.word	0x20000434
 800ae58:	20000440 	.word	0x20000440

0800ae5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae60:	b094      	sub	sp, #80	; 0x50
 800ae62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ae64:	2300      	movs	r3, #0
 800ae66:	647b      	str	r3, [r7, #68]	; 0x44
 800ae68:	2300      	movs	r3, #0
 800ae6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800ae70:	2300      	movs	r3, #0
 800ae72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ae74:	4b79      	ldr	r3, [pc, #484]	; (800b05c <HAL_RCC_GetSysClockFreq+0x200>)
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	f003 030c 	and.w	r3, r3, #12
 800ae7c:	2b08      	cmp	r3, #8
 800ae7e:	d00d      	beq.n	800ae9c <HAL_RCC_GetSysClockFreq+0x40>
 800ae80:	2b08      	cmp	r3, #8
 800ae82:	f200 80e1 	bhi.w	800b048 <HAL_RCC_GetSysClockFreq+0x1ec>
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d002      	beq.n	800ae90 <HAL_RCC_GetSysClockFreq+0x34>
 800ae8a:	2b04      	cmp	r3, #4
 800ae8c:	d003      	beq.n	800ae96 <HAL_RCC_GetSysClockFreq+0x3a>
 800ae8e:	e0db      	b.n	800b048 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ae90:	4b73      	ldr	r3, [pc, #460]	; (800b060 <HAL_RCC_GetSysClockFreq+0x204>)
 800ae92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800ae94:	e0db      	b.n	800b04e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ae96:	4b73      	ldr	r3, [pc, #460]	; (800b064 <HAL_RCC_GetSysClockFreq+0x208>)
 800ae98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ae9a:	e0d8      	b.n	800b04e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ae9c:	4b6f      	ldr	r3, [pc, #444]	; (800b05c <HAL_RCC_GetSysClockFreq+0x200>)
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aea4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aea6:	4b6d      	ldr	r3, [pc, #436]	; (800b05c <HAL_RCC_GetSysClockFreq+0x200>)
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d063      	beq.n	800af7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aeb2:	4b6a      	ldr	r3, [pc, #424]	; (800b05c <HAL_RCC_GetSysClockFreq+0x200>)
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	099b      	lsrs	r3, r3, #6
 800aeb8:	2200      	movs	r2, #0
 800aeba:	63bb      	str	r3, [r7, #56]	; 0x38
 800aebc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800aebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aec4:	633b      	str	r3, [r7, #48]	; 0x30
 800aec6:	2300      	movs	r3, #0
 800aec8:	637b      	str	r3, [r7, #52]	; 0x34
 800aeca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800aece:	4622      	mov	r2, r4
 800aed0:	462b      	mov	r3, r5
 800aed2:	f04f 0000 	mov.w	r0, #0
 800aed6:	f04f 0100 	mov.w	r1, #0
 800aeda:	0159      	lsls	r1, r3, #5
 800aedc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800aee0:	0150      	lsls	r0, r2, #5
 800aee2:	4602      	mov	r2, r0
 800aee4:	460b      	mov	r3, r1
 800aee6:	4621      	mov	r1, r4
 800aee8:	1a51      	subs	r1, r2, r1
 800aeea:	6139      	str	r1, [r7, #16]
 800aeec:	4629      	mov	r1, r5
 800aeee:	eb63 0301 	sbc.w	r3, r3, r1
 800aef2:	617b      	str	r3, [r7, #20]
 800aef4:	f04f 0200 	mov.w	r2, #0
 800aef8:	f04f 0300 	mov.w	r3, #0
 800aefc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800af00:	4659      	mov	r1, fp
 800af02:	018b      	lsls	r3, r1, #6
 800af04:	4651      	mov	r1, sl
 800af06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800af0a:	4651      	mov	r1, sl
 800af0c:	018a      	lsls	r2, r1, #6
 800af0e:	4651      	mov	r1, sl
 800af10:	ebb2 0801 	subs.w	r8, r2, r1
 800af14:	4659      	mov	r1, fp
 800af16:	eb63 0901 	sbc.w	r9, r3, r1
 800af1a:	f04f 0200 	mov.w	r2, #0
 800af1e:	f04f 0300 	mov.w	r3, #0
 800af22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800af26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800af2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800af2e:	4690      	mov	r8, r2
 800af30:	4699      	mov	r9, r3
 800af32:	4623      	mov	r3, r4
 800af34:	eb18 0303 	adds.w	r3, r8, r3
 800af38:	60bb      	str	r3, [r7, #8]
 800af3a:	462b      	mov	r3, r5
 800af3c:	eb49 0303 	adc.w	r3, r9, r3
 800af40:	60fb      	str	r3, [r7, #12]
 800af42:	f04f 0200 	mov.w	r2, #0
 800af46:	f04f 0300 	mov.w	r3, #0
 800af4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800af4e:	4629      	mov	r1, r5
 800af50:	024b      	lsls	r3, r1, #9
 800af52:	4621      	mov	r1, r4
 800af54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800af58:	4621      	mov	r1, r4
 800af5a:	024a      	lsls	r2, r1, #9
 800af5c:	4610      	mov	r0, r2
 800af5e:	4619      	mov	r1, r3
 800af60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af62:	2200      	movs	r2, #0
 800af64:	62bb      	str	r3, [r7, #40]	; 0x28
 800af66:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800af6c:	f7f5 fe3c 	bl	8000be8 <__aeabi_uldivmod>
 800af70:	4602      	mov	r2, r0
 800af72:	460b      	mov	r3, r1
 800af74:	4613      	mov	r3, r2
 800af76:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af78:	e058      	b.n	800b02c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800af7a:	4b38      	ldr	r3, [pc, #224]	; (800b05c <HAL_RCC_GetSysClockFreq+0x200>)
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	099b      	lsrs	r3, r3, #6
 800af80:	2200      	movs	r2, #0
 800af82:	4618      	mov	r0, r3
 800af84:	4611      	mov	r1, r2
 800af86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800af8a:	623b      	str	r3, [r7, #32]
 800af8c:	2300      	movs	r3, #0
 800af8e:	627b      	str	r3, [r7, #36]	; 0x24
 800af90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800af94:	4642      	mov	r2, r8
 800af96:	464b      	mov	r3, r9
 800af98:	f04f 0000 	mov.w	r0, #0
 800af9c:	f04f 0100 	mov.w	r1, #0
 800afa0:	0159      	lsls	r1, r3, #5
 800afa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800afa6:	0150      	lsls	r0, r2, #5
 800afa8:	4602      	mov	r2, r0
 800afaa:	460b      	mov	r3, r1
 800afac:	4641      	mov	r1, r8
 800afae:	ebb2 0a01 	subs.w	sl, r2, r1
 800afb2:	4649      	mov	r1, r9
 800afb4:	eb63 0b01 	sbc.w	fp, r3, r1
 800afb8:	f04f 0200 	mov.w	r2, #0
 800afbc:	f04f 0300 	mov.w	r3, #0
 800afc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800afc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800afc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800afcc:	ebb2 040a 	subs.w	r4, r2, sl
 800afd0:	eb63 050b 	sbc.w	r5, r3, fp
 800afd4:	f04f 0200 	mov.w	r2, #0
 800afd8:	f04f 0300 	mov.w	r3, #0
 800afdc:	00eb      	lsls	r3, r5, #3
 800afde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800afe2:	00e2      	lsls	r2, r4, #3
 800afe4:	4614      	mov	r4, r2
 800afe6:	461d      	mov	r5, r3
 800afe8:	4643      	mov	r3, r8
 800afea:	18e3      	adds	r3, r4, r3
 800afec:	603b      	str	r3, [r7, #0]
 800afee:	464b      	mov	r3, r9
 800aff0:	eb45 0303 	adc.w	r3, r5, r3
 800aff4:	607b      	str	r3, [r7, #4]
 800aff6:	f04f 0200 	mov.w	r2, #0
 800affa:	f04f 0300 	mov.w	r3, #0
 800affe:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b002:	4629      	mov	r1, r5
 800b004:	028b      	lsls	r3, r1, #10
 800b006:	4621      	mov	r1, r4
 800b008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b00c:	4621      	mov	r1, r4
 800b00e:	028a      	lsls	r2, r1, #10
 800b010:	4610      	mov	r0, r2
 800b012:	4619      	mov	r1, r3
 800b014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b016:	2200      	movs	r2, #0
 800b018:	61bb      	str	r3, [r7, #24]
 800b01a:	61fa      	str	r2, [r7, #28]
 800b01c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b020:	f7f5 fde2 	bl	8000be8 <__aeabi_uldivmod>
 800b024:	4602      	mov	r2, r0
 800b026:	460b      	mov	r3, r1
 800b028:	4613      	mov	r3, r2
 800b02a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b02c:	4b0b      	ldr	r3, [pc, #44]	; (800b05c <HAL_RCC_GetSysClockFreq+0x200>)
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	0c1b      	lsrs	r3, r3, #16
 800b032:	f003 0303 	and.w	r3, r3, #3
 800b036:	3301      	adds	r3, #1
 800b038:	005b      	lsls	r3, r3, #1
 800b03a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b03c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b03e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b040:	fbb2 f3f3 	udiv	r3, r2, r3
 800b044:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b046:	e002      	b.n	800b04e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b048:	4b05      	ldr	r3, [pc, #20]	; (800b060 <HAL_RCC_GetSysClockFreq+0x204>)
 800b04a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b04c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b04e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b050:	4618      	mov	r0, r3
 800b052:	3750      	adds	r7, #80	; 0x50
 800b054:	46bd      	mov	sp, r7
 800b056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b05a:	bf00      	nop
 800b05c:	40023800 	.word	0x40023800
 800b060:	00f42400 	.word	0x00f42400
 800b064:	007a1200 	.word	0x007a1200

0800b068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b068:	b480      	push	{r7}
 800b06a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b06c:	4b03      	ldr	r3, [pc, #12]	; (800b07c <HAL_RCC_GetHCLKFreq+0x14>)
 800b06e:	681b      	ldr	r3, [r3, #0]
}
 800b070:	4618      	mov	r0, r3
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop
 800b07c:	20000434 	.word	0x20000434

0800b080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b084:	f7ff fff0 	bl	800b068 <HAL_RCC_GetHCLKFreq>
 800b088:	4602      	mov	r2, r0
 800b08a:	4b05      	ldr	r3, [pc, #20]	; (800b0a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	0a9b      	lsrs	r3, r3, #10
 800b090:	f003 0307 	and.w	r3, r3, #7
 800b094:	4903      	ldr	r1, [pc, #12]	; (800b0a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b096:	5ccb      	ldrb	r3, [r1, r3]
 800b098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	40023800 	.word	0x40023800
 800b0a4:	08013d54 	.word	0x08013d54

0800b0a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b0ac:	f7ff ffdc 	bl	800b068 <HAL_RCC_GetHCLKFreq>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	4b05      	ldr	r3, [pc, #20]	; (800b0c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	0b5b      	lsrs	r3, r3, #13
 800b0b8:	f003 0307 	and.w	r3, r3, #7
 800b0bc:	4903      	ldr	r1, [pc, #12]	; (800b0cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b0be:	5ccb      	ldrb	r3, [r1, r3]
 800b0c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	40023800 	.word	0x40023800
 800b0cc:	08013d54 	.word	0x08013d54

0800b0d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f003 0301 	and.w	r3, r3, #1
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d105      	bne.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d035      	beq.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b0f8:	4b62      	ldr	r3, [pc, #392]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b0fe:	f7fd fd9f 	bl	8008c40 <HAL_GetTick>
 800b102:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b104:	e008      	b.n	800b118 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b106:	f7fd fd9b 	bl	8008c40 <HAL_GetTick>
 800b10a:	4602      	mov	r2, r0
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	1ad3      	subs	r3, r2, r3
 800b110:	2b02      	cmp	r3, #2
 800b112:	d901      	bls.n	800b118 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b114:	2303      	movs	r3, #3
 800b116:	e0b0      	b.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b118:	4b5b      	ldr	r3, [pc, #364]	; (800b288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b120:	2b00      	cmp	r3, #0
 800b122:	d1f0      	bne.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	019a      	lsls	r2, r3, #6
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	689b      	ldr	r3, [r3, #8]
 800b12e:	071b      	lsls	r3, r3, #28
 800b130:	4955      	ldr	r1, [pc, #340]	; (800b288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b132:	4313      	orrs	r3, r2
 800b134:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b138:	4b52      	ldr	r3, [pc, #328]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b13a:	2201      	movs	r2, #1
 800b13c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b13e:	f7fd fd7f 	bl	8008c40 <HAL_GetTick>
 800b142:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b144:	e008      	b.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b146:	f7fd fd7b 	bl	8008c40 <HAL_GetTick>
 800b14a:	4602      	mov	r2, r0
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	1ad3      	subs	r3, r2, r3
 800b150:	2b02      	cmp	r3, #2
 800b152:	d901      	bls.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b154:	2303      	movs	r3, #3
 800b156:	e090      	b.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b158:	4b4b      	ldr	r3, [pc, #300]	; (800b288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b160:	2b00      	cmp	r3, #0
 800b162:	d0f0      	beq.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f003 0302 	and.w	r3, r3, #2
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	f000 8083 	beq.w	800b278 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b172:	2300      	movs	r3, #0
 800b174:	60fb      	str	r3, [r7, #12]
 800b176:	4b44      	ldr	r3, [pc, #272]	; (800b288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17a:	4a43      	ldr	r2, [pc, #268]	; (800b288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b17c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b180:	6413      	str	r3, [r2, #64]	; 0x40
 800b182:	4b41      	ldr	r3, [pc, #260]	; (800b288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b18a:	60fb      	str	r3, [r7, #12]
 800b18c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b18e:	4b3f      	ldr	r3, [pc, #252]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a3e      	ldr	r2, [pc, #248]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b198:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b19a:	f7fd fd51 	bl	8008c40 <HAL_GetTick>
 800b19e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b1a0:	e008      	b.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b1a2:	f7fd fd4d 	bl	8008c40 <HAL_GetTick>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	1ad3      	subs	r3, r2, r3
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d901      	bls.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	e062      	b.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b1b4:	4b35      	ldr	r3, [pc, #212]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d0f0      	beq.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b1c0:	4b31      	ldr	r3, [pc, #196]	; (800b288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b1c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d02f      	beq.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1d8:	693a      	ldr	r2, [r7, #16]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d028      	beq.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b1de:	4b2a      	ldr	r3, [pc, #168]	; (800b288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b1e8:	4b29      	ldr	r3, [pc, #164]	; (800b290 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b1ee:	4b28      	ldr	r3, [pc, #160]	; (800b290 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b1f4:	4a24      	ldr	r2, [pc, #144]	; (800b288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b1fa:	4b23      	ldr	r3, [pc, #140]	; (800b288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b1fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1fe:	f003 0301 	and.w	r3, r3, #1
 800b202:	2b01      	cmp	r3, #1
 800b204:	d114      	bne.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b206:	f7fd fd1b 	bl	8008c40 <HAL_GetTick>
 800b20a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b20c:	e00a      	b.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b20e:	f7fd fd17 	bl	8008c40 <HAL_GetTick>
 800b212:	4602      	mov	r2, r0
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	1ad3      	subs	r3, r2, r3
 800b218:	f241 3288 	movw	r2, #5000	; 0x1388
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d901      	bls.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800b220:	2303      	movs	r3, #3
 800b222:	e02a      	b.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b224:	4b18      	ldr	r3, [pc, #96]	; (800b288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b228:	f003 0302 	and.w	r3, r3, #2
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d0ee      	beq.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b238:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b23c:	d10d      	bne.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800b23e:	4b12      	ldr	r3, [pc, #72]	; (800b288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b24e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b252:	490d      	ldr	r1, [pc, #52]	; (800b288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b254:	4313      	orrs	r3, r2
 800b256:	608b      	str	r3, [r1, #8]
 800b258:	e005      	b.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b25a:	4b0b      	ldr	r3, [pc, #44]	; (800b288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	4a0a      	ldr	r2, [pc, #40]	; (800b288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b260:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b264:	6093      	str	r3, [r2, #8]
 800b266:	4b08      	ldr	r3, [pc, #32]	; (800b288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b268:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b272:	4905      	ldr	r1, [pc, #20]	; (800b288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b274:	4313      	orrs	r3, r2
 800b276:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3718      	adds	r7, #24
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	42470068 	.word	0x42470068
 800b288:	40023800 	.word	0x40023800
 800b28c:	40007000 	.word	0x40007000
 800b290:	42470e40 	.word	0x42470e40

0800b294 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b294:	b480      	push	{r7}
 800b296:	b087      	sub	sp, #28
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800b29c:	2300      	movs	r3, #0
 800b29e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d13e      	bne.n	800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800b2b2:	4b23      	ldr	r3, [pc, #140]	; (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b2b4:	689b      	ldr	r3, [r3, #8]
 800b2b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2ba:	60fb      	str	r3, [r7, #12]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d005      	beq.n	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d12f      	bne.n	800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800b2c8:	4b1e      	ldr	r3, [pc, #120]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b2ca:	617b      	str	r3, [r7, #20]
          break;
 800b2cc:	e02f      	b.n	800b32e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b2ce:	4b1c      	ldr	r3, [pc, #112]	; (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b2da:	d108      	bne.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b2dc:	4b18      	ldr	r3, [pc, #96]	; (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2e4:	4a18      	ldr	r2, [pc, #96]	; (800b348 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800b2e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2ea:	613b      	str	r3, [r7, #16]
 800b2ec:	e007      	b.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b2ee:	4b14      	ldr	r3, [pc, #80]	; (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2f6:	4a15      	ldr	r2, [pc, #84]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800b2f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2fc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800b2fe:	4b10      	ldr	r3, [pc, #64]	; (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b304:	099b      	lsrs	r3, r3, #6
 800b306:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	fb02 f303 	mul.w	r3, r2, r3
 800b310:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800b312:	4b0b      	ldr	r3, [pc, #44]	; (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b318:	0f1b      	lsrs	r3, r3, #28
 800b31a:	f003 0307 	and.w	r3, r3, #7
 800b31e:	68ba      	ldr	r2, [r7, #8]
 800b320:	fbb2 f3f3 	udiv	r3, r2, r3
 800b324:	617b      	str	r3, [r7, #20]
          break;
 800b326:	e002      	b.n	800b32e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800b328:	2300      	movs	r3, #0
 800b32a:	617b      	str	r3, [r7, #20]
          break;
 800b32c:	bf00      	nop
        }
      }
      break;
 800b32e:	bf00      	nop
    }
  }
  return frequency;
 800b330:	697b      	ldr	r3, [r7, #20]
}
 800b332:	4618      	mov	r0, r3
 800b334:	371c      	adds	r7, #28
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	40023800 	.word	0x40023800
 800b344:	00bb8000 	.word	0x00bb8000
 800b348:	007a1200 	.word	0x007a1200
 800b34c:	00f42400 	.word	0x00f42400

0800b350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d101      	bne.n	800b362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b35e:	2301      	movs	r3, #1
 800b360:	e041      	b.n	800b3e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d106      	bne.n	800b37c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2200      	movs	r2, #0
 800b372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f7f7 f920 	bl	80025bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2202      	movs	r2, #2
 800b380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	3304      	adds	r3, #4
 800b38c:	4619      	mov	r1, r3
 800b38e:	4610      	mov	r0, r2
 800b390:	f000 f8f4 	bl	800b57c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2201      	movs	r2, #1
 800b398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3708      	adds	r7, #8
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b084      	sub	sp, #16
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
 800b3f6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b402:	2b01      	cmp	r3, #1
 800b404:	d101      	bne.n	800b40a <HAL_TIM_ConfigClockSource+0x1c>
 800b406:	2302      	movs	r3, #2
 800b408:	e0b4      	b.n	800b574 <HAL_TIM_ConfigClockSource+0x186>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2201      	movs	r2, #1
 800b40e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2202      	movs	r2, #2
 800b416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	689b      	ldr	r3, [r3, #8]
 800b420:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b428:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b430:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68ba      	ldr	r2, [r7, #8]
 800b438:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b442:	d03e      	beq.n	800b4c2 <HAL_TIM_ConfigClockSource+0xd4>
 800b444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b448:	f200 8087 	bhi.w	800b55a <HAL_TIM_ConfigClockSource+0x16c>
 800b44c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b450:	f000 8086 	beq.w	800b560 <HAL_TIM_ConfigClockSource+0x172>
 800b454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b458:	d87f      	bhi.n	800b55a <HAL_TIM_ConfigClockSource+0x16c>
 800b45a:	2b70      	cmp	r3, #112	; 0x70
 800b45c:	d01a      	beq.n	800b494 <HAL_TIM_ConfigClockSource+0xa6>
 800b45e:	2b70      	cmp	r3, #112	; 0x70
 800b460:	d87b      	bhi.n	800b55a <HAL_TIM_ConfigClockSource+0x16c>
 800b462:	2b60      	cmp	r3, #96	; 0x60
 800b464:	d050      	beq.n	800b508 <HAL_TIM_ConfigClockSource+0x11a>
 800b466:	2b60      	cmp	r3, #96	; 0x60
 800b468:	d877      	bhi.n	800b55a <HAL_TIM_ConfigClockSource+0x16c>
 800b46a:	2b50      	cmp	r3, #80	; 0x50
 800b46c:	d03c      	beq.n	800b4e8 <HAL_TIM_ConfigClockSource+0xfa>
 800b46e:	2b50      	cmp	r3, #80	; 0x50
 800b470:	d873      	bhi.n	800b55a <HAL_TIM_ConfigClockSource+0x16c>
 800b472:	2b40      	cmp	r3, #64	; 0x40
 800b474:	d058      	beq.n	800b528 <HAL_TIM_ConfigClockSource+0x13a>
 800b476:	2b40      	cmp	r3, #64	; 0x40
 800b478:	d86f      	bhi.n	800b55a <HAL_TIM_ConfigClockSource+0x16c>
 800b47a:	2b30      	cmp	r3, #48	; 0x30
 800b47c:	d064      	beq.n	800b548 <HAL_TIM_ConfigClockSource+0x15a>
 800b47e:	2b30      	cmp	r3, #48	; 0x30
 800b480:	d86b      	bhi.n	800b55a <HAL_TIM_ConfigClockSource+0x16c>
 800b482:	2b20      	cmp	r3, #32
 800b484:	d060      	beq.n	800b548 <HAL_TIM_ConfigClockSource+0x15a>
 800b486:	2b20      	cmp	r3, #32
 800b488:	d867      	bhi.n	800b55a <HAL_TIM_ConfigClockSource+0x16c>
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d05c      	beq.n	800b548 <HAL_TIM_ConfigClockSource+0x15a>
 800b48e:	2b10      	cmp	r3, #16
 800b490:	d05a      	beq.n	800b548 <HAL_TIM_ConfigClockSource+0x15a>
 800b492:	e062      	b.n	800b55a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6818      	ldr	r0, [r3, #0]
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	6899      	ldr	r1, [r3, #8]
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	685a      	ldr	r2, [r3, #4]
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	f000 f984 	bl	800b7b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b4b6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	68ba      	ldr	r2, [r7, #8]
 800b4be:	609a      	str	r2, [r3, #8]
      break;
 800b4c0:	e04f      	b.n	800b562 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6818      	ldr	r0, [r3, #0]
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	6899      	ldr	r1, [r3, #8]
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	685a      	ldr	r2, [r3, #4]
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	f000 f96d 	bl	800b7b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	689a      	ldr	r2, [r3, #8]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4e4:	609a      	str	r2, [r3, #8]
      break;
 800b4e6:	e03c      	b.n	800b562 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6818      	ldr	r0, [r3, #0]
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	6859      	ldr	r1, [r3, #4]
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	f000 f8e1 	bl	800b6bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2150      	movs	r1, #80	; 0x50
 800b500:	4618      	mov	r0, r3
 800b502:	f000 f93a 	bl	800b77a <TIM_ITRx_SetConfig>
      break;
 800b506:	e02c      	b.n	800b562 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6818      	ldr	r0, [r3, #0]
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	6859      	ldr	r1, [r3, #4]
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	461a      	mov	r2, r3
 800b516:	f000 f900 	bl	800b71a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2160      	movs	r1, #96	; 0x60
 800b520:	4618      	mov	r0, r3
 800b522:	f000 f92a 	bl	800b77a <TIM_ITRx_SetConfig>
      break;
 800b526:	e01c      	b.n	800b562 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6818      	ldr	r0, [r3, #0]
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	6859      	ldr	r1, [r3, #4]
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	461a      	mov	r2, r3
 800b536:	f000 f8c1 	bl	800b6bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2140      	movs	r1, #64	; 0x40
 800b540:	4618      	mov	r0, r3
 800b542:	f000 f91a 	bl	800b77a <TIM_ITRx_SetConfig>
      break;
 800b546:	e00c      	b.n	800b562 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4619      	mov	r1, r3
 800b552:	4610      	mov	r0, r2
 800b554:	f000 f911 	bl	800b77a <TIM_ITRx_SetConfig>
      break;
 800b558:	e003      	b.n	800b562 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b55a:	2301      	movs	r3, #1
 800b55c:	73fb      	strb	r3, [r7, #15]
      break;
 800b55e:	e000      	b.n	800b562 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b560:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2201      	movs	r2, #1
 800b566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b572:	7bfb      	ldrb	r3, [r7, #15]
}
 800b574:	4618      	mov	r0, r3
 800b576:	3710      	adds	r7, #16
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b085      	sub	sp, #20
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a40      	ldr	r2, [pc, #256]	; (800b690 <TIM_Base_SetConfig+0x114>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d013      	beq.n	800b5bc <TIM_Base_SetConfig+0x40>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b59a:	d00f      	beq.n	800b5bc <TIM_Base_SetConfig+0x40>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	4a3d      	ldr	r2, [pc, #244]	; (800b694 <TIM_Base_SetConfig+0x118>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d00b      	beq.n	800b5bc <TIM_Base_SetConfig+0x40>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	4a3c      	ldr	r2, [pc, #240]	; (800b698 <TIM_Base_SetConfig+0x11c>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d007      	beq.n	800b5bc <TIM_Base_SetConfig+0x40>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4a3b      	ldr	r2, [pc, #236]	; (800b69c <TIM_Base_SetConfig+0x120>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d003      	beq.n	800b5bc <TIM_Base_SetConfig+0x40>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4a3a      	ldr	r2, [pc, #232]	; (800b6a0 <TIM_Base_SetConfig+0x124>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d108      	bne.n	800b5ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	68fa      	ldr	r2, [r7, #12]
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a2f      	ldr	r2, [pc, #188]	; (800b690 <TIM_Base_SetConfig+0x114>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d02b      	beq.n	800b62e <TIM_Base_SetConfig+0xb2>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5dc:	d027      	beq.n	800b62e <TIM_Base_SetConfig+0xb2>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a2c      	ldr	r2, [pc, #176]	; (800b694 <TIM_Base_SetConfig+0x118>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d023      	beq.n	800b62e <TIM_Base_SetConfig+0xb2>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4a2b      	ldr	r2, [pc, #172]	; (800b698 <TIM_Base_SetConfig+0x11c>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d01f      	beq.n	800b62e <TIM_Base_SetConfig+0xb2>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4a2a      	ldr	r2, [pc, #168]	; (800b69c <TIM_Base_SetConfig+0x120>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d01b      	beq.n	800b62e <TIM_Base_SetConfig+0xb2>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	4a29      	ldr	r2, [pc, #164]	; (800b6a0 <TIM_Base_SetConfig+0x124>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d017      	beq.n	800b62e <TIM_Base_SetConfig+0xb2>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	4a28      	ldr	r2, [pc, #160]	; (800b6a4 <TIM_Base_SetConfig+0x128>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d013      	beq.n	800b62e <TIM_Base_SetConfig+0xb2>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	4a27      	ldr	r2, [pc, #156]	; (800b6a8 <TIM_Base_SetConfig+0x12c>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d00f      	beq.n	800b62e <TIM_Base_SetConfig+0xb2>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4a26      	ldr	r2, [pc, #152]	; (800b6ac <TIM_Base_SetConfig+0x130>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d00b      	beq.n	800b62e <TIM_Base_SetConfig+0xb2>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	4a25      	ldr	r2, [pc, #148]	; (800b6b0 <TIM_Base_SetConfig+0x134>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d007      	beq.n	800b62e <TIM_Base_SetConfig+0xb2>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	4a24      	ldr	r2, [pc, #144]	; (800b6b4 <TIM_Base_SetConfig+0x138>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d003      	beq.n	800b62e <TIM_Base_SetConfig+0xb2>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4a23      	ldr	r2, [pc, #140]	; (800b6b8 <TIM_Base_SetConfig+0x13c>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d108      	bne.n	800b640 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	68fa      	ldr	r2, [r7, #12]
 800b63c:	4313      	orrs	r3, r2
 800b63e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	695b      	ldr	r3, [r3, #20]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	689a      	ldr	r2, [r3, #8]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4a0a      	ldr	r2, [pc, #40]	; (800b690 <TIM_Base_SetConfig+0x114>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d003      	beq.n	800b674 <TIM_Base_SetConfig+0xf8>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4a0c      	ldr	r2, [pc, #48]	; (800b6a0 <TIM_Base_SetConfig+0x124>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d103      	bne.n	800b67c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	691a      	ldr	r2, [r3, #16]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2201      	movs	r2, #1
 800b680:	615a      	str	r2, [r3, #20]
}
 800b682:	bf00      	nop
 800b684:	3714      	adds	r7, #20
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	40010000 	.word	0x40010000
 800b694:	40000400 	.word	0x40000400
 800b698:	40000800 	.word	0x40000800
 800b69c:	40000c00 	.word	0x40000c00
 800b6a0:	40010400 	.word	0x40010400
 800b6a4:	40014000 	.word	0x40014000
 800b6a8:	40014400 	.word	0x40014400
 800b6ac:	40014800 	.word	0x40014800
 800b6b0:	40001800 	.word	0x40001800
 800b6b4:	40001c00 	.word	0x40001c00
 800b6b8:	40002000 	.word	0x40002000

0800b6bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b087      	sub	sp, #28
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6a1b      	ldr	r3, [r3, #32]
 800b6cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6a1b      	ldr	r3, [r3, #32]
 800b6d2:	f023 0201 	bic.w	r2, r3, #1
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	699b      	ldr	r3, [r3, #24]
 800b6de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	011b      	lsls	r3, r3, #4
 800b6ec:	693a      	ldr	r2, [r7, #16]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	f023 030a 	bic.w	r3, r3, #10
 800b6f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b6fa:	697a      	ldr	r2, [r7, #20]
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	4313      	orrs	r3, r2
 800b700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	693a      	ldr	r2, [r7, #16]
 800b706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	621a      	str	r2, [r3, #32]
}
 800b70e:	bf00      	nop
 800b710:	371c      	adds	r7, #28
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr

0800b71a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b71a:	b480      	push	{r7}
 800b71c:	b087      	sub	sp, #28
 800b71e:	af00      	add	r7, sp, #0
 800b720:	60f8      	str	r0, [r7, #12]
 800b722:	60b9      	str	r1, [r7, #8]
 800b724:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	6a1b      	ldr	r3, [r3, #32]
 800b72a:	f023 0210 	bic.w	r2, r3, #16
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	699b      	ldr	r3, [r3, #24]
 800b736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	6a1b      	ldr	r3, [r3, #32]
 800b73c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b744:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	031b      	lsls	r3, r3, #12
 800b74a:	697a      	ldr	r2, [r7, #20]
 800b74c:	4313      	orrs	r3, r2
 800b74e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b756:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	011b      	lsls	r3, r3, #4
 800b75c:	693a      	ldr	r2, [r7, #16]
 800b75e:	4313      	orrs	r3, r2
 800b760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	697a      	ldr	r2, [r7, #20]
 800b766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	693a      	ldr	r2, [r7, #16]
 800b76c:	621a      	str	r2, [r3, #32]
}
 800b76e:	bf00      	nop
 800b770:	371c      	adds	r7, #28
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr

0800b77a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b77a:	b480      	push	{r7}
 800b77c:	b085      	sub	sp, #20
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
 800b782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b790:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b792:	683a      	ldr	r2, [r7, #0]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	4313      	orrs	r3, r2
 800b798:	f043 0307 	orr.w	r3, r3, #7
 800b79c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	68fa      	ldr	r2, [r7, #12]
 800b7a2:	609a      	str	r2, [r3, #8]
}
 800b7a4:	bf00      	nop
 800b7a6:	3714      	adds	r7, #20
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b087      	sub	sp, #28
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
 800b7bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	021a      	lsls	r2, r3, #8
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	431a      	orrs	r2, r3
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	697a      	ldr	r2, [r7, #20]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	697a      	ldr	r2, [r7, #20]
 800b7e2:	609a      	str	r2, [r3, #8]
}
 800b7e4:	bf00      	nop
 800b7e6:	371c      	adds	r7, #28
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr

0800b7f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b800:	2b01      	cmp	r3, #1
 800b802:	d101      	bne.n	800b808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b804:	2302      	movs	r3, #2
 800b806:	e05a      	b.n	800b8be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2202      	movs	r2, #2
 800b814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b82e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	68fa      	ldr	r2, [r7, #12]
 800b836:	4313      	orrs	r3, r2
 800b838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a21      	ldr	r2, [pc, #132]	; (800b8cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d022      	beq.n	800b892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b854:	d01d      	beq.n	800b892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4a1d      	ldr	r2, [pc, #116]	; (800b8d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d018      	beq.n	800b892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a1b      	ldr	r2, [pc, #108]	; (800b8d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d013      	beq.n	800b892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a1a      	ldr	r2, [pc, #104]	; (800b8d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d00e      	beq.n	800b892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a18      	ldr	r2, [pc, #96]	; (800b8dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d009      	beq.n	800b892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a17      	ldr	r2, [pc, #92]	; (800b8e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d004      	beq.n	800b892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a15      	ldr	r2, [pc, #84]	; (800b8e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d10c      	bne.n	800b8ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b898:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	68ba      	ldr	r2, [r7, #8]
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	68ba      	ldr	r2, [r7, #8]
 800b8aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8bc:	2300      	movs	r3, #0
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3714      	adds	r7, #20
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr
 800b8ca:	bf00      	nop
 800b8cc:	40010000 	.word	0x40010000
 800b8d0:	40000400 	.word	0x40000400
 800b8d4:	40000800 	.word	0x40000800
 800b8d8:	40000c00 	.word	0x40000c00
 800b8dc:	40010400 	.word	0x40010400
 800b8e0:	40014000 	.word	0x40014000
 800b8e4:	40001800 	.word	0x40001800

0800b8e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d101      	bne.n	800b8fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e03f      	b.n	800b97a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b900:	b2db      	uxtb	r3, r3
 800b902:	2b00      	cmp	r3, #0
 800b904:	d106      	bne.n	800b914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 f837 	bl	800b982 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2224      	movs	r2, #36	; 0x24
 800b918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	68da      	ldr	r2, [r3, #12]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b92a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 fdd5 	bl	800c4dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	691a      	ldr	r2, [r3, #16]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	695a      	ldr	r2, [r3, #20]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	68da      	ldr	r2, [r3, #12]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2220      	movs	r2, #32
 800b96c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2220      	movs	r2, #32
 800b974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b978:	2300      	movs	r3, #0
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3708      	adds	r7, #8
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800b982:	b480      	push	{r7}
 800b984:	b083      	sub	sp, #12
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800b98a:	bf00      	nop
 800b98c:	370c      	adds	r7, #12
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b996:	b580      	push	{r7, lr}
 800b998:	b08a      	sub	sp, #40	; 0x28
 800b99a:	af02      	add	r7, sp, #8
 800b99c:	60f8      	str	r0, [r7, #12]
 800b99e:	60b9      	str	r1, [r7, #8]
 800b9a0:	603b      	str	r3, [r7, #0]
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	2b20      	cmp	r3, #32
 800b9b4:	d17c      	bne.n	800bab0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d002      	beq.n	800b9c2 <HAL_UART_Transmit+0x2c>
 800b9bc:	88fb      	ldrh	r3, [r7, #6]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d101      	bne.n	800b9c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e075      	b.n	800bab2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d101      	bne.n	800b9d4 <HAL_UART_Transmit+0x3e>
 800b9d0:	2302      	movs	r3, #2
 800b9d2:	e06e      	b.n	800bab2 <HAL_UART_Transmit+0x11c>
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2221      	movs	r2, #33	; 0x21
 800b9e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b9ea:	f7fd f929 	bl	8008c40 <HAL_GetTick>
 800b9ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	88fa      	ldrh	r2, [r7, #6]
 800b9f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	88fa      	ldrh	r2, [r7, #6]
 800b9fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba04:	d108      	bne.n	800ba18 <HAL_UART_Transmit+0x82>
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d104      	bne.n	800ba18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	61bb      	str	r3, [r7, #24]
 800ba16:	e003      	b.n	800ba20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ba28:	e02a      	b.n	800ba80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	9300      	str	r3, [sp, #0]
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	2200      	movs	r2, #0
 800ba32:	2180      	movs	r1, #128	; 0x80
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f000 fb0b 	bl	800c050 <UART_WaitOnFlagUntilTimeout>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d001      	beq.n	800ba44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ba40:	2303      	movs	r3, #3
 800ba42:	e036      	b.n	800bab2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ba44:	69fb      	ldr	r3, [r7, #28]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d10b      	bne.n	800ba62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	881b      	ldrh	r3, [r3, #0]
 800ba4e:	461a      	mov	r2, r3
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	3302      	adds	r3, #2
 800ba5e:	61bb      	str	r3, [r7, #24]
 800ba60:	e007      	b.n	800ba72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	781a      	ldrb	r2, [r3, #0]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	3b01      	subs	r3, #1
 800ba7a:	b29a      	uxth	r2, r3
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d1cf      	bne.n	800ba2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	9300      	str	r3, [sp, #0]
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	2200      	movs	r2, #0
 800ba92:	2140      	movs	r1, #64	; 0x40
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f000 fadb 	bl	800c050 <UART_WaitOnFlagUntilTimeout>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d001      	beq.n	800baa4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800baa0:	2303      	movs	r3, #3
 800baa2:	e006      	b.n	800bab2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2220      	movs	r2, #32
 800baa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800baac:	2300      	movs	r3, #0
 800baae:	e000      	b.n	800bab2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bab0:	2302      	movs	r3, #2
  }
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3720      	adds	r7, #32
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b084      	sub	sp, #16
 800babe:	af00      	add	r7, sp, #0
 800bac0:	60f8      	str	r0, [r7, #12]
 800bac2:	60b9      	str	r1, [r7, #8]
 800bac4:	4613      	mov	r3, r2
 800bac6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	2b20      	cmp	r3, #32
 800bad2:	d11d      	bne.n	800bb10 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d002      	beq.n	800bae0 <HAL_UART_Receive_IT+0x26>
 800bada:	88fb      	ldrh	r3, [r7, #6]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d101      	bne.n	800bae4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bae0:	2301      	movs	r3, #1
 800bae2:	e016      	b.n	800bb12 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800baea:	2b01      	cmp	r3, #1
 800baec:	d101      	bne.n	800baf2 <HAL_UART_Receive_IT+0x38>
 800baee:	2302      	movs	r3, #2
 800baf0:	e00f      	b.n	800bb12 <HAL_UART_Receive_IT+0x58>
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2201      	movs	r2, #1
 800baf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2200      	movs	r2, #0
 800bafe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bb00:	88fb      	ldrh	r3, [r7, #6]
 800bb02:	461a      	mov	r2, r3
 800bb04:	68b9      	ldr	r1, [r7, #8]
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f000 fb10 	bl	800c12c <UART_Start_Receive_IT>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	e000      	b.n	800bb12 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bb10:	2302      	movs	r3, #2
  }
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
	...

0800bb1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b0ba      	sub	sp, #232	; 0xe8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	695b      	ldr	r3, [r3, #20]
 800bb3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bb42:	2300      	movs	r3, #0
 800bb44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bb4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb52:	f003 030f 	and.w	r3, r3, #15
 800bb56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bb5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d10f      	bne.n	800bb82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb66:	f003 0320 	and.w	r3, r3, #32
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d009      	beq.n	800bb82 <HAL_UART_IRQHandler+0x66>
 800bb6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb72:	f003 0320 	and.w	r3, r3, #32
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d003      	beq.n	800bb82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 fbf3 	bl	800c366 <UART_Receive_IT>
      return;
 800bb80:	e256      	b.n	800c030 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bb82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f000 80de 	beq.w	800bd48 <HAL_UART_IRQHandler+0x22c>
 800bb8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb90:	f003 0301 	and.w	r3, r3, #1
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d106      	bne.n	800bba6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bb98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f000 80d1 	beq.w	800bd48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbaa:	f003 0301 	and.w	r3, r3, #1
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d00b      	beq.n	800bbca <HAL_UART_IRQHandler+0xae>
 800bbb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d005      	beq.n	800bbca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc2:	f043 0201 	orr.w	r2, r3, #1
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bbca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbce:	f003 0304 	and.w	r3, r3, #4
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00b      	beq.n	800bbee <HAL_UART_IRQHandler+0xd2>
 800bbd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbda:	f003 0301 	and.w	r3, r3, #1
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d005      	beq.n	800bbee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe6:	f043 0202 	orr.w	r2, r3, #2
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bbee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbf2:	f003 0302 	and.w	r3, r3, #2
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d00b      	beq.n	800bc12 <HAL_UART_IRQHandler+0xf6>
 800bbfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbfe:	f003 0301 	and.w	r3, r3, #1
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d005      	beq.n	800bc12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc0a:	f043 0204 	orr.w	r2, r3, #4
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bc12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc16:	f003 0308 	and.w	r3, r3, #8
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d011      	beq.n	800bc42 <HAL_UART_IRQHandler+0x126>
 800bc1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc22:	f003 0320 	and.w	r3, r3, #32
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d105      	bne.n	800bc36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bc2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc2e:	f003 0301 	and.w	r3, r3, #1
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d005      	beq.n	800bc42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc3a:	f043 0208 	orr.w	r2, r3, #8
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f000 81ed 	beq.w	800c026 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bc4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc50:	f003 0320 	and.w	r3, r3, #32
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d008      	beq.n	800bc6a <HAL_UART_IRQHandler+0x14e>
 800bc58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc5c:	f003 0320 	and.w	r3, r3, #32
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d002      	beq.n	800bc6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 fb7e 	bl	800c366 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	695b      	ldr	r3, [r3, #20]
 800bc70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc74:	2b40      	cmp	r3, #64	; 0x40
 800bc76:	bf0c      	ite	eq
 800bc78:	2301      	moveq	r3, #1
 800bc7a:	2300      	movne	r3, #0
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc86:	f003 0308 	and.w	r3, r3, #8
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d103      	bne.n	800bc96 <HAL_UART_IRQHandler+0x17a>
 800bc8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d04f      	beq.n	800bd36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 fa86 	bl	800c1a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	695b      	ldr	r3, [r3, #20]
 800bca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bca6:	2b40      	cmp	r3, #64	; 0x40
 800bca8:	d141      	bne.n	800bd2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	3314      	adds	r3, #20
 800bcb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bcb8:	e853 3f00 	ldrex	r3, [r3]
 800bcbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bcc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bcc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	3314      	adds	r3, #20
 800bcd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bcd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bcda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bce2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bce6:	e841 2300 	strex	r3, r2, [r1]
 800bcea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bcee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d1d9      	bne.n	800bcaa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d013      	beq.n	800bd26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd02:	4a7d      	ldr	r2, [pc, #500]	; (800bef8 <HAL_UART_IRQHandler+0x3dc>)
 800bd04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fd fa48 	bl	80091a0 <HAL_DMA_Abort_IT>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d016      	beq.n	800bd44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bd20:	4610      	mov	r0, r2
 800bd22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd24:	e00e      	b.n	800bd44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f7f6 fe1e 	bl	8002968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd2c:	e00a      	b.n	800bd44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f7f6 fe1a 	bl	8002968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd34:	e006      	b.n	800bd44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f7f6 fe16 	bl	8002968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800bd42:	e170      	b.n	800c026 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd44:	bf00      	nop
    return;
 800bd46:	e16e      	b.n	800c026 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	f040 814a 	bne.w	800bfe6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bd52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd56:	f003 0310 	and.w	r3, r3, #16
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	f000 8143 	beq.w	800bfe6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bd60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd64:	f003 0310 	and.w	r3, r3, #16
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	f000 813c 	beq.w	800bfe6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bd6e:	2300      	movs	r3, #0
 800bd70:	60bb      	str	r3, [r7, #8]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	60bb      	str	r3, [r7, #8]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	60bb      	str	r3, [r7, #8]
 800bd82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	695b      	ldr	r3, [r3, #20]
 800bd8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd8e:	2b40      	cmp	r3, #64	; 0x40
 800bd90:	f040 80b4 	bne.w	800befc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bda0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	f000 8140 	beq.w	800c02a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bdae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	f080 8139 	bcs.w	800c02a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bdbe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc4:	69db      	ldr	r3, [r3, #28]
 800bdc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdca:	f000 8088 	beq.w	800bede <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	330c      	adds	r3, #12
 800bdd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bddc:	e853 3f00 	ldrex	r3, [r3]
 800bde0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bde4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bde8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	330c      	adds	r3, #12
 800bdf6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bdfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bdfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800be06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800be0a:	e841 2300 	strex	r3, r2, [r1]
 800be0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800be12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1d9      	bne.n	800bdce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	3314      	adds	r3, #20
 800be20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be24:	e853 3f00 	ldrex	r3, [r3]
 800be28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800be2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be2c:	f023 0301 	bic.w	r3, r3, #1
 800be30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	3314      	adds	r3, #20
 800be3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800be3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800be42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800be46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800be4a:	e841 2300 	strex	r3, r2, [r1]
 800be4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800be50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be52:	2b00      	cmp	r3, #0
 800be54:	d1e1      	bne.n	800be1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	3314      	adds	r3, #20
 800be5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be60:	e853 3f00 	ldrex	r3, [r3]
 800be64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800be66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	3314      	adds	r3, #20
 800be76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800be7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800be7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800be80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800be82:	e841 2300 	strex	r3, r2, [r1]
 800be86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800be88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d1e3      	bne.n	800be56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2220      	movs	r2, #32
 800be92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2200      	movs	r2, #0
 800be9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	330c      	adds	r3, #12
 800bea2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bea6:	e853 3f00 	ldrex	r3, [r3]
 800beaa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800beac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800beae:	f023 0310 	bic.w	r3, r3, #16
 800beb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	330c      	adds	r3, #12
 800bebc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bec0:	65ba      	str	r2, [r7, #88]	; 0x58
 800bec2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bec6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bec8:	e841 2300 	strex	r3, r2, [r1]
 800becc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d1e3      	bne.n	800be9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bed8:	4618      	mov	r0, r3
 800beda:	f7fd f8f1 	bl	80090c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	b29b      	uxth	r3, r3
 800beec:	4619      	mov	r1, r3
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 f8a2 	bl	800c038 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bef4:	e099      	b.n	800c02a <HAL_UART_IRQHandler+0x50e>
 800bef6:	bf00      	nop
 800bef8:	0800c26f 	.word	0x0800c26f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	f000 808b 	beq.w	800c02e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800bf18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	f000 8086 	beq.w	800c02e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	330c      	adds	r3, #12
 800bf28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf2c:	e853 3f00 	ldrex	r3, [r3]
 800bf30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	330c      	adds	r3, #12
 800bf42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bf46:	647a      	str	r2, [r7, #68]	; 0x44
 800bf48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf4e:	e841 2300 	strex	r3, r2, [r1]
 800bf52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d1e3      	bne.n	800bf22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	3314      	adds	r3, #20
 800bf60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf64:	e853 3f00 	ldrex	r3, [r3]
 800bf68:	623b      	str	r3, [r7, #32]
   return(result);
 800bf6a:	6a3b      	ldr	r3, [r7, #32]
 800bf6c:	f023 0301 	bic.w	r3, r3, #1
 800bf70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	3314      	adds	r3, #20
 800bf7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bf7e:	633a      	str	r2, [r7, #48]	; 0x30
 800bf80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf86:	e841 2300 	strex	r3, r2, [r1]
 800bf8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d1e3      	bne.n	800bf5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2220      	movs	r2, #32
 800bf96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	330c      	adds	r3, #12
 800bfa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	e853 3f00 	ldrex	r3, [r3]
 800bfae:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f023 0310 	bic.w	r3, r3, #16
 800bfb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	330c      	adds	r3, #12
 800bfc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bfc4:	61fa      	str	r2, [r7, #28]
 800bfc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc8:	69b9      	ldr	r1, [r7, #24]
 800bfca:	69fa      	ldr	r2, [r7, #28]
 800bfcc:	e841 2300 	strex	r3, r2, [r1]
 800bfd0:	617b      	str	r3, [r7, #20]
   return(result);
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1e3      	bne.n	800bfa0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bfd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bfdc:	4619      	mov	r1, r3
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 f82a 	bl	800c038 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bfe4:	e023      	b.n	800c02e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bfe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d009      	beq.n	800c006 <HAL_UART_IRQHandler+0x4ea>
 800bff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d003      	beq.n	800c006 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 f949 	bl	800c296 <UART_Transmit_IT>
    return;
 800c004:	e014      	b.n	800c030 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c00a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d00e      	beq.n	800c030 <HAL_UART_IRQHandler+0x514>
 800c012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d008      	beq.n	800c030 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 f989 	bl	800c336 <UART_EndTransmit_IT>
    return;
 800c024:	e004      	b.n	800c030 <HAL_UART_IRQHandler+0x514>
    return;
 800c026:	bf00      	nop
 800c028:	e002      	b.n	800c030 <HAL_UART_IRQHandler+0x514>
      return;
 800c02a:	bf00      	nop
 800c02c:	e000      	b.n	800c030 <HAL_UART_IRQHandler+0x514>
      return;
 800c02e:	bf00      	nop
  }
}
 800c030:	37e8      	adds	r7, #232	; 0xe8
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop

0800c038 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	460b      	mov	r3, r1
 800c042:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c044:	bf00      	nop
 800c046:	370c      	adds	r7, #12
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b090      	sub	sp, #64	; 0x40
 800c054:	af00      	add	r7, sp, #0
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	60b9      	str	r1, [r7, #8]
 800c05a:	603b      	str	r3, [r7, #0]
 800c05c:	4613      	mov	r3, r2
 800c05e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c060:	e050      	b.n	800c104 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c068:	d04c      	beq.n	800c104 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c06a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d007      	beq.n	800c080 <UART_WaitOnFlagUntilTimeout+0x30>
 800c070:	f7fc fde6 	bl	8008c40 <HAL_GetTick>
 800c074:	4602      	mov	r2, r0
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	1ad3      	subs	r3, r2, r3
 800c07a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d241      	bcs.n	800c104 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	330c      	adds	r3, #12
 800c086:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08a:	e853 3f00 	ldrex	r3, [r3]
 800c08e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c092:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c096:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	330c      	adds	r3, #12
 800c09e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c0a0:	637a      	str	r2, [r7, #52]	; 0x34
 800c0a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c0a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0a8:	e841 2300 	strex	r3, r2, [r1]
 800c0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d1e5      	bne.n	800c080 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	3314      	adds	r3, #20
 800c0ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	e853 3f00 	ldrex	r3, [r3]
 800c0c2:	613b      	str	r3, [r7, #16]
   return(result);
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	f023 0301 	bic.w	r3, r3, #1
 800c0ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	3314      	adds	r3, #20
 800c0d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0d4:	623a      	str	r2, [r7, #32]
 800c0d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d8:	69f9      	ldr	r1, [r7, #28]
 800c0da:	6a3a      	ldr	r2, [r7, #32]
 800c0dc:	e841 2300 	strex	r3, r2, [r1]
 800c0e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d1e5      	bne.n	800c0b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2220      	movs	r2, #32
 800c0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2220      	movs	r2, #32
 800c0f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c100:	2303      	movs	r3, #3
 800c102:	e00f      	b.n	800c124 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	4013      	ands	r3, r2
 800c10e:	68ba      	ldr	r2, [r7, #8]
 800c110:	429a      	cmp	r2, r3
 800c112:	bf0c      	ite	eq
 800c114:	2301      	moveq	r3, #1
 800c116:	2300      	movne	r3, #0
 800c118:	b2db      	uxtb	r3, r3
 800c11a:	461a      	mov	r2, r3
 800c11c:	79fb      	ldrb	r3, [r7, #7]
 800c11e:	429a      	cmp	r2, r3
 800c120:	d09f      	beq.n	800c062 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c122:	2300      	movs	r3, #0
}
 800c124:	4618      	mov	r0, r3
 800c126:	3740      	adds	r7, #64	; 0x40
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b085      	sub	sp, #20
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	4613      	mov	r3, r2
 800c138:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	68ba      	ldr	r2, [r7, #8]
 800c13e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	88fa      	ldrh	r2, [r7, #6]
 800c144:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	88fa      	ldrh	r2, [r7, #6]
 800c14a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2200      	movs	r2, #0
 800c150:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2222      	movs	r2, #34	; 0x22
 800c156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2200      	movs	r2, #0
 800c15e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	691b      	ldr	r3, [r3, #16]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d007      	beq.n	800c17a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	68da      	ldr	r2, [r3, #12]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c178:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	695a      	ldr	r2, [r3, #20]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f042 0201 	orr.w	r2, r2, #1
 800c188:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	68da      	ldr	r2, [r3, #12]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f042 0220 	orr.w	r2, r2, #32
 800c198:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c19a:	2300      	movs	r3, #0
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3714      	adds	r7, #20
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b095      	sub	sp, #84	; 0x54
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	330c      	adds	r3, #12
 800c1b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ba:	e853 3f00 	ldrex	r3, [r3]
 800c1be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c1c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	330c      	adds	r3, #12
 800c1ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c1d0:	643a      	str	r2, [r7, #64]	; 0x40
 800c1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c1d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c1d8:	e841 2300 	strex	r3, r2, [r1]
 800c1dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d1e5      	bne.n	800c1b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	3314      	adds	r3, #20
 800c1ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ec:	6a3b      	ldr	r3, [r7, #32]
 800c1ee:	e853 3f00 	ldrex	r3, [r3]
 800c1f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	f023 0301 	bic.w	r3, r3, #1
 800c1fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	3314      	adds	r3, #20
 800c202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c204:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c20a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c20c:	e841 2300 	strex	r3, r2, [r1]
 800c210:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c214:	2b00      	cmp	r3, #0
 800c216:	d1e5      	bne.n	800c1e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d119      	bne.n	800c254 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	330c      	adds	r3, #12
 800c226:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	e853 3f00 	ldrex	r3, [r3]
 800c22e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	f023 0310 	bic.w	r3, r3, #16
 800c236:	647b      	str	r3, [r7, #68]	; 0x44
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	330c      	adds	r3, #12
 800c23e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c240:	61ba      	str	r2, [r7, #24]
 800c242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c244:	6979      	ldr	r1, [r7, #20]
 800c246:	69ba      	ldr	r2, [r7, #24]
 800c248:	e841 2300 	strex	r3, r2, [r1]
 800c24c:	613b      	str	r3, [r7, #16]
   return(result);
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d1e5      	bne.n	800c220 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2220      	movs	r2, #32
 800c258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2200      	movs	r2, #0
 800c260:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c262:	bf00      	nop
 800c264:	3754      	adds	r7, #84	; 0x54
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr

0800c26e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b084      	sub	sp, #16
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c27a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2200      	movs	r2, #0
 800c280:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2200      	movs	r2, #0
 800c286:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f7f6 fb6d 	bl	8002968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c28e:	bf00      	nop
 800c290:	3710      	adds	r7, #16
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}

0800c296 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c296:	b480      	push	{r7}
 800c298:	b085      	sub	sp, #20
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	2b21      	cmp	r3, #33	; 0x21
 800c2a8:	d13e      	bne.n	800c328 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	689b      	ldr	r3, [r3, #8]
 800c2ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2b2:	d114      	bne.n	800c2de <UART_Transmit_IT+0x48>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	691b      	ldr	r3, [r3, #16]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d110      	bne.n	800c2de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6a1b      	ldr	r3, [r3, #32]
 800c2c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	881b      	ldrh	r3, [r3, #0]
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6a1b      	ldr	r3, [r3, #32]
 800c2d6:	1c9a      	adds	r2, r3, #2
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	621a      	str	r2, [r3, #32]
 800c2dc:	e008      	b.n	800c2f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6a1b      	ldr	r3, [r3, #32]
 800c2e2:	1c59      	adds	r1, r3, #1
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	6211      	str	r1, [r2, #32]
 800c2e8:	781a      	ldrb	r2, [r3, #0]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c300:	2b00      	cmp	r3, #0
 800c302:	d10f      	bne.n	800c324 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	68da      	ldr	r2, [r3, #12]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c312:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	68da      	ldr	r2, [r3, #12]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c322:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c324:	2300      	movs	r3, #0
 800c326:	e000      	b.n	800c32a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c328:	2302      	movs	r3, #2
  }
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3714      	adds	r7, #20
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr

0800c336 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b082      	sub	sp, #8
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	68da      	ldr	r2, [r3, #12]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c34c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2220      	movs	r2, #32
 800c352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7f6 fad8 	bl	800290c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b08c      	sub	sp, #48	; 0x30
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c374:	b2db      	uxtb	r3, r3
 800c376:	2b22      	cmp	r3, #34	; 0x22
 800c378:	f040 80ab 	bne.w	800c4d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c384:	d117      	bne.n	800c3b6 <UART_Receive_IT+0x50>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	691b      	ldr	r3, [r3, #16]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d113      	bne.n	800c3b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c38e:	2300      	movs	r3, #0
 800c390:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c396:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ae:	1c9a      	adds	r2, r3, #2
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	629a      	str	r2, [r3, #40]	; 0x28
 800c3b4:	e026      	b.n	800c404 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3c8:	d007      	beq.n	800c3da <UART_Receive_IT+0x74>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	689b      	ldr	r3, [r3, #8]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d10a      	bne.n	800c3e8 <UART_Receive_IT+0x82>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	691b      	ldr	r3, [r3, #16]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d106      	bne.n	800c3e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	b2da      	uxtb	r2, r3
 800c3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e4:	701a      	strb	r2, [r3, #0]
 800c3e6:	e008      	b.n	800c3fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3f4:	b2da      	uxtb	r2, r3
 800c3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3fe:	1c5a      	adds	r2, r3, #1
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c408:	b29b      	uxth	r3, r3
 800c40a:	3b01      	subs	r3, #1
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	4619      	mov	r1, r3
 800c412:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c414:	2b00      	cmp	r3, #0
 800c416:	d15a      	bne.n	800c4ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	68da      	ldr	r2, [r3, #12]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f022 0220 	bic.w	r2, r2, #32
 800c426:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	68da      	ldr	r2, [r3, #12]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c436:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	695a      	ldr	r2, [r3, #20]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f022 0201 	bic.w	r2, r2, #1
 800c446:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2220      	movs	r2, #32
 800c44c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c454:	2b01      	cmp	r3, #1
 800c456:	d135      	bne.n	800c4c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2200      	movs	r2, #0
 800c45c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	330c      	adds	r3, #12
 800c464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	e853 3f00 	ldrex	r3, [r3]
 800c46c:	613b      	str	r3, [r7, #16]
   return(result);
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	f023 0310 	bic.w	r3, r3, #16
 800c474:	627b      	str	r3, [r7, #36]	; 0x24
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	330c      	adds	r3, #12
 800c47c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c47e:	623a      	str	r2, [r7, #32]
 800c480:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c482:	69f9      	ldr	r1, [r7, #28]
 800c484:	6a3a      	ldr	r2, [r7, #32]
 800c486:	e841 2300 	strex	r3, r2, [r1]
 800c48a:	61bb      	str	r3, [r7, #24]
   return(result);
 800c48c:	69bb      	ldr	r3, [r7, #24]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d1e5      	bne.n	800c45e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f003 0310 	and.w	r3, r3, #16
 800c49c:	2b10      	cmp	r3, #16
 800c49e:	d10a      	bne.n	800c4b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	60fb      	str	r3, [r7, #12]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	60fb      	str	r3, [r7, #12]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	60fb      	str	r3, [r7, #12]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f7ff fdbb 	bl	800c038 <HAL_UARTEx_RxEventCallback>
 800c4c2:	e002      	b.n	800c4ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f7f6 fa2b 	bl	8002920 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	e002      	b.n	800c4d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	e000      	b.n	800c4d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c4d2:	2302      	movs	r3, #2
  }
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3730      	adds	r7, #48	; 0x30
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c4dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c4e0:	b0c0      	sub	sp, #256	; 0x100
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c4e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	691b      	ldr	r3, [r3, #16]
 800c4f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c4f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4f8:	68d9      	ldr	r1, [r3, #12]
 800c4fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4fe:	681a      	ldr	r2, [r3, #0]
 800c500:	ea40 0301 	orr.w	r3, r0, r1
 800c504:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c50a:	689a      	ldr	r2, [r3, #8]
 800c50c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c510:	691b      	ldr	r3, [r3, #16]
 800c512:	431a      	orrs	r2, r3
 800c514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c518:	695b      	ldr	r3, [r3, #20]
 800c51a:	431a      	orrs	r2, r3
 800c51c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c520:	69db      	ldr	r3, [r3, #28]
 800c522:	4313      	orrs	r3, r2
 800c524:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	68db      	ldr	r3, [r3, #12]
 800c530:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c534:	f021 010c 	bic.w	r1, r1, #12
 800c538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c542:	430b      	orrs	r3, r1
 800c544:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	695b      	ldr	r3, [r3, #20]
 800c54e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c556:	6999      	ldr	r1, [r3, #24]
 800c558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	ea40 0301 	orr.w	r3, r0, r1
 800c562:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	4b8f      	ldr	r3, [pc, #572]	; (800c7a8 <UART_SetConfig+0x2cc>)
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d005      	beq.n	800c57c <UART_SetConfig+0xa0>
 800c570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	4b8d      	ldr	r3, [pc, #564]	; (800c7ac <UART_SetConfig+0x2d0>)
 800c578:	429a      	cmp	r2, r3
 800c57a:	d104      	bne.n	800c586 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c57c:	f7fe fd94 	bl	800b0a8 <HAL_RCC_GetPCLK2Freq>
 800c580:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c584:	e003      	b.n	800c58e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c586:	f7fe fd7b 	bl	800b080 <HAL_RCC_GetPCLK1Freq>
 800c58a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c58e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c592:	69db      	ldr	r3, [r3, #28]
 800c594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c598:	f040 810c 	bne.w	800c7b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c59c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c5a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c5aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c5ae:	4622      	mov	r2, r4
 800c5b0:	462b      	mov	r3, r5
 800c5b2:	1891      	adds	r1, r2, r2
 800c5b4:	65b9      	str	r1, [r7, #88]	; 0x58
 800c5b6:	415b      	adcs	r3, r3
 800c5b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c5be:	4621      	mov	r1, r4
 800c5c0:	eb12 0801 	adds.w	r8, r2, r1
 800c5c4:	4629      	mov	r1, r5
 800c5c6:	eb43 0901 	adc.w	r9, r3, r1
 800c5ca:	f04f 0200 	mov.w	r2, #0
 800c5ce:	f04f 0300 	mov.w	r3, #0
 800c5d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c5d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c5da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c5de:	4690      	mov	r8, r2
 800c5e0:	4699      	mov	r9, r3
 800c5e2:	4623      	mov	r3, r4
 800c5e4:	eb18 0303 	adds.w	r3, r8, r3
 800c5e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c5ec:	462b      	mov	r3, r5
 800c5ee:	eb49 0303 	adc.w	r3, r9, r3
 800c5f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c5f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c602:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c606:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c60a:	460b      	mov	r3, r1
 800c60c:	18db      	adds	r3, r3, r3
 800c60e:	653b      	str	r3, [r7, #80]	; 0x50
 800c610:	4613      	mov	r3, r2
 800c612:	eb42 0303 	adc.w	r3, r2, r3
 800c616:	657b      	str	r3, [r7, #84]	; 0x54
 800c618:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c61c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c620:	f7f4 fae2 	bl	8000be8 <__aeabi_uldivmod>
 800c624:	4602      	mov	r2, r0
 800c626:	460b      	mov	r3, r1
 800c628:	4b61      	ldr	r3, [pc, #388]	; (800c7b0 <UART_SetConfig+0x2d4>)
 800c62a:	fba3 2302 	umull	r2, r3, r3, r2
 800c62e:	095b      	lsrs	r3, r3, #5
 800c630:	011c      	lsls	r4, r3, #4
 800c632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c636:	2200      	movs	r2, #0
 800c638:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c63c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c640:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c644:	4642      	mov	r2, r8
 800c646:	464b      	mov	r3, r9
 800c648:	1891      	adds	r1, r2, r2
 800c64a:	64b9      	str	r1, [r7, #72]	; 0x48
 800c64c:	415b      	adcs	r3, r3
 800c64e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c650:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c654:	4641      	mov	r1, r8
 800c656:	eb12 0a01 	adds.w	sl, r2, r1
 800c65a:	4649      	mov	r1, r9
 800c65c:	eb43 0b01 	adc.w	fp, r3, r1
 800c660:	f04f 0200 	mov.w	r2, #0
 800c664:	f04f 0300 	mov.w	r3, #0
 800c668:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c66c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c670:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c674:	4692      	mov	sl, r2
 800c676:	469b      	mov	fp, r3
 800c678:	4643      	mov	r3, r8
 800c67a:	eb1a 0303 	adds.w	r3, sl, r3
 800c67e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c682:	464b      	mov	r3, r9
 800c684:	eb4b 0303 	adc.w	r3, fp, r3
 800c688:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c68c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	2200      	movs	r2, #0
 800c694:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c698:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c69c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	18db      	adds	r3, r3, r3
 800c6a4:	643b      	str	r3, [r7, #64]	; 0x40
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	eb42 0303 	adc.w	r3, r2, r3
 800c6ac:	647b      	str	r3, [r7, #68]	; 0x44
 800c6ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c6b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c6b6:	f7f4 fa97 	bl	8000be8 <__aeabi_uldivmod>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	460b      	mov	r3, r1
 800c6be:	4611      	mov	r1, r2
 800c6c0:	4b3b      	ldr	r3, [pc, #236]	; (800c7b0 <UART_SetConfig+0x2d4>)
 800c6c2:	fba3 2301 	umull	r2, r3, r3, r1
 800c6c6:	095b      	lsrs	r3, r3, #5
 800c6c8:	2264      	movs	r2, #100	; 0x64
 800c6ca:	fb02 f303 	mul.w	r3, r2, r3
 800c6ce:	1acb      	subs	r3, r1, r3
 800c6d0:	00db      	lsls	r3, r3, #3
 800c6d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c6d6:	4b36      	ldr	r3, [pc, #216]	; (800c7b0 <UART_SetConfig+0x2d4>)
 800c6d8:	fba3 2302 	umull	r2, r3, r3, r2
 800c6dc:	095b      	lsrs	r3, r3, #5
 800c6de:	005b      	lsls	r3, r3, #1
 800c6e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c6e4:	441c      	add	r4, r3
 800c6e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c6f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c6f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c6f8:	4642      	mov	r2, r8
 800c6fa:	464b      	mov	r3, r9
 800c6fc:	1891      	adds	r1, r2, r2
 800c6fe:	63b9      	str	r1, [r7, #56]	; 0x38
 800c700:	415b      	adcs	r3, r3
 800c702:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c704:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c708:	4641      	mov	r1, r8
 800c70a:	1851      	adds	r1, r2, r1
 800c70c:	6339      	str	r1, [r7, #48]	; 0x30
 800c70e:	4649      	mov	r1, r9
 800c710:	414b      	adcs	r3, r1
 800c712:	637b      	str	r3, [r7, #52]	; 0x34
 800c714:	f04f 0200 	mov.w	r2, #0
 800c718:	f04f 0300 	mov.w	r3, #0
 800c71c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c720:	4659      	mov	r1, fp
 800c722:	00cb      	lsls	r3, r1, #3
 800c724:	4651      	mov	r1, sl
 800c726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c72a:	4651      	mov	r1, sl
 800c72c:	00ca      	lsls	r2, r1, #3
 800c72e:	4610      	mov	r0, r2
 800c730:	4619      	mov	r1, r3
 800c732:	4603      	mov	r3, r0
 800c734:	4642      	mov	r2, r8
 800c736:	189b      	adds	r3, r3, r2
 800c738:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c73c:	464b      	mov	r3, r9
 800c73e:	460a      	mov	r2, r1
 800c740:	eb42 0303 	adc.w	r3, r2, r3
 800c744:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c754:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c758:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c75c:	460b      	mov	r3, r1
 800c75e:	18db      	adds	r3, r3, r3
 800c760:	62bb      	str	r3, [r7, #40]	; 0x28
 800c762:	4613      	mov	r3, r2
 800c764:	eb42 0303 	adc.w	r3, r2, r3
 800c768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c76a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c76e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c772:	f7f4 fa39 	bl	8000be8 <__aeabi_uldivmod>
 800c776:	4602      	mov	r2, r0
 800c778:	460b      	mov	r3, r1
 800c77a:	4b0d      	ldr	r3, [pc, #52]	; (800c7b0 <UART_SetConfig+0x2d4>)
 800c77c:	fba3 1302 	umull	r1, r3, r3, r2
 800c780:	095b      	lsrs	r3, r3, #5
 800c782:	2164      	movs	r1, #100	; 0x64
 800c784:	fb01 f303 	mul.w	r3, r1, r3
 800c788:	1ad3      	subs	r3, r2, r3
 800c78a:	00db      	lsls	r3, r3, #3
 800c78c:	3332      	adds	r3, #50	; 0x32
 800c78e:	4a08      	ldr	r2, [pc, #32]	; (800c7b0 <UART_SetConfig+0x2d4>)
 800c790:	fba2 2303 	umull	r2, r3, r2, r3
 800c794:	095b      	lsrs	r3, r3, #5
 800c796:	f003 0207 	and.w	r2, r3, #7
 800c79a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4422      	add	r2, r4
 800c7a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c7a4:	e105      	b.n	800c9b2 <UART_SetConfig+0x4d6>
 800c7a6:	bf00      	nop
 800c7a8:	40011000 	.word	0x40011000
 800c7ac:	40011400 	.word	0x40011400
 800c7b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c7b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c7be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c7c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c7c6:	4642      	mov	r2, r8
 800c7c8:	464b      	mov	r3, r9
 800c7ca:	1891      	adds	r1, r2, r2
 800c7cc:	6239      	str	r1, [r7, #32]
 800c7ce:	415b      	adcs	r3, r3
 800c7d0:	627b      	str	r3, [r7, #36]	; 0x24
 800c7d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c7d6:	4641      	mov	r1, r8
 800c7d8:	1854      	adds	r4, r2, r1
 800c7da:	4649      	mov	r1, r9
 800c7dc:	eb43 0501 	adc.w	r5, r3, r1
 800c7e0:	f04f 0200 	mov.w	r2, #0
 800c7e4:	f04f 0300 	mov.w	r3, #0
 800c7e8:	00eb      	lsls	r3, r5, #3
 800c7ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c7ee:	00e2      	lsls	r2, r4, #3
 800c7f0:	4614      	mov	r4, r2
 800c7f2:	461d      	mov	r5, r3
 800c7f4:	4643      	mov	r3, r8
 800c7f6:	18e3      	adds	r3, r4, r3
 800c7f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c7fc:	464b      	mov	r3, r9
 800c7fe:	eb45 0303 	adc.w	r3, r5, r3
 800c802:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	2200      	movs	r2, #0
 800c80e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c812:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c816:	f04f 0200 	mov.w	r2, #0
 800c81a:	f04f 0300 	mov.w	r3, #0
 800c81e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c822:	4629      	mov	r1, r5
 800c824:	008b      	lsls	r3, r1, #2
 800c826:	4621      	mov	r1, r4
 800c828:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c82c:	4621      	mov	r1, r4
 800c82e:	008a      	lsls	r2, r1, #2
 800c830:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c834:	f7f4 f9d8 	bl	8000be8 <__aeabi_uldivmod>
 800c838:	4602      	mov	r2, r0
 800c83a:	460b      	mov	r3, r1
 800c83c:	4b60      	ldr	r3, [pc, #384]	; (800c9c0 <UART_SetConfig+0x4e4>)
 800c83e:	fba3 2302 	umull	r2, r3, r3, r2
 800c842:	095b      	lsrs	r3, r3, #5
 800c844:	011c      	lsls	r4, r3, #4
 800c846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c84a:	2200      	movs	r2, #0
 800c84c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c850:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c854:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c858:	4642      	mov	r2, r8
 800c85a:	464b      	mov	r3, r9
 800c85c:	1891      	adds	r1, r2, r2
 800c85e:	61b9      	str	r1, [r7, #24]
 800c860:	415b      	adcs	r3, r3
 800c862:	61fb      	str	r3, [r7, #28]
 800c864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c868:	4641      	mov	r1, r8
 800c86a:	1851      	adds	r1, r2, r1
 800c86c:	6139      	str	r1, [r7, #16]
 800c86e:	4649      	mov	r1, r9
 800c870:	414b      	adcs	r3, r1
 800c872:	617b      	str	r3, [r7, #20]
 800c874:	f04f 0200 	mov.w	r2, #0
 800c878:	f04f 0300 	mov.w	r3, #0
 800c87c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c880:	4659      	mov	r1, fp
 800c882:	00cb      	lsls	r3, r1, #3
 800c884:	4651      	mov	r1, sl
 800c886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c88a:	4651      	mov	r1, sl
 800c88c:	00ca      	lsls	r2, r1, #3
 800c88e:	4610      	mov	r0, r2
 800c890:	4619      	mov	r1, r3
 800c892:	4603      	mov	r3, r0
 800c894:	4642      	mov	r2, r8
 800c896:	189b      	adds	r3, r3, r2
 800c898:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c89c:	464b      	mov	r3, r9
 800c89e:	460a      	mov	r2, r1
 800c8a0:	eb42 0303 	adc.w	r3, r2, r3
 800c8a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c8a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	67bb      	str	r3, [r7, #120]	; 0x78
 800c8b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c8b4:	f04f 0200 	mov.w	r2, #0
 800c8b8:	f04f 0300 	mov.w	r3, #0
 800c8bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c8c0:	4649      	mov	r1, r9
 800c8c2:	008b      	lsls	r3, r1, #2
 800c8c4:	4641      	mov	r1, r8
 800c8c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c8ca:	4641      	mov	r1, r8
 800c8cc:	008a      	lsls	r2, r1, #2
 800c8ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c8d2:	f7f4 f989 	bl	8000be8 <__aeabi_uldivmod>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	460b      	mov	r3, r1
 800c8da:	4b39      	ldr	r3, [pc, #228]	; (800c9c0 <UART_SetConfig+0x4e4>)
 800c8dc:	fba3 1302 	umull	r1, r3, r3, r2
 800c8e0:	095b      	lsrs	r3, r3, #5
 800c8e2:	2164      	movs	r1, #100	; 0x64
 800c8e4:	fb01 f303 	mul.w	r3, r1, r3
 800c8e8:	1ad3      	subs	r3, r2, r3
 800c8ea:	011b      	lsls	r3, r3, #4
 800c8ec:	3332      	adds	r3, #50	; 0x32
 800c8ee:	4a34      	ldr	r2, [pc, #208]	; (800c9c0 <UART_SetConfig+0x4e4>)
 800c8f0:	fba2 2303 	umull	r2, r3, r2, r3
 800c8f4:	095b      	lsrs	r3, r3, #5
 800c8f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c8fa:	441c      	add	r4, r3
 800c8fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c900:	2200      	movs	r2, #0
 800c902:	673b      	str	r3, [r7, #112]	; 0x70
 800c904:	677a      	str	r2, [r7, #116]	; 0x74
 800c906:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c90a:	4642      	mov	r2, r8
 800c90c:	464b      	mov	r3, r9
 800c90e:	1891      	adds	r1, r2, r2
 800c910:	60b9      	str	r1, [r7, #8]
 800c912:	415b      	adcs	r3, r3
 800c914:	60fb      	str	r3, [r7, #12]
 800c916:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c91a:	4641      	mov	r1, r8
 800c91c:	1851      	adds	r1, r2, r1
 800c91e:	6039      	str	r1, [r7, #0]
 800c920:	4649      	mov	r1, r9
 800c922:	414b      	adcs	r3, r1
 800c924:	607b      	str	r3, [r7, #4]
 800c926:	f04f 0200 	mov.w	r2, #0
 800c92a:	f04f 0300 	mov.w	r3, #0
 800c92e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c932:	4659      	mov	r1, fp
 800c934:	00cb      	lsls	r3, r1, #3
 800c936:	4651      	mov	r1, sl
 800c938:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c93c:	4651      	mov	r1, sl
 800c93e:	00ca      	lsls	r2, r1, #3
 800c940:	4610      	mov	r0, r2
 800c942:	4619      	mov	r1, r3
 800c944:	4603      	mov	r3, r0
 800c946:	4642      	mov	r2, r8
 800c948:	189b      	adds	r3, r3, r2
 800c94a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c94c:	464b      	mov	r3, r9
 800c94e:	460a      	mov	r2, r1
 800c950:	eb42 0303 	adc.w	r3, r2, r3
 800c954:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	2200      	movs	r2, #0
 800c95e:	663b      	str	r3, [r7, #96]	; 0x60
 800c960:	667a      	str	r2, [r7, #100]	; 0x64
 800c962:	f04f 0200 	mov.w	r2, #0
 800c966:	f04f 0300 	mov.w	r3, #0
 800c96a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c96e:	4649      	mov	r1, r9
 800c970:	008b      	lsls	r3, r1, #2
 800c972:	4641      	mov	r1, r8
 800c974:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c978:	4641      	mov	r1, r8
 800c97a:	008a      	lsls	r2, r1, #2
 800c97c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c980:	f7f4 f932 	bl	8000be8 <__aeabi_uldivmod>
 800c984:	4602      	mov	r2, r0
 800c986:	460b      	mov	r3, r1
 800c988:	4b0d      	ldr	r3, [pc, #52]	; (800c9c0 <UART_SetConfig+0x4e4>)
 800c98a:	fba3 1302 	umull	r1, r3, r3, r2
 800c98e:	095b      	lsrs	r3, r3, #5
 800c990:	2164      	movs	r1, #100	; 0x64
 800c992:	fb01 f303 	mul.w	r3, r1, r3
 800c996:	1ad3      	subs	r3, r2, r3
 800c998:	011b      	lsls	r3, r3, #4
 800c99a:	3332      	adds	r3, #50	; 0x32
 800c99c:	4a08      	ldr	r2, [pc, #32]	; (800c9c0 <UART_SetConfig+0x4e4>)
 800c99e:	fba2 2303 	umull	r2, r3, r2, r3
 800c9a2:	095b      	lsrs	r3, r3, #5
 800c9a4:	f003 020f 	and.w	r2, r3, #15
 800c9a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	4422      	add	r2, r4
 800c9b0:	609a      	str	r2, [r3, #8]
}
 800c9b2:	bf00      	nop
 800c9b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c9be:	bf00      	nop
 800c9c0:	51eb851f 	.word	0x51eb851f

0800c9c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800c9c4:	480d      	ldr	r0, [pc, #52]	; (800c9fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800c9c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800c9c8:	f7f8 fb86 	bl	80050d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c9cc:	480c      	ldr	r0, [pc, #48]	; (800ca00 <LoopForever+0x6>)
  ldr r1, =_edata
 800c9ce:	490d      	ldr	r1, [pc, #52]	; (800ca04 <LoopForever+0xa>)
  ldr r2, =_sidata
 800c9d0:	4a0d      	ldr	r2, [pc, #52]	; (800ca08 <LoopForever+0xe>)
  movs r3, #0
 800c9d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c9d4:	e002      	b.n	800c9dc <LoopCopyDataInit>

0800c9d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c9d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c9d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c9da:	3304      	adds	r3, #4

0800c9dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c9dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c9de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c9e0:	d3f9      	bcc.n	800c9d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c9e2:	4a0a      	ldr	r2, [pc, #40]	; (800ca0c <LoopForever+0x12>)
  ldr r4, =_ebss
 800c9e4:	4c0a      	ldr	r4, [pc, #40]	; (800ca10 <LoopForever+0x16>)
  movs r3, #0
 800c9e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c9e8:	e001      	b.n	800c9ee <LoopFillZerobss>

0800c9ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c9ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c9ec:	3204      	adds	r2, #4

0800c9ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c9ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c9f0:	d3fb      	bcc.n	800c9ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800c9f2:	f003 fb7f 	bl	80100f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800c9f6:	f7f7 ffe9 	bl	80049cc <main>

0800c9fa <LoopForever>:

LoopForever:
  b LoopForever
 800c9fa:	e7fe      	b.n	800c9fa <LoopForever>
  ldr   r0, =_estack
 800c9fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ca00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ca04:	20000618 	.word	0x20000618
  ldr r2, =_sidata
 800ca08:	08014164 	.word	0x08014164
  ldr r2, =_sbss
 800ca0c:	20000618 	.word	0x20000618
  ldr r4, =_ebss
 800ca10:	200059d4 	.word	0x200059d4

0800ca14 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ca14:	e7fe      	b.n	800ca14 <ADC_IRQHandler>

0800ca16 <prv_out_fn_print>:
 * \param[in]       p: LwPRINTF internal instance
 * \param[in]       c: Character to print
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_fn_print(lwprintf_int_t* p, const char c) {
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b082      	sub	sp, #8
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
 800ca1e:	460b      	mov	r3, r1
 800ca20:	70fb      	strb	r3, [r7, #3]
    if (p->is_print_cancelled) {
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	7e1b      	ldrb	r3, [r3, #24]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d001      	beq.n	800ca2e <prv_out_fn_print+0x18>
        return 0;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	e01a      	b.n	800ca64 <prv_out_fn_print+0x4e>
    }
    if (!p->lw->out_fn(c, p->lw)) { /*!< Send character to output */
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	78f8      	ldrb	r0, [r7, #3]
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	6812      	ldr	r2, [r2, #0]
 800ca3a:	4611      	mov	r1, r2
 800ca3c:	4798      	blx	r3
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d102      	bne.n	800ca4a <prv_out_fn_print+0x34>
        p->is_print_cancelled = 1;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2201      	movs	r2, #1
 800ca48:	761a      	strb	r2, [r3, #24]
    }
    if (c != '\0' && !p->is_print_cancelled) {
 800ca4a:	78fb      	ldrb	r3, [r7, #3]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d008      	beq.n	800ca62 <prv_out_fn_print+0x4c>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	7e1b      	ldrb	r3, [r3, #24]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d104      	bne.n	800ca62 <prv_out_fn_print+0x4c>
        ++p->n;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	691b      	ldr	r3, [r3, #16]
 800ca5c:	1c5a      	adds	r2, r3, #1
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	611a      	str	r2, [r3, #16]
    }
    return 1;
 800ca62:	2301      	movs	r3, #1
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3708      	adds	r7, #8
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <prv_parse_num>:
 * \brief           Parse number from input string
 * \param[in,out]   format: Input text to process
 * \return          Parsed number
 */
static int
prv_parse_num(const char** format) {
 800ca6c:	b480      	push	{r7}
 800ca6e:	b085      	sub	sp, #20
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
    const char* fmt = *format;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	60fb      	str	r3, [r7, #12]
    int n = 0;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	60bb      	str	r3, [r7, #8]

    for (; CHARISNUM(*fmt); ++fmt) {
 800ca7e:	e00d      	b.n	800ca9c <prv_parse_num+0x30>
        n = 10 * n + CHARTONUM(*fmt);
 800ca80:	68ba      	ldr	r2, [r7, #8]
 800ca82:	4613      	mov	r3, r2
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	4413      	add	r3, r2
 800ca88:	005b      	lsls	r3, r3, #1
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	3b30      	subs	r3, #48	; 0x30
 800ca92:	4413      	add	r3, r2
 800ca94:	60bb      	str	r3, [r7, #8]
    for (; CHARISNUM(*fmt); ++fmt) {
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	3301      	adds	r3, #1
 800ca9a:	60fb      	str	r3, [r7, #12]
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	2b2f      	cmp	r3, #47	; 0x2f
 800caa2:	d903      	bls.n	800caac <prv_parse_num+0x40>
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	2b39      	cmp	r3, #57	; 0x39
 800caaa:	d9e9      	bls.n	800ca80 <prv_parse_num+0x14>
    }
    *format = fmt;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	68fa      	ldr	r2, [r7, #12]
 800cab0:	601a      	str	r2, [r3, #0]
    return n;
 800cab2:	68bb      	ldr	r3, [r7, #8]
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3714      	adds	r7, #20
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr

0800cac0 <prv_out_str_before>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       buff_size: Expected buffer size of output string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_before(lwprintf_int_t* p, size_t buff_size) {
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
    /* Check for width */
    if (p->m.width > 0
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cace:	2b00      	cmp	r3, #0
 800cad0:	dd12      	ble.n	800caf8 <prv_out_str_before+0x38>
        /* If number is negative, add negative sign or if positive and has plus sign forced */
        && (p->m.flags.is_negative || p->m.flags.plus)) {
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	7f5b      	ldrb	r3, [r3, #29]
 800cad6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d106      	bne.n	800caee <prv_out_str_before+0x2e>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	7f1b      	ldrb	r3, [r3, #28]
 800cae4:	f003 0302 	and.w	r3, r3, #2
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	2b00      	cmp	r3, #0
 800caec:	d004      	beq.n	800caf8 <prv_out_str_before+0x38>
        --p->m.width;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf2:	1e5a      	subs	r2, r3, #1
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Check for alternate mode */
    if (p->m.flags.alt && !p->m.flags.is_num_zero) {
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	7f1b      	ldrb	r3, [r3, #28]
 800cafc:	f003 0320 	and.w	r3, r3, #32
 800cb00:	b2db      	uxtb	r3, r3
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d02c      	beq.n	800cb60 <prv_out_str_before+0xa0>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	7f9b      	ldrb	r3, [r3, #30]
 800cb0a:	f003 0301 	and.w	r3, r3, #1
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d125      	bne.n	800cb60 <prv_out_str_before+0xa0>
        if (p->m.base == 8) {
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb1a:	2b08      	cmp	r3, #8
 800cb1c:	d109      	bne.n	800cb32 <prv_out_str_before+0x72>
            if (p->m.width > 0) {
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	dd1c      	ble.n	800cb60 <prv_out_str_before+0xa0>
                --p->m.width;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb2a:	1e5a      	subs	r2, r3, #1
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	625a      	str	r2, [r3, #36]	; 0x24
 800cb30:	e016      	b.n	800cb60 <prv_out_str_before+0xa0>
            }
        } else if (p->m.base == 16 || p->m.base == 2) {
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb38:	2b10      	cmp	r3, #16
 800cb3a:	d004      	beq.n	800cb46 <prv_out_str_before+0x86>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb42:	2b02      	cmp	r3, #2
 800cb44:	d10c      	bne.n	800cb60 <prv_out_str_before+0xa0>
            if (p->m.width >= 2) {
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	dd05      	ble.n	800cb5a <prv_out_str_before+0x9a>
                p->m.width -= 2;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb52:	1e9a      	subs	r2, r3, #2
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	625a      	str	r2, [r3, #36]	; 0x24
 800cb58:	e002      	b.n	800cb60 <prv_out_str_before+0xa0>
            } else {
                p->m.width = 0;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	625a      	str	r2, [r3, #36]	; 0x24
            }
        }
    }

    /* Add negative sign (or positive in case of + flag or space in case of space flag) before when zeros are used to fill width */
    if (p->m.flags.zero) {
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	7f1b      	ldrb	r3, [r3, #28]
 800cb64:	f003 0308 	and.w	r3, r3, #8
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d025      	beq.n	800cbba <prv_out_str_before+0xfa>
        if (p->m.flags.is_negative) {
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	7f5b      	ldrb	r3, [r3, #29]
 800cb72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d005      	beq.n	800cb88 <prv_out_str_before+0xc8>
            p->out_fn(p, '-');
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	695b      	ldr	r3, [r3, #20]
 800cb80:	212d      	movs	r1, #45	; 0x2d
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	4798      	blx	r3
 800cb86:	e018      	b.n	800cbba <prv_out_str_before+0xfa>
        } else if (p->m.flags.plus) {
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	7f1b      	ldrb	r3, [r3, #28]
 800cb8c:	f003 0302 	and.w	r3, r3, #2
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d005      	beq.n	800cba2 <prv_out_str_before+0xe2>
            p->out_fn(p, '+');
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	695b      	ldr	r3, [r3, #20]
 800cb9a:	212b      	movs	r1, #43	; 0x2b
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	4798      	blx	r3
 800cba0:	e00b      	b.n	800cbba <prv_out_str_before+0xfa>
        } else if (p->m.flags.space) {
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	7f1b      	ldrb	r3, [r3, #28]
 800cba6:	f003 0304 	and.w	r3, r3, #4
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d004      	beq.n	800cbba <prv_out_str_before+0xfa>
            p->out_fn(p, ' ');
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	695b      	ldr	r3, [r3, #20]
 800cbb4:	2120      	movs	r1, #32
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	4798      	blx	r3
        }
    }

    /* Check for flags output */
    if (p->m.flags.alt && !p->m.flags.is_num_zero) {
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	7f1b      	ldrb	r3, [r3, #28]
 800cbbe:	f003 0320 	and.w	r3, r3, #32
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d044      	beq.n	800cc52 <prv_out_str_before+0x192>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	7f9b      	ldrb	r3, [r3, #30]
 800cbcc:	f003 0301 	and.w	r3, r3, #1
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d13d      	bne.n	800cc52 <prv_out_str_before+0x192>
        if (p->m.base == 8) {
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbdc:	2b08      	cmp	r3, #8
 800cbde:	d105      	bne.n	800cbec <prv_out_str_before+0x12c>
            p->out_fn(p, '0');
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	695b      	ldr	r3, [r3, #20]
 800cbe4:	2130      	movs	r1, #48	; 0x30
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	4798      	blx	r3
 800cbea:	e032      	b.n	800cc52 <prv_out_str_before+0x192>
        } else if (p->m.base == 16) {
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbf2:	2b10      	cmp	r3, #16
 800cbf4:	d114      	bne.n	800cc20 <prv_out_str_before+0x160>
            p->out_fn(p, '0');
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	695b      	ldr	r3, [r3, #20]
 800cbfa:	2130      	movs	r1, #48	; 0x30
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	4798      	blx	r3
            p->out_fn(p, p->m.flags.uc ? 'X' : 'x');
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	695b      	ldr	r3, [r3, #20]
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	7f52      	ldrb	r2, [r2, #29]
 800cc08:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800cc0c:	b2d2      	uxtb	r2, r2
 800cc0e:	2a00      	cmp	r2, #0
 800cc10:	d001      	beq.n	800cc16 <prv_out_str_before+0x156>
 800cc12:	2258      	movs	r2, #88	; 0x58
 800cc14:	e000      	b.n	800cc18 <prv_out_str_before+0x158>
 800cc16:	2278      	movs	r2, #120	; 0x78
 800cc18:	4611      	mov	r1, r2
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	4798      	blx	r3
 800cc1e:	e018      	b.n	800cc52 <prv_out_str_before+0x192>
        } else if (p->m.base == 2) {
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc26:	2b02      	cmp	r3, #2
 800cc28:	d113      	bne.n	800cc52 <prv_out_str_before+0x192>
            p->out_fn(p, '0');
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	695b      	ldr	r3, [r3, #20]
 800cc2e:	2130      	movs	r1, #48	; 0x30
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	4798      	blx	r3
            p->out_fn(p, p->m.flags.uc ? 'B' : 'b');
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	695b      	ldr	r3, [r3, #20]
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	7f52      	ldrb	r2, [r2, #29]
 800cc3c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800cc40:	b2d2      	uxtb	r2, r2
 800cc42:	2a00      	cmp	r2, #0
 800cc44:	d001      	beq.n	800cc4a <prv_out_str_before+0x18a>
 800cc46:	2242      	movs	r2, #66	; 0x42
 800cc48:	e000      	b.n	800cc4c <prv_out_str_before+0x18c>
 800cc4a:	2262      	movs	r2, #98	; 0x62
 800cc4c:	4611      	mov	r1, r2
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	4798      	blx	r3
        }
    }

    /* Right alignment, spaces or zeros */
    if (!p->m.flags.left_align && p->m.width > 0) {
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	7f1b      	ldrb	r3, [r3, #28]
 800cc56:	f003 0301 	and.w	r3, r3, #1
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d125      	bne.n	800ccac <prv_out_str_before+0x1ec>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	dd21      	ble.n	800ccac <prv_out_str_before+0x1ec>
        for (size_t i = buff_size; !p->m.flags.left_align && i < (size_t)p->m.width; ++i) {
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	60fb      	str	r3, [r7, #12]
 800cc6c:	e011      	b.n	800cc92 <prv_out_str_before+0x1d2>
            p->out_fn(p, p->m.flags.zero ? '0' : ' ');
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	695b      	ldr	r3, [r3, #20]
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	7f12      	ldrb	r2, [r2, #28]
 800cc76:	f002 0208 	and.w	r2, r2, #8
 800cc7a:	b2d2      	uxtb	r2, r2
 800cc7c:	2a00      	cmp	r2, #0
 800cc7e:	d001      	beq.n	800cc84 <prv_out_str_before+0x1c4>
 800cc80:	2230      	movs	r2, #48	; 0x30
 800cc82:	e000      	b.n	800cc86 <prv_out_str_before+0x1c6>
 800cc84:	2220      	movs	r2, #32
 800cc86:	4611      	mov	r1, r2
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	4798      	blx	r3
        for (size_t i = buff_size; !p->m.flags.left_align && i < (size_t)p->m.width; ++i) {
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	3301      	adds	r3, #1
 800cc90:	60fb      	str	r3, [r7, #12]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	7f1b      	ldrb	r3, [r3, #28]
 800cc96:	f003 0301 	and.w	r3, r3, #1
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d105      	bne.n	800ccac <prv_out_str_before+0x1ec>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca4:	461a      	mov	r2, r3
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d3e0      	bcc.n	800cc6e <prv_out_str_before+0x1ae>
        }
    }

    /* Add negative sign here when spaces are used for width */
    if (!p->m.flags.zero) {
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	7f1b      	ldrb	r3, [r3, #28]
 800ccb0:	f003 0308 	and.w	r3, r3, #8
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d12b      	bne.n	800cd12 <prv_out_str_before+0x252>
        if (p->m.flags.is_negative) {
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	7f5b      	ldrb	r3, [r3, #29]
 800ccbe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d005      	beq.n	800ccd4 <prv_out_str_before+0x214>
            p->out_fn(p, '-');
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	695b      	ldr	r3, [r3, #20]
 800cccc:	212d      	movs	r1, #45	; 0x2d
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	4798      	blx	r3
 800ccd2:	e01e      	b.n	800cd12 <prv_out_str_before+0x252>
        } else if (p->m.flags.plus) {
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	7f1b      	ldrb	r3, [r3, #28]
 800ccd8:	f003 0302 	and.w	r3, r3, #2
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d005      	beq.n	800ccee <prv_out_str_before+0x22e>
            p->out_fn(p, '+');
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	695b      	ldr	r3, [r3, #20]
 800cce6:	212b      	movs	r1, #43	; 0x2b
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	4798      	blx	r3
 800ccec:	e011      	b.n	800cd12 <prv_out_str_before+0x252>
        } else if (p->m.flags.space && buff_size >= (size_t)p->m.width) {
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	7f1b      	ldrb	r3, [r3, #28]
 800ccf2:	f003 0304 	and.w	r3, r3, #4
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d00a      	beq.n	800cd12 <prv_out_str_before+0x252>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd00:	461a      	mov	r2, r3
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d304      	bcc.n	800cd12 <prv_out_str_before+0x252>
            p->out_fn(p, ' ');
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	695b      	ldr	r3, [r3, #20]
 800cd0c:	2120      	movs	r1, #32
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	4798      	blx	r3
        }
    }

    return 1;
 800cd12:	2301      	movs	r3, #1
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3710      	adds	r7, #16
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <prv_out_str_after>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       buff_size: Expected buffer size of output string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_after(lwprintf_int_t* p, size_t buff_size) {
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
    /* Left alignment, but only with spaces */
    if (p->m.flags.left_align) {
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	7f1b      	ldrb	r3, [r3, #28]
 800cd2a:	f003 0301 	and.w	r3, r3, #1
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d010      	beq.n	800cd56 <prv_out_str_after+0x3a>
        for (size_t i = buff_size; i < (size_t)p->m.width; ++i) {
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	60fb      	str	r3, [r7, #12]
 800cd38:	e007      	b.n	800cd4a <prv_out_str_after+0x2e>
            p->out_fn(p, ' ');
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	695b      	ldr	r3, [r3, #20]
 800cd3e:	2120      	movs	r1, #32
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	4798      	blx	r3
        for (size_t i = buff_size; i < (size_t)p->m.width; ++i) {
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	3301      	adds	r3, #1
 800cd48:	60fb      	str	r3, [r7, #12]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd4e:	461a      	mov	r2, r3
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d3f1      	bcc.n	800cd3a <prv_out_str_after+0x1e>
        }
    }
    return 1;
 800cd56:	2301      	movs	r3, #1
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3710      	adds	r7, #16
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <prv_out_str_raw>:
 * \param[in]       buff: Buffer string
 * \param[in]       buff_size: Length of buffer to output
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_raw(lwprintf_int_t* p, const char* buff, size_t buff_size) {
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b086      	sub	sp, #24
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	60b9      	str	r1, [r7, #8]
 800cd6a:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < buff_size; ++i) {
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	617b      	str	r3, [r7, #20]
 800cd70:	e00b      	b.n	800cd8a <prv_out_str_raw+0x2a>
        p->out_fn(p, buff[i]);
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	695b      	ldr	r3, [r3, #20]
 800cd76:	68b9      	ldr	r1, [r7, #8]
 800cd78:	697a      	ldr	r2, [r7, #20]
 800cd7a:	440a      	add	r2, r1
 800cd7c:	7812      	ldrb	r2, [r2, #0]
 800cd7e:	4611      	mov	r1, r2
 800cd80:	68f8      	ldr	r0, [r7, #12]
 800cd82:	4798      	blx	r3
    for (size_t i = 0; i < buff_size; ++i) {
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	3301      	adds	r3, #1
 800cd88:	617b      	str	r3, [r7, #20]
 800cd8a:	697a      	ldr	r2, [r7, #20]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d3ef      	bcc.n	800cd72 <prv_out_str_raw+0x12>
    }
    return 1;
 800cd92:	2301      	movs	r3, #1
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3718      	adds	r7, #24
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <prv_out_str>:
 * \param[in]       buff: Buffer string
 * \param[in]       buff_size: Length of buffer to output
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str(lwprintf_int_t* p, const char* buff, size_t buff_size) {
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	60b9      	str	r1, [r7, #8]
 800cda6:	607a      	str	r2, [r7, #4]
    prv_out_str_before(p, buff_size);    /* Implement pre-format */
 800cda8:	6879      	ldr	r1, [r7, #4]
 800cdaa:	68f8      	ldr	r0, [r7, #12]
 800cdac:	f7ff fe88 	bl	800cac0 <prv_out_str_before>
    prv_out_str_raw(p, buff, buff_size); /* Print actual string */
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	68b9      	ldr	r1, [r7, #8]
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	f7ff ffd3 	bl	800cd60 <prv_out_str_raw>
    prv_out_str_after(p, buff_size);     /* Implement post-format */
 800cdba:	6879      	ldr	r1, [r7, #4]
 800cdbc:	68f8      	ldr	r0, [r7, #12]
 800cdbe:	f7ff ffad 	bl	800cd1c <prv_out_str_after>

    return 1;
 800cdc2:	2301      	movs	r3, #1
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3710      	adds	r7, #16
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <prv_unsigned_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_unsigned_int_to_str(lwprintf_int_t* p, unsigned int num) {
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b086      	sub	sp, #24
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
    OUTPUT_ANY_INT_TYPE(unsigned int, num);
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	bf0c      	ite	eq
 800cddc:	2301      	moveq	r3, #1
 800cdde:	2300      	movne	r3, #0
 800cde0:	b2d9      	uxtb	r1, r3
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	7f93      	ldrb	r3, [r2, #30]
 800cde6:	f361 0300 	bfi	r3, r1, #0, #1
 800cdea:	7793      	strb	r3, [r2, #30]
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d10d      	bne.n	800ce0e <prv_unsigned_int_to_str+0x42>
 800cdf2:	2101      	movs	r1, #1
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f7ff fe63 	bl	800cac0 <prv_out_str_before>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	695b      	ldr	r3, [r3, #20]
 800cdfe:	2130      	movs	r1, #48	; 0x30
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	4798      	blx	r3
 800ce04:	2101      	movs	r1, #1
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f7ff ff88 	bl	800cd1c <prv_out_str_after>
 800ce0c:	e063      	b.n	800ced6 <prv_unsigned_int_to_str+0x10a>
 800ce0e:	2300      	movs	r3, #0
 800ce10:	74fb      	strb	r3, [r7, #19]
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	617b      	str	r3, [r7, #20]
 800ce16:	e00a      	b.n	800ce2e <prv_unsigned_int_to_str+0x62>
 800ce18:	7cfb      	ldrb	r3, [r7, #19]
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	74fb      	strb	r3, [r7, #19]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce24:	461a      	mov	r2, r3
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce2c:	617b      	str	r3, [r7, #20]
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d1f1      	bne.n	800ce18 <prv_unsigned_int_to_str+0x4c>
 800ce34:	2301      	movs	r3, #1
 800ce36:	617b      	str	r3, [r7, #20]
 800ce38:	e007      	b.n	800ce4a <prv_unsigned_int_to_str+0x7e>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce40:	461a      	mov	r2, r3
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	fb02 f303 	mul.w	r3, r2, r3
 800ce48:	617b      	str	r3, [r7, #20]
 800ce4a:	683a      	ldr	r2, [r7, #0]
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d2ee      	bcs.n	800ce3a <prv_unsigned_int_to_str+0x6e>
 800ce5c:	7cfb      	ldrb	r3, [r7, #19]
 800ce5e:	4619      	mov	r1, r3
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7ff fe2d 	bl	800cac0 <prv_out_str_before>
 800ce66:	e02e      	b.n	800cec6 <prv_unsigned_int_to_str+0xfa>
 800ce68:	683a      	ldr	r2, [r7, #0]
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce70:	60fb      	str	r3, [r7, #12]
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	697a      	ldr	r2, [r7, #20]
 800ce76:	fbb3 f2f2 	udiv	r2, r3, r2
 800ce7a:	6979      	ldr	r1, [r7, #20]
 800ce7c:	fb01 f202 	mul.w	r2, r1, r2
 800ce80:	1a9b      	subs	r3, r3, r2
 800ce82:	603b      	str	r3, [r7, #0]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce92:	617b      	str	r3, [r7, #20]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	b2da      	uxtb	r2, r3
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2b09      	cmp	r3, #9
 800ce9c:	d90a      	bls.n	800ceb4 <prv_unsigned_int_to_str+0xe8>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	7f5b      	ldrb	r3, [r3, #29]
 800cea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d001      	beq.n	800ceb0 <prv_unsigned_int_to_str+0xe4>
 800ceac:	2337      	movs	r3, #55	; 0x37
 800ceae:	e002      	b.n	800ceb6 <prv_unsigned_int_to_str+0xea>
 800ceb0:	2357      	movs	r3, #87	; 0x57
 800ceb2:	e000      	b.n	800ceb6 <prv_unsigned_int_to_str+0xea>
 800ceb4:	2330      	movs	r3, #48	; 0x30
 800ceb6:	4413      	add	r3, r2
 800ceb8:	72fb      	strb	r3, [r7, #11]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	695b      	ldr	r3, [r3, #20]
 800cebe:	7afa      	ldrb	r2, [r7, #11]
 800cec0:	4611      	mov	r1, r2
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	4798      	blx	r3
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d1cd      	bne.n	800ce68 <prv_unsigned_int_to_str+0x9c>
 800cecc:	7cfb      	ldrb	r3, [r7, #19]
 800cece:	4619      	mov	r1, r3
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f7ff ff23 	bl	800cd1c <prv_out_str_after>
    return 1;
 800ced6:	2301      	movs	r3, #1
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3718      	adds	r7, #24
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <prv_unsigned_long_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_unsigned_long_int_to_str(lwprintf_int_t* p, unsigned long int num) {
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b086      	sub	sp, #24
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	6039      	str	r1, [r7, #0]
    OUTPUT_ANY_INT_TYPE(unsigned long int, num);
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	bf0c      	ite	eq
 800cef0:	2301      	moveq	r3, #1
 800cef2:	2300      	movne	r3, #0
 800cef4:	b2d9      	uxtb	r1, r3
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	7f93      	ldrb	r3, [r2, #30]
 800cefa:	f361 0300 	bfi	r3, r1, #0, #1
 800cefe:	7793      	strb	r3, [r2, #30]
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d10d      	bne.n	800cf22 <prv_unsigned_long_int_to_str+0x42>
 800cf06:	2101      	movs	r1, #1
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f7ff fdd9 	bl	800cac0 <prv_out_str_before>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	695b      	ldr	r3, [r3, #20]
 800cf12:	2130      	movs	r1, #48	; 0x30
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	4798      	blx	r3
 800cf18:	2101      	movs	r1, #1
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f7ff fefe 	bl	800cd1c <prv_out_str_after>
 800cf20:	e063      	b.n	800cfea <prv_unsigned_long_int_to_str+0x10a>
 800cf22:	2300      	movs	r3, #0
 800cf24:	74fb      	strb	r3, [r7, #19]
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	617b      	str	r3, [r7, #20]
 800cf2a:	e00a      	b.n	800cf42 <prv_unsigned_long_int_to_str+0x62>
 800cf2c:	7cfb      	ldrb	r3, [r7, #19]
 800cf2e:	3301      	adds	r3, #1
 800cf30:	74fb      	strb	r3, [r7, #19]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf38:	461a      	mov	r2, r3
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf40:	617b      	str	r3, [r7, #20]
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d1f1      	bne.n	800cf2c <prv_unsigned_long_int_to_str+0x4c>
 800cf48:	2301      	movs	r3, #1
 800cf4a:	617b      	str	r3, [r7, #20]
 800cf4c:	e007      	b.n	800cf5e <prv_unsigned_long_int_to_str+0x7e>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf54:	461a      	mov	r2, r3
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	fb02 f303 	mul.w	r3, r2, r3
 800cf5c:	617b      	str	r3, [r7, #20]
 800cf5e:	683a      	ldr	r2, [r7, #0]
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf66:	687a      	ldr	r2, [r7, #4]
 800cf68:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d2ee      	bcs.n	800cf4e <prv_unsigned_long_int_to_str+0x6e>
 800cf70:	7cfb      	ldrb	r3, [r7, #19]
 800cf72:	4619      	mov	r1, r3
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f7ff fda3 	bl	800cac0 <prv_out_str_before>
 800cf7a:	e02e      	b.n	800cfda <prv_unsigned_long_int_to_str+0xfa>
 800cf7c:	683a      	ldr	r2, [r7, #0]
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf84:	60fb      	str	r3, [r7, #12]
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	697a      	ldr	r2, [r7, #20]
 800cf8a:	fbb3 f2f2 	udiv	r2, r3, r2
 800cf8e:	6979      	ldr	r1, [r7, #20]
 800cf90:	fb01 f202 	mul.w	r2, r1, r2
 800cf94:	1a9b      	subs	r3, r3, r2
 800cf96:	603b      	str	r3, [r7, #0]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfa6:	617b      	str	r3, [r7, #20]
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	b2da      	uxtb	r2, r3
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2b09      	cmp	r3, #9
 800cfb0:	d90a      	bls.n	800cfc8 <prv_unsigned_long_int_to_str+0xe8>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	7f5b      	ldrb	r3, [r3, #29]
 800cfb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d001      	beq.n	800cfc4 <prv_unsigned_long_int_to_str+0xe4>
 800cfc0:	2337      	movs	r3, #55	; 0x37
 800cfc2:	e002      	b.n	800cfca <prv_unsigned_long_int_to_str+0xea>
 800cfc4:	2357      	movs	r3, #87	; 0x57
 800cfc6:	e000      	b.n	800cfca <prv_unsigned_long_int_to_str+0xea>
 800cfc8:	2330      	movs	r3, #48	; 0x30
 800cfca:	4413      	add	r3, r2
 800cfcc:	72fb      	strb	r3, [r7, #11]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	695b      	ldr	r3, [r3, #20]
 800cfd2:	7afa      	ldrb	r2, [r7, #11]
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	4798      	blx	r3
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d1cd      	bne.n	800cf7c <prv_unsigned_long_int_to_str+0x9c>
 800cfe0:	7cfb      	ldrb	r3, [r7, #19]
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f7ff fe99 	bl	800cd1c <prv_out_str_after>
    return 1;
 800cfea:	2301      	movs	r3, #1
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3718      	adds	r7, #24
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <prv_unsigned_longlong_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_unsigned_longlong_int_to_str(lwprintf_int_t* p, unsigned long long int num) {
 800cff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cff8:	b090      	sub	sp, #64	; 0x40
 800cffa:	af00      	add	r7, sp, #0
 800cffc:	61f8      	str	r0, [r7, #28]
 800cffe:	e9c7 2304 	strd	r2, r3, [r7, #16]
    OUTPUT_ANY_INT_TYPE(unsigned long long int, num);
 800d002:	693a      	ldr	r2, [r7, #16]
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	4313      	orrs	r3, r2
 800d008:	2b00      	cmp	r3, #0
 800d00a:	bf0c      	ite	eq
 800d00c:	2301      	moveq	r3, #1
 800d00e:	2300      	movne	r3, #0
 800d010:	b2d9      	uxtb	r1, r3
 800d012:	69fa      	ldr	r2, [r7, #28]
 800d014:	7f93      	ldrb	r3, [r2, #30]
 800d016:	f361 0300 	bfi	r3, r1, #0, #1
 800d01a:	7793      	strb	r3, [r2, #30]
 800d01c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d020:	4313      	orrs	r3, r2
 800d022:	d10d      	bne.n	800d040 <prv_unsigned_longlong_int_to_str+0x4c>
 800d024:	2101      	movs	r1, #1
 800d026:	69f8      	ldr	r0, [r7, #28]
 800d028:	f7ff fd4a 	bl	800cac0 <prv_out_str_before>
 800d02c:	69fb      	ldr	r3, [r7, #28]
 800d02e:	695b      	ldr	r3, [r3, #20]
 800d030:	2130      	movs	r1, #48	; 0x30
 800d032:	69f8      	ldr	r0, [r7, #28]
 800d034:	4798      	blx	r3
 800d036:	2101      	movs	r1, #1
 800d038:	69f8      	ldr	r0, [r7, #28]
 800d03a:	f7ff fe6f 	bl	800cd1c <prv_out_str_after>
 800d03e:	e0a4      	b.n	800d18a <prv_unsigned_longlong_int_to_str+0x196>
 800d040:	2300      	movs	r3, #0
 800d042:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d046:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d04a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800d04e:	e015      	b.n	800d07c <prv_unsigned_longlong_int_to_str+0x88>
 800d050:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d054:	3301      	adds	r3, #1
 800d056:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d05a:	69fb      	ldr	r3, [r7, #28]
 800d05c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d060:	b2db      	uxtb	r3, r3
 800d062:	2200      	movs	r2, #0
 800d064:	60bb      	str	r3, [r7, #8]
 800d066:	60fa      	str	r2, [r7, #12]
 800d068:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d06c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d070:	f7f3 fdba 	bl	8000be8 <__aeabi_uldivmod>
 800d074:	4602      	mov	r2, r0
 800d076:	460b      	mov	r3, r1
 800d078:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800d07c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d080:	4313      	orrs	r3, r2
 800d082:	d1e5      	bne.n	800d050 <prv_unsigned_longlong_int_to_str+0x5c>
 800d084:	f04f 0201 	mov.w	r2, #1
 800d088:	f04f 0300 	mov.w	r3, #0
 800d08c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800d090:	e016      	b.n	800d0c0 <prv_unsigned_longlong_int_to_str+0xcc>
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d098:	b2db      	uxtb	r3, r3
 800d09a:	2200      	movs	r2, #0
 800d09c:	4698      	mov	r8, r3
 800d09e:	4691      	mov	r9, r2
 800d0a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0a2:	fb08 f203 	mul.w	r2, r8, r3
 800d0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a8:	fb09 f303 	mul.w	r3, r9, r3
 800d0ac:	4413      	add	r3, r2
 800d0ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0b0:	fba2 4508 	umull	r4, r5, r2, r8
 800d0b4:	442b      	add	r3, r5
 800d0b6:	461d      	mov	r5, r3
 800d0b8:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800d0bc:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800d0c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d0c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d0c8:	f7f3 fd8e 	bl	8000be8 <__aeabi_uldivmod>
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	460b      	mov	r3, r1
 800d0d0:	69f9      	ldr	r1, [r7, #28]
 800d0d2:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 800d0d6:	b2c9      	uxtb	r1, r1
 800d0d8:	2000      	movs	r0, #0
 800d0da:	468a      	mov	sl, r1
 800d0dc:	4683      	mov	fp, r0
 800d0de:	4552      	cmp	r2, sl
 800d0e0:	eb73 030b 	sbcs.w	r3, r3, fp
 800d0e4:	d2d5      	bcs.n	800d092 <prv_unsigned_longlong_int_to_str+0x9e>
 800d0e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	69f8      	ldr	r0, [r7, #28]
 800d0ee:	f7ff fce7 	bl	800cac0 <prv_out_str_before>
 800d0f2:	e040      	b.n	800d176 <prv_unsigned_longlong_int_to_str+0x182>
 800d0f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d0f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d0fc:	f7f3 fd74 	bl	8000be8 <__aeabi_uldivmod>
 800d100:	4602      	mov	r2, r0
 800d102:	460b      	mov	r3, r1
 800d104:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800d108:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d10c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d110:	f7f3 fd6a 	bl	8000be8 <__aeabi_uldivmod>
 800d114:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800d118:	69fb      	ldr	r3, [r7, #28]
 800d11a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	2200      	movs	r2, #0
 800d122:	603b      	str	r3, [r7, #0]
 800d124:	607a      	str	r2, [r7, #4]
 800d126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d12a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d12e:	f7f3 fd5b 	bl	8000be8 <__aeabi_uldivmod>
 800d132:	4602      	mov	r2, r0
 800d134:	460b      	mov	r3, r1
 800d136:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800d13a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800d13e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d142:	2a0a      	cmp	r2, #10
 800d144:	f173 0300 	sbcs.w	r3, r3, #0
 800d148:	d30a      	bcc.n	800d160 <prv_unsigned_longlong_int_to_str+0x16c>
 800d14a:	69fb      	ldr	r3, [r7, #28]
 800d14c:	7f5b      	ldrb	r3, [r3, #29]
 800d14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d152:	b2db      	uxtb	r3, r3
 800d154:	2b00      	cmp	r3, #0
 800d156:	d001      	beq.n	800d15c <prv_unsigned_longlong_int_to_str+0x168>
 800d158:	2337      	movs	r3, #55	; 0x37
 800d15a:	e002      	b.n	800d162 <prv_unsigned_longlong_int_to_str+0x16e>
 800d15c:	2357      	movs	r3, #87	; 0x57
 800d15e:	e000      	b.n	800d162 <prv_unsigned_longlong_int_to_str+0x16e>
 800d160:	2330      	movs	r3, #48	; 0x30
 800d162:	440b      	add	r3, r1
 800d164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d168:	69fb      	ldr	r3, [r7, #28]
 800d16a:	695b      	ldr	r3, [r3, #20]
 800d16c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d170:	4611      	mov	r1, r2
 800d172:	69f8      	ldr	r0, [r7, #28]
 800d174:	4798      	blx	r3
 800d176:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d17a:	4313      	orrs	r3, r2
 800d17c:	d1ba      	bne.n	800d0f4 <prv_unsigned_longlong_int_to_str+0x100>
 800d17e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d182:	4619      	mov	r1, r3
 800d184:	69f8      	ldr	r0, [r7, #28]
 800d186:	f7ff fdc9 	bl	800cd1c <prv_out_str_after>
    return 1;
 800d18a:	2301      	movs	r3, #1
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3740      	adds	r7, #64	; 0x40
 800d190:	46bd      	mov	sp, r7
 800d192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d196 <prv_sizet_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_sizet_to_str(lwprintf_int_t* p, size_t num) {
 800d196:	b580      	push	{r7, lr}
 800d198:	b086      	sub	sp, #24
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	6078      	str	r0, [r7, #4]
 800d19e:	6039      	str	r1, [r7, #0]
    OUTPUT_ANY_INT_TYPE(size_t, num);
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	bf0c      	ite	eq
 800d1a6:	2301      	moveq	r3, #1
 800d1a8:	2300      	movne	r3, #0
 800d1aa:	b2d9      	uxtb	r1, r3
 800d1ac:	687a      	ldr	r2, [r7, #4]
 800d1ae:	7f93      	ldrb	r3, [r2, #30]
 800d1b0:	f361 0300 	bfi	r3, r1, #0, #1
 800d1b4:	7793      	strb	r3, [r2, #30]
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d10d      	bne.n	800d1d8 <prv_sizet_to_str+0x42>
 800d1bc:	2101      	movs	r1, #1
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f7ff fc7e 	bl	800cac0 <prv_out_str_before>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	695b      	ldr	r3, [r3, #20]
 800d1c8:	2130      	movs	r1, #48	; 0x30
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	4798      	blx	r3
 800d1ce:	2101      	movs	r1, #1
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f7ff fda3 	bl	800cd1c <prv_out_str_after>
 800d1d6:	e063      	b.n	800d2a0 <prv_sizet_to_str+0x10a>
 800d1d8:	2300      	movs	r3, #0
 800d1da:	74fb      	strb	r3, [r7, #19]
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	617b      	str	r3, [r7, #20]
 800d1e0:	e00a      	b.n	800d1f8 <prv_sizet_to_str+0x62>
 800d1e2:	7cfb      	ldrb	r3, [r7, #19]
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	74fb      	strb	r3, [r7, #19]
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1f6:	617b      	str	r3, [r7, #20]
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d1f1      	bne.n	800d1e2 <prv_sizet_to_str+0x4c>
 800d1fe:	2301      	movs	r3, #1
 800d200:	617b      	str	r3, [r7, #20]
 800d202:	e007      	b.n	800d214 <prv_sizet_to_str+0x7e>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d20a:	461a      	mov	r2, r3
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	fb02 f303 	mul.w	r3, r2, r3
 800d212:	617b      	str	r3, [r7, #20]
 800d214:	683a      	ldr	r2, [r7, #0]
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	fbb2 f3f3 	udiv	r3, r2, r3
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800d222:	4293      	cmp	r3, r2
 800d224:	d2ee      	bcs.n	800d204 <prv_sizet_to_str+0x6e>
 800d226:	7cfb      	ldrb	r3, [r7, #19]
 800d228:	4619      	mov	r1, r3
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f7ff fc48 	bl	800cac0 <prv_out_str_before>
 800d230:	e02e      	b.n	800d290 <prv_sizet_to_str+0xfa>
 800d232:	683a      	ldr	r2, [r7, #0]
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	fbb2 f3f3 	udiv	r3, r2, r3
 800d23a:	60fb      	str	r3, [r7, #12]
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	697a      	ldr	r2, [r7, #20]
 800d240:	fbb3 f2f2 	udiv	r2, r3, r2
 800d244:	6979      	ldr	r1, [r7, #20]
 800d246:	fb01 f202 	mul.w	r2, r1, r2
 800d24a:	1a9b      	subs	r3, r3, r2
 800d24c:	603b      	str	r3, [r7, #0]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d254:	461a      	mov	r2, r3
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	fbb3 f3f2 	udiv	r3, r3, r2
 800d25c:	617b      	str	r3, [r7, #20]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	b2da      	uxtb	r2, r3
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2b09      	cmp	r3, #9
 800d266:	d90a      	bls.n	800d27e <prv_sizet_to_str+0xe8>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	7f5b      	ldrb	r3, [r3, #29]
 800d26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d270:	b2db      	uxtb	r3, r3
 800d272:	2b00      	cmp	r3, #0
 800d274:	d001      	beq.n	800d27a <prv_sizet_to_str+0xe4>
 800d276:	2337      	movs	r3, #55	; 0x37
 800d278:	e002      	b.n	800d280 <prv_sizet_to_str+0xea>
 800d27a:	2357      	movs	r3, #87	; 0x57
 800d27c:	e000      	b.n	800d280 <prv_sizet_to_str+0xea>
 800d27e:	2330      	movs	r3, #48	; 0x30
 800d280:	4413      	add	r3, r2
 800d282:	72fb      	strb	r3, [r7, #11]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	695b      	ldr	r3, [r3, #20]
 800d288:	7afa      	ldrb	r2, [r7, #11]
 800d28a:	4611      	mov	r1, r2
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	4798      	blx	r3
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d1cd      	bne.n	800d232 <prv_sizet_to_str+0x9c>
 800d296:	7cfb      	ldrb	r3, [r7, #19]
 800d298:	4619      	mov	r1, r3
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f7ff fd3e 	bl	800cd1c <prv_out_str_after>
    return 1;
 800d2a0:	2301      	movs	r3, #1
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3718      	adds	r7, #24
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <prv_umaxt_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_umaxt_to_str(lwprintf_int_t* p, uintmax_t num) {
 800d2aa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d2ae:	b090      	sub	sp, #64	; 0x40
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	61f8      	str	r0, [r7, #28]
 800d2b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    OUTPUT_ANY_INT_TYPE(uintmax_t, num);
 800d2b8:	693a      	ldr	r2, [r7, #16]
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	bf0c      	ite	eq
 800d2c2:	2301      	moveq	r3, #1
 800d2c4:	2300      	movne	r3, #0
 800d2c6:	b2d9      	uxtb	r1, r3
 800d2c8:	69fa      	ldr	r2, [r7, #28]
 800d2ca:	7f93      	ldrb	r3, [r2, #30]
 800d2cc:	f361 0300 	bfi	r3, r1, #0, #1
 800d2d0:	7793      	strb	r3, [r2, #30]
 800d2d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	d10d      	bne.n	800d2f6 <prv_umaxt_to_str+0x4c>
 800d2da:	2101      	movs	r1, #1
 800d2dc:	69f8      	ldr	r0, [r7, #28]
 800d2de:	f7ff fbef 	bl	800cac0 <prv_out_str_before>
 800d2e2:	69fb      	ldr	r3, [r7, #28]
 800d2e4:	695b      	ldr	r3, [r3, #20]
 800d2e6:	2130      	movs	r1, #48	; 0x30
 800d2e8:	69f8      	ldr	r0, [r7, #28]
 800d2ea:	4798      	blx	r3
 800d2ec:	2101      	movs	r1, #1
 800d2ee:	69f8      	ldr	r0, [r7, #28]
 800d2f0:	f7ff fd14 	bl	800cd1c <prv_out_str_after>
 800d2f4:	e0a4      	b.n	800d440 <prv_umaxt_to_str+0x196>
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d2fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d300:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800d304:	e015      	b.n	800d332 <prv_umaxt_to_str+0x88>
 800d306:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d30a:	3301      	adds	r3, #1
 800d30c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d310:	69fb      	ldr	r3, [r7, #28]
 800d312:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d316:	b2db      	uxtb	r3, r3
 800d318:	2200      	movs	r2, #0
 800d31a:	60bb      	str	r3, [r7, #8]
 800d31c:	60fa      	str	r2, [r7, #12]
 800d31e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d322:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d326:	f7f3 fc5f 	bl	8000be8 <__aeabi_uldivmod>
 800d32a:	4602      	mov	r2, r0
 800d32c:	460b      	mov	r3, r1
 800d32e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800d332:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d336:	4313      	orrs	r3, r2
 800d338:	d1e5      	bne.n	800d306 <prv_umaxt_to_str+0x5c>
 800d33a:	f04f 0201 	mov.w	r2, #1
 800d33e:	f04f 0300 	mov.w	r3, #0
 800d342:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800d346:	e016      	b.n	800d376 <prv_umaxt_to_str+0xcc>
 800d348:	69fb      	ldr	r3, [r7, #28]
 800d34a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	2200      	movs	r2, #0
 800d352:	4698      	mov	r8, r3
 800d354:	4691      	mov	r9, r2
 800d356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d358:	fb08 f203 	mul.w	r2, r8, r3
 800d35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35e:	fb09 f303 	mul.w	r3, r9, r3
 800d362:	4413      	add	r3, r2
 800d364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d366:	fba2 4508 	umull	r4, r5, r2, r8
 800d36a:	442b      	add	r3, r5
 800d36c:	461d      	mov	r5, r3
 800d36e:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800d372:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800d376:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d37a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d37e:	f7f3 fc33 	bl	8000be8 <__aeabi_uldivmod>
 800d382:	4602      	mov	r2, r0
 800d384:	460b      	mov	r3, r1
 800d386:	69f9      	ldr	r1, [r7, #28]
 800d388:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 800d38c:	b2c9      	uxtb	r1, r1
 800d38e:	2000      	movs	r0, #0
 800d390:	468a      	mov	sl, r1
 800d392:	4683      	mov	fp, r0
 800d394:	4552      	cmp	r2, sl
 800d396:	eb73 030b 	sbcs.w	r3, r3, fp
 800d39a:	d2d5      	bcs.n	800d348 <prv_umaxt_to_str+0x9e>
 800d39c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	69f8      	ldr	r0, [r7, #28]
 800d3a4:	f7ff fb8c 	bl	800cac0 <prv_out_str_before>
 800d3a8:	e040      	b.n	800d42c <prv_umaxt_to_str+0x182>
 800d3aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d3ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d3b2:	f7f3 fc19 	bl	8000be8 <__aeabi_uldivmod>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800d3be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d3c2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d3c6:	f7f3 fc0f 	bl	8000be8 <__aeabi_uldivmod>
 800d3ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800d3ce:	69fb      	ldr	r3, [r7, #28]
 800d3d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	603b      	str	r3, [r7, #0]
 800d3da:	607a      	str	r2, [r7, #4]
 800d3dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d3e4:	f7f3 fc00 	bl	8000be8 <__aeabi_uldivmod>
 800d3e8:	4602      	mov	r2, r0
 800d3ea:	460b      	mov	r3, r1
 800d3ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800d3f0:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800d3f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d3f8:	2a0a      	cmp	r2, #10
 800d3fa:	f173 0300 	sbcs.w	r3, r3, #0
 800d3fe:	d30a      	bcc.n	800d416 <prv_umaxt_to_str+0x16c>
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	7f5b      	ldrb	r3, [r3, #29]
 800d404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d408:	b2db      	uxtb	r3, r3
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d001      	beq.n	800d412 <prv_umaxt_to_str+0x168>
 800d40e:	2337      	movs	r3, #55	; 0x37
 800d410:	e002      	b.n	800d418 <prv_umaxt_to_str+0x16e>
 800d412:	2357      	movs	r3, #87	; 0x57
 800d414:	e000      	b.n	800d418 <prv_umaxt_to_str+0x16e>
 800d416:	2330      	movs	r3, #48	; 0x30
 800d418:	440b      	add	r3, r1
 800d41a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d41e:	69fb      	ldr	r3, [r7, #28]
 800d420:	695b      	ldr	r3, [r3, #20]
 800d422:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d426:	4611      	mov	r1, r2
 800d428:	69f8      	ldr	r0, [r7, #28]
 800d42a:	4798      	blx	r3
 800d42c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d430:	4313      	orrs	r3, r2
 800d432:	d1ba      	bne.n	800d3aa <prv_umaxt_to_str+0x100>
 800d434:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d438:	4619      	mov	r1, r3
 800d43a:	69f8      	ldr	r0, [r7, #28]
 800d43c:	f7ff fc6e 	bl	800cd1c <prv_out_str_after>
    return 1;
 800d440:	2301      	movs	r3, #1
}
 800d442:	4618      	mov	r0, r3
 800d444:	3740      	adds	r7, #64	; 0x40
 800d446:	46bd      	mov	sp, r7
 800d448:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d44c <prv_signed_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_signed_int_to_str(lwprintf_int_t* p, signed int num) {
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b082      	sub	sp, #8
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	6039      	str	r1, [r7, #0]
    SIGNED_CHECK_NEGATIVE(p, num);
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	da07      	bge.n	800d46c <prv_signed_int_to_str+0x20>
 800d45c:	687a      	ldr	r2, [r7, #4]
 800d45e:	7f53      	ldrb	r3, [r2, #29]
 800d460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d464:	7753      	strb	r3, [r2, #29]
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	425b      	negs	r3, r3
 800d46a:	603b      	str	r3, [r7, #0]
    return prv_unsigned_int_to_str(p, num);
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	4619      	mov	r1, r3
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f7ff fcab 	bl	800cdcc <prv_unsigned_int_to_str>
 800d476:	4603      	mov	r3, r0
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3708      	adds	r7, #8
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <prv_signed_long_int_to_str>:
 * \param[in,out]   p: LwPRINTF instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_signed_long_int_to_str(lwprintf_int_t* p, signed long int num) {
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
    SIGNED_CHECK_NEGATIVE(p, num);
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	da07      	bge.n	800d4a0 <prv_signed_long_int_to_str+0x20>
 800d490:	687a      	ldr	r2, [r7, #4]
 800d492:	7f53      	ldrb	r3, [r2, #29]
 800d494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d498:	7753      	strb	r3, [r2, #29]
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	425b      	negs	r3, r3
 800d49e:	603b      	str	r3, [r7, #0]
    return prv_unsigned_long_int_to_str(p, num);
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f7ff fd1b 	bl	800cee0 <prv_unsigned_long_int_to_str>
 800d4aa:	4603      	mov	r3, r0
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3708      	adds	r7, #8
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <prv_signed_longlong_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_signed_longlong_int_to_str(lwprintf_int_t* p, signed long long int num) {
 800d4b4:	b5b0      	push	{r4, r5, r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	e9c7 2300 	strd	r2, r3, [r7]
    SIGNED_CHECK_NEGATIVE(p, num);
 800d4c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	da0c      	bge.n	800d4e2 <prv_signed_longlong_int_to_str+0x2e>
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	7f53      	ldrb	r3, [r2, #29]
 800d4cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4d0:	7753      	strb	r3, [r2, #29]
 800d4d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4d6:	2100      	movs	r1, #0
 800d4d8:	4254      	negs	r4, r2
 800d4da:	eb61 0503 	sbc.w	r5, r1, r3
 800d4de:	e9c7 4500 	strd	r4, r5, [r7]
    return prv_unsigned_longlong_int_to_str(p, num);
 800d4e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f7ff fd84 	bl	800cff4 <prv_unsigned_longlong_int_to_str>
 800d4ec:	4603      	mov	r3, r0
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3710      	adds	r7, #16
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d4f8 <prv_format>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       arg: Variable parameters list
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_format(lwprintf_int_t* p, va_list arg) {
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b08a      	sub	sp, #40	; 0x28
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
    uint8_t detected = 0;
 800d502:	2300      	movs	r3, #0
 800d504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    const char* fmt = p->fmt;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	60fb      	str	r3, [r7, #12]

#if LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT
    if (IS_PRINT_MODE(p) &&                             /* OS protection only for print */
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	695b      	ldr	r3, [r3, #20]
 800d512:	4ab1      	ldr	r2, [pc, #708]	; (800d7d8 <prv_format+0x2e0>)
 800d514:	4293      	cmp	r3, r2
 800d516:	f040 83b7 	bne.w	800dc88 <prv_format+0x790>
        (!lwprintf_sys_mutex_isvalid(&p->lw->mutex)     /* Invalid mutex handle */
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	3304      	adds	r3, #4
 800d520:	4618      	mov	r0, r3
 800d522:	f000 fc55 	bl	800ddd0 <lwprintf_sys_mutex_isvalid>
 800d526:	4603      	mov	r3, r0
    if (IS_PRINT_MODE(p) &&                             /* OS protection only for print */
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d009      	beq.n	800d540 <prv_format+0x48>
         || !lwprintf_sys_mutex_wait(&p->lw->mutex))) { /* Cannot acquire mutex */
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	3304      	adds	r3, #4
 800d532:	4618      	mov	r0, r3
 800d534:	f000 fc5d 	bl	800ddf2 <lwprintf_sys_mutex_wait>
 800d538:	4603      	mov	r3, r0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	f040 83a4 	bne.w	800dc88 <prv_format+0x790>
        return 0;
 800d540:	2300      	movs	r3, #0
 800d542:	e3bc      	b.n	800dcbe <prv_format+0x7c6>
    }
#endif /* LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT */

    while (fmt != NULL && *fmt != '\0') {
        /* Check if we should stop processing */
        if (p->is_print_cancelled) {
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	7e1b      	ldrb	r3, [r3, #24]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	f040 83a6 	bne.w	800dc9a <prv_format+0x7a2>
            break;
        }

        /* Detect beginning */
        if (*fmt != '%') {
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	2b25      	cmp	r3, #37	; 0x25
 800d554:	d00a      	beq.n	800d56c <prv_format+0x74>
            p->out_fn(p, *fmt); /* Output character */
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	695b      	ldr	r3, [r3, #20]
 800d55a:	68fa      	ldr	r2, [r7, #12]
 800d55c:	7812      	ldrb	r2, [r2, #0]
 800d55e:	4611      	mov	r1, r2
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	4798      	blx	r3
            ++fmt;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	3301      	adds	r3, #1
 800d568:	60fb      	str	r3, [r7, #12]
            continue;
 800d56a:	e38d      	b.n	800dc88 <prv_format+0x790>
        }
        ++fmt;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	3301      	adds	r3, #1
 800d570:	60fb      	str	r3, [r7, #12]
        memset(&p->m, 0x00, sizeof(p->m)); /* Reset structure */
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	331c      	adds	r3, #28
 800d576:	2210      	movs	r2, #16
 800d578:	2100      	movs	r1, #0
 800d57a:	4618      	mov	r0, r3
 800d57c:	f002 fe06 	bl	801018c <memset>
        /* %[flags][width][.precision][length]type */
        /* Go to https://docs.majerle.eu for more info about supported features */

        /* Check [flags] */
        /* It can have multiple flags in any order */
        detected = 1;
 800d580:	2301      	movs	r3, #1
 800d582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        do {
            switch (*fmt) {
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	3b20      	subs	r3, #32
 800d58c:	2b10      	cmp	r3, #16
 800d58e:	d849      	bhi.n	800d624 <prv_format+0x12c>
 800d590:	a201      	add	r2, pc, #4	; (adr r2, 800d598 <prv_format+0xa0>)
 800d592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d596:	bf00      	nop
 800d598:	0800d5f5 	.word	0x0800d5f5
 800d59c:	0800d625 	.word	0x0800d625
 800d5a0:	0800d625 	.word	0x0800d625
 800d5a4:	0800d619 	.word	0x0800d619
 800d5a8:	0800d625 	.word	0x0800d625
 800d5ac:	0800d625 	.word	0x0800d625
 800d5b0:	0800d625 	.word	0x0800d625
 800d5b4:	0800d60d 	.word	0x0800d60d
 800d5b8:	0800d625 	.word	0x0800d625
 800d5bc:	0800d625 	.word	0x0800d625
 800d5c0:	0800d625 	.word	0x0800d625
 800d5c4:	0800d5e9 	.word	0x0800d5e9
 800d5c8:	0800d625 	.word	0x0800d625
 800d5cc:	0800d5dd 	.word	0x0800d5dd
 800d5d0:	0800d625 	.word	0x0800d625
 800d5d4:	0800d625 	.word	0x0800d625
 800d5d8:	0800d601 	.word	0x0800d601
                case '-':
                    p->m.flags.left_align = 1;
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	7f13      	ldrb	r3, [r2, #28]
 800d5e0:	f043 0301 	orr.w	r3, r3, #1
 800d5e4:	7713      	strb	r3, [r2, #28]
                    break;
 800d5e6:	e021      	b.n	800d62c <prv_format+0x134>
                case '+':
                    p->m.flags.plus = 1;
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	7f13      	ldrb	r3, [r2, #28]
 800d5ec:	f043 0302 	orr.w	r3, r3, #2
 800d5f0:	7713      	strb	r3, [r2, #28]
                    break;
 800d5f2:	e01b      	b.n	800d62c <prv_format+0x134>
                case ' ':
                    p->m.flags.space = 1;
 800d5f4:	687a      	ldr	r2, [r7, #4]
 800d5f6:	7f13      	ldrb	r3, [r2, #28]
 800d5f8:	f043 0304 	orr.w	r3, r3, #4
 800d5fc:	7713      	strb	r3, [r2, #28]
                    break;
 800d5fe:	e015      	b.n	800d62c <prv_format+0x134>
                case '0':
                    p->m.flags.zero = 1;
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	7f13      	ldrb	r3, [r2, #28]
 800d604:	f043 0308 	orr.w	r3, r3, #8
 800d608:	7713      	strb	r3, [r2, #28]
                    break;
 800d60a:	e00f      	b.n	800d62c <prv_format+0x134>
                case '\'':
                    p->m.flags.thousands = 1;
 800d60c:	687a      	ldr	r2, [r7, #4]
 800d60e:	7f13      	ldrb	r3, [r2, #28]
 800d610:	f043 0310 	orr.w	r3, r3, #16
 800d614:	7713      	strb	r3, [r2, #28]
                    break;
 800d616:	e009      	b.n	800d62c <prv_format+0x134>
                case '#':
                    p->m.flags.alt = 1;
 800d618:	687a      	ldr	r2, [r7, #4]
 800d61a:	7f13      	ldrb	r3, [r2, #28]
 800d61c:	f043 0320 	orr.w	r3, r3, #32
 800d620:	7713      	strb	r3, [r2, #28]
                    break;
 800d622:	e003      	b.n	800d62c <prv_format+0x134>
                default:
                    detected = 0;
 800d624:	2300      	movs	r3, #0
 800d626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    break;
 800d62a:	bf00      	nop
            }
            if (detected) {
 800d62c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d630:	2b00      	cmp	r3, #0
 800d632:	d002      	beq.n	800d63a <prv_format+0x142>
                ++fmt;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	3301      	adds	r3, #1
 800d638:	60fb      	str	r3, [r7, #12]
            }
        } while (detected);
 800d63a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d1a1      	bne.n	800d586 <prv_format+0x8e>

        /* Check [width] */
        p->m.width = 0;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2200      	movs	r2, #0
 800d646:	625a      	str	r2, [r3, #36]	; 0x24
        if (CHARISNUM(*fmt)) { /* Fixed width check */
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	2b2f      	cmp	r3, #47	; 0x2f
 800d64e:	d90c      	bls.n	800d66a <prv_format+0x172>
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	2b39      	cmp	r3, #57	; 0x39
 800d656:	d808      	bhi.n	800d66a <prv_format+0x172>
            /* If number is negative, it has been captured from previous step (left align) */
            p->m.width = prv_parse_num(&fmt); /* Number from string directly */
 800d658:	f107 030c 	add.w	r3, r7, #12
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7ff fa05 	bl	800ca6c <prv_parse_num>
 800d662:	4602      	mov	r2, r0
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	625a      	str	r2, [r3, #36]	; 0x24
 800d668:	e01b      	b.n	800d6a2 <prv_format+0x1aa>
        } else if (*fmt == '*') {             /* Or variable check */
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	2b2a      	cmp	r3, #42	; 0x2a
 800d670:	d117      	bne.n	800d6a2 <prv_format+0x1aa>
            const int w = (int)va_arg(arg, int);
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	1d1a      	adds	r2, r3, #4
 800d676:	603a      	str	r2, [r7, #0]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	61fb      	str	r3, [r7, #28]
            if (w < 0) {
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	da09      	bge.n	800d696 <prv_format+0x19e>
                p->m.flags.left_align = 1; /* Negative width means left aligned */
 800d682:	687a      	ldr	r2, [r7, #4]
 800d684:	7f13      	ldrb	r3, [r2, #28]
 800d686:	f043 0301 	orr.w	r3, r3, #1
 800d68a:	7713      	strb	r3, [r2, #28]
                p->m.width = -w;
 800d68c:	69fb      	ldr	r3, [r7, #28]
 800d68e:	425a      	negs	r2, r3
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	625a      	str	r2, [r3, #36]	; 0x24
 800d694:	e002      	b.n	800d69c <prv_format+0x1a4>
            } else {
                p->m.width = w;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	69fa      	ldr	r2, [r7, #28]
 800d69a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            ++fmt;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	3301      	adds	r3, #1
 800d6a0:	60fb      	str	r3, [r7, #12]
        }

        /* Check [.precision] */
        p->m.precision = 0;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	621a      	str	r2, [r3, #32]
        if (*fmt == '.') { /* Precision flag is detected */
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	2b2e      	cmp	r3, #46	; 0x2e
 800d6ae:	d129      	bne.n	800d704 <prv_format+0x20c>
            p->m.flags.precision = 1;
 800d6b0:	687a      	ldr	r2, [r7, #4]
 800d6b2:	7f13      	ldrb	r3, [r2, #28]
 800d6b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6b8:	7713      	strb	r3, [r2, #28]
            if (*++fmt == '*') { /* Variable check */
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	3301      	adds	r3, #1
 800d6be:	60fb      	str	r3, [r7, #12]
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	2b2a      	cmp	r3, #42	; 0x2a
 800d6c6:	d10d      	bne.n	800d6e4 <prv_format+0x1ec>
                const int pr = (int)va_arg(arg, int);
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	1d1a      	adds	r2, r3, #4
 800d6cc:	603a      	str	r2, [r7, #0]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	61bb      	str	r3, [r7, #24]
                p->m.precision = pr > 0 ? pr : 0;
 800d6d2:	69bb      	ldr	r3, [r7, #24]
 800d6d4:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	621a      	str	r2, [r3, #32]
                ++fmt;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	3301      	adds	r3, #1
 800d6e0:	60fb      	str	r3, [r7, #12]
 800d6e2:	e00f      	b.n	800d704 <prv_format+0x20c>
            } else if (CHARISNUM(*fmt)) { /* Directly in the string */
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	2b2f      	cmp	r3, #47	; 0x2f
 800d6ea:	d90b      	bls.n	800d704 <prv_format+0x20c>
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	2b39      	cmp	r3, #57	; 0x39
 800d6f2:	d807      	bhi.n	800d704 <prv_format+0x20c>
                p->m.precision = prv_parse_num(&fmt);
 800d6f4:	f107 030c 	add.w	r3, r7, #12
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7ff f9b7 	bl	800ca6c <prv_parse_num>
 800d6fe:	4602      	mov	r2, r0
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	621a      	str	r2, [r3, #32]
            }
        }

        /* Check [length] */
        detected = 1;
 800d704:	2301      	movs	r3, #1
 800d706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        switch (*fmt) {
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	3b4c      	subs	r3, #76	; 0x4c
 800d710:	2b2e      	cmp	r3, #46	; 0x2e
 800d712:	f200 80a3 	bhi.w	800d85c <prv_format+0x364>
 800d716:	a201      	add	r2, pc, #4	; (adr r2, 800d71c <prv_format+0x224>)
 800d718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d71c:	0800d865 	.word	0x0800d865
 800d720:	0800d85d 	.word	0x0800d85d
 800d724:	0800d85d 	.word	0x0800d85d
 800d728:	0800d85d 	.word	0x0800d85d
 800d72c:	0800d85d 	.word	0x0800d85d
 800d730:	0800d85d 	.word	0x0800d85d
 800d734:	0800d85d 	.word	0x0800d85d
 800d738:	0800d85d 	.word	0x0800d85d
 800d73c:	0800d85d 	.word	0x0800d85d
 800d740:	0800d85d 	.word	0x0800d85d
 800d744:	0800d85d 	.word	0x0800d85d
 800d748:	0800d85d 	.word	0x0800d85d
 800d74c:	0800d85d 	.word	0x0800d85d
 800d750:	0800d85d 	.word	0x0800d85d
 800d754:	0800d85d 	.word	0x0800d85d
 800d758:	0800d85d 	.word	0x0800d85d
 800d75c:	0800d85d 	.word	0x0800d85d
 800d760:	0800d85d 	.word	0x0800d85d
 800d764:	0800d85d 	.word	0x0800d85d
 800d768:	0800d85d 	.word	0x0800d85d
 800d76c:	0800d85d 	.word	0x0800d85d
 800d770:	0800d85d 	.word	0x0800d85d
 800d774:	0800d85d 	.word	0x0800d85d
 800d778:	0800d85d 	.word	0x0800d85d
 800d77c:	0800d85d 	.word	0x0800d85d
 800d780:	0800d85d 	.word	0x0800d85d
 800d784:	0800d85d 	.word	0x0800d85d
 800d788:	0800d85d 	.word	0x0800d85d
 800d78c:	0800d7dd 	.word	0x0800d7dd
 800d790:	0800d85d 	.word	0x0800d85d
 800d794:	0800d84b 	.word	0x0800d84b
 800d798:	0800d85d 	.word	0x0800d85d
 800d79c:	0800d80b 	.word	0x0800d80b
 800d7a0:	0800d85d 	.word	0x0800d85d
 800d7a4:	0800d85d 	.word	0x0800d85d
 800d7a8:	0800d85d 	.word	0x0800d85d
 800d7ac:	0800d85d 	.word	0x0800d85d
 800d7b0:	0800d85d 	.word	0x0800d85d
 800d7b4:	0800d85d 	.word	0x0800d85d
 800d7b8:	0800d85d 	.word	0x0800d85d
 800d7bc:	0800d865 	.word	0x0800d865
 800d7c0:	0800d85d 	.word	0x0800d85d
 800d7c4:	0800d85d 	.word	0x0800d85d
 800d7c8:	0800d85d 	.word	0x0800d85d
 800d7cc:	0800d85d 	.word	0x0800d85d
 800d7d0:	0800d85d 	.word	0x0800d85d
 800d7d4:	0800d839 	.word	0x0800d839
 800d7d8:	0800ca17 	.word	0x0800ca17
            case 'h':
                p->m.flags.char_short = 1;     /* Single h detected */
 800d7dc:	687a      	ldr	r2, [r7, #4]
 800d7de:	7f53      	ldrb	r3, [r2, #29]
 800d7e0:	2101      	movs	r1, #1
 800d7e2:	f361 0383 	bfi	r3, r1, #2, #2
 800d7e6:	7753      	strb	r3, [r2, #29]
                if (*++fmt == 'h') {           /* Does it follow by another h? */
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	60fb      	str	r3, [r7, #12]
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	2b68      	cmp	r3, #104	; 0x68
 800d7f4:	d138      	bne.n	800d868 <prv_format+0x370>
                    p->m.flags.char_short = 2; /* Second h detected */
 800d7f6:	687a      	ldr	r2, [r7, #4]
 800d7f8:	7f53      	ldrb	r3, [r2, #29]
 800d7fa:	2102      	movs	r1, #2
 800d7fc:	f361 0383 	bfi	r3, r1, #2, #2
 800d800:	7753      	strb	r3, [r2, #29]
                    ++fmt;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	3301      	adds	r3, #1
 800d806:	60fb      	str	r3, [r7, #12]
                }
                break;
 800d808:	e02e      	b.n	800d868 <prv_format+0x370>
            case 'l':
                p->m.flags.longlong = 1;     /* Single l detected */
 800d80a:	687a      	ldr	r2, [r7, #4]
 800d80c:	7f53      	ldrb	r3, [r2, #29]
 800d80e:	2101      	movs	r1, #1
 800d810:	f361 0301 	bfi	r3, r1, #0, #2
 800d814:	7753      	strb	r3, [r2, #29]
                if (*++fmt == 'l') {         /* Does it follow by another l? */
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	3301      	adds	r3, #1
 800d81a:	60fb      	str	r3, [r7, #12]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	2b6c      	cmp	r3, #108	; 0x6c
 800d822:	d123      	bne.n	800d86c <prv_format+0x374>
                    p->m.flags.longlong = 2; /* Second l detected */
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	7f53      	ldrb	r3, [r2, #29]
 800d828:	2102      	movs	r1, #2
 800d82a:	f361 0301 	bfi	r3, r1, #0, #2
 800d82e:	7753      	strb	r3, [r2, #29]
                    ++fmt;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	3301      	adds	r3, #1
 800d834:	60fb      	str	r3, [r7, #12]
                }
                break;
 800d836:	e019      	b.n	800d86c <prv_format+0x374>
            case 'L':
                break;
            case 'z':
                p->m.flags.sz_t = 1; /* Size T flag */
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	7f53      	ldrb	r3, [r2, #29]
 800d83c:	f043 0310 	orr.w	r3, r3, #16
 800d840:	7753      	strb	r3, [r2, #29]
                ++fmt;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	3301      	adds	r3, #1
 800d846:	60fb      	str	r3, [r7, #12]
                break;
 800d848:	e011      	b.n	800d86e <prv_format+0x376>
            case 'j':
                p->m.flags.umax_t = 1; /* uintmax_t flag */
 800d84a:	687a      	ldr	r2, [r7, #4]
 800d84c:	7f53      	ldrb	r3, [r2, #29]
 800d84e:	f043 0320 	orr.w	r3, r3, #32
 800d852:	7753      	strb	r3, [r2, #29]
                ++fmt;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	3301      	adds	r3, #1
 800d858:	60fb      	str	r3, [r7, #12]
                break;
 800d85a:	e008      	b.n	800d86e <prv_format+0x376>
            case 't':
                break;
            default:
                detected = 0;
 800d85c:	2300      	movs	r3, #0
 800d85e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d862:	e004      	b.n	800d86e <prv_format+0x376>
                break;
 800d864:	bf00      	nop
 800d866:	e002      	b.n	800d86e <prv_format+0x376>
                break;
 800d868:	bf00      	nop
 800d86a:	e000      	b.n	800d86e <prv_format+0x376>
                break;
 800d86c:	bf00      	nop
        }

        /* Check type */
        p->m.type = *fmt + ((*fmt >= 'A' && *fmt <= 'Z') ? 0x20 : 0x00);
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	68fa      	ldr	r2, [r7, #12]
 800d874:	7812      	ldrb	r2, [r2, #0]
 800d876:	2a40      	cmp	r2, #64	; 0x40
 800d878:	d905      	bls.n	800d886 <prv_format+0x38e>
 800d87a:	68fa      	ldr	r2, [r7, #12]
 800d87c:	7812      	ldrb	r2, [r2, #0]
 800d87e:	2a5a      	cmp	r2, #90	; 0x5a
 800d880:	d801      	bhi.n	800d886 <prv_format+0x38e>
 800d882:	2220      	movs	r2, #32
 800d884:	e000      	b.n	800d888 <prv_format+0x390>
 800d886:	2200      	movs	r2, #0
 800d888:	4413      	add	r3, r2
 800d88a:	b2da      	uxtb	r2, r3
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        if (*fmt >= 'A' && *fmt <= 'Z') {
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	2b40      	cmp	r3, #64	; 0x40
 800d898:	d908      	bls.n	800d8ac <prv_format+0x3b4>
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	781b      	ldrb	r3, [r3, #0]
 800d89e:	2b5a      	cmp	r3, #90	; 0x5a
 800d8a0:	d804      	bhi.n	800d8ac <prv_format+0x3b4>
            p->m.flags.uc = 1;
 800d8a2:	687a      	ldr	r2, [r7, #4]
 800d8a4:	7f53      	ldrb	r3, [r2, #29]
 800d8a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8aa:	7753      	strb	r3, [r2, #29]
        }
        switch (*fmt) {
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	3b25      	subs	r3, #37	; 0x25
 800d8b2:	2b53      	cmp	r3, #83	; 0x53
 800d8b4:	f200 81d7 	bhi.w	800dc66 <prv_format+0x76e>
 800d8b8:	a201      	add	r2, pc, #4	; (adr r2, 800d8c0 <prv_format+0x3c8>)
 800d8ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8be:	bf00      	nop
 800d8c0:	0800dc5b 	.word	0x0800dc5b
 800d8c4:	0800dc67 	.word	0x0800dc67
 800d8c8:	0800dc67 	.word	0x0800dc67
 800d8cc:	0800dc67 	.word	0x0800dc67
 800d8d0:	0800dc67 	.word	0x0800dc67
 800d8d4:	0800dc67 	.word	0x0800dc67
 800d8d8:	0800dc67 	.word	0x0800dc67
 800d8dc:	0800dc67 	.word	0x0800dc67
 800d8e0:	0800dc67 	.word	0x0800dc67
 800d8e4:	0800dc67 	.word	0x0800dc67
 800d8e8:	0800dc67 	.word	0x0800dc67
 800d8ec:	0800dc67 	.word	0x0800dc67
 800d8f0:	0800dc67 	.word	0x0800dc67
 800d8f4:	0800dc67 	.word	0x0800dc67
 800d8f8:	0800dc67 	.word	0x0800dc67
 800d8fc:	0800dc67 	.word	0x0800dc67
 800d900:	0800dc67 	.word	0x0800dc67
 800d904:	0800dc67 	.word	0x0800dc67
 800d908:	0800dc67 	.word	0x0800dc67
 800d90c:	0800dc67 	.word	0x0800dc67
 800d910:	0800dc67 	.word	0x0800dc67
 800d914:	0800dc67 	.word	0x0800dc67
 800d918:	0800dc67 	.word	0x0800dc67
 800d91c:	0800dc67 	.word	0x0800dc67
 800d920:	0800dc67 	.word	0x0800dc67
 800d924:	0800dc67 	.word	0x0800dc67
 800d928:	0800dc67 	.word	0x0800dc67
 800d92c:	0800dc67 	.word	0x0800dc67
 800d930:	0800da11 	.word	0x0800da11
 800d934:	0800dab1 	.word	0x0800dab1
 800d938:	0800dc67 	.word	0x0800dc67
 800d93c:	0800dc67 	.word	0x0800dc67
 800d940:	0800dc67 	.word	0x0800dc67
 800d944:	0800dc67 	.word	0x0800dc67
 800d948:	0800dc67 	.word	0x0800dc67
 800d94c:	0800dc67 	.word	0x0800dc67
 800d950:	0800dc67 	.word	0x0800dc67
 800d954:	0800dc67 	.word	0x0800dc67
 800d958:	0800dc67 	.word	0x0800dc67
 800d95c:	0800dc67 	.word	0x0800dc67
 800d960:	0800dc67 	.word	0x0800dc67
 800d964:	0800dc67 	.word	0x0800dc67
 800d968:	0800dc67 	.word	0x0800dc67
 800d96c:	0800dc67 	.word	0x0800dc67
 800d970:	0800dc67 	.word	0x0800dc67
 800d974:	0800dc67 	.word	0x0800dc67
 800d978:	0800dc67 	.word	0x0800dc67
 800d97c:	0800dc67 	.word	0x0800dc67
 800d980:	0800dc67 	.word	0x0800dc67
 800d984:	0800dc67 	.word	0x0800dc67
 800d988:	0800dc67 	.word	0x0800dc67
 800d98c:	0800dab1 	.word	0x0800dab1
 800d990:	0800dc67 	.word	0x0800dc67
 800d994:	0800dc67 	.word	0x0800dc67
 800d998:	0800dc67 	.word	0x0800dc67
 800d99c:	0800dc67 	.word	0x0800dc67
 800d9a0:	0800dc67 	.word	0x0800dc67
 800d9a4:	0800dc67 	.word	0x0800dc67
 800d9a8:	0800dc67 	.word	0x0800dc67
 800d9ac:	0800dc67 	.word	0x0800dc67
 800d9b0:	0800da11 	.word	0x0800da11
 800d9b4:	0800dab1 	.word	0x0800dab1
 800d9b8:	0800da29 	.word	0x0800da29
 800d9bc:	0800da3f 	.word	0x0800da3f
 800d9c0:	0800dc67 	.word	0x0800dc67
 800d9c4:	0800dc67 	.word	0x0800dc67
 800d9c8:	0800dc67 	.word	0x0800dc67
 800d9cc:	0800dc67 	.word	0x0800dc67
 800d9d0:	0800da3f 	.word	0x0800da3f
 800d9d4:	0800dc67 	.word	0x0800dc67
 800d9d8:	0800dc67 	.word	0x0800dc67
 800d9dc:	0800dc67 	.word	0x0800dc67
 800d9e0:	0800dc67 	.word	0x0800dc67
 800d9e4:	0800dc45 	.word	0x0800dc45
 800d9e8:	0800dab1 	.word	0x0800dab1
 800d9ec:	0800dc67 	.word	0x0800dc67
 800d9f0:	0800dc67 	.word	0x0800dc67
 800d9f4:	0800dc67 	.word	0x0800dc67
 800d9f8:	0800dbff 	.word	0x0800dbff
 800d9fc:	0800dc67 	.word	0x0800dc67
 800da00:	0800dab1 	.word	0x0800dab1
 800da04:	0800dc67 	.word	0x0800dc67
 800da08:	0800dc67 	.word	0x0800dc67
 800da0c:	0800dab1 	.word	0x0800dab1
            case 'a':
            case 'A':
                /* Double in hexadecimal notation */
                (void)va_arg(arg, double);    /* Read argument to ignore it and move to next one */
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	3307      	adds	r3, #7
 800da14:	f023 0307 	bic.w	r3, r3, #7
 800da18:	3308      	adds	r3, #8
 800da1a:	603b      	str	r3, [r7, #0]
                prv_out_str_raw(p, "NaN", 3); /* Print string */
 800da1c:	2203      	movs	r2, #3
 800da1e:	4997      	ldr	r1, [pc, #604]	; (800dc7c <prv_format+0x784>)
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f7ff f99d 	bl	800cd60 <prv_out_str_raw>
                break;
 800da26:	e12c      	b.n	800dc82 <prv_format+0x78a>
            case 'c':
                p->out_fn(p, (char)va_arg(arg, int));
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	695a      	ldr	r2, [r3, #20]
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	1d19      	adds	r1, r3, #4
 800da30:	6039      	str	r1, [r7, #0]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	b2db      	uxtb	r3, r3
 800da36:	4619      	mov	r1, r3
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	4790      	blx	r2
                break;
 800da3c:	e121      	b.n	800dc82 <prv_format+0x78a>
#if LWPRINTF_CFG_SUPPORT_TYPE_INT
            case 'd':
            case 'i': {
                /* Check for different length parameters */
                p->m.base = 10;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	220a      	movs	r2, #10
 800da42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                if (p->m.flags.longlong == 0) {
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	7f5b      	ldrb	r3, [r3, #29]
 800da4a:	f003 0303 	and.w	r3, r3, #3
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	2b00      	cmp	r3, #0
 800da52:	d108      	bne.n	800da66 <prv_format+0x56e>
                    prv_signed_int_to_str(p, (signed int)va_arg(arg, signed int));
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	1d1a      	adds	r2, r3, #4
 800da58:	603a      	str	r2, [r7, #0]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4619      	mov	r1, r3
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f7ff fcf4 	bl	800d44c <prv_signed_int_to_str>
#if LWPRINTF_CFG_SUPPORT_LONG_LONG
                } else if (p->m.flags.longlong == 2) {
                    prv_signed_longlong_int_to_str(p, (signed long long int)va_arg(arg, signed long long int));
#endif /* LWPRINTF_CFG_SUPPORT_LONG_LONG */
                }
                break;
 800da64:	e107      	b.n	800dc76 <prv_format+0x77e>
                } else if (p->m.flags.longlong == 1) {
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	7f5b      	ldrb	r3, [r3, #29]
 800da6a:	f003 0303 	and.w	r3, r3, #3
 800da6e:	b2db      	uxtb	r3, r3
 800da70:	2b01      	cmp	r3, #1
 800da72:	d108      	bne.n	800da86 <prv_format+0x58e>
                    prv_signed_long_int_to_str(p, (signed long int)va_arg(arg, signed long int));
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	1d1a      	adds	r2, r3, #4
 800da78:	603a      	str	r2, [r7, #0]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4619      	mov	r1, r3
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f7ff fcfe 	bl	800d480 <prv_signed_long_int_to_str>
                break;
 800da84:	e0f7      	b.n	800dc76 <prv_format+0x77e>
                } else if (p->m.flags.longlong == 2) {
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	7f5b      	ldrb	r3, [r3, #29]
 800da8a:	f003 0303 	and.w	r3, r3, #3
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	2b02      	cmp	r3, #2
 800da92:	f040 80f0 	bne.w	800dc76 <prv_format+0x77e>
                    prv_signed_longlong_int_to_str(p, (signed long long int)va_arg(arg, signed long long int));
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	3307      	adds	r3, #7
 800da9a:	f023 0307 	bic.w	r3, r3, #7
 800da9e:	f103 0208 	add.w	r2, r3, #8
 800daa2:	603a      	str	r2, [r7, #0]
 800daa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f7ff fd03 	bl	800d4b4 <prv_signed_longlong_int_to_str>
                break;
 800daae:	e0e2      	b.n	800dc76 <prv_format+0x77e>
            case 'B':
            case 'o':
            case 'u':
            case 'x':
            case 'X':
                if (*fmt == 'b' || *fmt == 'B') {
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	2b62      	cmp	r3, #98	; 0x62
 800dab6:	d003      	beq.n	800dac0 <prv_format+0x5c8>
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	2b42      	cmp	r3, #66	; 0x42
 800dabe:	d104      	bne.n	800daca <prv_format+0x5d2>
                    p->m.base = 2;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2202      	movs	r2, #2
 800dac4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800dac8:	e01d      	b.n	800db06 <prv_format+0x60e>
                } else if (*fmt == 'o') {
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	2b6f      	cmp	r3, #111	; 0x6f
 800dad0:	d104      	bne.n	800dadc <prv_format+0x5e4>
                    p->m.base = 8;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2208      	movs	r2, #8
 800dad6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800dada:	e014      	b.n	800db06 <prv_format+0x60e>
                } else if (*fmt == 'u') {
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	2b75      	cmp	r3, #117	; 0x75
 800dae2:	d104      	bne.n	800daee <prv_format+0x5f6>
                    p->m.base = 10;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	220a      	movs	r2, #10
 800dae8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800daec:	e00b      	b.n	800db06 <prv_format+0x60e>
                } else if (*fmt == 'x' || *fmt == 'X') {
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	781b      	ldrb	r3, [r3, #0]
 800daf2:	2b78      	cmp	r3, #120	; 0x78
 800daf4:	d003      	beq.n	800dafe <prv_format+0x606>
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	2b58      	cmp	r3, #88	; 0x58
 800dafc:	d103      	bne.n	800db06 <prv_format+0x60e>
                    p->m.base = 16;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2210      	movs	r2, #16
 800db02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                }
                p->m.flags.space = 0; /* Space flag has no meaning here */
 800db06:	687a      	ldr	r2, [r7, #4]
 800db08:	7f13      	ldrb	r3, [r2, #28]
 800db0a:	f36f 0382 	bfc	r3, #2, #1
 800db0e:	7713      	strb	r3, [r2, #28]

                /* Check for different length parameters */
                if (0) {

                } else if (p->m.flags.sz_t) {
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	7f5b      	ldrb	r3, [r3, #29]
 800db14:	f003 0310 	and.w	r3, r3, #16
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d008      	beq.n	800db30 <prv_format+0x638>
                    prv_sizet_to_str(p, (size_t)va_arg(arg, size_t));
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	1d1a      	adds	r2, r3, #4
 800db22:	603a      	str	r2, [r7, #0]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4619      	mov	r1, r3
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f7ff fb34 	bl	800d196 <prv_sizet_to_str>
#if LWPRINTF_CFG_SUPPORT_LONG_LONG
                } else if (p->m.flags.longlong == 2) {
                    prv_unsigned_longlong_int_to_str(p, (unsigned long long int)va_arg(arg, unsigned long long int));
#endif /* LWPRINTF_CFG_SUPPORT_LONG_LONG */
                }
                break;
 800db2e:	e0a7      	b.n	800dc80 <prv_format+0x788>
                } else if (p->m.flags.umax_t) {
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	7f5b      	ldrb	r3, [r3, #29]
 800db34:	f003 0320 	and.w	r3, r3, #32
 800db38:	b2db      	uxtb	r3, r3
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00c      	beq.n	800db58 <prv_format+0x660>
                    prv_umaxt_to_str(p, (uintmax_t)va_arg(arg, uintmax_t));
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	3307      	adds	r3, #7
 800db42:	f023 0307 	bic.w	r3, r3, #7
 800db46:	f103 0208 	add.w	r2, r3, #8
 800db4a:	603a      	str	r2, [r7, #0]
 800db4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f7ff fbaa 	bl	800d2aa <prv_umaxt_to_str>
                break;
 800db56:	e093      	b.n	800dc80 <prv_format+0x788>
                } else if (p->m.flags.longlong == 0 || p->m.base == 2) {
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	7f5b      	ldrb	r3, [r3, #29]
 800db5c:	f003 0303 	and.w	r3, r3, #3
 800db60:	b2db      	uxtb	r3, r3
 800db62:	2b00      	cmp	r3, #0
 800db64:	d004      	beq.n	800db70 <prv_format+0x678>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db6c:	2b02      	cmp	r3, #2
 800db6e:	d122      	bne.n	800dbb6 <prv_format+0x6be>
                    switch (p->m.flags.char_short) {
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	7f5b      	ldrb	r3, [r3, #29]
 800db74:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	d008      	beq.n	800db90 <prv_format+0x698>
 800db7e:	2b02      	cmp	r3, #2
 800db80:	d10d      	bne.n	800db9e <prv_format+0x6a6>
                            v = (unsigned int)((unsigned char)va_arg(arg, unsigned int));
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	1d1a      	adds	r2, r3, #4
 800db86:	603a      	str	r2, [r7, #0]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	623b      	str	r3, [r7, #32]
                            break;
 800db8e:	e00c      	b.n	800dbaa <prv_format+0x6b2>
                            v = (unsigned int)((unsigned short int)va_arg(arg, unsigned int));
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	1d1a      	adds	r2, r3, #4
 800db94:	603a      	str	r2, [r7, #0]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	b29b      	uxth	r3, r3
 800db9a:	623b      	str	r3, [r7, #32]
                            break;
 800db9c:	e005      	b.n	800dbaa <prv_format+0x6b2>
                            v = (unsigned int)((unsigned int)va_arg(arg, unsigned int));
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	1d1a      	adds	r2, r3, #4
 800dba2:	603a      	str	r2, [r7, #0]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	623b      	str	r3, [r7, #32]
                            break;
 800dba8:	bf00      	nop
                    prv_unsigned_int_to_str(p, v);
 800dbaa:	6a39      	ldr	r1, [r7, #32]
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f7ff f90d 	bl	800cdcc <prv_unsigned_int_to_str>
                } else if (p->m.flags.longlong == 0 || p->m.base == 2) {
 800dbb2:	bf00      	nop
                break;
 800dbb4:	e064      	b.n	800dc80 <prv_format+0x788>
                } else if (p->m.flags.longlong == 1) {
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	7f5b      	ldrb	r3, [r3, #29]
 800dbba:	f003 0303 	and.w	r3, r3, #3
 800dbbe:	b2db      	uxtb	r3, r3
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d108      	bne.n	800dbd6 <prv_format+0x6de>
                    prv_unsigned_long_int_to_str(p, (unsigned long int)va_arg(arg, unsigned long int));
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	1d1a      	adds	r2, r3, #4
 800dbc8:	603a      	str	r2, [r7, #0]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4619      	mov	r1, r3
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7ff f986 	bl	800cee0 <prv_unsigned_long_int_to_str>
                break;
 800dbd4:	e054      	b.n	800dc80 <prv_format+0x788>
                } else if (p->m.flags.longlong == 2) {
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	7f5b      	ldrb	r3, [r3, #29]
 800dbda:	f003 0303 	and.w	r3, r3, #3
 800dbde:	b2db      	uxtb	r3, r3
 800dbe0:	2b02      	cmp	r3, #2
 800dbe2:	d14d      	bne.n	800dc80 <prv_format+0x788>
                    prv_unsigned_longlong_int_to_str(p, (unsigned long long int)va_arg(arg, unsigned long long int));
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	3307      	adds	r3, #7
 800dbe8:	f023 0307 	bic.w	r3, r3, #7
 800dbec:	f103 0208 	add.w	r2, r3, #8
 800dbf0:	603a      	str	r2, [r7, #0]
 800dbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f7ff f9fc 	bl	800cff4 <prv_unsigned_longlong_int_to_str>
                break;
 800dbfc:	e040      	b.n	800dc80 <prv_format+0x788>
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_INT */
#if LWPRINTF_CFG_SUPPORT_TYPE_STRING
            case 's': {
                const char* b = va_arg(arg, const char*);
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	1d1a      	adds	r2, r3, #4
 800dc02:	603a      	str	r2, [r7, #0]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	617b      	str	r3, [r7, #20]
                 * - If precision is given, max len is up to precision value
                 * - if user selects write to buffer, go up to buffer size (-1 actually, but handled by write function)
                 * - Otherwise use max available system length
                 */
                prv_out_str(p, b,
                            strnlen(b, p->m.flags.precision ? (size_t)p->m.precision
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	7f1b      	ldrb	r3, [r3, #28]
 800dc0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc10:	b2db      	uxtb	r3, r3
                prv_out_str(p, b,
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d002      	beq.n	800dc1c <prv_format+0x724>
                            strnlen(b, p->m.flags.precision ? (size_t)p->m.precision
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6a1b      	ldr	r3, [r3, #32]
 800dc1a:	e008      	b.n	800dc2e <prv_format+0x736>
                                                            : (p->buff != NULL ? p->buff_size : SIZE_MAX)));
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	689b      	ldr	r3, [r3, #8]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d002      	beq.n	800dc2a <prv_format+0x732>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	e001      	b.n	800dc2e <prv_format+0x736>
 800dc2a:	f04f 33ff 	mov.w	r3, #4294967295
                prv_out_str(p, b,
 800dc2e:	4619      	mov	r1, r3
 800dc30:	6978      	ldr	r0, [r7, #20]
 800dc32:	f002 ff1d 	bl	8010a70 <strnlen>
 800dc36:	4603      	mov	r3, r0
 800dc38:	461a      	mov	r2, r3
 800dc3a:	6979      	ldr	r1, [r7, #20]
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f7ff f8ad 	bl	800cd9c <prv_out_str>
                break;
 800dc42:	e01e      	b.n	800dc82 <prv_format+0x78a>
                /* Double number in different format. Final output depends on type of format */
                prv_double_to_str(p, (double)va_arg(arg, double));
                break;
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_FLOAT */
            case 'n': {
                int* ptr = (void*)va_arg(arg, int*);
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	1d1a      	adds	r2, r3, #4
 800dc48:	603a      	str	r2, [r7, #0]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	613b      	str	r3, [r7, #16]
                *ptr = p->n; /* Write current length */
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	691b      	ldr	r3, [r3, #16]
 800dc52:	461a      	mov	r2, r3
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	601a      	str	r2, [r3, #0]

                break;
 800dc58:	e013      	b.n	800dc82 <prv_format+0x78a>
            }
            case '%':
                p->out_fn(p, '%');
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	695b      	ldr	r3, [r3, #20]
 800dc5e:	2125      	movs	r1, #37	; 0x25
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	4798      	blx	r3
                break;
 800dc64:	e00d      	b.n	800dc82 <prv_format+0x78a>
                prv_out_str_after(p, full_width);
                break;
            }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_BYTE_ARRAY */
            default:
                p->out_fn(p, *fmt);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	695b      	ldr	r3, [r3, #20]
 800dc6a:	68fa      	ldr	r2, [r7, #12]
 800dc6c:	7812      	ldrb	r2, [r2, #0]
 800dc6e:	4611      	mov	r1, r2
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	4798      	blx	r3
 800dc74:	e005      	b.n	800dc82 <prv_format+0x78a>
                break;
 800dc76:	bf00      	nop
 800dc78:	e003      	b.n	800dc82 <prv_format+0x78a>
 800dc7a:	bf00      	nop
 800dc7c:	08013bc0 	.word	0x08013bc0
                break;
 800dc80:	bf00      	nop
        }
        ++fmt;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	3301      	adds	r3, #1
 800dc86:	60fb      	str	r3, [r7, #12]
    while (fmt != NULL && *fmt != '\0') {
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d006      	beq.n	800dc9c <prv_format+0x7a4>
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	f47f ac56 	bne.w	800d544 <prv_format+0x4c>
 800dc98:	e000      	b.n	800dc9c <prv_format+0x7a4>
            break;
 800dc9a:	bf00      	nop
    }
    p->out_fn(p, '\0'); /* Output last zero number */
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	695b      	ldr	r3, [r3, #20]
 800dca0:	2100      	movs	r1, #0
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	4798      	blx	r3
#if LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT
    if (IS_PRINT_MODE(p)) { /* Mutex only for print operation */
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	695b      	ldr	r3, [r3, #20]
 800dcaa:	4a07      	ldr	r2, [pc, #28]	; (800dcc8 <prv_format+0x7d0>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d105      	bne.n	800dcbc <prv_format+0x7c4>
        lwprintf_sys_mutex_release(&p->lw->mutex);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	3304      	adds	r3, #4
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f000 f8b0 	bl	800de1c <lwprintf_sys_mutex_release>
    }
#endif /* LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT */
    return 1;
 800dcbc:	2301      	movs	r3, #1
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3728      	adds	r7, #40	; 0x28
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	0800ca17 	.word	0x0800ca17

0800dccc <lwprintf_init_ex>:
 * \param[in,out]   lw: LwPRINTF working instance
 * \param[in]       out_fn: Output function used for print operation
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwprintf_init_ex(lwprintf_t* lw, lwprintf_output_fn out_fn) {
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b082      	sub	sp, #8
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	6039      	str	r1, [r7, #0]
    LWPRINTF_GET_LW(lw)->out_fn = out_fn;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d001      	beq.n	800dce0 <lwprintf_init_ex+0x14>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	e000      	b.n	800dce2 <lwprintf_init_ex+0x16>
 800dce0:	4b11      	ldr	r3, [pc, #68]	; (800dd28 <lwprintf_init_ex+0x5c>)
 800dce2:	683a      	ldr	r2, [r7, #0]
 800dce4:	601a      	str	r2, [r3, #0]

#if LWPRINTF_CFG_OS
    /* Create system mutex */
    if (lwprintf_sys_mutex_isvalid(&LWPRINTF_GET_LW(lw)->mutex)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d001      	beq.n	800dcf0 <lwprintf_init_ex+0x24>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	e000      	b.n	800dcf2 <lwprintf_init_ex+0x26>
 800dcf0:	4b0d      	ldr	r3, [pc, #52]	; (800dd28 <lwprintf_init_ex+0x5c>)
 800dcf2:	3304      	adds	r3, #4
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f000 f86b 	bl	800ddd0 <lwprintf_sys_mutex_isvalid>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d10c      	bne.n	800dd1a <lwprintf_init_ex+0x4e>
        || !lwprintf_sys_mutex_create(&LWPRINTF_GET_LW(lw)->mutex)) {
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d001      	beq.n	800dd0a <lwprintf_init_ex+0x3e>
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	e000      	b.n	800dd0c <lwprintf_init_ex+0x40>
 800dd0a:	4b07      	ldr	r3, [pc, #28]	; (800dd28 <lwprintf_init_ex+0x5c>)
 800dd0c:	3304      	adds	r3, #4
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f000 f83a 	bl	800dd88 <lwprintf_sys_mutex_create>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d101      	bne.n	800dd1e <lwprintf_init_ex+0x52>
        return 0;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	e000      	b.n	800dd20 <lwprintf_init_ex+0x54>
    }
#endif /* LWPRINTF_CFG_OS */
    return 1;
 800dd1e:	2301      	movs	r3, #1
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3708      	adds	r7, #8
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	200059bc 	.word	0x200059bc

0800dd2c <lwprintf_vprintf_ex>:
 *                      `va_list` is a special type defined in `<cstdarg>`.
 * \return          The number of characters that would have been written if `n` had been sufficiently large,
 *                      not counting the terminating null character.
 */
int
lwprintf_vprintf_ex(lwprintf_t* const lw, const char* format, va_list arg) {
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b090      	sub	sp, #64	; 0x40
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	60f8      	str	r0, [r7, #12]
 800dd34:	60b9      	str	r1, [r7, #8]
 800dd36:	607a      	str	r2, [r7, #4]
    lwprintf_int_t f = {
 800dd38:	f107 0314 	add.w	r3, r7, #20
 800dd3c:	222c      	movs	r2, #44	; 0x2c
 800dd3e:	2100      	movs	r1, #0
 800dd40:	4618      	mov	r0, r3
 800dd42:	f002 fa23 	bl	801018c <memset>
        .lw = LWPRINTF_GET_LW(lw), .out_fn = prv_out_fn_print, .fmt = format, .buff = NULL, .buff_size = 0};
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d001      	beq.n	800dd50 <lwprintf_vprintf_ex+0x24>
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	e000      	b.n	800dd52 <lwprintf_vprintf_ex+0x26>
 800dd50:	4b0b      	ldr	r3, [pc, #44]	; (800dd80 <lwprintf_vprintf_ex+0x54>)
    lwprintf_int_t f = {
 800dd52:	617b      	str	r3, [r7, #20]
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	61bb      	str	r3, [r7, #24]
 800dd58:	4b0a      	ldr	r3, [pc, #40]	; (800dd84 <lwprintf_vprintf_ex+0x58>)
 800dd5a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* For direct print, output function must be set by user */
    if (f.lw->out_fn == NULL) {
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d101      	bne.n	800dd68 <lwprintf_vprintf_ex+0x3c>
        return 0;
 800dd64:	2300      	movs	r3, #0
 800dd66:	e006      	b.n	800dd76 <lwprintf_vprintf_ex+0x4a>
    }
    prv_format(&f, arg);
 800dd68:	f107 0314 	add.w	r3, r7, #20
 800dd6c:	6879      	ldr	r1, [r7, #4]
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7ff fbc2 	bl	800d4f8 <prv_format>
    return f.n;
 800dd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3740      	adds	r7, #64	; 0x40
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	200059bc 	.word	0x200059bc
 800dd84:	0800ca17 	.word	0x0800ca17

0800dd88 <lwprintf_sys_mutex_create>:
#if LWPRINTF_CFG_OS && !__DOXYGEN__

#include "cmsis_os.h"

uint8_t
lwprintf_sys_mutex_create(LWPRINTF_CFG_OS_MUTEX_HANDLE* m) {
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b086      	sub	sp, #24
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
    const osMutexAttr_t attr = {
 800dd90:	f107 0308 	add.w	r3, r7, #8
 800dd94:	2200      	movs	r2, #0
 800dd96:	601a      	str	r2, [r3, #0]
 800dd98:	605a      	str	r2, [r3, #4]
 800dd9a:	609a      	str	r2, [r3, #8]
 800dd9c:	60da      	str	r2, [r3, #12]
 800dd9e:	4b0b      	ldr	r3, [pc, #44]	; (800ddcc <lwprintf_sys_mutex_create+0x44>)
 800dda0:	60bb      	str	r3, [r7, #8]
 800dda2:	2301      	movs	r3, #1
 800dda4:	60fb      	str	r3, [r7, #12]
        .name = "lwprintf_mutex",
        .attr_bits = osMutexRecursive,
    };
    return (*m = osMutexNew(&attr)) != NULL;
 800dda6:	f107 0308 	add.w	r3, r7, #8
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7f7 fad1 	bl	8005352 <osMutexNew>
 800ddb0:	4602      	mov	r2, r0
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	601a      	str	r2, [r3, #0]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	bf14      	ite	ne
 800ddbe:	2301      	movne	r3, #1
 800ddc0:	2300      	moveq	r3, #0
 800ddc2:	b2db      	uxtb	r3, r3
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3718      	adds	r7, #24
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	08013bc4 	.word	0x08013bc4

0800ddd0 <lwprintf_sys_mutex_isvalid>:

uint8_t
lwprintf_sys_mutex_isvalid(LWPRINTF_CFG_OS_MUTEX_HANDLE* m) {
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
    return *m != NULL;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	bf14      	ite	ne
 800dde0:	2301      	movne	r3, #1
 800dde2:	2300      	moveq	r3, #0
 800dde4:	b2db      	uxtb	r3, r3
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	370c      	adds	r7, #12
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr

0800ddf2 <lwprintf_sys_mutex_wait>:

uint8_t
lwprintf_sys_mutex_wait(LWPRINTF_CFG_OS_MUTEX_HANDLE* m) {
 800ddf2:	b580      	push	{r7, lr}
 800ddf4:	b082      	sub	sp, #8
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]
    return osMutexAcquire(*m, osWaitForever) == osOK;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f04f 31ff 	mov.w	r1, #4294967295
 800de02:	4618      	mov	r0, r3
 800de04:	f7f7 fb2b 	bl	800545e <osMutexAcquire>
 800de08:	4603      	mov	r3, r0
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	bf0c      	ite	eq
 800de0e:	2301      	moveq	r3, #1
 800de10:	2300      	movne	r3, #0
 800de12:	b2db      	uxtb	r3, r3
}
 800de14:	4618      	mov	r0, r3
 800de16:	3708      	adds	r7, #8
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <lwprintf_sys_mutex_release>:

uint8_t
lwprintf_sys_mutex_release(LWPRINTF_CFG_OS_MUTEX_HANDLE* m) {
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
    return osMutexRelease(*m) == osOK;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	4618      	mov	r0, r3
 800de2a:	f7f7 fb63 	bl	80054f4 <osMutexRelease>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	bf0c      	ite	eq
 800de34:	2301      	moveq	r3, #1
 800de36:	2300      	movne	r3, #0
 800de38:	b2db      	uxtb	r3, r3
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3708      	adds	r7, #8
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}

0800de42 <lwrb_init>:
 * \param[in]       buffdata: Pointer to memory to use as buffer data
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t lwrb_init(lwrb_t* buff, void* buffdata, size_t size) {
 800de42:	b480      	push	{r7}
 800de44:	b089      	sub	sp, #36	; 0x24
 800de46:	af00      	add	r7, sp, #0
 800de48:	60f8      	str	r0, [r7, #12]
 800de4a:	60b9      	str	r1, [r7, #8]
 800de4c:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d005      	beq.n	800de60 <lwrb_init+0x1e>
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d002      	beq.n	800de60 <lwrb_init+0x1e>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d101      	bne.n	800de64 <lwrb_init+0x22>
        return 0;
 800de60:	2300      	movs	r3, #0
 800de62:	e019      	b.n	800de98 <lwrb_init+0x56>
    }

    buff->evt_fn = NULL;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	2200      	movs	r2, #0
 800de68:	611a      	str	r2, [r3, #16]
    buff->size = size;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	687a      	ldr	r2, [r7, #4]
 800de6e:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	68ba      	ldr	r2, [r7, #8]
 800de74:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->w, 0);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	330c      	adds	r3, #12
 800de7a:	61fb      	str	r3, [r7, #28]
 800de7c:	2300      	movs	r3, #0
 800de7e:	617b      	str	r3, [r7, #20]
 800de80:	697a      	ldr	r2, [r7, #20]
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->r, 0);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	3308      	adds	r3, #8
 800de8a:	61bb      	str	r3, [r7, #24]
 800de8c:	2300      	movs	r3, #0
 800de8e:	613b      	str	r3, [r7, #16]
 800de90:	693a      	ldr	r2, [r7, #16]
 800de92:	69bb      	ldr	r3, [r7, #24]
 800de94:	601a      	str	r2, [r3, #0]
    return 1;
 800de96:	2301      	movs	r3, #1
}
 800de98:	4618      	mov	r0, r3
 800de9a:	3724      	adds	r7, #36	; 0x24
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr

0800dea4 <lwrb_is_ready>:
/**
 * \brief           Check if buff is initialized and ready to use
 * \param[in]       buff: Buffer handle
 * \return          `1` if ready, `0` otherwise
 */
uint8_t lwrb_is_ready(lwrb_t* buff) {
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
    return BUF_IS_VALID(buff);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d009      	beq.n	800dec6 <lwrb_is_ready+0x22>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d005      	beq.n	800dec6 <lwrb_is_ready+0x22>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d001      	beq.n	800dec6 <lwrb_is_ready+0x22>
 800dec2:	2301      	movs	r3, #1
 800dec4:	e000      	b.n	800dec8 <lwrb_is_ready+0x24>
 800dec6:	2300      	movs	r3, #0
 800dec8:	b2db      	uxtb	r3, r3
}
 800deca:	4618      	mov	r0, r3
 800decc:	370c      	adds	r7, #12
 800dece:	46bd      	mov	sp, r7
 800ded0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded4:	4770      	bx	lr

0800ded6 <lwrb_free>:
 * \brief           Free buffer memory
 * \note            Since implementation does not use dynamic allocation,
 *                  it just sets buffer handle to `NULL`
 * \param[in]       buff: Buffer handle
 */
void lwrb_free(lwrb_t* buff) {
 800ded6:	b480      	push	{r7}
 800ded8:	b083      	sub	sp, #12
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
    if (BUF_IS_VALID(buff)) {
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d00a      	beq.n	800defa <lwrb_free+0x24>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d006      	beq.n	800defa <lwrb_free+0x24>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d002      	beq.n	800defa <lwrb_free+0x24>
        buff->buff = NULL;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2200      	movs	r2, #0
 800def8:	601a      	str	r2, [r3, #0]
    }
}
 800defa:	bf00      	nop
 800defc:	370c      	adds	r7, #12
 800defe:	46bd      	mov	sp, r7
 800df00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df04:	4770      	bx	lr

0800df06 <lwrb_set_evt_fn>:
/**
 * \brief           Set event function callback for different buffer operations
 * \param[in]       buff: Buffer handle
 * \param[in]       evt_fn: Callback function
 */
void lwrb_set_evt_fn(lwrb_t* buff, lwrb_evt_fn evt_fn) {
 800df06:	b480      	push	{r7}
 800df08:	b083      	sub	sp, #12
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	6078      	str	r0, [r7, #4]
 800df0e:	6039      	str	r1, [r7, #0]
    if (BUF_IS_VALID(buff)) {
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00a      	beq.n	800df2c <lwrb_set_evt_fn+0x26>
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d006      	beq.n	800df2c <lwrb_set_evt_fn+0x26>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d002      	beq.n	800df2c <lwrb_set_evt_fn+0x26>
        buff->evt_fn = evt_fn;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	683a      	ldr	r2, [r7, #0]
 800df2a:	611a      	str	r2, [r3, #16]
    }
}
 800df2c:	bf00      	nop
 800df2e:	370c      	adds	r7, #12
 800df30:	46bd      	mov	sp, r7
 800df32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df36:	4770      	bx	lr

0800df38 <lwrb_write>:
 * \param[in]       btw: Number of bytes to write
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t lwrb_write(lwrb_t* buff, const void* data, size_t btw) {
 800df38:	b580      	push	{r7, lr}
 800df3a:	b08c      	sub	sp, #48	; 0x30
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	607a      	str	r2, [r7, #4]
    size_t tocopy, free, buff_w_ptr;
    const uint8_t* d = data;
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	62bb      	str	r3, [r7, #40]	; 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d00d      	beq.n	800df6a <lwrb_write+0x32>
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d009      	beq.n	800df6a <lwrb_write+0x32>
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	685b      	ldr	r3, [r3, #4]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d005      	beq.n	800df6a <lwrb_write+0x32>
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d002      	beq.n	800df6a <lwrb_write+0x32>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d101      	bne.n	800df6e <lwrb_write+0x36>
        return 0;
 800df6a:	2300      	movs	r3, #0
 800df6c:	e060      	b.n	800e030 <lwrb_write+0xf8>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 800df6e:	68f8      	ldr	r0, [r7, #12]
 800df70:	f000 f8e2 	bl	800e138 <lwrb_get_free>
 800df74:	6278      	str	r0, [r7, #36]	; 0x24
    btw = BUF_MIN(free, btw);
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7a:	4293      	cmp	r3, r2
 800df7c:	bf28      	it	cs
 800df7e:	4613      	movcs	r3, r2
 800df80:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d101      	bne.n	800df8c <lwrb_write+0x54>
        return 0;
 800df88:	2300      	movs	r3, #0
 800df8a:	e051      	b.n	800e030 <lwrb_write+0xf8>
    }
    buff_w_ptr = LWRB_LOAD(buff->w, memory_order_acquire);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	330c      	adds	r3, #12
 800df90:	623b      	str	r3, [r7, #32]
 800df92:	6a3b      	ldr	r3, [r7, #32]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	f3bf 8f5b 	dmb	ish
 800df9a:	617b      	str	r3, [r7, #20]
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_w_ptr, btw);
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	685a      	ldr	r2, [r3, #4]
 800dfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa6:	1ad3      	subs	r3, r2, r3
 800dfa8:	687a      	ldr	r2, [r7, #4]
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	bf28      	it	cs
 800dfae:	4613      	movcs	r3, r2
 800dfb0:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(&buff->buff[buff_w_ptr], d, tocopy);
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681a      	ldr	r2, [r3, #0]
 800dfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb8:	4413      	add	r3, r2
 800dfba:	69fa      	ldr	r2, [r7, #28]
 800dfbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f002 f8bc 	bl	801013c <memcpy>
    buff_w_ptr += tocopy;
 800dfc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfc6:	69fb      	ldr	r3, [r7, #28]
 800dfc8:	4413      	add	r3, r2
 800dfca:	62fb      	str	r3, [r7, #44]	; 0x2c
    btw -= tocopy;
 800dfcc:	687a      	ldr	r2, [r7, #4]
 800dfce:	69fb      	ldr	r3, [r7, #28]
 800dfd0:	1ad3      	subs	r3, r2, r3
 800dfd2:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d00a      	beq.n	800dff0 <lwrb_write+0xb8>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	6818      	ldr	r0, [r3, #0]
 800dfde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfe0:	69fb      	ldr	r3, [r7, #28]
 800dfe2:	4413      	add	r3, r2
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	f002 f8a8 	bl	801013c <memcpy>
        buff_w_ptr = btw;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_w_ptr >= buff->size) {
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	685b      	ldr	r3, [r3, #4]
 800dff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d301      	bcc.n	800dffe <lwrb_write+0xc6>
        buff_w_ptr = 0;
 800dffa:	2300      	movs	r3, #0
 800dffc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no read operation can access intermediate data
     */
    LWRB_STORE(buff->w, buff_w_ptr, memory_order_release);
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	330c      	adds	r3, #12
 800e002:	61bb      	str	r3, [r7, #24]
 800e004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e006:	613b      	str	r3, [r7, #16]
 800e008:	693a      	ldr	r2, [r7, #16]
 800e00a:	69bb      	ldr	r3, [r7, #24]
 800e00c:	f3bf 8f5b 	dmb	ish
 800e010:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	691b      	ldr	r3, [r3, #16]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d007      	beq.n	800e02a <lwrb_write+0xf2>
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	691b      	ldr	r3, [r3, #16]
 800e01e:	69f9      	ldr	r1, [r7, #28]
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	440a      	add	r2, r1
 800e024:	2101      	movs	r1, #1
 800e026:	68f8      	ldr	r0, [r7, #12]
 800e028:	4798      	blx	r3
    return tocopy + btw;
 800e02a:	69fa      	ldr	r2, [r7, #28]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	4413      	add	r3, r2
}
 800e030:	4618      	mov	r0, r3
 800e032:	3730      	adds	r7, #48	; 0x30
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <lwrb_read>:
 * \param[in]       buff: Buffer handle
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
size_t lwrb_read(lwrb_t* buff, void* data, size_t btr) {
 800e038:	b580      	push	{r7, lr}
 800e03a:	b08c      	sub	sp, #48	; 0x30
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	60f8      	str	r0, [r7, #12]
 800e040:	60b9      	str	r1, [r7, #8]
 800e042:	607a      	str	r2, [r7, #4]
    size_t tocopy, full, buff_r_ptr;
    uint8_t* d = data;
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	62bb      	str	r3, [r7, #40]	; 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btr == 0) {
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d00d      	beq.n	800e06a <lwrb_read+0x32>
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d009      	beq.n	800e06a <lwrb_read+0x32>
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d005      	beq.n	800e06a <lwrb_read+0x32>
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d002      	beq.n	800e06a <lwrb_read+0x32>
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d101      	bne.n	800e06e <lwrb_read+0x36>
        return 0;
 800e06a:	2300      	movs	r3, #0
 800e06c:	e060      	b.n	800e130 <lwrb_read+0xf8>
    }

    /* Calculate maximum number of bytes available to read */
    full = lwrb_get_full(buff);
 800e06e:	68f8      	ldr	r0, [r7, #12]
 800e070:	f000 f8a3 	bl	800e1ba <lwrb_get_full>
 800e074:	6278      	str	r0, [r7, #36]	; 0x24
    btr = BUF_MIN(full, btr);
 800e076:	687a      	ldr	r2, [r7, #4]
 800e078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07a:	4293      	cmp	r3, r2
 800e07c:	bf28      	it	cs
 800e07e:	4613      	movcs	r3, r2
 800e080:	607b      	str	r3, [r7, #4]
    if (btr == 0) {
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d101      	bne.n	800e08c <lwrb_read+0x54>
        return 0;
 800e088:	2300      	movs	r3, #0
 800e08a:	e051      	b.n	800e130 <lwrb_read+0xf8>
    }
    buff_r_ptr = LWRB_LOAD(buff->r, memory_order_acquire);
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	3308      	adds	r3, #8
 800e090:	623b      	str	r3, [r7, #32]
 800e092:	6a3b      	ldr	r3, [r7, #32]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f3bf 8f5b 	dmb	ish
 800e09a:	617b      	str	r3, [r7, #20]
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Step 1: Read data from linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_r_ptr, btr);
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	685a      	ldr	r2, [r3, #4]
 800e0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a6:	1ad3      	subs	r3, r2, r3
 800e0a8:	687a      	ldr	r2, [r7, #4]
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	bf28      	it	cs
 800e0ae:	4613      	movcs	r3, r2
 800e0b0:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(d, &buff->buff[buff_r_ptr], tocopy);
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b8:	4413      	add	r3, r2
 800e0ba:	69fa      	ldr	r2, [r7, #28]
 800e0bc:	4619      	mov	r1, r3
 800e0be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0c0:	f002 f83c 	bl	801013c <memcpy>
    buff_r_ptr += tocopy;
 800e0c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	4413      	add	r3, r2
 800e0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    btr -= tocopy;
 800e0cc:	687a      	ldr	r2, [r7, #4]
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	1ad3      	subs	r3, r2, r3
 800e0d2:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0) {
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d00a      	beq.n	800e0f0 <lwrb_read+0xb8>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 800e0da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	18d0      	adds	r0, r2, r3
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	f002 f828 	bl	801013c <memcpy>
        buff_r_ptr = btr;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_r_ptr >= buff->size) {
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d301      	bcc.n	800e0fe <lwrb_read+0xc6>
        buff_r_ptr = 0;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no write operation can access intermediate data
     */
    LWRB_STORE(buff->r, buff_r_ptr, memory_order_release);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	3308      	adds	r3, #8
 800e102:	61bb      	str	r3, [r7, #24]
 800e104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e106:	613b      	str	r3, [r7, #16]
 800e108:	693a      	ldr	r2, [r7, #16]
 800e10a:	69bb      	ldr	r3, [r7, #24]
 800e10c:	f3bf 8f5b 	dmb	ish
 800e110:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_READ, tocopy + btr);
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	691b      	ldr	r3, [r3, #16]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d007      	beq.n	800e12a <lwrb_read+0xf2>
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	691b      	ldr	r3, [r3, #16]
 800e11e:	69f9      	ldr	r1, [r7, #28]
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	440a      	add	r2, r1
 800e124:	2100      	movs	r1, #0
 800e126:	68f8      	ldr	r0, [r7, #12]
 800e128:	4798      	blx	r3
    return tocopy + btr;
 800e12a:	69fa      	ldr	r2, [r7, #28]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	4413      	add	r3, r2
}
 800e130:	4618      	mov	r0, r3
 800e132:	3730      	adds	r7, #48	; 0x30
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <lwrb_get_free>:
/**
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t lwrb_get_free(const lwrb_t* buff) {
 800e138:	b480      	push	{r7}
 800e13a:	b08b      	sub	sp, #44	; 0x2c
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d007      	beq.n	800e156 <lwrb_get_free+0x1e>
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d003      	beq.n	800e156 <lwrb_get_free+0x1e>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d101      	bne.n	800e15a <lwrb_get_free+0x22>
        return 0;
 800e156:	2300      	movs	r3, #0
 800e158:	e029      	b.n	800e1ae <lwrb_get_free+0x76>
     * - buff->w pointer will not change by another process/interrupt because we are in write mode just now
     * - buff->r pointer may change by another process. If it gets changed after buff->r has been loaded to local variable,
     *    buffer will see "free size" less than it actually is. This is not a problem, application can
     *    always try again to write more data to remaining free memory that was read just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	330c      	adds	r3, #12
 800e15e:	623b      	str	r3, [r7, #32]
 800e160:	6a3b      	ldr	r3, [r7, #32]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	613b      	str	r3, [r7, #16]
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	3308      	adds	r3, #8
 800e16e:	61bb      	str	r3, [r7, #24]
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	60fb      	str	r3, [r7, #12]
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	617b      	str	r3, [r7, #20]

    if (w == r) {
 800e17a:	69fa      	ldr	r2, [r7, #28]
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	429a      	cmp	r2, r3
 800e180:	d103      	bne.n	800e18a <lwrb_get_free+0x52>
        size = buff->size;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	685b      	ldr	r3, [r3, #4]
 800e186:	627b      	str	r3, [r7, #36]	; 0x24
 800e188:	e00f      	b.n	800e1aa <lwrb_get_free+0x72>
    } else if (r > w) {
 800e18a:	697a      	ldr	r2, [r7, #20]
 800e18c:	69fb      	ldr	r3, [r7, #28]
 800e18e:	429a      	cmp	r2, r3
 800e190:	d904      	bls.n	800e19c <lwrb_get_free+0x64>
        size = r - w;
 800e192:	697a      	ldr	r2, [r7, #20]
 800e194:	69fb      	ldr	r3, [r7, #28]
 800e196:	1ad3      	subs	r3, r2, r3
 800e198:	627b      	str	r3, [r7, #36]	; 0x24
 800e19a:	e006      	b.n	800e1aa <lwrb_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	685a      	ldr	r2, [r3, #4]
 800e1a0:	6979      	ldr	r1, [r7, #20]
 800e1a2:	69fb      	ldr	r3, [r7, #28]
 800e1a4:	1acb      	subs	r3, r1, r3
 800e1a6:	4413      	add	r3, r2
 800e1a8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 800e1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ac:	3b01      	subs	r3, #1
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	372c      	adds	r7, #44	; 0x2c
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b8:	4770      	bx	lr

0800e1ba <lwrb_get_full>:
/**
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t lwrb_get_full(const lwrb_t* buff) {
 800e1ba:	b480      	push	{r7}
 800e1bc:	b08b      	sub	sp, #44	; 0x2c
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d007      	beq.n	800e1d8 <lwrb_get_full+0x1e>
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d003      	beq.n	800e1d8 <lwrb_get_full+0x1e>
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	685b      	ldr	r3, [r3, #4]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d101      	bne.n	800e1dc <lwrb_get_full+0x22>
        return 0;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	e027      	b.n	800e22c <lwrb_get_full+0x72>
     * - buff->r pointer will not change by another process/interrupt because we are in read mode just now
     * - buff->w pointer may change by another process. If it gets changed after buff->w has been loaded to local variable,
     *    buffer will see "full size" less than it really is. This is not a problem, application can
     *    always try again to read more data from remaining full memory that was written just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	330c      	adds	r3, #12
 800e1e0:	623b      	str	r3, [r7, #32]
 800e1e2:	6a3b      	ldr	r3, [r7, #32]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	613b      	str	r3, [r7, #16]
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	3308      	adds	r3, #8
 800e1f0:	61bb      	str	r3, [r7, #24]
 800e1f2:	69bb      	ldr	r3, [r7, #24]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	60fb      	str	r3, [r7, #12]
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	617b      	str	r3, [r7, #20]

    if (w == r) {
 800e1fc:	69fa      	ldr	r2, [r7, #28]
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	429a      	cmp	r2, r3
 800e202:	d102      	bne.n	800e20a <lwrb_get_full+0x50>
        size = 0;
 800e204:	2300      	movs	r3, #0
 800e206:	627b      	str	r3, [r7, #36]	; 0x24
 800e208:	e00f      	b.n	800e22a <lwrb_get_full+0x70>
    } else if (w > r) {
 800e20a:	69fa      	ldr	r2, [r7, #28]
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	429a      	cmp	r2, r3
 800e210:	d904      	bls.n	800e21c <lwrb_get_full+0x62>
        size = w - r;
 800e212:	69fa      	ldr	r2, [r7, #28]
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	1ad3      	subs	r3, r2, r3
 800e218:	627b      	str	r3, [r7, #36]	; 0x24
 800e21a:	e006      	b.n	800e22a <lwrb_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	685a      	ldr	r2, [r3, #4]
 800e220:	69f9      	ldr	r1, [r7, #28]
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	1acb      	subs	r3, r1, r3
 800e226:	4413      	add	r3, r2
 800e228:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return size;
 800e22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	372c      	adds	r7, #44	; 0x2c
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr

0800e238 <lwrb_reset>:
 * \brief           Resets buffer to default values. Buffer size is not modified
 * \note            This function is not thread safe.
 *                      When used, application must ensure there is no active read/write operation
 * \param[in]       buff: Buffer handle
 */
void lwrb_reset(lwrb_t* buff) {
 800e238:	b580      	push	{r7, lr}
 800e23a:	b086      	sub	sp, #24
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
    if (BUF_IS_VALID(buff)) {
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d025      	beq.n	800e292 <lwrb_reset+0x5a>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d021      	beq.n	800e292 <lwrb_reset+0x5a>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	685b      	ldr	r3, [r3, #4]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d01d      	beq.n	800e292 <lwrb_reset+0x5a>
        LWRB_STORE(buff->w, 0, memory_order_release);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	330c      	adds	r3, #12
 800e25a:	617b      	str	r3, [r7, #20]
 800e25c:	2300      	movs	r3, #0
 800e25e:	60fb      	str	r3, [r7, #12]
 800e260:	68fa      	ldr	r2, [r7, #12]
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	f3bf 8f5b 	dmb	ish
 800e268:	601a      	str	r2, [r3, #0]
        LWRB_STORE(buff->r, 0, memory_order_release);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	3308      	adds	r3, #8
 800e26e:	613b      	str	r3, [r7, #16]
 800e270:	2300      	movs	r3, #0
 800e272:	60bb      	str	r3, [r7, #8]
 800e274:	68ba      	ldr	r2, [r7, #8]
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	f3bf 8f5b 	dmb	ish
 800e27c:	601a      	str	r2, [r3, #0]
        BUF_SEND_EVT(buff, LWRB_EVT_RESET, 0);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	691b      	ldr	r3, [r3, #16]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d005      	beq.n	800e292 <lwrb_reset+0x5a>
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	691b      	ldr	r3, [r3, #16]
 800e28a:	2200      	movs	r2, #0
 800e28c:	2102      	movs	r1, #2
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	4798      	blx	r3
    }
}
 800e292:	bf00      	nop
 800e294:	3718      	adds	r7, #24
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
	...

0800e29c <D16_GENERIC>:
 800e29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a0:	b089      	sub	sp, #36	; 0x24
 800e2a2:	68d4      	ldr	r4, [r2, #12]
 800e2a4:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800e2a6:	6993      	ldr	r3, [r2, #24]
 800e2a8:	9407      	str	r4, [sp, #28]
 800e2aa:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800e2ac:	9306      	str	r3, [sp, #24]
 800e2ae:	9402      	str	r4, [sp, #8]
 800e2b0:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800e2b4:	f8d2 b014 	ldr.w	fp, [r2, #20]
 800e2b8:	69d3      	ldr	r3, [r2, #28]
 800e2ba:	6896      	ldr	r6, [r2, #8]
 800e2bc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800e2be:	9103      	str	r1, [sp, #12]
 800e2c0:	2d00      	cmp	r5, #0
 800e2c2:	d066      	beq.n	800e392 <D16_GENERIC+0xf6>
 800e2c4:	f004 0510 	and.w	r5, r4, #16
 800e2c8:	f004 0420 	and.w	r4, r4, #32
 800e2cc:	9504      	str	r5, [sp, #16]
 800e2ce:	4938      	ldr	r1, [pc, #224]	; (800e3b0 <D16_GENERIC+0x114>)
 800e2d0:	9405      	str	r4, [sp, #20]
 800e2d2:	f04f 0e00 	mov.w	lr, #0
 800e2d6:	4635      	mov	r5, r6
 800e2d8:	e04f      	b.n	800e37a <D16_GENERIC+0xde>
 800e2da:	5d87      	ldrb	r7, [r0, r6]
 800e2dc:	7804      	ldrb	r4, [r0, #0]
 800e2de:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800e2e2:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800e2e6:	b2e6      	uxtb	r6, r4
 800e2e8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800e2ec:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800e2f0:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800e2f4:	4433      	add	r3, r6
 800e2f6:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800e2fa:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800e2fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e302:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800e306:	0aa3      	lsrs	r3, r4, #10
 800e308:	4c2a      	ldr	r4, [pc, #168]	; (800e3b4 <D16_GENERIC+0x118>)
 800e30a:	fb26 5404 	smlad	r4, r6, r4, r5
 800e30e:	4d2a      	ldr	r5, [pc, #168]	; (800e3b8 <D16_GENERIC+0x11c>)
 800e310:	fb26 f505 	smuad	r5, r6, r5
 800e314:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800e318:	eb04 080a 	add.w	r8, r4, sl
 800e31c:	eba8 080b 	sub.w	r8, r8, fp
 800e320:	4646      	mov	r6, r8
 800e322:	17f7      	asrs	r7, r6, #31
 800e324:	e9cd 6700 	strd	r6, r7, [sp]
 800e328:	9e04      	ldr	r6, [sp, #16]
 800e32a:	f10e 0c01 	add.w	ip, lr, #1
 800e32e:	b16e      	cbz	r6, 800e34c <D16_GENERIC+0xb0>
 800e330:	6a16      	ldr	r6, [r2, #32]
 800e332:	9f01      	ldr	r7, [sp, #4]
 800e334:	fba8 8906 	umull	r8, r9, r8, r6
 800e338:	fb06 9907 	mla	r9, r6, r7, r9
 800e33c:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800e340:	f149 0900 	adc.w	r9, r9, #0
 800e344:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800e348:	46a3      	mov	fp, r4
 800e34a:	4654      	mov	r4, sl
 800e34c:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800e34e:	9f02      	ldr	r7, [sp, #8]
 800e350:	0424      	lsls	r4, r4, #16
 800e352:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800e356:	f04f 0900 	mov.w	r9, #0
 800e35a:	fb0e fe06 	mul.w	lr, lr, r6
 800e35e:	fbc7 8904 	smlal	r8, r9, r7, r4
 800e362:	9e03      	ldr	r6, [sp, #12]
 800e364:	464f      	mov	r7, r9
 800e366:	10bc      	asrs	r4, r7, #2
 800e368:	f304 040f 	ssat	r4, #16, r4
 800e36c:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 800e370:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800e372:	fa1f fe8c 	uxth.w	lr, ip
 800e376:	4574      	cmp	r4, lr
 800e378:	d90a      	bls.n	800e390 <D16_GENERIC+0xf4>
 800e37a:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800e37c:	2c01      	cmp	r4, #1
 800e37e:	b2e6      	uxtb	r6, r4
 800e380:	d1ab      	bne.n	800e2da <D16_GENERIC+0x3e>
 800e382:	9e05      	ldr	r6, [sp, #20]
 800e384:	f850 4b02 	ldr.w	r4, [r0], #2
 800e388:	2e00      	cmp	r6, #0
 800e38a:	d0ac      	beq.n	800e2e6 <D16_GENERIC+0x4a>
 800e38c:	ba64      	rev16	r4, r4
 800e38e:	e7aa      	b.n	800e2e6 <D16_GENERIC+0x4a>
 800e390:	462e      	mov	r6, r5
 800e392:	9907      	ldr	r1, [sp, #28]
 800e394:	61d3      	str	r3, [r2, #28]
 800e396:	9b06      	ldr	r3, [sp, #24]
 800e398:	6096      	str	r6, [r2, #8]
 800e39a:	2000      	movs	r0, #0
 800e39c:	60d1      	str	r1, [r2, #12]
 800e39e:	f8c2 a010 	str.w	sl, [r2, #16]
 800e3a2:	f8c2 b014 	str.w	fp, [r2, #20]
 800e3a6:	6193      	str	r3, [r2, #24]
 800e3a8:	b009      	add	sp, #36	; 0x24
 800e3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ae:	bf00      	nop
 800e3b0:	20000000 	.word	0x20000000
 800e3b4:	00030001 	.word	0x00030001
 800e3b8:	00010003 	.word	0x00010003

0800e3bc <D24_GENERIC>:
 800e3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c0:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800e3c2:	6993      	ldr	r3, [r2, #24]
 800e3c4:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800e3c6:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800e3ca:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800e3ce:	6894      	ldr	r4, [r2, #8]
 800e3d0:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800e3d4:	b089      	sub	sp, #36	; 0x24
 800e3d6:	9307      	str	r3, [sp, #28]
 800e3d8:	9503      	str	r5, [sp, #12]
 800e3da:	69d3      	ldr	r3, [r2, #28]
 800e3dc:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800e3de:	9104      	str	r1, [sp, #16]
 800e3e0:	2e00      	cmp	r6, #0
 800e3e2:	f000 8096 	beq.w	800e512 <D24_GENERIC+0x156>
 800e3e6:	f005 0610 	and.w	r6, r5, #16
 800e3ea:	f005 0520 	and.w	r5, r5, #32
 800e3ee:	4954      	ldr	r1, [pc, #336]	; (800e540 <D24_GENERIC+0x184>)
 800e3f0:	9605      	str	r6, [sp, #20]
 800e3f2:	9506      	str	r5, [sp, #24]
 800e3f4:	f04f 0e00 	mov.w	lr, #0
 800e3f8:	f8cd 9008 	str.w	r9, [sp, #8]
 800e3fc:	e06a      	b.n	800e4d4 <D24_GENERIC+0x118>
 800e3fe:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800e402:	f810 8007 	ldrb.w	r8, [r0, r7]
 800e406:	f890 c000 	ldrb.w	ip, [r0]
 800e40a:	042d      	lsls	r5, r5, #16
 800e40c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800e410:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 800e414:	44ac      	add	ip, r5
 800e416:	4438      	add	r0, r7
 800e418:	fa5f f68c 	uxtb.w	r6, ip
 800e41c:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800e420:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800e424:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 800e428:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800e42c:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800e430:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800e434:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 800e438:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800e43c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e440:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800e444:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800e448:	4d3e      	ldr	r5, [pc, #248]	; (800e544 <D24_GENERIC+0x188>)
 800e44a:	fb26 b705 	smlad	r7, r6, r5, fp
 800e44e:	4d3e      	ldr	r5, [pc, #248]	; (800e548 <D24_GENERIC+0x18c>)
 800e450:	fb26 4b05 	smlad	fp, r6, r5, r4
 800e454:	f3c3 0409 	ubfx	r4, r3, #0, #10
 800e458:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800e45c:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800e460:	2401      	movs	r4, #1
 800e462:	fb26 f604 	smuad	r6, r6, r4
 800e466:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800e46a:	9f02      	ldr	r7, [sp, #8]
 800e46c:	eb0e 0c04 	add.w	ip, lr, r4
 800e470:	eb08 0406 	add.w	r4, r8, r6
 800e474:	eb05 060a 	add.w	r6, r5, sl
 800e478:	1bf6      	subs	r6, r6, r7
 800e47a:	4637      	mov	r7, r6
 800e47c:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800e480:	e9cd 7800 	strd	r7, r8, [sp]
 800e484:	9f05      	ldr	r7, [sp, #20]
 800e486:	b177      	cbz	r7, 800e4a6 <D24_GENERIC+0xea>
 800e488:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800e48c:	9502      	str	r5, [sp, #8]
 800e48e:	fba6 9a08 	umull	r9, sl, r6, r8
 800e492:	9e01      	ldr	r6, [sp, #4]
 800e494:	fb08 aa06 	mla	sl, r8, r6, sl
 800e498:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 800e49c:	f14a 0700 	adc.w	r7, sl, #0
 800e4a0:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800e4a4:	4655      	mov	r5, sl
 800e4a6:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800e4a8:	9f03      	ldr	r7, [sp, #12]
 800e4aa:	03ad      	lsls	r5, r5, #14
 800e4ac:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800e4b0:	f04f 0900 	mov.w	r9, #0
 800e4b4:	fb0e fe06 	mul.w	lr, lr, r6
 800e4b8:	fbc7 8905 	smlal	r8, r9, r7, r5
 800e4bc:	9e04      	ldr	r6, [sp, #16]
 800e4be:	464f      	mov	r7, r9
 800e4c0:	10bd      	asrs	r5, r7, #2
 800e4c2:	f305 050f 	ssat	r5, #16, r5
 800e4c6:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800e4ca:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800e4cc:	fa1f fe8c 	uxth.w	lr, ip
 800e4d0:	4575      	cmp	r5, lr
 800e4d2:	d91c      	bls.n	800e50e <D24_GENERIC+0x152>
 800e4d4:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800e4d6:	b2ef      	uxtb	r7, r5
 800e4d8:	2d01      	cmp	r5, #1
 800e4da:	b23e      	sxth	r6, r7
 800e4dc:	d18f      	bne.n	800e3fe <D24_GENERIC+0x42>
 800e4de:	9d06      	ldr	r5, [sp, #24]
 800e4e0:	b15d      	cbz	r5, 800e4fa <D24_GENERIC+0x13e>
 800e4e2:	f01e 0f01 	tst.w	lr, #1
 800e4e6:	d122      	bne.n	800e52e <D24_GENERIC+0x172>
 800e4e8:	7805      	ldrb	r5, [r0, #0]
 800e4ea:	78c7      	ldrb	r7, [r0, #3]
 800e4ec:	7846      	ldrb	r6, [r0, #1]
 800e4ee:	022d      	lsls	r5, r5, #8
 800e4f0:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800e4f4:	44b4      	add	ip, r6
 800e4f6:	3002      	adds	r0, #2
 800e4f8:	e78e      	b.n	800e418 <D24_GENERIC+0x5c>
 800e4fa:	7846      	ldrb	r6, [r0, #1]
 800e4fc:	f890 c002 	ldrb.w	ip, [r0, #2]
 800e500:	f810 5b03 	ldrb.w	r5, [r0], #3
 800e504:	0236      	lsls	r6, r6, #8
 800e506:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 800e50a:	44ac      	add	ip, r5
 800e50c:	e784      	b.n	800e418 <D24_GENERIC+0x5c>
 800e50e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800e512:	61d3      	str	r3, [r2, #28]
 800e514:	9b07      	ldr	r3, [sp, #28]
 800e516:	6094      	str	r4, [r2, #8]
 800e518:	2000      	movs	r0, #0
 800e51a:	f8c2 b00c 	str.w	fp, [r2, #12]
 800e51e:	f8c2 a010 	str.w	sl, [r2, #16]
 800e522:	f8c2 9014 	str.w	r9, [r2, #20]
 800e526:	6193      	str	r3, [r2, #24]
 800e528:	b009      	add	sp, #36	; 0x24
 800e52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e52e:	78c5      	ldrb	r5, [r0, #3]
 800e530:	7887      	ldrb	r7, [r0, #2]
 800e532:	f810 6b04 	ldrb.w	r6, [r0], #4
 800e536:	022d      	lsls	r5, r5, #8
 800e538:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800e53c:	44b4      	add	ip, r6
 800e53e:	e76b      	b.n	800e418 <D24_GENERIC+0x5c>
 800e540:	20000000 	.word	0x20000000
 800e544:	00030001 	.word	0x00030001
 800e548:	00060007 	.word	0x00060007

0800e54c <D32_GENERIC>:
 800e54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e550:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800e552:	6993      	ldr	r3, [r2, #24]
 800e554:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800e556:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800e55a:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800e55e:	69d6      	ldr	r6, [r2, #28]
 800e560:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800e564:	b089      	sub	sp, #36	; 0x24
 800e566:	9307      	str	r3, [sp, #28]
 800e568:	9403      	str	r4, [sp, #12]
 800e56a:	6893      	ldr	r3, [r2, #8]
 800e56c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800e56e:	9104      	str	r1, [sp, #16]
 800e570:	2d00      	cmp	r5, #0
 800e572:	f000 809f 	beq.w	800e6b4 <D32_GENERIC+0x168>
 800e576:	f004 0510 	and.w	r5, r4, #16
 800e57a:	f004 0420 	and.w	r4, r4, #32
 800e57e:	9505      	str	r5, [sp, #20]
 800e580:	4953      	ldr	r1, [pc, #332]	; (800e6d0 <D32_GENERIC+0x184>)
 800e582:	9406      	str	r4, [sp, #24]
 800e584:	f04f 0c00 	mov.w	ip, #0
 800e588:	f8cd 9008 	str.w	r9, [sp, #8]
 800e58c:	461d      	mov	r5, r3
 800e58e:	4617      	mov	r7, r2
 800e590:	e077      	b.n	800e682 <D32_GENERIC+0x136>
 800e592:	f818 3003 	ldrb.w	r3, [r8, r3]
 800e596:	f810 800e 	ldrb.w	r8, [r0, lr]
 800e59a:	f810 e002 	ldrb.w	lr, [r0, r2]
 800e59e:	7800      	ldrb	r0, [r0, #0]
 800e5a0:	041b      	lsls	r3, r3, #16
 800e5a2:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800e5a6:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800e5aa:	4403      	add	r3, r0
 800e5ac:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800e5b0:	b2dc      	uxtb	r4, r3
 800e5b2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e5b6:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800e5ba:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800e5be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e5c2:	0e1b      	lsrs	r3, r3, #24
 800e5c4:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 800e5c8:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 800e5cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e5d0:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800e5d4:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 800e5d8:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 800e5dc:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800e5e0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800e5e4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e5e8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800e5ec:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 800e5f0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e5f4:	4b37      	ldr	r3, [pc, #220]	; (800e6d4 <D32_GENERIC+0x188>)
 800e5f6:	fb22 b403 	smlad	r4, r2, r3, fp
 800e5fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e5fe:	fb2e 4803 	smlad	r8, lr, r3, r4
 800e602:	4b35      	ldr	r3, [pc, #212]	; (800e6d8 <D32_GENERIC+0x18c>)
 800e604:	fb22 5503 	smlad	r5, r2, r3, r5
 800e608:	4b34      	ldr	r3, [pc, #208]	; (800e6dc <D32_GENERIC+0x190>)
 800e60a:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800e60e:	2301      	movs	r3, #1
 800e610:	fb22 f203 	smuad	r2, r2, r3
 800e614:	4b32      	ldr	r3, [pc, #200]	; (800e6e0 <D32_GENERIC+0x194>)
 800e616:	fb2e 2503 	smlad	r5, lr, r3, r2
 800e61a:	9b02      	ldr	r3, [sp, #8]
 800e61c:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 800e620:	eb04 080a 	add.w	r8, r4, sl
 800e624:	eba8 0803 	sub.w	r8, r8, r3
 800e628:	4642      	mov	r2, r8
 800e62a:	17d3      	asrs	r3, r2, #31
 800e62c:	e9cd 2300 	strd	r2, r3, [sp]
 800e630:	9b05      	ldr	r3, [sp, #20]
 800e632:	f10c 0e01 	add.w	lr, ip, #1
 800e636:	b16b      	cbz	r3, 800e654 <D32_GENERIC+0x108>
 800e638:	6a3a      	ldr	r2, [r7, #32]
 800e63a:	9b01      	ldr	r3, [sp, #4]
 800e63c:	9402      	str	r4, [sp, #8]
 800e63e:	fba8 8902 	umull	r8, r9, r8, r2
 800e642:	fb02 9903 	mla	r9, r2, r3, r9
 800e646:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800e64a:	f149 0900 	adc.w	r9, r9, #0
 800e64e:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800e652:	4654      	mov	r4, sl
 800e654:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e656:	9a04      	ldr	r2, [sp, #16]
 800e658:	fb0c fc03 	mul.w	ip, ip, r3
 800e65c:	9b03      	ldr	r3, [sp, #12]
 800e65e:	0364      	lsls	r4, r4, #13
 800e660:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800e664:	f04f 0900 	mov.w	r9, #0
 800e668:	fbc3 8904 	smlal	r8, r9, r3, r4
 800e66c:	464b      	mov	r3, r9
 800e66e:	109b      	asrs	r3, r3, #2
 800e670:	f303 030f 	ssat	r3, #16, r3
 800e674:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 800e678:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e67a:	fa1f fc8e 	uxth.w	ip, lr
 800e67e:	4563      	cmp	r3, ip
 800e680:	d914      	bls.n	800e6ac <D32_GENERIC+0x160>
 800e682:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800e684:	b2e2      	uxtb	r2, r4
 800e686:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800e68a:	eb00 080e 	add.w	r8, r0, lr
 800e68e:	4253      	negs	r3, r2
 800e690:	2c01      	cmp	r4, #1
 800e692:	eb08 0403 	add.w	r4, r8, r3
 800e696:	f47f af7c 	bne.w	800e592 <D32_GENERIC+0x46>
 800e69a:	1d02      	adds	r2, r0, #4
 800e69c:	6803      	ldr	r3, [r0, #0]
 800e69e:	9806      	ldr	r0, [sp, #24]
 800e6a0:	b110      	cbz	r0, 800e6a8 <D32_GENERIC+0x15c>
 800e6a2:	ba5b      	rev16	r3, r3
 800e6a4:	4610      	mov	r0, r2
 800e6a6:	e783      	b.n	800e5b0 <D32_GENERIC+0x64>
 800e6a8:	4610      	mov	r0, r2
 800e6aa:	e781      	b.n	800e5b0 <D32_GENERIC+0x64>
 800e6ac:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800e6b0:	462b      	mov	r3, r5
 800e6b2:	463a      	mov	r2, r7
 800e6b4:	6093      	str	r3, [r2, #8]
 800e6b6:	9b07      	ldr	r3, [sp, #28]
 800e6b8:	f8c2 b00c 	str.w	fp, [r2, #12]
 800e6bc:	2000      	movs	r0, #0
 800e6be:	61d6      	str	r6, [r2, #28]
 800e6c0:	f8c2 a010 	str.w	sl, [r2, #16]
 800e6c4:	f8c2 9014 	str.w	r9, [r2, #20]
 800e6c8:	6193      	str	r3, [r2, #24]
 800e6ca:	b009      	add	sp, #36	; 0x24
 800e6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6d0:	20000000 	.word	0x20000000
 800e6d4:	00060003 	.word	0x00060003
 800e6d8:	000a000c 	.word	0x000a000c
 800e6dc:	000c000a 	.word	0x000c000a
 800e6e0:	00030006 	.word	0x00030006

0800e6e4 <D48_GENERIC>:
 800e6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e8:	b089      	sub	sp, #36	; 0x24
 800e6ea:	6953      	ldr	r3, [r2, #20]
 800e6ec:	68d4      	ldr	r4, [r2, #12]
 800e6ee:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800e6f0:	9302      	str	r3, [sp, #8]
 800e6f2:	9400      	str	r4, [sp, #0]
 800e6f4:	6993      	ldr	r3, [r2, #24]
 800e6f6:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800e6f8:	9307      	str	r3, [sp, #28]
 800e6fa:	9403      	str	r4, [sp, #12]
 800e6fc:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800e700:	69d6      	ldr	r6, [r2, #28]
 800e702:	6893      	ldr	r3, [r2, #8]
 800e704:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800e706:	9104      	str	r1, [sp, #16]
 800e708:	2d00      	cmp	r5, #0
 800e70a:	f000 80c5 	beq.w	800e898 <D48_GENERIC+0x1b4>
 800e70e:	f004 0510 	and.w	r5, r4, #16
 800e712:	f004 0420 	and.w	r4, r4, #32
 800e716:	4967      	ldr	r1, [pc, #412]	; (800e8b4 <D48_GENERIC+0x1d0>)
 800e718:	9505      	str	r5, [sp, #20]
 800e71a:	9406      	str	r4, [sp, #24]
 800e71c:	f04f 0c00 	mov.w	ip, #0
 800e720:	4657      	mov	r7, sl
 800e722:	9301      	str	r3, [sp, #4]
 800e724:	e09c      	b.n	800e860 <D48_GENERIC+0x17c>
 800e726:	f81b 4005 	ldrb.w	r4, [fp, r5]
 800e72a:	f810 b009 	ldrb.w	fp, [r0, r9]
 800e72e:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800e732:	f810 a00e 	ldrb.w	sl, [r0, lr]
 800e736:	7800      	ldrb	r0, [r0, #0]
 800e738:	0424      	lsls	r4, r4, #16
 800e73a:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800e73e:	f818 4005 	ldrb.w	r4, [r8, r5]
 800e742:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 800e746:	44a8      	add	r8, r5
 800e748:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 800e74c:	eb0b 0500 	add.w	r5, fp, r0
 800e750:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 800e754:	fa5f f885 	uxtb.w	r8, r5
 800e758:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 800e75c:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800e760:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 800e764:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 800e768:	0e2d      	lsrs	r5, r5, #24
 800e76a:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800e76e:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800e772:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 800e776:	b2e6      	uxtb	r6, r4
 800e778:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 800e77c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800e780:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 800e784:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800e788:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 800e78c:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 800e790:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800e794:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 800e798:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e79c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800e7a0:	f3c6 0909 	ubfx	r9, r6, #0, #10
 800e7a4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800e7a8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800e7ac:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800e7b0:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 800e7b4:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 800e7b8:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 800e7bc:	4c3e      	ldr	r4, [pc, #248]	; (800e8b8 <D48_GENERIC+0x1d4>)
 800e7be:	9d00      	ldr	r5, [sp, #0]
 800e7c0:	fb2a 5404 	smlad	r4, sl, r4, r5
 800e7c4:	4d3d      	ldr	r5, [pc, #244]	; (800e8bc <D48_GENERIC+0x1d8>)
 800e7c6:	fb28 4405 	smlad	r4, r8, r5, r4
 800e7ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e7ce:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800e7d2:	4c3b      	ldr	r4, [pc, #236]	; (800e8c0 <D48_GENERIC+0x1dc>)
 800e7d4:	9b01      	ldr	r3, [sp, #4]
 800e7d6:	fb2a 3304 	smlad	r3, sl, r4, r3
 800e7da:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800e7de:	fb28 3304 	smlad	r3, r8, r4, r3
 800e7e2:	4c38      	ldr	r4, [pc, #224]	; (800e8c4 <D48_GENERIC+0x1e0>)
 800e7e4:	fb2e 3304 	smlad	r3, lr, r4, r3
 800e7e8:	2501      	movs	r5, #1
 800e7ea:	9300      	str	r3, [sp, #0]
 800e7ec:	fb2a fa05 	smuad	sl, sl, r5
 800e7f0:	4b35      	ldr	r3, [pc, #212]	; (800e8c8 <D48_GENERIC+0x1e4>)
 800e7f2:	fb28 a803 	smlad	r8, r8, r3, sl
 800e7f6:	4b35      	ldr	r3, [pc, #212]	; (800e8cc <D48_GENERIC+0x1e8>)
 800e7f8:	fb2e 8303 	smlad	r3, lr, r3, r8
 800e7fc:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 800e800:	9301      	str	r3, [sp, #4]
 800e802:	9b02      	ldr	r3, [sp, #8]
 800e804:	eb04 0807 	add.w	r8, r4, r7
 800e808:	eba8 0803 	sub.w	r8, r8, r3
 800e80c:	9b05      	ldr	r3, [sp, #20]
 800e80e:	4465      	add	r5, ip
 800e810:	ea4f 7be8 	mov.w	fp, r8, asr #31
 800e814:	b163      	cbz	r3, 800e830 <D48_GENERIC+0x14c>
 800e816:	6a17      	ldr	r7, [r2, #32]
 800e818:	9402      	str	r4, [sp, #8]
 800e81a:	fba8 8907 	umull	r8, r9, r8, r7
 800e81e:	fb07 990b 	mla	r9, r7, fp, r9
 800e822:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800e826:	f149 0900 	adc.w	r9, r9, #0
 800e82a:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800e82e:	463c      	mov	r4, r7
 800e830:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 800e834:	9b03      	ldr	r3, [sp, #12]
 800e836:	02e4      	lsls	r4, r4, #11
 800e838:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800e83c:	f04f 0900 	mov.w	r9, #0
 800e840:	fb0c fc0e 	mul.w	ip, ip, lr
 800e844:	fbc3 8904 	smlal	r8, r9, r3, r4
 800e848:	9b04      	ldr	r3, [sp, #16]
 800e84a:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800e84e:	f304 040f 	ssat	r4, #16, r4
 800e852:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800e856:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800e858:	fa1f fc85 	uxth.w	ip, r5
 800e85c:	4564      	cmp	r4, ip
 800e85e:	d919      	bls.n	800e894 <D48_GENERIC+0x1b0>
 800e860:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800e862:	fa5f fe84 	uxtb.w	lr, r4
 800e866:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 800e86a:	f1ce 0500 	rsb	r5, lr, #0
 800e86e:	eb00 0b09 	add.w	fp, r0, r9
 800e872:	eb0b 0a05 	add.w	sl, fp, r5
 800e876:	2c01      	cmp	r4, #1
 800e878:	eb0a 0809 	add.w	r8, sl, r9
 800e87c:	f47f af53 	bne.w	800e726 <D48_GENERIC+0x42>
 800e880:	9b06      	ldr	r3, [sp, #24]
 800e882:	6805      	ldr	r5, [r0, #0]
 800e884:	6844      	ldr	r4, [r0, #4]
 800e886:	3006      	adds	r0, #6
 800e888:	2b00      	cmp	r3, #0
 800e88a:	f43f af63 	beq.w	800e754 <D48_GENERIC+0x70>
 800e88e:	ba6d      	rev16	r5, r5
 800e890:	ba64      	rev16	r4, r4
 800e892:	e75f      	b.n	800e754 <D48_GENERIC+0x70>
 800e894:	9b01      	ldr	r3, [sp, #4]
 800e896:	46ba      	mov	sl, r7
 800e898:	6093      	str	r3, [r2, #8]
 800e89a:	9b00      	ldr	r3, [sp, #0]
 800e89c:	60d3      	str	r3, [r2, #12]
 800e89e:	9b02      	ldr	r3, [sp, #8]
 800e8a0:	6153      	str	r3, [r2, #20]
 800e8a2:	9b07      	ldr	r3, [sp, #28]
 800e8a4:	61d6      	str	r6, [r2, #28]
 800e8a6:	2000      	movs	r0, #0
 800e8a8:	f8c2 a010 	str.w	sl, [r2, #16]
 800e8ac:	6193      	str	r3, [r2, #24]
 800e8ae:	b009      	add	sp, #36	; 0x24
 800e8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b4:	20000000 	.word	0x20000000
 800e8b8:	000f000a 	.word	0x000f000a
 800e8bc:	00060003 	.word	0x00060003
 800e8c0:	00150019 	.word	0x00150019
 800e8c4:	00190015 	.word	0x00190015
 800e8c8:	00030006 	.word	0x00030006
 800e8cc:	000a000f 	.word	0x000a000f

0800e8d0 <D64_GENERIC>:
 800e8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d4:	b089      	sub	sp, #36	; 0x24
 800e8d6:	6913      	ldr	r3, [r2, #16]
 800e8d8:	6895      	ldr	r5, [r2, #8]
 800e8da:	9303      	str	r3, [sp, #12]
 800e8dc:	9501      	str	r5, [sp, #4]
 800e8de:	6953      	ldr	r3, [r2, #20]
 800e8e0:	68d5      	ldr	r5, [r2, #12]
 800e8e2:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800e8e4:	9304      	str	r3, [sp, #16]
 800e8e6:	9500      	str	r5, [sp, #0]
 800e8e8:	6993      	ldr	r3, [r2, #24]
 800e8ea:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800e8ec:	9307      	str	r3, [sp, #28]
 800e8ee:	9505      	str	r5, [sp, #20]
 800e8f0:	69d3      	ldr	r3, [r2, #28]
 800e8f2:	9106      	str	r1, [sp, #24]
 800e8f4:	2c00      	cmp	r4, #0
 800e8f6:	f000 80d9 	beq.w	800eaac <D64_GENERIC+0x1dc>
 800e8fa:	6a11      	ldr	r1, [r2, #32]
 800e8fc:	9102      	str	r1, [sp, #8]
 800e8fe:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 800eaec <D64_GENERIC+0x21c>
 800e902:	f04f 0c00 	mov.w	ip, #0
 800e906:	4681      	mov	r9, r0
 800e908:	e0c1      	b.n	800ea8e <D64_GENERIC+0x1be>
 800e90a:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800e90e:	4274      	negs	r4, r6
 800e910:	eb09 0708 	add.w	r7, r9, r8
 800e914:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 800e918:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 800e91c:	5d38      	ldrb	r0, [r7, r4]
 800e91e:	5d29      	ldrb	r1, [r5, r4]
 800e920:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 800e924:	f819 a008 	ldrb.w	sl, [r9, r8]
 800e928:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 800e92c:	f899 7000 	ldrb.w	r7, [r9]
 800e930:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 800e934:	4425      	add	r5, r4
 800e936:	0409      	lsls	r1, r1, #16
 800e938:	0400      	lsls	r0, r0, #16
 800e93a:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800e93e:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800e942:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800e946:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800e94a:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800e94e:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800e952:	4459      	add	r1, fp
 800e954:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 800e958:	4438      	add	r0, r7
 800e95a:	b2c5      	uxtb	r5, r0
 800e95c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800e960:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 800e964:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 800e968:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800e96c:	0e00      	lsrs	r0, r0, #24
 800e96e:	eb03 0806 	add.w	r8, r3, r6
 800e972:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800e976:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800e97a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800e97e:	b2c8      	uxtb	r0, r1
 800e980:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800e984:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800e988:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 800e98c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 800e990:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800e994:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800e998:	0e09      	lsrs	r1, r1, #24
 800e99a:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800e99e:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800e9a2:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800e9a6:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800e9aa:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800e9ae:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800e9b2:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800e9b6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e9ba:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800e9be:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e9c2:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800e9c6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800e9ca:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800e9ce:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800e9d2:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800e9d6:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800e9da:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800e9de:	0a8b      	lsrs	r3, r1, #10
 800e9e0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800e9e4:	4939      	ldr	r1, [pc, #228]	; (800eacc <D64_GENERIC+0x1fc>)
 800e9e6:	9c00      	ldr	r4, [sp, #0]
 800e9e8:	fb28 4101 	smlad	r1, r8, r1, r4
 800e9ec:	4c38      	ldr	r4, [pc, #224]	; (800ead0 <D64_GENERIC+0x200>)
 800e9ee:	fb27 1104 	smlad	r1, r7, r4, r1
 800e9f2:	4c38      	ldr	r4, [pc, #224]	; (800ead4 <D64_GENERIC+0x204>)
 800e9f4:	fb20 1104 	smlad	r1, r0, r4, r1
 800e9f8:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800e9fc:	fb2a 1106 	smlad	r1, sl, r6, r1
 800ea00:	4c35      	ldr	r4, [pc, #212]	; (800ead8 <D64_GENERIC+0x208>)
 800ea02:	9d01      	ldr	r5, [sp, #4]
 800ea04:	fb28 5404 	smlad	r4, r8, r4, r5
 800ea08:	4d33      	ldr	r5, [pc, #204]	; (800ead8 <D64_GENERIC+0x208>)
 800ea0a:	fb2a 4415 	smladx	r4, sl, r5, r4
 800ea0e:	4d33      	ldr	r5, [pc, #204]	; (800eadc <D64_GENERIC+0x20c>)
 800ea10:	fb27 4405 	smlad	r4, r7, r5, r4
 800ea14:	fb20 4415 	smladx	r4, r0, r5, r4
 800ea18:	2501      	movs	r5, #1
 800ea1a:	9400      	str	r4, [sp, #0]
 800ea1c:	fb28 f805 	smuad	r8, r8, r5
 800ea20:	4c2f      	ldr	r4, [pc, #188]	; (800eae0 <D64_GENERIC+0x210>)
 800ea22:	fb27 8704 	smlad	r7, r7, r4, r8
 800ea26:	4c2f      	ldr	r4, [pc, #188]	; (800eae4 <D64_GENERIC+0x214>)
 800ea28:	fb20 7004 	smlad	r0, r0, r4, r7
 800ea2c:	4c2e      	ldr	r4, [pc, #184]	; (800eae8 <D64_GENERIC+0x218>)
 800ea2e:	fb2a 0004 	smlad	r0, sl, r4, r0
 800ea32:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 800ea36:	9902      	ldr	r1, [sp, #8]
 800ea38:	9001      	str	r0, [sp, #4]
 800ea3a:	b189      	cbz	r1, 800ea60 <D64_GENERIC+0x190>
 800ea3c:	9803      	ldr	r0, [sp, #12]
 800ea3e:	9c04      	ldr	r4, [sp, #16]
 800ea40:	9604      	str	r6, [sp, #16]
 800ea42:	4430      	add	r0, r6
 800ea44:	1b00      	subs	r0, r0, r4
 800ea46:	17c5      	asrs	r5, r0, #31
 800ea48:	460f      	mov	r7, r1
 800ea4a:	fba0 0101 	umull	r0, r1, r0, r1
 800ea4e:	fb07 1105 	mla	r1, r7, r5, r1
 800ea52:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800ea56:	f141 0100 	adc.w	r1, r1, #0
 800ea5a:	0049      	lsls	r1, r1, #1
 800ea5c:	9103      	str	r1, [sp, #12]
 800ea5e:	460e      	mov	r6, r1
 800ea60:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800ea62:	9905      	ldr	r1, [sp, #20]
 800ea64:	9806      	ldr	r0, [sp, #24]
 800ea66:	02b6      	lsls	r6, r6, #10
 800ea68:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800ea6c:	f04f 0800 	mov.w	r8, #0
 800ea70:	fb0c f404 	mul.w	r4, ip, r4
 800ea74:	fbc1 7806 	smlal	r7, r8, r1, r6
 800ea78:	4641      	mov	r1, r8
 800ea7a:	1089      	asrs	r1, r1, #2
 800ea7c:	f301 010f 	ssat	r1, #16, r1
 800ea80:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 800ea84:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800ea86:	f10c 0c01 	add.w	ip, ip, #1
 800ea8a:	4561      	cmp	r1, ip
 800ea8c:	dd0e      	ble.n	800eaac <D64_GENERIC+0x1dc>
 800ea8e:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 800ea90:	2e01      	cmp	r6, #1
 800ea92:	f47f af3a 	bne.w	800e90a <D64_GENERIC+0x3a>
 800ea96:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800ea98:	06b4      	lsls	r4, r6, #26
 800ea9a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ea9e:	f109 0908 	add.w	r9, r9, #8
 800eaa2:	f57f af5a 	bpl.w	800e95a <D64_GENERIC+0x8a>
 800eaa6:	ba40      	rev16	r0, r0
 800eaa8:	ba49      	rev16	r1, r1
 800eaaa:	e756      	b.n	800e95a <D64_GENERIC+0x8a>
 800eaac:	61d3      	str	r3, [r2, #28]
 800eaae:	9b03      	ldr	r3, [sp, #12]
 800eab0:	9901      	ldr	r1, [sp, #4]
 800eab2:	6113      	str	r3, [r2, #16]
 800eab4:	9b04      	ldr	r3, [sp, #16]
 800eab6:	6091      	str	r1, [r2, #8]
 800eab8:	6153      	str	r3, [r2, #20]
 800eaba:	9900      	ldr	r1, [sp, #0]
 800eabc:	9b07      	ldr	r3, [sp, #28]
 800eabe:	60d1      	str	r1, [r2, #12]
 800eac0:	2000      	movs	r0, #0
 800eac2:	6193      	str	r3, [r2, #24]
 800eac4:	b009      	add	sp, #36	; 0x24
 800eac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaca:	bf00      	nop
 800eacc:	001c0015 	.word	0x001c0015
 800ead0:	000f000a 	.word	0x000f000a
 800ead4:	00060003 	.word	0x00060003
 800ead8:	0024002a 	.word	0x0024002a
 800eadc:	002e0030 	.word	0x002e0030
 800eae0:	00030006 	.word	0x00030006
 800eae4:	000a000f 	.word	0x000a000f
 800eae8:	0015001c 	.word	0x0015001c
 800eaec:	20000000 	.word	0x20000000

0800eaf0 <D80_GENERIC>:
 800eaf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaf4:	b08b      	sub	sp, #44	; 0x2c
 800eaf6:	6914      	ldr	r4, [r2, #16]
 800eaf8:	9404      	str	r4, [sp, #16]
 800eafa:	6954      	ldr	r4, [r2, #20]
 800eafc:	9405      	str	r4, [sp, #20]
 800eafe:	6994      	ldr	r4, [r2, #24]
 800eb00:	9409      	str	r4, [sp, #36]	; 0x24
 800eb02:	6894      	ldr	r4, [r2, #8]
 800eb04:	9402      	str	r4, [sp, #8]
 800eb06:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800eb08:	68d4      	ldr	r4, [r2, #12]
 800eb0a:	9401      	str	r4, [sp, #4]
 800eb0c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800eb0e:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800eb12:	9406      	str	r4, [sp, #24]
 800eb14:	9107      	str	r1, [sp, #28]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	f000 810f 	beq.w	800ed3a <D80_GENERIC+0x24a>
 800eb1c:	6a13      	ldr	r3, [r2, #32]
 800eb1e:	9308      	str	r3, [sp, #32]
 800eb20:	2300      	movs	r3, #0
 800eb22:	9200      	str	r2, [sp, #0]
 800eb24:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800ed8c <D80_GENERIC+0x29c>
 800eb28:	f8cd b00c 	str.w	fp, [sp, #12]
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	e0ed      	b.n	800ed0c <D80_GENERIC+0x21c>
 800eb30:	fa5f fc8c 	uxtb.w	ip, ip
 800eb34:	fa0f f48c 	sxth.w	r4, ip
 800eb38:	0066      	lsls	r6, r4, #1
 800eb3a:	eb06 0804 	add.w	r8, r6, r4
 800eb3e:	f1cc 0500 	rsb	r5, ip, #0
 800eb42:	eb00 0108 	add.w	r1, r0, r8
 800eb46:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800eb4a:	194b      	adds	r3, r1, r5
 800eb4c:	5d49      	ldrb	r1, [r1, r5]
 800eb4e:	f810 a008 	ldrb.w	sl, [r0, r8]
 800eb52:	f813 b004 	ldrb.w	fp, [r3, r4]
 800eb56:	f810 c00c 	ldrb.w	ip, [r0, ip]
 800eb5a:	f890 8000 	ldrb.w	r8, [r0]
 800eb5e:	eb03 0e04 	add.w	lr, r3, r4
 800eb62:	eb0e 0705 	add.w	r7, lr, r5
 800eb66:	0409      	lsls	r1, r1, #16
 800eb68:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800eb6c:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800eb70:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800eb74:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 800eb78:	eb0a 0004 	add.w	r0, sl, r4
 800eb7c:	041b      	lsls	r3, r3, #16
 800eb7e:	f81a a004 	ldrb.w	sl, [sl, r4]
 800eb82:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800eb86:	5d44      	ldrb	r4, [r0, r5]
 800eb88:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800eb8c:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800eb90:	4428      	add	r0, r5
 800eb92:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800eb96:	4441      	add	r1, r8
 800eb98:	4430      	add	r0, r6
 800eb9a:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800eb9e:	441f      	add	r7, r3
 800eba0:	b2cd      	uxtb	r5, r1
 800eba2:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800eba6:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800ebaa:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800ebae:	9b03      	ldr	r3, [sp, #12]
 800ebb0:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800ebb4:	0e09      	lsrs	r1, r1, #24
 800ebb6:	4433      	add	r3, r6
 800ebb8:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800ebbc:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 800ebc0:	b2fd      	uxtb	r5, r7
 800ebc2:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 800ebc6:	469b      	mov	fp, r3
 800ebc8:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800ebcc:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800ebd0:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 800ebd4:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800ebd8:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800ebdc:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 800ebe0:	0e3b      	lsrs	r3, r7, #24
 800ebe2:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800ebe6:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 800ebea:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ebee:	fa5f fe84 	uxtb.w	lr, r4
 800ebf2:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 800ebf6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800ebfa:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800ebfe:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 800ec02:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 800ec06:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800ec0a:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 800ec0e:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800ec12:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ec16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ec1a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800ec1e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ec22:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ec26:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ec2a:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800ec2e:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800ec32:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800ec36:	0aa3      	lsrs	r3, r4, #10
 800ec38:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800ec3c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800ec40:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ec44:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 800ec48:	9303      	str	r3, [sp, #12]
 800ec4a:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800ec4e:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800ec52:	4b42      	ldr	r3, [pc, #264]	; (800ed5c <D80_GENERIC+0x26c>)
 800ec54:	9901      	ldr	r1, [sp, #4]
 800ec56:	fb2b 1303 	smlad	r3, fp, r3, r1
 800ec5a:	4941      	ldr	r1, [pc, #260]	; (800ed60 <D80_GENERIC+0x270>)
 800ec5c:	fb28 3301 	smlad	r3, r8, r1, r3
 800ec60:	4940      	ldr	r1, [pc, #256]	; (800ed64 <D80_GENERIC+0x274>)
 800ec62:	fb2c 3301 	smlad	r3, ip, r1, r3
 800ec66:	4940      	ldr	r1, [pc, #256]	; (800ed68 <D80_GENERIC+0x278>)
 800ec68:	fb27 3301 	smlad	r3, r7, r1, r3
 800ec6c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800ec70:	fb2e 3301 	smlad	r3, lr, r1, r3
 800ec74:	493d      	ldr	r1, [pc, #244]	; (800ed6c <D80_GENERIC+0x27c>)
 800ec76:	9c02      	ldr	r4, [sp, #8]
 800ec78:	fb2b 4401 	smlad	r4, fp, r1, r4
 800ec7c:	493c      	ldr	r1, [pc, #240]	; (800ed70 <D80_GENERIC+0x280>)
 800ec7e:	fb28 4401 	smlad	r4, r8, r1, r4
 800ec82:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 800ec86:	fb2c 4101 	smlad	r1, ip, r1, r4
 800ec8a:	4c3a      	ldr	r4, [pc, #232]	; (800ed74 <D80_GENERIC+0x284>)
 800ec8c:	fb27 1104 	smlad	r1, r7, r4, r1
 800ec90:	4c39      	ldr	r4, [pc, #228]	; (800ed78 <D80_GENERIC+0x288>)
 800ec92:	fb2e 1104 	smlad	r1, lr, r4, r1
 800ec96:	9101      	str	r1, [sp, #4]
 800ec98:	2101      	movs	r1, #1
 800ec9a:	fb2b fb01 	smuad	fp, fp, r1
 800ec9e:	4937      	ldr	r1, [pc, #220]	; (800ed7c <D80_GENERIC+0x28c>)
 800eca0:	fb28 b801 	smlad	r8, r8, r1, fp
 800eca4:	4d36      	ldr	r5, [pc, #216]	; (800ed80 <D80_GENERIC+0x290>)
 800eca6:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800ecaa:	4d36      	ldr	r5, [pc, #216]	; (800ed84 <D80_GENERIC+0x294>)
 800ecac:	fb27 c705 	smlad	r7, r7, r5, ip
 800ecb0:	4d35      	ldr	r5, [pc, #212]	; (800ed88 <D80_GENERIC+0x298>)
 800ecb2:	fb2e 7105 	smlad	r1, lr, r5, r7
 800ecb6:	9102      	str	r1, [sp, #8]
 800ecb8:	9908      	ldr	r1, [sp, #32]
 800ecba:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800ecbe:	b181      	cbz	r1, 800ece2 <D80_GENERIC+0x1f2>
 800ecc0:	9c04      	ldr	r4, [sp, #16]
 800ecc2:	9d05      	ldr	r5, [sp, #20]
 800ecc4:	9305      	str	r3, [sp, #20]
 800ecc6:	441c      	add	r4, r3
 800ecc8:	1b64      	subs	r4, r4, r5
 800ecca:	17e7      	asrs	r7, r4, #31
 800eccc:	fba4 4501 	umull	r4, r5, r4, r1
 800ecd0:	fb01 5507 	mla	r5, r1, r7, r5
 800ecd4:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800ecd8:	f145 0500 	adc.w	r5, r5, #0
 800ecdc:	0069      	lsls	r1, r5, #1
 800ecde:	9104      	str	r1, [sp, #16]
 800ece0:	460b      	mov	r3, r1
 800ece2:	9e00      	ldr	r6, [sp, #0]
 800ece4:	9f06      	ldr	r7, [sp, #24]
 800ece6:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 800ece8:	025b      	lsls	r3, r3, #9
 800ecea:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ecee:	2500      	movs	r5, #0
 800ecf0:	fb02 f101 	mul.w	r1, r2, r1
 800ecf4:	fbc7 4503 	smlal	r4, r5, r7, r3
 800ecf8:	9c07      	ldr	r4, [sp, #28]
 800ecfa:	10ab      	asrs	r3, r5, #2
 800ecfc:	f303 030f 	ssat	r3, #16, r3
 800ed00:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 800ed04:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800ed06:	3201      	adds	r2, #1
 800ed08:	4293      	cmp	r3, r2
 800ed0a:	dd13      	ble.n	800ed34 <D80_GENERIC+0x244>
 800ed0c:	9b00      	ldr	r3, [sp, #0]
 800ed0e:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800ed12:	f1bc 0f01 	cmp.w	ip, #1
 800ed16:	f47f af0b 	bne.w	800eb30 <D80_GENERIC+0x40>
 800ed1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed1c:	6884      	ldr	r4, [r0, #8]
 800ed1e:	069b      	lsls	r3, r3, #26
 800ed20:	e890 0082 	ldmia.w	r0, {r1, r7}
 800ed24:	f100 000a 	add.w	r0, r0, #10
 800ed28:	f57f af3a 	bpl.w	800eba0 <D80_GENERIC+0xb0>
 800ed2c:	ba49      	rev16	r1, r1
 800ed2e:	ba7f      	rev16	r7, r7
 800ed30:	ba64      	rev16	r4, r4
 800ed32:	e735      	b.n	800eba0 <D80_GENERIC+0xb0>
 800ed34:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ed38:	4632      	mov	r2, r6
 800ed3a:	9b02      	ldr	r3, [sp, #8]
 800ed3c:	6093      	str	r3, [r2, #8]
 800ed3e:	9b01      	ldr	r3, [sp, #4]
 800ed40:	60d3      	str	r3, [r2, #12]
 800ed42:	9b04      	ldr	r3, [sp, #16]
 800ed44:	6113      	str	r3, [r2, #16]
 800ed46:	9b05      	ldr	r3, [sp, #20]
 800ed48:	6153      	str	r3, [r2, #20]
 800ed4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed4c:	f8c2 b01c 	str.w	fp, [r2, #28]
 800ed50:	2000      	movs	r0, #0
 800ed52:	6193      	str	r3, [r2, #24]
 800ed54:	b00b      	add	sp, #44	; 0x2c
 800ed56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed5a:	bf00      	nop
 800ed5c:	002d0024 	.word	0x002d0024
 800ed60:	001c0015 	.word	0x001c0015
 800ed64:	000f000a 	.word	0x000f000a
 800ed68:	00060003 	.word	0x00060003
 800ed6c:	0037003f 	.word	0x0037003f
 800ed70:	00450049 	.word	0x00450049
 800ed74:	00490045 	.word	0x00490045
 800ed78:	003f0037 	.word	0x003f0037
 800ed7c:	00030006 	.word	0x00030006
 800ed80:	000a000f 	.word	0x000a000f
 800ed84:	0015001c 	.word	0x0015001c
 800ed88:	0024002d 	.word	0x0024002d
 800ed8c:	20000000 	.word	0x20000000

0800ed90 <D128_GENERIC>:
 800ed90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed94:	b093      	sub	sp, #76	; 0x4c
 800ed96:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800ed98:	9005      	str	r0, [sp, #20]
 800ed9a:	4610      	mov	r0, r2
 800ed9c:	9201      	str	r2, [sp, #4]
 800ed9e:	6912      	ldr	r2, [r2, #16]
 800eda0:	920c      	str	r2, [sp, #48]	; 0x30
 800eda2:	4602      	mov	r2, r0
 800eda4:	6940      	ldr	r0, [r0, #20]
 800eda6:	900d      	str	r0, [sp, #52]	; 0x34
 800eda8:	4610      	mov	r0, r2
 800edaa:	4614      	mov	r4, r2
 800edac:	6992      	ldr	r2, [r2, #24]
 800edae:	9211      	str	r2, [sp, #68]	; 0x44
 800edb0:	69c2      	ldr	r2, [r0, #28]
 800edb2:	9202      	str	r2, [sp, #8]
 800edb4:	68e2      	ldr	r2, [r4, #12]
 800edb6:	6880      	ldr	r0, [r0, #8]
 800edb8:	9203      	str	r2, [sp, #12]
 800edba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800edbc:	9004      	str	r0, [sp, #16]
 800edbe:	920e      	str	r2, [sp, #56]	; 0x38
 800edc0:	910f      	str	r1, [sp, #60]	; 0x3c
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	f000 819b 	beq.w	800f0fe <D128_GENERIC+0x36e>
 800edc8:	6a23      	ldr	r3, [r4, #32]
 800edca:	9310      	str	r3, [sp, #64]	; 0x40
 800edcc:	2300      	movs	r3, #0
 800edce:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800f178 <D128_GENERIC+0x3e8>
 800edd2:	9306      	str	r3, [sp, #24]
 800edd4:	e17a      	b.n	800f0cc <D128_GENERIC+0x33c>
 800edd6:	b2d2      	uxtb	r2, r2
 800edd8:	9d05      	ldr	r5, [sp, #20]
 800edda:	b214      	sxth	r4, r2
 800eddc:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 800ede0:	4250      	negs	r0, r2
 800ede2:	eb05 010a 	add.w	r1, r5, sl
 800ede6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800edea:	eb01 0800 	add.w	r8, r1, r0
 800edee:	eb0b 0c04 	add.w	ip, fp, r4
 800edf2:	eb08 070c 	add.w	r7, r8, ip
 800edf6:	183b      	adds	r3, r7, r0
 800edf8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800edfc:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 800ee00:	eb0e 0604 	add.w	r6, lr, r4
 800ee04:	9307      	str	r3, [sp, #28]
 800ee06:	1833      	adds	r3, r6, r0
 800ee08:	9305      	str	r3, [sp, #20]
 800ee0a:	462b      	mov	r3, r5
 800ee0c:	f815 a00a 	ldrb.w	sl, [r5, sl]
 800ee10:	f8cd a020 	str.w	sl, [sp, #32]
 800ee14:	f818 a00c 	ldrb.w	sl, [r8, ip]
 800ee18:	f813 c002 	ldrb.w	ip, [r3, r2]
 800ee1c:	f81e 8004 	ldrb.w	r8, [lr, r4]
 800ee20:	5c3a      	ldrb	r2, [r7, r0]
 800ee22:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 800ee26:	781f      	ldrb	r7, [r3, #0]
 800ee28:	9b07      	ldr	r3, [sp, #28]
 800ee2a:	9d05      	ldr	r5, [sp, #20]
 800ee2c:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800ee30:	5c09      	ldrb	r1, [r1, r0]
 800ee32:	9709      	str	r7, [sp, #36]	; 0x24
 800ee34:	9307      	str	r3, [sp, #28]
 800ee36:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800ee3a:	5c33      	ldrb	r3, [r6, r0]
 800ee3c:	0412      	lsls	r2, r2, #16
 800ee3e:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800ee42:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800ee46:	9d08      	ldr	r5, [sp, #32]
 800ee48:	eb06 0a04 	add.w	sl, r6, r4
 800ee4c:	0409      	lsls	r1, r1, #16
 800ee4e:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 800ee52:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800ee56:	5d36      	ldrb	r6, [r6, r4]
 800ee58:	9c05      	ldr	r4, [sp, #20]
 800ee5a:	042d      	lsls	r5, r5, #16
 800ee5c:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800ee60:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800ee64:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800ee68:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 800ee6c:	eb0a 0c00 	add.w	ip, sl, r0
 800ee70:	041b      	lsls	r3, r3, #16
 800ee72:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800ee76:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800ee7a:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800ee7e:	9d07      	ldr	r5, [sp, #28]
 800ee80:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800ee84:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 800ee88:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ee8a:	4458      	add	r0, fp
 800ee8c:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 800ee90:	9005      	str	r0, [sp, #20]
 800ee92:	4439      	add	r1, r7
 800ee94:	442a      	add	r2, r5
 800ee96:	44b2      	add	sl, r6
 800ee98:	1918      	adds	r0, r3, r4
 800ee9a:	b2cb      	uxtb	r3, r1
 800ee9c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800eea0:	9e02      	ldr	r6, [sp, #8]
 800eea2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800eea6:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800eeaa:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800eeae:	441e      	add	r6, r3
 800eeb0:	0e09      	lsrs	r1, r1, #24
 800eeb2:	4633      	mov	r3, r6
 800eeb4:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800eeb8:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800eebc:	b2d4      	uxtb	r4, r2
 800eebe:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800eec2:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800eec6:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800eeca:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800eece:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800eed2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800eed6:	0e12      	lsrs	r2, r2, #24
 800eed8:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800eedc:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 800eee0:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800eee4:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800eee8:	9702      	str	r7, [sp, #8]
 800eeea:	b2c2      	uxtb	r2, r0
 800eeec:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800eef0:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 800eef4:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 800eef8:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800eefc:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800ef00:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800ef04:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800ef08:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800ef0c:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800ef10:	0e00      	lsrs	r0, r0, #24
 800ef12:	fa5f f68a 	uxtb.w	r6, sl
 800ef16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ef1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ef1c:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800ef20:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800ef24:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800ef28:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800ef2c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ef30:	950a      	str	r5, [sp, #40]	; 0x28
 800ef32:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800ef36:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800ef3a:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800ef3e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ef42:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800ef46:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ef4a:	920b      	str	r2, [sp, #44]	; 0x2c
 800ef4c:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800ef50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef52:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800ef56:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800ef5a:	9307      	str	r3, [sp, #28]
 800ef5c:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800ef60:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800ef64:	9b02      	ldr	r3, [sp, #8]
 800ef66:	f8cd c008 	str.w	ip, [sp, #8]
 800ef6a:	4694      	mov	ip, r2
 800ef6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef6e:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800ef72:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800ef76:	9a02      	ldr	r2, [sp, #8]
 800ef78:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800ef7c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800ef80:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ef84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ef86:	f8cd a020 	str.w	sl, [sp, #32]
 800ef8a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800ef8e:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800ef92:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ef96:	9b07      	ldr	r3, [sp, #28]
 800ef98:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ef9c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800efa0:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 800efa4:	9a08      	ldr	r2, [sp, #32]
 800efa6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800efaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800efae:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800efb2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800efb6:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800efba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800efbe:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800efc2:	0a96      	lsrs	r6, r2, #10
 800efc4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800efc8:	9602      	str	r6, [sp, #8]
 800efca:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800efce:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800efd2:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800efd6:	4e53      	ldr	r6, [pc, #332]	; (800f124 <D128_GENERIC+0x394>)
 800efd8:	9f03      	ldr	r7, [sp, #12]
 800efda:	fb2c 7606 	smlad	r6, ip, r6, r7
 800efde:	4f52      	ldr	r7, [pc, #328]	; (800f128 <D128_GENERIC+0x398>)
 800efe0:	fb2a 6607 	smlad	r6, sl, r7, r6
 800efe4:	4f51      	ldr	r7, [pc, #324]	; (800f12c <D128_GENERIC+0x39c>)
 800efe6:	fb21 6607 	smlad	r6, r1, r7, r6
 800efea:	4f51      	ldr	r7, [pc, #324]	; (800f130 <D128_GENERIC+0x3a0>)
 800efec:	fb24 6607 	smlad	r6, r4, r7, r6
 800eff0:	4f50      	ldr	r7, [pc, #320]	; (800f134 <D128_GENERIC+0x3a4>)
 800eff2:	fb28 6607 	smlad	r6, r8, r7, r6
 800eff6:	4f50      	ldr	r7, [pc, #320]	; (800f138 <D128_GENERIC+0x3a8>)
 800eff8:	fb20 6607 	smlad	r6, r0, r7, r6
 800effc:	4f4f      	ldr	r7, [pc, #316]	; (800f13c <D128_GENERIC+0x3ac>)
 800effe:	fb23 6607 	smlad	r6, r3, r7, r6
 800f002:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800f006:	fb25 6607 	smlad	r6, r5, r7, r6
 800f00a:	4f4d      	ldr	r7, [pc, #308]	; (800f140 <D128_GENERIC+0x3b0>)
 800f00c:	9a04      	ldr	r2, [sp, #16]
 800f00e:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800f012:	4a4c      	ldr	r2, [pc, #304]	; (800f144 <D128_GENERIC+0x3b4>)
 800f014:	fb2a ee02 	smlad	lr, sl, r2, lr
 800f018:	4f4b      	ldr	r7, [pc, #300]	; (800f148 <D128_GENERIC+0x3b8>)
 800f01a:	fb21 ee07 	smlad	lr, r1, r7, lr
 800f01e:	4f4b      	ldr	r7, [pc, #300]	; (800f14c <D128_GENERIC+0x3bc>)
 800f020:	fb24 ee07 	smlad	lr, r4, r7, lr
 800f024:	4f4a      	ldr	r7, [pc, #296]	; (800f150 <D128_GENERIC+0x3c0>)
 800f026:	fb28 ee07 	smlad	lr, r8, r7, lr
 800f02a:	4f4a      	ldr	r7, [pc, #296]	; (800f154 <D128_GENERIC+0x3c4>)
 800f02c:	fb20 ee07 	smlad	lr, r0, r7, lr
 800f030:	4f49      	ldr	r7, [pc, #292]	; (800f158 <D128_GENERIC+0x3c8>)
 800f032:	fb23 e707 	smlad	r7, r3, r7, lr
 800f036:	f8df e144 	ldr.w	lr, [pc, #324]	; 800f17c <D128_GENERIC+0x3ec>
 800f03a:	fb25 720e 	smlad	r2, r5, lr, r7
 800f03e:	f04f 0b01 	mov.w	fp, #1
 800f042:	9203      	str	r2, [sp, #12]
 800f044:	fb2c fb0b 	smuad	fp, ip, fp
 800f048:	4f44      	ldr	r7, [pc, #272]	; (800f15c <D128_GENERIC+0x3cc>)
 800f04a:	fb2a ba07 	smlad	sl, sl, r7, fp
 800f04e:	4f44      	ldr	r7, [pc, #272]	; (800f160 <D128_GENERIC+0x3d0>)
 800f050:	fb21 aa07 	smlad	sl, r1, r7, sl
 800f054:	4f43      	ldr	r7, [pc, #268]	; (800f164 <D128_GENERIC+0x3d4>)
 800f056:	fb24 aa07 	smlad	sl, r4, r7, sl
 800f05a:	4f43      	ldr	r7, [pc, #268]	; (800f168 <D128_GENERIC+0x3d8>)
 800f05c:	fb28 a707 	smlad	r7, r8, r7, sl
 800f060:	4a42      	ldr	r2, [pc, #264]	; (800f16c <D128_GENERIC+0x3dc>)
 800f062:	fb20 7702 	smlad	r7, r0, r2, r7
 800f066:	4a42      	ldr	r2, [pc, #264]	; (800f170 <D128_GENERIC+0x3e0>)
 800f068:	fb23 7702 	smlad	r7, r3, r2, r7
 800f06c:	4b41      	ldr	r3, [pc, #260]	; (800f174 <D128_GENERIC+0x3e4>)
 800f06e:	fb25 7303 	smlad	r3, r5, r3, r7
 800f072:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800f074:	9304      	str	r3, [sp, #16]
 800f076:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800f07a:	b185      	cbz	r5, 800f09e <D128_GENERIC+0x30e>
 800f07c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f07e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f080:	960d      	str	r6, [sp, #52]	; 0x34
 800f082:	4432      	add	r2, r6
 800f084:	1a52      	subs	r2, r2, r1
 800f086:	17d1      	asrs	r1, r2, #31
 800f088:	fba2 2305 	umull	r2, r3, r2, r5
 800f08c:	fb05 3301 	mla	r3, r5, r1, r3
 800f090:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800f094:	f143 0300 	adc.w	r3, r3, #0
 800f098:	005b      	lsls	r3, r3, #1
 800f09a:	930c      	str	r3, [sp, #48]	; 0x30
 800f09c:	461e      	mov	r6, r3
 800f09e:	9801      	ldr	r0, [sp, #4]
 800f0a0:	9c06      	ldr	r4, [sp, #24]
 800f0a2:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800f0a4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800f0a6:	01f6      	lsls	r6, r6, #7
 800f0a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	fbc5 2306 	smlal	r2, r3, r5, r6
 800f0b2:	fb04 f101 	mul.w	r1, r4, r1
 800f0b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f0b8:	109b      	asrs	r3, r3, #2
 800f0ba:	f303 030f 	ssat	r3, #16, r3
 800f0be:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800f0c2:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800f0c4:	1c62      	adds	r2, r4, #1
 800f0c6:	4293      	cmp	r3, r2
 800f0c8:	9206      	str	r2, [sp, #24]
 800f0ca:	dd18      	ble.n	800f0fe <D128_GENERIC+0x36e>
 800f0cc:	9b01      	ldr	r3, [sp, #4]
 800f0ce:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f0d0:	2a01      	cmp	r2, #1
 800f0d2:	f47f ae80 	bne.w	800edd6 <D128_GENERIC+0x46>
 800f0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0d8:	9d05      	ldr	r5, [sp, #20]
 800f0da:	069b      	lsls	r3, r3, #26
 800f0dc:	6829      	ldr	r1, [r5, #0]
 800f0de:	686a      	ldr	r2, [r5, #4]
 800f0e0:	68a8      	ldr	r0, [r5, #8]
 800f0e2:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800f0e6:	f105 0410 	add.w	r4, r5, #16
 800f0ea:	d506      	bpl.n	800f0fa <D128_GENERIC+0x36a>
 800f0ec:	ba49      	rev16	r1, r1
 800f0ee:	ba52      	rev16	r2, r2
 800f0f0:	ba40      	rev16	r0, r0
 800f0f2:	fa9a fa9a 	rev16.w	sl, sl
 800f0f6:	9405      	str	r4, [sp, #20]
 800f0f8:	e6cf      	b.n	800ee9a <D128_GENERIC+0x10a>
 800f0fa:	9405      	str	r4, [sp, #20]
 800f0fc:	e6cd      	b.n	800ee9a <D128_GENERIC+0x10a>
 800f0fe:	9a01      	ldr	r2, [sp, #4]
 800f100:	9904      	ldr	r1, [sp, #16]
 800f102:	6091      	str	r1, [r2, #8]
 800f104:	9903      	ldr	r1, [sp, #12]
 800f106:	60d1      	str	r1, [r2, #12]
 800f108:	9b02      	ldr	r3, [sp, #8]
 800f10a:	61d3      	str	r3, [r2, #28]
 800f10c:	4611      	mov	r1, r2
 800f10e:	4613      	mov	r3, r2
 800f110:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f112:	610a      	str	r2, [r1, #16]
 800f114:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f116:	6159      	str	r1, [r3, #20]
 800f118:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f11a:	6199      	str	r1, [r3, #24]
 800f11c:	2000      	movs	r0, #0
 800f11e:	b013      	add	sp, #76	; 0x4c
 800f120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f124:	00780069 	.word	0x00780069
 800f128:	005b004e 	.word	0x005b004e
 800f12c:	00420037 	.word	0x00420037
 800f130:	002d0024 	.word	0x002d0024
 800f134:	001c0015 	.word	0x001c0015
 800f138:	000f000a 	.word	0x000f000a
 800f13c:	00060003 	.word	0x00060003
 800f140:	00880096 	.word	0x00880096
 800f144:	00a200ac 	.word	0x00a200ac
 800f148:	00b400ba 	.word	0x00b400ba
 800f14c:	00be00c0 	.word	0x00be00c0
 800f150:	00c000be 	.word	0x00c000be
 800f154:	00ba00b4 	.word	0x00ba00b4
 800f158:	00ac00a2 	.word	0x00ac00a2
 800f15c:	00030006 	.word	0x00030006
 800f160:	000a000f 	.word	0x000a000f
 800f164:	0015001c 	.word	0x0015001c
 800f168:	0024002d 	.word	0x0024002d
 800f16c:	00370042 	.word	0x00370042
 800f170:	004e005b 	.word	0x004e005b
 800f174:	00690078 	.word	0x00690078
 800f178:	20000000 	.word	0x20000000
 800f17c:	00960088 	.word	0x00960088

0800f180 <D16_1CH_HTONS_VOL_HP>:
 800f180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f184:	4691      	mov	r9, r2
 800f186:	b083      	sub	sp, #12
 800f188:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800f18a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800f18e:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800f192:	9300      	str	r3, [sp, #0]
 800f194:	4680      	mov	r8, r0
 800f196:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800f19a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f19e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f1a2:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800f1a6:	9401      	str	r4, [sp, #4]
 800f1a8:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800f1ac:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800f1b0:	2a00      	cmp	r2, #0
 800f1b2:	d04e      	beq.n	800f252 <D16_1CH_HTONS_VOL_HP+0xd2>
 800f1b4:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800f260 <D16_1CH_HTONS_VOL_HP+0xe0>
 800f1b8:	1e8c      	subs	r4, r1, #2
 800f1ba:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800f1be:	f858 2b02 	ldr.w	r2, [r8], #2
 800f1c2:	ba52      	rev16	r2, r2
 800f1c4:	b2d6      	uxtb	r6, r2
 800f1c6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800f1ca:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800f1ce:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800f1d2:	4413      	add	r3, r2
 800f1d4:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 800f1d8:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800f1dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f1e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800f1e4:	0a93      	lsrs	r3, r2, #10
 800f1e6:	4a1c      	ldr	r2, [pc, #112]	; (800f258 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800f1e8:	fb21 5202 	smlad	r2, r1, r2, r5
 800f1ec:	4d1b      	ldr	r5, [pc, #108]	; (800f25c <D16_1CH_HTONS_VOL_HP+0xdc>)
 800f1ee:	fb21 f505 	smuad	r5, r1, r5
 800f1f2:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800f1f6:	4410      	add	r0, r2
 800f1f8:	1bc0      	subs	r0, r0, r7
 800f1fa:	17c7      	asrs	r7, r0, #31
 800f1fc:	fba0 010e 	umull	r0, r1, r0, lr
 800f200:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800f204:	fb0e 1107 	mla	r1, lr, r7, r1
 800f208:	f141 0100 	adc.w	r1, r1, #0
 800f20c:	0448      	lsls	r0, r1, #17
 800f20e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f212:	2700      	movs	r7, #0
 800f214:	fbc0 670a 	smlal	r6, r7, r0, sl
 800f218:	45d8      	cmp	r8, fp
 800f21a:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800f21e:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800f222:	4617      	mov	r7, r2
 800f224:	f301 010f 	ssat	r1, #16, r1
 800f228:	f824 1f02 	strh.w	r1, [r4, #2]!
 800f22c:	d1c7      	bne.n	800f1be <D16_1CH_HTONS_VOL_HP+0x3e>
 800f22e:	9901      	ldr	r1, [sp, #4]
 800f230:	f8c9 301c 	str.w	r3, [r9, #28]
 800f234:	9b00      	ldr	r3, [sp, #0]
 800f236:	f8c9 0010 	str.w	r0, [r9, #16]
 800f23a:	2000      	movs	r0, #0
 800f23c:	f8c9 5008 	str.w	r5, [r9, #8]
 800f240:	f8c9 100c 	str.w	r1, [r9, #12]
 800f244:	f8c9 2014 	str.w	r2, [r9, #20]
 800f248:	f8c9 3018 	str.w	r3, [r9, #24]
 800f24c:	b003      	add	sp, #12
 800f24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f252:	463a      	mov	r2, r7
 800f254:	4621      	mov	r1, r4
 800f256:	e7eb      	b.n	800f230 <D16_1CH_HTONS_VOL_HP+0xb0>
 800f258:	00030001 	.word	0x00030001
 800f25c:	00010003 	.word	0x00010003
 800f260:	20000000 	.word	0x20000000

0800f264 <D24_1CH_HTONS_VOL_HP>:
 800f264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f268:	b089      	sub	sp, #36	; 0x24
 800f26a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800f26c:	6996      	ldr	r6, [r2, #24]
 800f26e:	9304      	str	r3, [sp, #16]
 800f270:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800f272:	9207      	str	r2, [sp, #28]
 800f274:	6915      	ldr	r5, [r2, #16]
 800f276:	6954      	ldr	r4, [r2, #20]
 800f278:	9606      	str	r6, [sp, #24]
 800f27a:	6893      	ldr	r3, [r2, #8]
 800f27c:	69d6      	ldr	r6, [r2, #28]
 800f27e:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800f282:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800f286:	9a04      	ldr	r2, [sp, #16]
 800f288:	9705      	str	r7, [sp, #20]
 800f28a:	2a00      	cmp	r2, #0
 800f28c:	d07e      	beq.n	800f38c <D24_1CH_HTONS_VOL_HP+0x128>
 800f28e:	f1a1 0b02 	sub.w	fp, r1, #2
 800f292:	2700      	movs	r7, #0
 800f294:	46a8      	mov	r8, r5
 800f296:	f8cd b004 	str.w	fp, [sp, #4]
 800f29a:	4655      	mov	r5, sl
 800f29c:	46e3      	mov	fp, ip
 800f29e:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800f398 <D24_1CH_HTONS_VOL_HP+0x134>
 800f2a2:	46ba      	mov	sl, r7
 800f2a4:	469c      	mov	ip, r3
 800f2a6:	e055      	b.n	800f354 <D24_1CH_HTONS_VOL_HP+0xf0>
 800f2a8:	7802      	ldrb	r2, [r0, #0]
 800f2aa:	78c3      	ldrb	r3, [r0, #3]
 800f2ac:	7841      	ldrb	r1, [r0, #1]
 800f2ae:	0212      	lsls	r2, r2, #8
 800f2b0:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800f2b4:	440b      	add	r3, r1
 800f2b6:	3002      	adds	r0, #2
 800f2b8:	b2d9      	uxtb	r1, r3
 800f2ba:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f2be:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800f2c2:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800f2c6:	0c1b      	lsrs	r3, r3, #16
 800f2c8:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800f2cc:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800f2d0:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 800f2d4:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800f2d8:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800f2dc:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800f2e0:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800f2e4:	4a2a      	ldr	r2, [pc, #168]	; (800f390 <D24_1CH_HTONS_VOL_HP+0x12c>)
 800f2e6:	fb23 b102 	smlad	r1, r3, r2, fp
 800f2ea:	4a2a      	ldr	r2, [pc, #168]	; (800f394 <D24_1CH_HTONS_VOL_HP+0x130>)
 800f2ec:	fb23 cb02 	smlad	fp, r3, r2, ip
 800f2f0:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 800f2f4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800f2f8:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800f2fc:	2201      	movs	r2, #1
 800f2fe:	fb23 f702 	smuad	r7, r3, r2
 800f302:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800f306:	eb01 0208 	add.w	r2, r1, r8
 800f30a:	1b12      	subs	r2, r2, r4
 800f30c:	17d4      	asrs	r4, r2, #31
 800f30e:	fba2 2305 	umull	r2, r3, r2, r5
 800f312:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800f316:	fb05 3304 	mla	r3, r5, r4, r3
 800f31a:	f143 0300 	adc.w	r3, r3, #0
 800f31e:	9c05      	ldr	r4, [sp, #20]
 800f320:	03da      	lsls	r2, r3, #15
 800f322:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800f326:	f04f 0900 	mov.w	r9, #0
 800f32a:	fbc4 8902 	smlal	r8, r9, r4, r2
 800f32e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800f332:	9a01      	ldr	r2, [sp, #4]
 800f334:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800f338:	9b03      	ldr	r3, [sp, #12]
 800f33a:	109b      	asrs	r3, r3, #2
 800f33c:	f303 030f 	ssat	r3, #16, r3
 800f340:	f822 3f02 	strh.w	r3, [r2, #2]!
 800f344:	9b04      	ldr	r3, [sp, #16]
 800f346:	9201      	str	r2, [sp, #4]
 800f348:	f10a 0a01 	add.w	sl, sl, #1
 800f34c:	459a      	cmp	sl, r3
 800f34e:	44bc      	add	ip, r7
 800f350:	460c      	mov	r4, r1
 800f352:	d00b      	beq.n	800f36c <D24_1CH_HTONS_VOL_HP+0x108>
 800f354:	f01a 0f01 	tst.w	sl, #1
 800f358:	d0a6      	beq.n	800f2a8 <D24_1CH_HTONS_VOL_HP+0x44>
 800f35a:	78c2      	ldrb	r2, [r0, #3]
 800f35c:	7883      	ldrb	r3, [r0, #2]
 800f35e:	f810 1b04 	ldrb.w	r1, [r0], #4
 800f362:	0212      	lsls	r2, r2, #8
 800f364:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800f368:	440b      	add	r3, r1
 800f36a:	e7a5      	b.n	800f2b8 <D24_1CH_HTONS_VOL_HP+0x54>
 800f36c:	4663      	mov	r3, ip
 800f36e:	4645      	mov	r5, r8
 800f370:	46dc      	mov	ip, fp
 800f372:	9807      	ldr	r0, [sp, #28]
 800f374:	6141      	str	r1, [r0, #20]
 800f376:	9906      	ldr	r1, [sp, #24]
 800f378:	6083      	str	r3, [r0, #8]
 800f37a:	f8c0 c00c 	str.w	ip, [r0, #12]
 800f37e:	61c6      	str	r6, [r0, #28]
 800f380:	6105      	str	r5, [r0, #16]
 800f382:	6181      	str	r1, [r0, #24]
 800f384:	2000      	movs	r0, #0
 800f386:	b009      	add	sp, #36	; 0x24
 800f388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f38c:	4621      	mov	r1, r4
 800f38e:	e7f0      	b.n	800f372 <D24_1CH_HTONS_VOL_HP+0x10e>
 800f390:	00030001 	.word	0x00030001
 800f394:	00060007 	.word	0x00060007
 800f398:	20000000 	.word	0x20000000

0800f39c <D32_1CH_HTONS_VOL_HP>:
 800f39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3a0:	4692      	mov	sl, r2
 800f3a2:	b087      	sub	sp, #28
 800f3a4:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800f3a6:	f8da 3018 	ldr.w	r3, [sl, #24]
 800f3aa:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800f3ae:	9304      	str	r3, [sp, #16]
 800f3b0:	f8da 4010 	ldr.w	r4, [sl, #16]
 800f3b4:	f8da 8014 	ldr.w	r8, [sl, #20]
 800f3b8:	f8da 601c 	ldr.w	r6, [sl, #28]
 800f3bc:	f8da 3008 	ldr.w	r3, [sl, #8]
 800f3c0:	f8da e00c 	ldr.w	lr, [sl, #12]
 800f3c4:	9501      	str	r5, [sp, #4]
 800f3c6:	f8da c020 	ldr.w	ip, [sl, #32]
 800f3ca:	2a00      	cmp	r2, #0
 800f3cc:	d07b      	beq.n	800f4c6 <D32_1CH_HTONS_VOL_HP+0x12a>
 800f3ce:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800f3d2:	4f3e      	ldr	r7, [pc, #248]	; (800f4cc <D32_1CH_HTONS_VOL_HP+0x130>)
 800f3d4:	f8cd c00c 	str.w	ip, [sp, #12]
 800f3d8:	9202      	str	r2, [sp, #8]
 800f3da:	460d      	mov	r5, r1
 800f3dc:	46a1      	mov	r9, r4
 800f3de:	4684      	mov	ip, r0
 800f3e0:	f8cd a014 	str.w	sl, [sp, #20]
 800f3e4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f3e8:	ba49      	rev16	r1, r1
 800f3ea:	b2c8      	uxtb	r0, r1
 800f3ec:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800f3f0:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 800f3f4:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800f3f8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800f3fc:	0e09      	lsrs	r1, r1, #24
 800f3fe:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800f402:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800f406:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800f40a:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800f40e:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800f412:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 800f416:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f41a:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800f41e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800f422:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800f426:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800f42a:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800f42e:	4a28      	ldr	r2, [pc, #160]	; (800f4d0 <D32_1CH_HTONS_VOL_HP+0x134>)
 800f430:	fb20 e202 	smlad	r2, r0, r2, lr
 800f434:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800f438:	fb2a 2101 	smlad	r1, sl, r1, r2
 800f43c:	4a25      	ldr	r2, [pc, #148]	; (800f4d4 <D32_1CH_HTONS_VOL_HP+0x138>)
 800f43e:	fb20 3302 	smlad	r3, r0, r2, r3
 800f442:	4a25      	ldr	r2, [pc, #148]	; (800f4d8 <D32_1CH_HTONS_VOL_HP+0x13c>)
 800f444:	fb2a 3e02 	smlad	lr, sl, r2, r3
 800f448:	2301      	movs	r3, #1
 800f44a:	fb20 f003 	smuad	r0, r0, r3
 800f44e:	4b23      	ldr	r3, [pc, #140]	; (800f4dc <D32_1CH_HTONS_VOL_HP+0x140>)
 800f450:	fb2a 0303 	smlad	r3, sl, r3, r0
 800f454:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800f458:	9c03      	ldr	r4, [sp, #12]
 800f45a:	eb02 0009 	add.w	r0, r2, r9
 800f45e:	eba0 0008 	sub.w	r0, r0, r8
 800f462:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800f466:	fba0 0104 	umull	r0, r1, r0, r4
 800f46a:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800f46e:	fb04 110b 	mla	r1, r4, fp, r1
 800f472:	f141 0100 	adc.w	r1, r1, #0
 800f476:	9c01      	ldr	r4, [sp, #4]
 800f478:	0388      	lsls	r0, r1, #14
 800f47a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800f47e:	f04f 0900 	mov.w	r9, #0
 800f482:	fbc0 8904 	smlal	r8, r9, r0, r4
 800f486:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800f48a:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800f48e:	f300 000f 	ssat	r0, #16, r0
 800f492:	9902      	ldr	r1, [sp, #8]
 800f494:	f825 0b02 	strh.w	r0, [r5], #2
 800f498:	428d      	cmp	r5, r1
 800f49a:	4690      	mov	r8, r2
 800f49c:	d1a2      	bne.n	800f3e4 <D32_1CH_HTONS_VOL_HP+0x48>
 800f49e:	f8dd a014 	ldr.w	sl, [sp, #20]
 800f4a2:	464c      	mov	r4, r9
 800f4a4:	f8ca 3008 	str.w	r3, [sl, #8]
 800f4a8:	9b04      	ldr	r3, [sp, #16]
 800f4aa:	f8ca e00c 	str.w	lr, [sl, #12]
 800f4ae:	2000      	movs	r0, #0
 800f4b0:	f8ca 601c 	str.w	r6, [sl, #28]
 800f4b4:	f8ca 4010 	str.w	r4, [sl, #16]
 800f4b8:	f8ca 2014 	str.w	r2, [sl, #20]
 800f4bc:	f8ca 3018 	str.w	r3, [sl, #24]
 800f4c0:	b007      	add	sp, #28
 800f4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4c6:	4642      	mov	r2, r8
 800f4c8:	e7ec      	b.n	800f4a4 <D32_1CH_HTONS_VOL_HP+0x108>
 800f4ca:	bf00      	nop
 800f4cc:	20000000 	.word	0x20000000
 800f4d0:	00060003 	.word	0x00060003
 800f4d4:	000a000c 	.word	0x000a000c
 800f4d8:	000c000a 	.word	0x000c000a
 800f4dc:	00030006 	.word	0x00030006

0800f4e0 <D48_1CH_HTONS_VOL_HP>:
 800f4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e4:	4613      	mov	r3, r2
 800f4e6:	461c      	mov	r4, r3
 800f4e8:	b087      	sub	sp, #28
 800f4ea:	4625      	mov	r5, r4
 800f4ec:	4626      	mov	r6, r4
 800f4ee:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800f4f0:	9205      	str	r2, [sp, #20]
 800f4f2:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800f4f4:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800f4f8:	9501      	str	r5, [sp, #4]
 800f4fa:	4680      	mov	r8, r0
 800f4fc:	6a35      	ldr	r5, [r6, #32]
 800f4fe:	6918      	ldr	r0, [r3, #16]
 800f500:	699b      	ldr	r3, [r3, #24]
 800f502:	9304      	str	r3, [sp, #16]
 800f504:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800f508:	68a3      	ldr	r3, [r4, #8]
 800f50a:	9502      	str	r5, [sp, #8]
 800f50c:	68e4      	ldr	r4, [r4, #12]
 800f50e:	2a00      	cmp	r2, #0
 800f510:	f000 808c 	beq.w	800f62c <D48_1CH_HTONS_VOL_HP+0x14c>
 800f514:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800f518:	4d45      	ldr	r5, [pc, #276]	; (800f630 <D48_1CH_HTONS_VOL_HP+0x150>)
 800f51a:	9203      	str	r2, [sp, #12]
 800f51c:	468c      	mov	ip, r1
 800f51e:	e898 0044 	ldmia.w	r8, {r2, r6}
 800f522:	f108 0806 	add.w	r8, r8, #6
 800f526:	ba52      	rev16	r2, r2
 800f528:	ba76      	rev16	r6, r6
 800f52a:	b2d7      	uxtb	r7, r2
 800f52c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800f530:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 800f534:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800f538:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800f53c:	0e12      	lsrs	r2, r2, #24
 800f53e:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800f542:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800f546:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800f54a:	fa5f fb86 	uxtb.w	fp, r6
 800f54e:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800f552:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800f556:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800f55a:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800f55e:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800f562:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800f566:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800f56a:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800f56e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800f572:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f576:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800f57a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800f57e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800f582:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800f586:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800f58a:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800f58e:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800f592:	4a28      	ldr	r2, [pc, #160]	; (800f634 <D48_1CH_HTONS_VOL_HP+0x154>)
 800f594:	fb2a 4202 	smlad	r2, sl, r2, r4
 800f598:	4927      	ldr	r1, [pc, #156]	; (800f638 <D48_1CH_HTONS_VOL_HP+0x158>)
 800f59a:	fb27 2201 	smlad	r2, r7, r1, r2
 800f59e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800f5a2:	fb26 2201 	smlad	r2, r6, r1, r2
 800f5a6:	4925      	ldr	r1, [pc, #148]	; (800f63c <D48_1CH_HTONS_VOL_HP+0x15c>)
 800f5a8:	fb2a 3401 	smlad	r4, sl, r1, r3
 800f5ac:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800f5b0:	fb27 4403 	smlad	r4, r7, r3, r4
 800f5b4:	4b22      	ldr	r3, [pc, #136]	; (800f640 <D48_1CH_HTONS_VOL_HP+0x160>)
 800f5b6:	fb26 4403 	smlad	r4, r6, r3, r4
 800f5ba:	2101      	movs	r1, #1
 800f5bc:	fb2a fa01 	smuad	sl, sl, r1
 800f5c0:	4b20      	ldr	r3, [pc, #128]	; (800f644 <D48_1CH_HTONS_VOL_HP+0x164>)
 800f5c2:	fb27 a703 	smlad	r7, r7, r3, sl
 800f5c6:	4b20      	ldr	r3, [pc, #128]	; (800f648 <D48_1CH_HTONS_VOL_HP+0x168>)
 800f5c8:	fb26 7303 	smlad	r3, r6, r3, r7
 800f5cc:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800f5d0:	9e02      	ldr	r6, [sp, #8]
 800f5d2:	9f01      	ldr	r7, [sp, #4]
 800f5d4:	4410      	add	r0, r2
 800f5d6:	eba0 0009 	sub.w	r0, r0, r9
 800f5da:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800f5de:	fba0 0106 	umull	r0, r1, r0, r6
 800f5e2:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800f5e6:	fb06 110a 	mla	r1, r6, sl, r1
 800f5ea:	f141 0100 	adc.w	r1, r1, #0
 800f5ee:	0308      	lsls	r0, r1, #12
 800f5f0:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800f5f4:	f04f 0a00 	mov.w	sl, #0
 800f5f8:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800f5fc:	4657      	mov	r7, sl
 800f5fe:	10b8      	asrs	r0, r7, #2
 800f600:	f300 000f 	ssat	r0, #16, r0
 800f604:	f82c 0b02 	strh.w	r0, [ip], #2
 800f608:	0048      	lsls	r0, r1, #1
 800f60a:	9903      	ldr	r1, [sp, #12]
 800f60c:	458c      	cmp	ip, r1
 800f60e:	4691      	mov	r9, r2
 800f610:	d185      	bne.n	800f51e <D48_1CH_HTONS_VOL_HP+0x3e>
 800f612:	9d05      	ldr	r5, [sp, #20]
 800f614:	616a      	str	r2, [r5, #20]
 800f616:	9a04      	ldr	r2, [sp, #16]
 800f618:	6128      	str	r0, [r5, #16]
 800f61a:	2000      	movs	r0, #0
 800f61c:	60ab      	str	r3, [r5, #8]
 800f61e:	60ec      	str	r4, [r5, #12]
 800f620:	f8c5 e01c 	str.w	lr, [r5, #28]
 800f624:	61aa      	str	r2, [r5, #24]
 800f626:	b007      	add	sp, #28
 800f628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f62c:	464a      	mov	r2, r9
 800f62e:	e7f0      	b.n	800f612 <D48_1CH_HTONS_VOL_HP+0x132>
 800f630:	20000000 	.word	0x20000000
 800f634:	000f000a 	.word	0x000f000a
 800f638:	00060003 	.word	0x00060003
 800f63c:	00150019 	.word	0x00150019
 800f640:	00190015 	.word	0x00190015
 800f644:	00030006 	.word	0x00030006
 800f648:	000a000f 	.word	0x000a000f

0800f64c <D64_1CH_HTONS_VOL_HP>:
 800f64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f650:	b089      	sub	sp, #36	; 0x24
 800f652:	4614      	mov	r4, r2
 800f654:	9207      	str	r2, [sp, #28]
 800f656:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800f658:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800f65c:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800f660:	6992      	ldr	r2, [r2, #24]
 800f662:	9206      	str	r2, [sp, #24]
 800f664:	68e2      	ldr	r2, [r4, #12]
 800f666:	9201      	str	r2, [sp, #4]
 800f668:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f66a:	9203      	str	r2, [sp, #12]
 800f66c:	6a22      	ldr	r2, [r4, #32]
 800f66e:	69e5      	ldr	r5, [r4, #28]
 800f670:	68a6      	ldr	r6, [r4, #8]
 800f672:	9204      	str	r2, [sp, #16]
 800f674:	2b00      	cmp	r3, #0
 800f676:	f000 80b0 	beq.w	800f7da <D64_1CH_HTONS_VOL_HP+0x18e>
 800f67a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800f67e:	4f58      	ldr	r7, [pc, #352]	; (800f7e0 <D64_1CH_HTONS_VOL_HP+0x194>)
 800f680:	9305      	str	r3, [sp, #20]
 800f682:	9102      	str	r1, [sp, #8]
 800f684:	f850 2b08 	ldr.w	r2, [r0], #8
 800f688:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f68c:	ba52      	rev16	r2, r2
 800f68e:	fa93 f993 	rev16.w	r9, r3
 800f692:	b2d4      	uxtb	r4, r2
 800f694:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800f698:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800f69c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800f6a0:	9901      	ldr	r1, [sp, #4]
 800f6a2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800f6a6:	0e12      	lsrs	r2, r2, #24
 800f6a8:	44ab      	add	fp, r5
 800f6aa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f6ae:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800f6b2:	fa5f f289 	uxtb.w	r2, r9
 800f6b6:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800f6ba:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800f6be:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800f6c2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800f6c6:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800f6ca:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800f6ce:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800f6d2:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800f6d6:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800f6da:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800f6de:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800f6e2:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800f6e6:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800f6ea:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800f6ee:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800f6f2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800f6f6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800f6fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f6fe:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800f702:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800f706:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800f70a:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800f70e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f712:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800f716:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800f71a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f71e:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800f722:	4b30      	ldr	r3, [pc, #192]	; (800f7e4 <D64_1CH_HTONS_VOL_HP+0x198>)
 800f724:	fb2b 1303 	smlad	r3, fp, r3, r1
 800f728:	492f      	ldr	r1, [pc, #188]	; (800f7e8 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800f72a:	fb24 3301 	smlad	r3, r4, r1, r3
 800f72e:	492f      	ldr	r1, [pc, #188]	; (800f7ec <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800f730:	fb22 3301 	smlad	r3, r2, r1, r3
 800f734:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800f738:	fb2e 390a 	smlad	r9, lr, sl, r3
 800f73c:	4b2c      	ldr	r3, [pc, #176]	; (800f7f0 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800f73e:	fb2b 6603 	smlad	r6, fp, r3, r6
 800f742:	fb2e 6613 	smladx	r6, lr, r3, r6
 800f746:	4b2b      	ldr	r3, [pc, #172]	; (800f7f4 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800f748:	fb24 6603 	smlad	r6, r4, r3, r6
 800f74c:	fb22 6313 	smladx	r3, r2, r3, r6
 800f750:	f04f 0a01 	mov.w	sl, #1
 800f754:	9301      	str	r3, [sp, #4]
 800f756:	fb2b fb0a 	smuad	fp, fp, sl
 800f75a:	4b27      	ldr	r3, [pc, #156]	; (800f7f8 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800f75c:	fb24 ba03 	smlad	sl, r4, r3, fp
 800f760:	4b26      	ldr	r3, [pc, #152]	; (800f7fc <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800f762:	fb22 a203 	smlad	r2, r2, r3, sl
 800f766:	4b26      	ldr	r3, [pc, #152]	; (800f800 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800f768:	fb2e 2603 	smlad	r6, lr, r3, r2
 800f76c:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800f770:	eb0a 020c 	add.w	r2, sl, ip
 800f774:	9c04      	ldr	r4, [sp, #16]
 800f776:	9903      	ldr	r1, [sp, #12]
 800f778:	eba2 0208 	sub.w	r2, r2, r8
 800f77c:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800f780:	fba2 2304 	umull	r2, r3, r2, r4
 800f784:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800f788:	fb04 3309 	mla	r3, r4, r9, r3
 800f78c:	f143 0300 	adc.w	r3, r3, #0
 800f790:	02da      	lsls	r2, r3, #11
 800f792:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800f796:	f04f 0900 	mov.w	r9, #0
 800f79a:	fbc1 8902 	smlal	r8, r9, r1, r2
 800f79e:	9902      	ldr	r1, [sp, #8]
 800f7a0:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800f7a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800f7a8:	f302 020f 	ssat	r2, #16, r2
 800f7ac:	9b05      	ldr	r3, [sp, #20]
 800f7ae:	f821 2b02 	strh.w	r2, [r1], #2
 800f7b2:	4299      	cmp	r1, r3
 800f7b4:	9102      	str	r1, [sp, #8]
 800f7b6:	46d0      	mov	r8, sl
 800f7b8:	f47f af64 	bne.w	800f684 <D64_1CH_HTONS_VOL_HP+0x38>
 800f7bc:	9a07      	ldr	r2, [sp, #28]
 800f7be:	9901      	ldr	r1, [sp, #4]
 800f7c0:	60d1      	str	r1, [r2, #12]
 800f7c2:	9906      	ldr	r1, [sp, #24]
 800f7c4:	6096      	str	r6, [r2, #8]
 800f7c6:	2000      	movs	r0, #0
 800f7c8:	61d5      	str	r5, [r2, #28]
 800f7ca:	f8c2 c010 	str.w	ip, [r2, #16]
 800f7ce:	f8c2 a014 	str.w	sl, [r2, #20]
 800f7d2:	6191      	str	r1, [r2, #24]
 800f7d4:	b009      	add	sp, #36	; 0x24
 800f7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7da:	46c2      	mov	sl, r8
 800f7dc:	4622      	mov	r2, r4
 800f7de:	e7ee      	b.n	800f7be <D64_1CH_HTONS_VOL_HP+0x172>
 800f7e0:	20000000 	.word	0x20000000
 800f7e4:	001c0015 	.word	0x001c0015
 800f7e8:	000f000a 	.word	0x000f000a
 800f7ec:	00060003 	.word	0x00060003
 800f7f0:	0024002a 	.word	0x0024002a
 800f7f4:	002e0030 	.word	0x002e0030
 800f7f8:	00030006 	.word	0x00030006
 800f7fc:	000a000f 	.word	0x000a000f
 800f800:	0015001c 	.word	0x0015001c

0800f804 <D80_1CH_HTONS_VOL_HP>:
 800f804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f808:	4613      	mov	r3, r2
 800f80a:	b089      	sub	sp, #36	; 0x24
 800f80c:	4686      	mov	lr, r0
 800f80e:	6918      	ldr	r0, [r3, #16]
 800f810:	9000      	str	r0, [sp, #0]
 800f812:	4618      	mov	r0, r3
 800f814:	461c      	mov	r4, r3
 800f816:	695b      	ldr	r3, [r3, #20]
 800f818:	9302      	str	r3, [sp, #8]
 800f81a:	6983      	ldr	r3, [r0, #24]
 800f81c:	9306      	str	r3, [sp, #24]
 800f81e:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800f822:	69c3      	ldr	r3, [r0, #28]
 800f824:	68c0      	ldr	r0, [r0, #12]
 800f826:	9207      	str	r2, [sp, #28]
 800f828:	9001      	str	r0, [sp, #4]
 800f82a:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800f82c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f82e:	9003      	str	r0, [sp, #12]
 800f830:	6a20      	ldr	r0, [r4, #32]
 800f832:	9004      	str	r0, [sp, #16]
 800f834:	2a00      	cmp	r2, #0
 800f836:	f000 80d2 	beq.w	800f9de <D80_1CH_HTONS_VOL_HP+0x1da>
 800f83a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800f83e:	4869      	ldr	r0, [pc, #420]	; (800f9e4 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800f840:	9205      	str	r2, [sp, #20]
 800f842:	461c      	mov	r4, r3
 800f844:	f8de 5000 	ldr.w	r5, [lr]
 800f848:	f8de 2004 	ldr.w	r2, [lr, #4]
 800f84c:	f8de 3008 	ldr.w	r3, [lr, #8]
 800f850:	f10e 0e0a 	add.w	lr, lr, #10
 800f854:	ba6d      	rev16	r5, r5
 800f856:	ba52      	rev16	r2, r2
 800f858:	fa93 fb93 	rev16.w	fp, r3
 800f85c:	b2ee      	uxtb	r6, r5
 800f85e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800f862:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800f866:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800f86a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800f86e:	eb04 0a07 	add.w	sl, r4, r7
 800f872:	0e2d      	lsrs	r5, r5, #24
 800f874:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800f878:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800f87c:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800f880:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800f884:	b2d5      	uxtb	r5, r2
 800f886:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800f88a:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800f88e:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800f892:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800f896:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800f89a:	0e12      	lsrs	r2, r2, #24
 800f89c:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800f8a0:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 800f8a4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800f8a8:	fa5f f48b 	uxtb.w	r4, fp
 800f8ac:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800f8b0:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800f8b4:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800f8b8:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800f8bc:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800f8c0:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800f8c4:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800f8c8:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800f8cc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800f8d0:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800f8d4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800f8d8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800f8dc:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800f8e0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800f8e4:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800f8e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f8ec:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800f8f0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800f8f4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f8f8:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800f8fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800f900:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800f904:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800f908:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800f90c:	4d36      	ldr	r5, [pc, #216]	; (800f9e8 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800f90e:	9f01      	ldr	r7, [sp, #4]
 800f910:	fb23 7505 	smlad	r5, r3, r5, r7
 800f914:	4f35      	ldr	r7, [pc, #212]	; (800f9ec <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800f916:	fb29 5507 	smlad	r5, r9, r7, r5
 800f91a:	4f35      	ldr	r7, [pc, #212]	; (800f9f0 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800f91c:	fb28 5507 	smlad	r5, r8, r7, r5
 800f920:	4f34      	ldr	r7, [pc, #208]	; (800f9f4 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800f922:	fb22 5507 	smlad	r5, r2, r7, r5
 800f926:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800f92a:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800f92e:	4d32      	ldr	r5, [pc, #200]	; (800f9f8 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800f930:	fb23 cc05 	smlad	ip, r3, r5, ip
 800f934:	4d31      	ldr	r5, [pc, #196]	; (800f9fc <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800f936:	fb29 cc05 	smlad	ip, r9, r5, ip
 800f93a:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800f93e:	fb28 c505 	smlad	r5, r8, r5, ip
 800f942:	4f2f      	ldr	r7, [pc, #188]	; (800fa00 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800f944:	fb22 5507 	smlad	r5, r2, r7, r5
 800f948:	4f2e      	ldr	r7, [pc, #184]	; (800fa04 <D80_1CH_HTONS_VOL_HP+0x200>)
 800f94a:	fb26 5507 	smlad	r5, r6, r7, r5
 800f94e:	f04f 0a01 	mov.w	sl, #1
 800f952:	9501      	str	r5, [sp, #4]
 800f954:	fb23 fa0a 	smuad	sl, r3, sl
 800f958:	4b2b      	ldr	r3, [pc, #172]	; (800fa08 <D80_1CH_HTONS_VOL_HP+0x204>)
 800f95a:	fb29 a903 	smlad	r9, r9, r3, sl
 800f95e:	4d2b      	ldr	r5, [pc, #172]	; (800fa0c <D80_1CH_HTONS_VOL_HP+0x208>)
 800f960:	fb28 9805 	smlad	r8, r8, r5, r9
 800f964:	4d2a      	ldr	r5, [pc, #168]	; (800fa10 <D80_1CH_HTONS_VOL_HP+0x20c>)
 800f966:	fb22 8205 	smlad	r2, r2, r5, r8
 800f96a:	4b2a      	ldr	r3, [pc, #168]	; (800fa14 <D80_1CH_HTONS_VOL_HP+0x210>)
 800f96c:	fb26 2c03 	smlad	ip, r6, r3, r2
 800f970:	9b00      	ldr	r3, [sp, #0]
 800f972:	9d04      	ldr	r5, [sp, #16]
 800f974:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800f978:	4453      	add	r3, sl
 800f97a:	461a      	mov	r2, r3
 800f97c:	9b02      	ldr	r3, [sp, #8]
 800f97e:	f8cd a008 	str.w	sl, [sp, #8]
 800f982:	1ad2      	subs	r2, r2, r3
 800f984:	17d7      	asrs	r7, r2, #31
 800f986:	fba2 2305 	umull	r2, r3, r2, r5
 800f98a:	fb05 3307 	mla	r3, r5, r7, r3
 800f98e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800f992:	f143 0300 	adc.w	r3, r3, #0
 800f996:	9d03      	ldr	r5, [sp, #12]
 800f998:	029a      	lsls	r2, r3, #10
 800f99a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f99e:	2700      	movs	r7, #0
 800f9a0:	005b      	lsls	r3, r3, #1
 800f9a2:	fbc5 6702 	smlal	r6, r7, r5, r2
 800f9a6:	10ba      	asrs	r2, r7, #2
 800f9a8:	9300      	str	r3, [sp, #0]
 800f9aa:	f302 020f 	ssat	r2, #16, r2
 800f9ae:	9b05      	ldr	r3, [sp, #20]
 800f9b0:	f821 2b02 	strh.w	r2, [r1], #2
 800f9b4:	4299      	cmp	r1, r3
 800f9b6:	f47f af45 	bne.w	800f844 <D80_1CH_HTONS_VOL_HP+0x40>
 800f9ba:	4623      	mov	r3, r4
 800f9bc:	9907      	ldr	r1, [sp, #28]
 800f9be:	9801      	ldr	r0, [sp, #4]
 800f9c0:	60c8      	str	r0, [r1, #12]
 800f9c2:	9a00      	ldr	r2, [sp, #0]
 800f9c4:	f8c1 c008 	str.w	ip, [r1, #8]
 800f9c8:	4608      	mov	r0, r1
 800f9ca:	61cb      	str	r3, [r1, #28]
 800f9cc:	610a      	str	r2, [r1, #16]
 800f9ce:	f8c1 a014 	str.w	sl, [r1, #20]
 800f9d2:	9906      	ldr	r1, [sp, #24]
 800f9d4:	6181      	str	r1, [r0, #24]
 800f9d6:	2000      	movs	r0, #0
 800f9d8:	b009      	add	sp, #36	; 0x24
 800f9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9de:	f8dd a008 	ldr.w	sl, [sp, #8]
 800f9e2:	e7eb      	b.n	800f9bc <D80_1CH_HTONS_VOL_HP+0x1b8>
 800f9e4:	20000000 	.word	0x20000000
 800f9e8:	002d0024 	.word	0x002d0024
 800f9ec:	001c0015 	.word	0x001c0015
 800f9f0:	000f000a 	.word	0x000f000a
 800f9f4:	00060003 	.word	0x00060003
 800f9f8:	0037003f 	.word	0x0037003f
 800f9fc:	00450049 	.word	0x00450049
 800fa00:	00490045 	.word	0x00490045
 800fa04:	003f0037 	.word	0x003f0037
 800fa08:	00030006 	.word	0x00030006
 800fa0c:	000a000f 	.word	0x000a000f
 800fa10:	0015001c 	.word	0x0015001c
 800fa14:	0024002d 	.word	0x0024002d

0800fa18 <D128_1CH_HTONS_VOL_HP>:
 800fa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa1c:	b093      	sub	sp, #76	; 0x4c
 800fa1e:	4614      	mov	r4, r2
 800fa20:	9211      	str	r2, [sp, #68]	; 0x44
 800fa22:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800fa24:	6912      	ldr	r2, [r2, #16]
 800fa26:	9203      	str	r2, [sp, #12]
 800fa28:	4622      	mov	r2, r4
 800fa2a:	4615      	mov	r5, r2
 800fa2c:	6964      	ldr	r4, [r4, #20]
 800fa2e:	9406      	str	r4, [sp, #24]
 800fa30:	4614      	mov	r4, r2
 800fa32:	6992      	ldr	r2, [r2, #24]
 800fa34:	9210      	str	r2, [sp, #64]	; 0x40
 800fa36:	68ea      	ldr	r2, [r5, #12]
 800fa38:	9204      	str	r2, [sp, #16]
 800fa3a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800fa3c:	69e6      	ldr	r6, [r4, #28]
 800fa3e:	920d      	str	r2, [sp, #52]	; 0x34
 800fa40:	68a4      	ldr	r4, [r4, #8]
 800fa42:	6a2a      	ldr	r2, [r5, #32]
 800fa44:	9405      	str	r4, [sp, #20]
 800fa46:	920e      	str	r2, [sp, #56]	; 0x38
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	f000 8145 	beq.w	800fcd8 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800fa4e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800fa52:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa54:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800fd34 <D128_1CH_HTONS_VOL_HP+0x31c>
 800fa58:	9107      	str	r1, [sp, #28]
 800fa5a:	f100 0310 	add.w	r3, r0, #16
 800fa5e:	4699      	mov	r9, r3
 800fa60:	f1a9 0110 	sub.w	r1, r9, #16
 800fa64:	c90e      	ldmia	r1, {r1, r2, r3}
 800fa66:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800fa6a:	ba49      	rev16	r1, r1
 800fa6c:	ba52      	rev16	r2, r2
 800fa6e:	ba5b      	rev16	r3, r3
 800fa70:	fa90 fa90 	rev16.w	sl, r0
 800fa74:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800fa78:	b2cc      	uxtb	r4, r1
 800fa7a:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800fa7e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800fa82:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800fa86:	0e09      	lsrs	r1, r1, #24
 800fa88:	4426      	add	r6, r4
 800fa8a:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800fa8e:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800fa92:	b2d0      	uxtb	r0, r2
 800fa94:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800fa98:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800fa9c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800faa0:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800faa4:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800faa8:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800faac:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800fab0:	0e12      	lsrs	r2, r2, #24
 800fab2:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800fab6:	9701      	str	r7, [sp, #4]
 800fab8:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800fabc:	4627      	mov	r7, r4
 800fabe:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800fac2:	9702      	str	r7, [sp, #8]
 800fac4:	b2da      	uxtb	r2, r3
 800fac6:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800faca:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800face:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800fad2:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800fad6:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800fada:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800fade:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800fae2:	0e1b      	lsrs	r3, r3, #24
 800fae4:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800fae8:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800faec:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800faf0:	fa5f f38a 	uxtb.w	r3, sl
 800faf4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800faf8:	960a      	str	r6, [sp, #40]	; 0x28
 800fafa:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800fafe:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800fb02:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800fb06:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800fb0a:	950b      	str	r5, [sp, #44]	; 0x2c
 800fb0c:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800fb10:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800fb14:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800fb18:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800fb1c:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800fb20:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800fb24:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800fb28:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800fb2c:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800fb30:	9308      	str	r3, [sp, #32]
 800fb32:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800fb36:	9b01      	ldr	r3, [sp, #4]
 800fb38:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800fb3c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800fb40:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800fb44:	9b02      	ldr	r3, [sp, #8]
 800fb46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fb4a:	9302      	str	r3, [sp, #8]
 800fb4c:	9b08      	ldr	r3, [sp, #32]
 800fb4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fb52:	9308      	str	r3, [sp, #32]
 800fb54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb56:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800fb5a:	950c      	str	r5, [sp, #48]	; 0x30
 800fb5c:	461d      	mov	r5, r3
 800fb5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb60:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800fb64:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800fb68:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800fb6c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800fb70:	9301      	str	r3, [sp, #4]
 800fb72:	9b02      	ldr	r3, [sp, #8]
 800fb74:	9202      	str	r2, [sp, #8]
 800fb76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fb7a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800fb7e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800fb82:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800fb86:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800fb8a:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800fb8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800fb92:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800fb96:	9b08      	ldr	r3, [sp, #32]
 800fb98:	9f01      	ldr	r7, [sp, #4]
 800fb9a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800fb9e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800fba2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800fba6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800fbaa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800fbae:	46be      	mov	lr, r7
 800fbb0:	0a96      	lsrs	r6, r2, #10
 800fbb2:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800fbb6:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800fbba:	4f49      	ldr	r7, [pc, #292]	; (800fce0 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800fbbc:	9a04      	ldr	r2, [sp, #16]
 800fbbe:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800fbc2:	4a48      	ldr	r2, [pc, #288]	; (800fce4 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800fbc4:	fb2a ee02 	smlad	lr, sl, r2, lr
 800fbc8:	4a47      	ldr	r2, [pc, #284]	; (800fce8 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800fbca:	fb21 ee02 	smlad	lr, r1, r2, lr
 800fbce:	4a47      	ldr	r2, [pc, #284]	; (800fcec <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800fbd0:	fb24 ee02 	smlad	lr, r4, r2, lr
 800fbd4:	4a46      	ldr	r2, [pc, #280]	; (800fcf0 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800fbd6:	9f02      	ldr	r7, [sp, #8]
 800fbd8:	fb27 ee02 	smlad	lr, r7, r2, lr
 800fbdc:	4a45      	ldr	r2, [pc, #276]	; (800fcf4 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800fbde:	fb20 ee02 	smlad	lr, r0, r2, lr
 800fbe2:	4a45      	ldr	r2, [pc, #276]	; (800fcf8 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800fbe4:	fb23 e702 	smlad	r7, r3, r2, lr
 800fbe8:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800fbec:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800fbf0:	9f01      	ldr	r7, [sp, #4]
 800fbf2:	4a42      	ldr	r2, [pc, #264]	; (800fcfc <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800fbf4:	46bc      	mov	ip, r7
 800fbf6:	9f05      	ldr	r7, [sp, #20]
 800fbf8:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800fbfc:	4a40      	ldr	r2, [pc, #256]	; (800fd00 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800fbfe:	fb2a cc02 	smlad	ip, sl, r2, ip
 800fc02:	4f40      	ldr	r7, [pc, #256]	; (800fd04 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800fc04:	fb21 cc07 	smlad	ip, r1, r7, ip
 800fc08:	4f3f      	ldr	r7, [pc, #252]	; (800fd08 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800fc0a:	fb24 cc07 	smlad	ip, r4, r7, ip
 800fc0e:	4f3f      	ldr	r7, [pc, #252]	; (800fd0c <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800fc10:	9a02      	ldr	r2, [sp, #8]
 800fc12:	fb22 cc07 	smlad	ip, r2, r7, ip
 800fc16:	4f3e      	ldr	r7, [pc, #248]	; (800fd10 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800fc18:	fb20 cc07 	smlad	ip, r0, r7, ip
 800fc1c:	4f3d      	ldr	r7, [pc, #244]	; (800fd14 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800fc1e:	fb23 c707 	smlad	r7, r3, r7, ip
 800fc22:	f8df c114 	ldr.w	ip, [pc, #276]	; 800fd38 <D128_1CH_HTONS_VOL_HP+0x320>
 800fc26:	fb25 720c 	smlad	r2, r5, ip, r7
 800fc2a:	f04f 0b01 	mov.w	fp, #1
 800fc2e:	9204      	str	r2, [sp, #16]
 800fc30:	9f01      	ldr	r7, [sp, #4]
 800fc32:	fb27 fb0b 	smuad	fp, r7, fp
 800fc36:	4f38      	ldr	r7, [pc, #224]	; (800fd18 <D128_1CH_HTONS_VOL_HP+0x300>)
 800fc38:	fb2a ba07 	smlad	sl, sl, r7, fp
 800fc3c:	4f37      	ldr	r7, [pc, #220]	; (800fd1c <D128_1CH_HTONS_VOL_HP+0x304>)
 800fc3e:	fb21 aa07 	smlad	sl, r1, r7, sl
 800fc42:	4f37      	ldr	r7, [pc, #220]	; (800fd20 <D128_1CH_HTONS_VOL_HP+0x308>)
 800fc44:	fb24 aa07 	smlad	sl, r4, r7, sl
 800fc48:	4f36      	ldr	r7, [pc, #216]	; (800fd24 <D128_1CH_HTONS_VOL_HP+0x30c>)
 800fc4a:	9a02      	ldr	r2, [sp, #8]
 800fc4c:	fb22 a707 	smlad	r7, r2, r7, sl
 800fc50:	4a35      	ldr	r2, [pc, #212]	; (800fd28 <D128_1CH_HTONS_VOL_HP+0x310>)
 800fc52:	fb20 7702 	smlad	r7, r0, r2, r7
 800fc56:	4a35      	ldr	r2, [pc, #212]	; (800fd2c <D128_1CH_HTONS_VOL_HP+0x314>)
 800fc58:	fb23 7702 	smlad	r7, r3, r2, r7
 800fc5c:	4b34      	ldr	r3, [pc, #208]	; (800fd30 <D128_1CH_HTONS_VOL_HP+0x318>)
 800fc5e:	fb25 7303 	smlad	r3, r5, r3, r7
 800fc62:	9305      	str	r3, [sp, #20]
 800fc64:	9b03      	ldr	r3, [sp, #12]
 800fc66:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800fc68:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800fc6c:	4473      	add	r3, lr
 800fc6e:	461a      	mov	r2, r3
 800fc70:	9b06      	ldr	r3, [sp, #24]
 800fc72:	f8cd e018 	str.w	lr, [sp, #24]
 800fc76:	1ad2      	subs	r2, r2, r3
 800fc78:	17d1      	asrs	r1, r2, #31
 800fc7a:	fba2 2304 	umull	r2, r3, r2, r4
 800fc7e:	fb04 3301 	mla	r3, r4, r1, r3
 800fc82:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800fc86:	f143 0300 	adc.w	r3, r3, #0
 800fc8a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800fc8c:	021a      	lsls	r2, r3, #8
 800fc8e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800fc92:	2100      	movs	r1, #0
 800fc94:	fbc4 0102 	smlal	r0, r1, r4, r2
 800fc98:	108a      	asrs	r2, r1, #2
 800fc9a:	9907      	ldr	r1, [sp, #28]
 800fc9c:	f302 020f 	ssat	r2, #16, r2
 800fca0:	005b      	lsls	r3, r3, #1
 800fca2:	f821 2b02 	strh.w	r2, [r1], #2
 800fca6:	9303      	str	r3, [sp, #12]
 800fca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fcaa:	9107      	str	r1, [sp, #28]
 800fcac:	4299      	cmp	r1, r3
 800fcae:	f109 0910 	add.w	r9, r9, #16
 800fcb2:	f47f aed5 	bne.w	800fa60 <D128_1CH_HTONS_VOL_HP+0x48>
 800fcb6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fcb8:	9905      	ldr	r1, [sp, #20]
 800fcba:	6091      	str	r1, [r2, #8]
 800fcbc:	9904      	ldr	r1, [sp, #16]
 800fcbe:	60d1      	str	r1, [r2, #12]
 800fcc0:	4613      	mov	r3, r2
 800fcc2:	61d6      	str	r6, [r2, #28]
 800fcc4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800fcc6:	9a03      	ldr	r2, [sp, #12]
 800fcc8:	611a      	str	r2, [r3, #16]
 800fcca:	2000      	movs	r0, #0
 800fccc:	f8c3 e014 	str.w	lr, [r3, #20]
 800fcd0:	6199      	str	r1, [r3, #24]
 800fcd2:	b013      	add	sp, #76	; 0x4c
 800fcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd8:	f8dd e018 	ldr.w	lr, [sp, #24]
 800fcdc:	e7eb      	b.n	800fcb6 <D128_1CH_HTONS_VOL_HP+0x29e>
 800fcde:	bf00      	nop
 800fce0:	00780069 	.word	0x00780069
 800fce4:	005b004e 	.word	0x005b004e
 800fce8:	00420037 	.word	0x00420037
 800fcec:	002d0024 	.word	0x002d0024
 800fcf0:	001c0015 	.word	0x001c0015
 800fcf4:	000f000a 	.word	0x000f000a
 800fcf8:	00060003 	.word	0x00060003
 800fcfc:	00880096 	.word	0x00880096
 800fd00:	00a200ac 	.word	0x00a200ac
 800fd04:	00b400ba 	.word	0x00b400ba
 800fd08:	00be00c0 	.word	0x00be00c0
 800fd0c:	00c000be 	.word	0x00c000be
 800fd10:	00ba00b4 	.word	0x00ba00b4
 800fd14:	00ac00a2 	.word	0x00ac00a2
 800fd18:	00030006 	.word	0x00030006
 800fd1c:	000a000f 	.word	0x000a000f
 800fd20:	0015001c 	.word	0x0015001c
 800fd24:	0024002d 	.word	0x0024002d
 800fd28:	00370042 	.word	0x00370042
 800fd2c:	004e005b 	.word	0x004e005b
 800fd30:	00690078 	.word	0x00690078
 800fd34:	20000000 	.word	0x20000000
 800fd38:	00960088 	.word	0x00960088

0800fd3c <PDM_Filter_Init>:
 800fd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd3e:	2240      	movs	r2, #64	; 0x40
 800fd40:	4604      	mov	r4, r0
 800fd42:	2100      	movs	r1, #0
 800fd44:	300c      	adds	r0, #12
 800fd46:	f000 fa21 	bl	801018c <memset>
 800fd4a:	493b      	ldr	r1, [pc, #236]	; (800fe38 <PDM_Filter_Init+0xfc>)
 800fd4c:	483b      	ldr	r0, [pc, #236]	; (800fe3c <PDM_Filter_Init+0x100>)
 800fd4e:	f000 f98d 	bl	801006c <CRC_Lock>
 800fd52:	8822      	ldrh	r2, [r4, #0]
 800fd54:	8963      	ldrh	r3, [r4, #10]
 800fd56:	4938      	ldr	r1, [pc, #224]	; (800fe38 <PDM_Filter_Init+0xfc>)
 800fd58:	8925      	ldrh	r5, [r4, #8]
 800fd5a:	86a3      	strh	r3, [r4, #52]	; 0x34
 800fd5c:	2801      	cmp	r0, #1
 800fd5e:	f04f 0300 	mov.w	r3, #0
 800fd62:	bf18      	it	ne
 800fd64:	2100      	movne	r1, #0
 800fd66:	2a01      	cmp	r2, #1
 800fd68:	6461      	str	r1, [r4, #68]	; 0x44
 800fd6a:	86e5      	strh	r5, [r4, #54]	; 0x36
 800fd6c:	61a3      	str	r3, [r4, #24]
 800fd6e:	6123      	str	r3, [r4, #16]
 800fd70:	6163      	str	r3, [r4, #20]
 800fd72:	60e3      	str	r3, [r4, #12]
 800fd74:	6263      	str	r3, [r4, #36]	; 0x24
 800fd76:	61e3      	str	r3, [r4, #28]
 800fd78:	6223      	str	r3, [r4, #32]
 800fd7a:	6423      	str	r3, [r4, #64]	; 0x40
 800fd7c:	d918      	bls.n	800fdb0 <PDM_Filter_Init+0x74>
 800fd7e:	2003      	movs	r0, #3
 800fd80:	2302      	movs	r3, #2
 800fd82:	8862      	ldrh	r2, [r4, #2]
 800fd84:	2a01      	cmp	r2, #1
 800fd86:	d91d      	bls.n	800fdc4 <PDM_Filter_Init+0x88>
 800fd88:	2140      	movs	r1, #64	; 0x40
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fd8e:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800fd92:	6862      	ldr	r2, [r4, #4]
 800fd94:	bf04      	itt	eq
 800fd96:	6421      	streq	r1, [r4, #64]	; 0x40
 800fd98:	460b      	moveq	r3, r1
 800fd9a:	b11a      	cbz	r2, 800fda4 <PDM_Filter_Init+0x68>
 800fd9c:	f043 0310 	orr.w	r3, r3, #16
 800fda0:	6423      	str	r3, [r4, #64]	; 0x40
 800fda2:	62e2      	str	r2, [r4, #44]	; 0x2c
 800fda4:	2200      	movs	r2, #0
 800fda6:	8722      	strh	r2, [r4, #56]	; 0x38
 800fda8:	b908      	cbnz	r0, 800fdae <PDM_Filter_Init+0x72>
 800fdaa:	3380      	adds	r3, #128	; 0x80
 800fdac:	6423      	str	r3, [r4, #64]	; 0x40
 800fdae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdb0:	4d23      	ldr	r5, [pc, #140]	; (800fe40 <PDM_Filter_Init+0x104>)
 800fdb2:	d010      	beq.n	800fdd6 <PDM_Filter_Init+0x9a>
 800fdb4:	782a      	ldrb	r2, [r5, #0]
 800fdb6:	2a01      	cmp	r2, #1
 800fdb8:	d027      	beq.n	800fe0a <PDM_Filter_Init+0xce>
 800fdba:	8862      	ldrh	r2, [r4, #2]
 800fdbc:	2a01      	cmp	r2, #1
 800fdbe:	f04f 0001 	mov.w	r0, #1
 800fdc2:	d8e1      	bhi.n	800fd88 <PDM_Filter_Init+0x4c>
 800fdc4:	d001      	beq.n	800fdca <PDM_Filter_Init+0x8e>
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	e7de      	b.n	800fd88 <PDM_Filter_Init+0x4c>
 800fdca:	2220      	movs	r2, #32
 800fdcc:	4618      	mov	r0, r3
 800fdce:	6422      	str	r2, [r4, #64]	; 0x40
 800fdd0:	4613      	mov	r3, r2
 800fdd2:	2160      	movs	r1, #96	; 0x60
 800fdd4:	e7da      	b.n	800fd8c <PDM_Filter_Init+0x50>
 800fdd6:	7829      	ldrb	r1, [r5, #0]
 800fdd8:	2900      	cmp	r1, #0
 800fdda:	d1ee      	bne.n	800fdba <PDM_Filter_Init+0x7e>
 800fddc:	4919      	ldr	r1, [pc, #100]	; (800fe44 <PDM_Filter_Init+0x108>)
 800fdde:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800fe4c <PDM_Filter_Init+0x110>
 800fde2:	4f19      	ldr	r7, [pc, #100]	; (800fe48 <PDM_Filter_Init+0x10c>)
 800fde4:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800fde8:	684a      	ldr	r2, [r1, #4]
 800fdea:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800fdee:	ea02 0007 	and.w	r0, r2, r7
 800fdf2:	4303      	orrs	r3, r0
 800fdf4:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800fdf8:	4413      	add	r3, r2
 800fdfa:	f841 3f04 	str.w	r3, [r1, #4]!
 800fdfe:	428e      	cmp	r6, r1
 800fe00:	d1f2      	bne.n	800fde8 <PDM_Filter_Init+0xac>
 800fe02:	2001      	movs	r0, #1
 800fe04:	7028      	strb	r0, [r5, #0]
 800fe06:	2300      	movs	r3, #0
 800fe08:	e7bb      	b.n	800fd82 <PDM_Filter_Init+0x46>
 800fe0a:	490e      	ldr	r1, [pc, #56]	; (800fe44 <PDM_Filter_Init+0x108>)
 800fe0c:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800fe4c <PDM_Filter_Init+0x110>
 800fe10:	4f0d      	ldr	r7, [pc, #52]	; (800fe48 <PDM_Filter_Init+0x10c>)
 800fe12:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800fe16:	684a      	ldr	r2, [r1, #4]
 800fe18:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800fe1c:	ea02 0007 	and.w	r0, r2, r7
 800fe20:	4303      	orrs	r3, r0
 800fe22:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800fe26:	4413      	add	r3, r2
 800fe28:	f841 3f04 	str.w	r3, [r1, #4]!
 800fe2c:	428e      	cmp	r6, r1
 800fe2e:	d1f2      	bne.n	800fe16 <PDM_Filter_Init+0xda>
 800fe30:	2300      	movs	r3, #0
 800fe32:	702b      	strb	r3, [r5, #0]
 800fe34:	e7c1      	b.n	800fdba <PDM_Filter_Init+0x7e>
 800fe36:	bf00      	nop
 800fe38:	b5e8b5cd 	.word	0xb5e8b5cd
 800fe3c:	f407a5c2 	.word	0xf407a5c2
 800fe40:	20000634 	.word	0x20000634
 800fe44:	1ffffffc 	.word	0x1ffffffc
 800fe48:	000ffc00 	.word	0x000ffc00
 800fe4c:	3ff00000 	.word	0x3ff00000

0800fe50 <PDM_Filter_setConfig>:
 800fe50:	4b66      	ldr	r3, [pc, #408]	; (800ffec <PDM_Filter_setConfig+0x19c>)
 800fe52:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fe54:	429a      	cmp	r2, r3
 800fe56:	d001      	beq.n	800fe5c <PDM_Filter_setConfig+0xc>
 800fe58:	2004      	movs	r0, #4
 800fe5a:	4770      	bx	lr
 800fe5c:	b530      	push	{r4, r5, lr}
 800fe5e:	880a      	ldrh	r2, [r1, #0]
 800fe60:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800fe62:	ed2d 8b04 	vpush	{d8-d9}
 800fe66:	4604      	mov	r4, r0
 800fe68:	460d      	mov	r5, r1
 800fe6a:	1e51      	subs	r1, r2, #1
 800fe6c:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800fe70:	2906      	cmp	r1, #6
 800fe72:	b083      	sub	sp, #12
 800fe74:	6420      	str	r0, [r4, #64]	; 0x40
 800fe76:	d91a      	bls.n	800feae <PDM_Filter_setConfig+0x5e>
 800fe78:	2008      	movs	r0, #8
 800fe7a:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800fe7e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800fe82:	4299      	cmp	r1, r3
 800fe84:	d07e      	beq.n	800ff84 <PDM_Filter_setConfig+0x134>
 800fe86:	f113 0f0c 	cmn.w	r3, #12
 800fe8a:	da2a      	bge.n	800fee2 <PDM_Filter_setConfig+0x92>
 800fe8c:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800fe90:	3040      	adds	r0, #64	; 0x40
 800fe92:	80ab      	strh	r3, [r5, #4]
 800fe94:	8622      	strh	r2, [r4, #48]	; 0x30
 800fe96:	886b      	ldrh	r3, [r5, #2]
 800fe98:	8663      	strh	r3, [r4, #50]	; 0x32
 800fe9a:	b920      	cbnz	r0, 800fea6 <PDM_Filter_setConfig+0x56>
 800fe9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fe9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fea2:	6423      	str	r3, [r4, #64]	; 0x40
 800fea4:	2000      	movs	r0, #0
 800fea6:	b003      	add	sp, #12
 800fea8:	ecbd 8b04 	vpop	{d8-d9}
 800feac:	bd30      	pop	{r4, r5, pc}
 800feae:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800feb0:	4291      	cmp	r1, r2
 800feb2:	d06c      	beq.n	800ff8e <PDM_Filter_setConfig+0x13e>
 800feb4:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800feb8:	f023 0301 	bic.w	r3, r3, #1
 800febc:	4313      	orrs	r3, r2
 800febe:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800fec2:	6423      	str	r3, [r4, #64]	; 0x40
 800fec4:	2970      	cmp	r1, #112	; 0x70
 800fec6:	f003 030f 	and.w	r3, r3, #15
 800feca:	f103 33ff 	add.w	r3, r3, #4294967295
 800fece:	d066      	beq.n	800ff9e <PDM_Filter_setConfig+0x14e>
 800fed0:	2b06      	cmp	r3, #6
 800fed2:	f200 8089 	bhi.w	800ffe8 <PDM_Filter_setConfig+0x198>
 800fed6:	e8df f003 	tbb	[pc, r3]
 800feda:	4f52      	.short	0x4f52
 800fedc:	3d43494c 	.word	0x3d43494c
 800fee0:	46          	.byte	0x46
 800fee1:	00          	.byte	0x00
 800fee2:	2b33      	cmp	r3, #51	; 0x33
 800fee4:	dc32      	bgt.n	800ff4c <PDM_Filter_setConfig+0xfc>
 800fee6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800fee8:	f002 020f 	and.w	r2, r2, #15
 800feec:	3a01      	subs	r2, #1
 800feee:	2a06      	cmp	r2, #6
 800fef0:	d872      	bhi.n	800ffd8 <PDM_Filter_setConfig+0x188>
 800fef2:	493f      	ldr	r1, [pc, #252]	; (800fff0 <PDM_Filter_setConfig+0x1a0>)
 800fef4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800fef8:	ed92 9a00 	vldr	s18, [r2]
 800fefc:	ed92 8a07 	vldr	s16, [r2, #28]
 800ff00:	9001      	str	r0, [sp, #4]
 800ff02:	ee07 3a90 	vmov	s15, r3
 800ff06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff0a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800ff0e:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800ff12:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800ff16:	f002 fe91 	bl	8012c3c <powf>
 800ff1a:	eddf 0a36 	vldr	s1, [pc, #216]	; 800fff4 <PDM_Filter_setConfig+0x1a4>
 800ff1e:	eef0 8a40 	vmov.f32	s17, s0
 800ff22:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800ff26:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800ff2a:	f002 fe87 	bl	8012c3c <powf>
 800ff2e:	ee28 8a28 	vmul.f32	s16, s16, s17
 800ff32:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ff36:	f002 fe5d 	bl	8012bf4 <roundf>
 800ff3a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800ff3e:	88ab      	ldrh	r3, [r5, #4]
 800ff40:	882a      	ldrh	r2, [r5, #0]
 800ff42:	9801      	ldr	r0, [sp, #4]
 800ff44:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800ff48:	8723      	strh	r3, [r4, #56]	; 0x38
 800ff4a:	e7a3      	b.n	800fe94 <PDM_Filter_setConfig+0x44>
 800ff4c:	2333      	movs	r3, #51	; 0x33
 800ff4e:	3040      	adds	r0, #64	; 0x40
 800ff50:	80ab      	strh	r3, [r5, #4]
 800ff52:	e79f      	b.n	800fe94 <PDM_Filter_setConfig+0x44>
 800ff54:	4b28      	ldr	r3, [pc, #160]	; (800fff8 <PDM_Filter_setConfig+0x1a8>)
 800ff56:	64a3      	str	r3, [r4, #72]	; 0x48
 800ff58:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800ff5c:	2000      	movs	r0, #0
 800ff5e:	e792      	b.n	800fe86 <PDM_Filter_setConfig+0x36>
 800ff60:	4b26      	ldr	r3, [pc, #152]	; (800fffc <PDM_Filter_setConfig+0x1ac>)
 800ff62:	64a3      	str	r3, [r4, #72]	; 0x48
 800ff64:	e7f8      	b.n	800ff58 <PDM_Filter_setConfig+0x108>
 800ff66:	4b26      	ldr	r3, [pc, #152]	; (8010000 <PDM_Filter_setConfig+0x1b0>)
 800ff68:	64a3      	str	r3, [r4, #72]	; 0x48
 800ff6a:	e7f5      	b.n	800ff58 <PDM_Filter_setConfig+0x108>
 800ff6c:	4b25      	ldr	r3, [pc, #148]	; (8010004 <PDM_Filter_setConfig+0x1b4>)
 800ff6e:	64a3      	str	r3, [r4, #72]	; 0x48
 800ff70:	e7f2      	b.n	800ff58 <PDM_Filter_setConfig+0x108>
 800ff72:	4b25      	ldr	r3, [pc, #148]	; (8010008 <PDM_Filter_setConfig+0x1b8>)
 800ff74:	64a3      	str	r3, [r4, #72]	; 0x48
 800ff76:	e7ef      	b.n	800ff58 <PDM_Filter_setConfig+0x108>
 800ff78:	4b24      	ldr	r3, [pc, #144]	; (801000c <PDM_Filter_setConfig+0x1bc>)
 800ff7a:	64a3      	str	r3, [r4, #72]	; 0x48
 800ff7c:	e7ec      	b.n	800ff58 <PDM_Filter_setConfig+0x108>
 800ff7e:	4b24      	ldr	r3, [pc, #144]	; (8010010 <PDM_Filter_setConfig+0x1c0>)
 800ff80:	64a3      	str	r3, [r4, #72]	; 0x48
 800ff82:	e7e9      	b.n	800ff58 <PDM_Filter_setConfig+0x108>
 800ff84:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800ff86:	4291      	cmp	r1, r2
 800ff88:	f47f af7d 	bne.w	800fe86 <PDM_Filter_setConfig+0x36>
 800ff8c:	e783      	b.n	800fe96 <PDM_Filter_setConfig+0x46>
 800ff8e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800ff92:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800ff96:	4299      	cmp	r1, r3
 800ff98:	d023      	beq.n	800ffe2 <PDM_Filter_setConfig+0x192>
 800ff9a:	2000      	movs	r0, #0
 800ff9c:	e773      	b.n	800fe86 <PDM_Filter_setConfig+0x36>
 800ff9e:	2b06      	cmp	r3, #6
 800ffa0:	d822      	bhi.n	800ffe8 <PDM_Filter_setConfig+0x198>
 800ffa2:	e8df f003 	tbb	[pc, r3]
 800ffa6:	1316      	.short	0x1316
 800ffa8:	070a0d10 	.word	0x070a0d10
 800ffac:	04          	.byte	0x04
 800ffad:	00          	.byte	0x00
 800ffae:	4b19      	ldr	r3, [pc, #100]	; (8010014 <PDM_Filter_setConfig+0x1c4>)
 800ffb0:	64a3      	str	r3, [r4, #72]	; 0x48
 800ffb2:	e7d1      	b.n	800ff58 <PDM_Filter_setConfig+0x108>
 800ffb4:	4b18      	ldr	r3, [pc, #96]	; (8010018 <PDM_Filter_setConfig+0x1c8>)
 800ffb6:	64a3      	str	r3, [r4, #72]	; 0x48
 800ffb8:	e7ce      	b.n	800ff58 <PDM_Filter_setConfig+0x108>
 800ffba:	4b18      	ldr	r3, [pc, #96]	; (801001c <PDM_Filter_setConfig+0x1cc>)
 800ffbc:	64a3      	str	r3, [r4, #72]	; 0x48
 800ffbe:	e7cb      	b.n	800ff58 <PDM_Filter_setConfig+0x108>
 800ffc0:	4b17      	ldr	r3, [pc, #92]	; (8010020 <PDM_Filter_setConfig+0x1d0>)
 800ffc2:	64a3      	str	r3, [r4, #72]	; 0x48
 800ffc4:	e7c8      	b.n	800ff58 <PDM_Filter_setConfig+0x108>
 800ffc6:	4b17      	ldr	r3, [pc, #92]	; (8010024 <PDM_Filter_setConfig+0x1d4>)
 800ffc8:	64a3      	str	r3, [r4, #72]	; 0x48
 800ffca:	e7c5      	b.n	800ff58 <PDM_Filter_setConfig+0x108>
 800ffcc:	4b16      	ldr	r3, [pc, #88]	; (8010028 <PDM_Filter_setConfig+0x1d8>)
 800ffce:	64a3      	str	r3, [r4, #72]	; 0x48
 800ffd0:	e7c2      	b.n	800ff58 <PDM_Filter_setConfig+0x108>
 800ffd2:	4b16      	ldr	r3, [pc, #88]	; (801002c <PDM_Filter_setConfig+0x1dc>)
 800ffd4:	64a3      	str	r3, [r4, #72]	; 0x48
 800ffd6:	e7bf      	b.n	800ff58 <PDM_Filter_setConfig+0x108>
 800ffd8:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8010030 <PDM_Filter_setConfig+0x1e0>
 800ffdc:	eeb0 9a48 	vmov.f32	s18, s16
 800ffe0:	e78e      	b.n	800ff00 <PDM_Filter_setConfig+0xb0>
 800ffe2:	886b      	ldrh	r3, [r5, #2]
 800ffe4:	8663      	strh	r3, [r4, #50]	; 0x32
 800ffe6:	e759      	b.n	800fe9c <PDM_Filter_setConfig+0x4c>
 800ffe8:	2000      	movs	r0, #0
 800ffea:	e746      	b.n	800fe7a <PDM_Filter_setConfig+0x2a>
 800ffec:	b5e8b5cd 	.word	0xb5e8b5cd
 800fff0:	08013bd4 	.word	0x08013bd4
 800fff4:	42000000 	.word	0x42000000
 800fff8:	0800e3bd 	.word	0x0800e3bd
 800fffc:	0800e29d 	.word	0x0800e29d
 8010000:	0800e54d 	.word	0x0800e54d
 8010004:	0800ed91 	.word	0x0800ed91
 8010008:	0800eaf1 	.word	0x0800eaf1
 801000c:	0800e8d1 	.word	0x0800e8d1
 8010010:	0800e6e5 	.word	0x0800e6e5
 8010014:	0800f39d 	.word	0x0800f39d
 8010018:	0800f265 	.word	0x0800f265
 801001c:	0800f181 	.word	0x0800f181
 8010020:	0800fa19 	.word	0x0800fa19
 8010024:	0800f805 	.word	0x0800f805
 8010028:	0800f64d 	.word	0x0800f64d
 801002c:	0800f4e1 	.word	0x0800f4e1
 8010030:	00000000 	.word	0x00000000

08010034 <PDM_Filter>:
 8010034:	b410      	push	{r4}
 8010036:	4b0c      	ldr	r3, [pc, #48]	; (8010068 <PDM_Filter+0x34>)
 8010038:	6c54      	ldr	r4, [r2, #68]	; 0x44
 801003a:	429c      	cmp	r4, r3
 801003c:	d003      	beq.n	8010046 <PDM_Filter+0x12>
 801003e:	2004      	movs	r0, #4
 8010040:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010044:	4770      	bx	lr
 8010046:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010048:	05dc      	lsls	r4, r3, #23
 801004a:	d407      	bmi.n	801005c <PDM_Filter+0x28>
 801004c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010050:	bf14      	ite	ne
 8010052:	2020      	movne	r0, #32
 8010054:	2030      	moveq	r0, #48	; 0x30
 8010056:	f85d 4b04 	ldr.w	r4, [sp], #4
 801005a:	4770      	bx	lr
 801005c:	6c93      	ldr	r3, [r2, #72]	; 0x48
 801005e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010062:	320c      	adds	r2, #12
 8010064:	4718      	bx	r3
 8010066:	bf00      	nop
 8010068:	b5e8b5cd 	.word	0xb5e8b5cd

0801006c <CRC_Lock>:
 801006c:	4a17      	ldr	r2, [pc, #92]	; (80100cc <CRC_Lock+0x60>)
 801006e:	6813      	ldr	r3, [r2, #0]
 8010070:	b410      	push	{r4}
 8010072:	f023 0301 	bic.w	r3, r3, #1
 8010076:	4c16      	ldr	r4, [pc, #88]	; (80100d0 <CRC_Lock+0x64>)
 8010078:	6013      	str	r3, [r2, #0]
 801007a:	6823      	ldr	r3, [r4, #0]
 801007c:	b933      	cbnz	r3, 801008c <CRC_Lock+0x20>
 801007e:	4b15      	ldr	r3, [pc, #84]	; (80100d4 <CRC_Lock+0x68>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010086:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801008a:	d00f      	beq.n	80100ac <CRC_Lock+0x40>
 801008c:	4a12      	ldr	r2, [pc, #72]	; (80100d8 <CRC_Lock+0x6c>)
 801008e:	2301      	movs	r3, #1
 8010090:	6013      	str	r3, [r2, #0]
 8010092:	6813      	ldr	r3, [r2, #0]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d1fc      	bne.n	8010092 <CRC_Lock+0x26>
 8010098:	4b10      	ldr	r3, [pc, #64]	; (80100dc <CRC_Lock+0x70>)
 801009a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801009e:	6018      	str	r0, [r3, #0]
 80100a0:	6818      	ldr	r0, [r3, #0]
 80100a2:	1a08      	subs	r0, r1, r0
 80100a4:	fab0 f080 	clz	r0, r0
 80100a8:	0940      	lsrs	r0, r0, #5
 80100aa:	4770      	bx	lr
 80100ac:	4a0c      	ldr	r2, [pc, #48]	; (80100e0 <CRC_Lock+0x74>)
 80100ae:	2301      	movs	r3, #1
 80100b0:	6013      	str	r3, [r2, #0]
 80100b2:	6813      	ldr	r3, [r2, #0]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d1fc      	bne.n	80100b2 <CRC_Lock+0x46>
 80100b8:	4b0a      	ldr	r3, [pc, #40]	; (80100e4 <CRC_Lock+0x78>)
 80100ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100be:	6018      	str	r0, [r3, #0]
 80100c0:	6818      	ldr	r0, [r3, #0]
 80100c2:	1a40      	subs	r0, r0, r1
 80100c4:	fab0 f080 	clz	r0, r0
 80100c8:	0940      	lsrs	r0, r0, #5
 80100ca:	4770      	bx	lr
 80100cc:	e0002000 	.word	0xe0002000
 80100d0:	e0042000 	.word	0xe0042000
 80100d4:	5c001000 	.word	0x5c001000
 80100d8:	40023008 	.word	0x40023008
 80100dc:	40023000 	.word	0x40023000
 80100e0:	58024c08 	.word	0x58024c08
 80100e4:	58024c00 	.word	0x58024c00

080100e8 <__errno>:
 80100e8:	4b01      	ldr	r3, [pc, #4]	; (80100f0 <__errno+0x8>)
 80100ea:	6818      	ldr	r0, [r3, #0]
 80100ec:	4770      	bx	lr
 80100ee:	bf00      	nop
 80100f0:	20000448 	.word	0x20000448

080100f4 <__libc_init_array>:
 80100f4:	b570      	push	{r4, r5, r6, lr}
 80100f6:	4d0d      	ldr	r5, [pc, #52]	; (801012c <__libc_init_array+0x38>)
 80100f8:	4c0d      	ldr	r4, [pc, #52]	; (8010130 <__libc_init_array+0x3c>)
 80100fa:	1b64      	subs	r4, r4, r5
 80100fc:	10a4      	asrs	r4, r4, #2
 80100fe:	2600      	movs	r6, #0
 8010100:	42a6      	cmp	r6, r4
 8010102:	d109      	bne.n	8010118 <__libc_init_array+0x24>
 8010104:	4d0b      	ldr	r5, [pc, #44]	; (8010134 <__libc_init_array+0x40>)
 8010106:	4c0c      	ldr	r4, [pc, #48]	; (8010138 <__libc_init_array+0x44>)
 8010108:	f003 f96a 	bl	80133e0 <_init>
 801010c:	1b64      	subs	r4, r4, r5
 801010e:	10a4      	asrs	r4, r4, #2
 8010110:	2600      	movs	r6, #0
 8010112:	42a6      	cmp	r6, r4
 8010114:	d105      	bne.n	8010122 <__libc_init_array+0x2e>
 8010116:	bd70      	pop	{r4, r5, r6, pc}
 8010118:	f855 3b04 	ldr.w	r3, [r5], #4
 801011c:	4798      	blx	r3
 801011e:	3601      	adds	r6, #1
 8010120:	e7ee      	b.n	8010100 <__libc_init_array+0xc>
 8010122:	f855 3b04 	ldr.w	r3, [r5], #4
 8010126:	4798      	blx	r3
 8010128:	3601      	adds	r6, #1
 801012a:	e7f2      	b.n	8010112 <__libc_init_array+0x1e>
 801012c:	0801415c 	.word	0x0801415c
 8010130:	0801415c 	.word	0x0801415c
 8010134:	0801415c 	.word	0x0801415c
 8010138:	08014160 	.word	0x08014160

0801013c <memcpy>:
 801013c:	440a      	add	r2, r1
 801013e:	4291      	cmp	r1, r2
 8010140:	f100 33ff 	add.w	r3, r0, #4294967295
 8010144:	d100      	bne.n	8010148 <memcpy+0xc>
 8010146:	4770      	bx	lr
 8010148:	b510      	push	{r4, lr}
 801014a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801014e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010152:	4291      	cmp	r1, r2
 8010154:	d1f9      	bne.n	801014a <memcpy+0xe>
 8010156:	bd10      	pop	{r4, pc}

08010158 <memmove>:
 8010158:	4288      	cmp	r0, r1
 801015a:	b510      	push	{r4, lr}
 801015c:	eb01 0402 	add.w	r4, r1, r2
 8010160:	d902      	bls.n	8010168 <memmove+0x10>
 8010162:	4284      	cmp	r4, r0
 8010164:	4623      	mov	r3, r4
 8010166:	d807      	bhi.n	8010178 <memmove+0x20>
 8010168:	1e43      	subs	r3, r0, #1
 801016a:	42a1      	cmp	r1, r4
 801016c:	d008      	beq.n	8010180 <memmove+0x28>
 801016e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010172:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010176:	e7f8      	b.n	801016a <memmove+0x12>
 8010178:	4402      	add	r2, r0
 801017a:	4601      	mov	r1, r0
 801017c:	428a      	cmp	r2, r1
 801017e:	d100      	bne.n	8010182 <memmove+0x2a>
 8010180:	bd10      	pop	{r4, pc}
 8010182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010186:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801018a:	e7f7      	b.n	801017c <memmove+0x24>

0801018c <memset>:
 801018c:	4402      	add	r2, r0
 801018e:	4603      	mov	r3, r0
 8010190:	4293      	cmp	r3, r2
 8010192:	d100      	bne.n	8010196 <memset+0xa>
 8010194:	4770      	bx	lr
 8010196:	f803 1b01 	strb.w	r1, [r3], #1
 801019a:	e7f9      	b.n	8010190 <memset+0x4>

0801019c <__cvt>:
 801019c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80101a0:	ec55 4b10 	vmov	r4, r5, d0
 80101a4:	2d00      	cmp	r5, #0
 80101a6:	460e      	mov	r6, r1
 80101a8:	4619      	mov	r1, r3
 80101aa:	462b      	mov	r3, r5
 80101ac:	bfbb      	ittet	lt
 80101ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80101b2:	461d      	movlt	r5, r3
 80101b4:	2300      	movge	r3, #0
 80101b6:	232d      	movlt	r3, #45	; 0x2d
 80101b8:	700b      	strb	r3, [r1, #0]
 80101ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80101bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80101c0:	4691      	mov	r9, r2
 80101c2:	f023 0820 	bic.w	r8, r3, #32
 80101c6:	bfbc      	itt	lt
 80101c8:	4622      	movlt	r2, r4
 80101ca:	4614      	movlt	r4, r2
 80101cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80101d0:	d005      	beq.n	80101de <__cvt+0x42>
 80101d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80101d6:	d100      	bne.n	80101da <__cvt+0x3e>
 80101d8:	3601      	adds	r6, #1
 80101da:	2102      	movs	r1, #2
 80101dc:	e000      	b.n	80101e0 <__cvt+0x44>
 80101de:	2103      	movs	r1, #3
 80101e0:	ab03      	add	r3, sp, #12
 80101e2:	9301      	str	r3, [sp, #4]
 80101e4:	ab02      	add	r3, sp, #8
 80101e6:	9300      	str	r3, [sp, #0]
 80101e8:	ec45 4b10 	vmov	d0, r4, r5
 80101ec:	4653      	mov	r3, sl
 80101ee:	4632      	mov	r2, r6
 80101f0:	f000 fcee 	bl	8010bd0 <_dtoa_r>
 80101f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80101f8:	4607      	mov	r7, r0
 80101fa:	d102      	bne.n	8010202 <__cvt+0x66>
 80101fc:	f019 0f01 	tst.w	r9, #1
 8010200:	d022      	beq.n	8010248 <__cvt+0xac>
 8010202:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010206:	eb07 0906 	add.w	r9, r7, r6
 801020a:	d110      	bne.n	801022e <__cvt+0x92>
 801020c:	783b      	ldrb	r3, [r7, #0]
 801020e:	2b30      	cmp	r3, #48	; 0x30
 8010210:	d10a      	bne.n	8010228 <__cvt+0x8c>
 8010212:	2200      	movs	r2, #0
 8010214:	2300      	movs	r3, #0
 8010216:	4620      	mov	r0, r4
 8010218:	4629      	mov	r1, r5
 801021a:	f7f0 fc75 	bl	8000b08 <__aeabi_dcmpeq>
 801021e:	b918      	cbnz	r0, 8010228 <__cvt+0x8c>
 8010220:	f1c6 0601 	rsb	r6, r6, #1
 8010224:	f8ca 6000 	str.w	r6, [sl]
 8010228:	f8da 3000 	ldr.w	r3, [sl]
 801022c:	4499      	add	r9, r3
 801022e:	2200      	movs	r2, #0
 8010230:	2300      	movs	r3, #0
 8010232:	4620      	mov	r0, r4
 8010234:	4629      	mov	r1, r5
 8010236:	f7f0 fc67 	bl	8000b08 <__aeabi_dcmpeq>
 801023a:	b108      	cbz	r0, 8010240 <__cvt+0xa4>
 801023c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010240:	2230      	movs	r2, #48	; 0x30
 8010242:	9b03      	ldr	r3, [sp, #12]
 8010244:	454b      	cmp	r3, r9
 8010246:	d307      	bcc.n	8010258 <__cvt+0xbc>
 8010248:	9b03      	ldr	r3, [sp, #12]
 801024a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801024c:	1bdb      	subs	r3, r3, r7
 801024e:	4638      	mov	r0, r7
 8010250:	6013      	str	r3, [r2, #0]
 8010252:	b004      	add	sp, #16
 8010254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010258:	1c59      	adds	r1, r3, #1
 801025a:	9103      	str	r1, [sp, #12]
 801025c:	701a      	strb	r2, [r3, #0]
 801025e:	e7f0      	b.n	8010242 <__cvt+0xa6>

08010260 <__exponent>:
 8010260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010262:	4603      	mov	r3, r0
 8010264:	2900      	cmp	r1, #0
 8010266:	bfb8      	it	lt
 8010268:	4249      	neglt	r1, r1
 801026a:	f803 2b02 	strb.w	r2, [r3], #2
 801026e:	bfb4      	ite	lt
 8010270:	222d      	movlt	r2, #45	; 0x2d
 8010272:	222b      	movge	r2, #43	; 0x2b
 8010274:	2909      	cmp	r1, #9
 8010276:	7042      	strb	r2, [r0, #1]
 8010278:	dd2a      	ble.n	80102d0 <__exponent+0x70>
 801027a:	f10d 0407 	add.w	r4, sp, #7
 801027e:	46a4      	mov	ip, r4
 8010280:	270a      	movs	r7, #10
 8010282:	46a6      	mov	lr, r4
 8010284:	460a      	mov	r2, r1
 8010286:	fb91 f6f7 	sdiv	r6, r1, r7
 801028a:	fb07 1516 	mls	r5, r7, r6, r1
 801028e:	3530      	adds	r5, #48	; 0x30
 8010290:	2a63      	cmp	r2, #99	; 0x63
 8010292:	f104 34ff 	add.w	r4, r4, #4294967295
 8010296:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801029a:	4631      	mov	r1, r6
 801029c:	dcf1      	bgt.n	8010282 <__exponent+0x22>
 801029e:	3130      	adds	r1, #48	; 0x30
 80102a0:	f1ae 0502 	sub.w	r5, lr, #2
 80102a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80102a8:	1c44      	adds	r4, r0, #1
 80102aa:	4629      	mov	r1, r5
 80102ac:	4561      	cmp	r1, ip
 80102ae:	d30a      	bcc.n	80102c6 <__exponent+0x66>
 80102b0:	f10d 0209 	add.w	r2, sp, #9
 80102b4:	eba2 020e 	sub.w	r2, r2, lr
 80102b8:	4565      	cmp	r5, ip
 80102ba:	bf88      	it	hi
 80102bc:	2200      	movhi	r2, #0
 80102be:	4413      	add	r3, r2
 80102c0:	1a18      	subs	r0, r3, r0
 80102c2:	b003      	add	sp, #12
 80102c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80102ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80102ce:	e7ed      	b.n	80102ac <__exponent+0x4c>
 80102d0:	2330      	movs	r3, #48	; 0x30
 80102d2:	3130      	adds	r1, #48	; 0x30
 80102d4:	7083      	strb	r3, [r0, #2]
 80102d6:	70c1      	strb	r1, [r0, #3]
 80102d8:	1d03      	adds	r3, r0, #4
 80102da:	e7f1      	b.n	80102c0 <__exponent+0x60>

080102dc <_printf_float>:
 80102dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102e0:	ed2d 8b02 	vpush	{d8}
 80102e4:	b08d      	sub	sp, #52	; 0x34
 80102e6:	460c      	mov	r4, r1
 80102e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80102ec:	4616      	mov	r6, r2
 80102ee:	461f      	mov	r7, r3
 80102f0:	4605      	mov	r5, r0
 80102f2:	f001 fb51 	bl	8011998 <_localeconv_r>
 80102f6:	f8d0 a000 	ldr.w	sl, [r0]
 80102fa:	4650      	mov	r0, sl
 80102fc:	f7ef ff82 	bl	8000204 <strlen>
 8010300:	2300      	movs	r3, #0
 8010302:	930a      	str	r3, [sp, #40]	; 0x28
 8010304:	6823      	ldr	r3, [r4, #0]
 8010306:	9305      	str	r3, [sp, #20]
 8010308:	f8d8 3000 	ldr.w	r3, [r8]
 801030c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010310:	3307      	adds	r3, #7
 8010312:	f023 0307 	bic.w	r3, r3, #7
 8010316:	f103 0208 	add.w	r2, r3, #8
 801031a:	f8c8 2000 	str.w	r2, [r8]
 801031e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010322:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010326:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801032a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801032e:	9307      	str	r3, [sp, #28]
 8010330:	f8cd 8018 	str.w	r8, [sp, #24]
 8010334:	ee08 0a10 	vmov	s16, r0
 8010338:	4b9f      	ldr	r3, [pc, #636]	; (80105b8 <_printf_float+0x2dc>)
 801033a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801033e:	f04f 32ff 	mov.w	r2, #4294967295
 8010342:	f7f0 fc13 	bl	8000b6c <__aeabi_dcmpun>
 8010346:	bb88      	cbnz	r0, 80103ac <_printf_float+0xd0>
 8010348:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801034c:	4b9a      	ldr	r3, [pc, #616]	; (80105b8 <_printf_float+0x2dc>)
 801034e:	f04f 32ff 	mov.w	r2, #4294967295
 8010352:	f7f0 fbed 	bl	8000b30 <__aeabi_dcmple>
 8010356:	bb48      	cbnz	r0, 80103ac <_printf_float+0xd0>
 8010358:	2200      	movs	r2, #0
 801035a:	2300      	movs	r3, #0
 801035c:	4640      	mov	r0, r8
 801035e:	4649      	mov	r1, r9
 8010360:	f7f0 fbdc 	bl	8000b1c <__aeabi_dcmplt>
 8010364:	b110      	cbz	r0, 801036c <_printf_float+0x90>
 8010366:	232d      	movs	r3, #45	; 0x2d
 8010368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801036c:	4b93      	ldr	r3, [pc, #588]	; (80105bc <_printf_float+0x2e0>)
 801036e:	4894      	ldr	r0, [pc, #592]	; (80105c0 <_printf_float+0x2e4>)
 8010370:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010374:	bf94      	ite	ls
 8010376:	4698      	movls	r8, r3
 8010378:	4680      	movhi	r8, r0
 801037a:	2303      	movs	r3, #3
 801037c:	6123      	str	r3, [r4, #16]
 801037e:	9b05      	ldr	r3, [sp, #20]
 8010380:	f023 0204 	bic.w	r2, r3, #4
 8010384:	6022      	str	r2, [r4, #0]
 8010386:	f04f 0900 	mov.w	r9, #0
 801038a:	9700      	str	r7, [sp, #0]
 801038c:	4633      	mov	r3, r6
 801038e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010390:	4621      	mov	r1, r4
 8010392:	4628      	mov	r0, r5
 8010394:	f000 f9d8 	bl	8010748 <_printf_common>
 8010398:	3001      	adds	r0, #1
 801039a:	f040 8090 	bne.w	80104be <_printf_float+0x1e2>
 801039e:	f04f 30ff 	mov.w	r0, #4294967295
 80103a2:	b00d      	add	sp, #52	; 0x34
 80103a4:	ecbd 8b02 	vpop	{d8}
 80103a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103ac:	4642      	mov	r2, r8
 80103ae:	464b      	mov	r3, r9
 80103b0:	4640      	mov	r0, r8
 80103b2:	4649      	mov	r1, r9
 80103b4:	f7f0 fbda 	bl	8000b6c <__aeabi_dcmpun>
 80103b8:	b140      	cbz	r0, 80103cc <_printf_float+0xf0>
 80103ba:	464b      	mov	r3, r9
 80103bc:	2b00      	cmp	r3, #0
 80103be:	bfbc      	itt	lt
 80103c0:	232d      	movlt	r3, #45	; 0x2d
 80103c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80103c6:	487f      	ldr	r0, [pc, #508]	; (80105c4 <_printf_float+0x2e8>)
 80103c8:	4b7f      	ldr	r3, [pc, #508]	; (80105c8 <_printf_float+0x2ec>)
 80103ca:	e7d1      	b.n	8010370 <_printf_float+0x94>
 80103cc:	6863      	ldr	r3, [r4, #4]
 80103ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80103d2:	9206      	str	r2, [sp, #24]
 80103d4:	1c5a      	adds	r2, r3, #1
 80103d6:	d13f      	bne.n	8010458 <_printf_float+0x17c>
 80103d8:	2306      	movs	r3, #6
 80103da:	6063      	str	r3, [r4, #4]
 80103dc:	9b05      	ldr	r3, [sp, #20]
 80103de:	6861      	ldr	r1, [r4, #4]
 80103e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80103e4:	2300      	movs	r3, #0
 80103e6:	9303      	str	r3, [sp, #12]
 80103e8:	ab0a      	add	r3, sp, #40	; 0x28
 80103ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80103ee:	ab09      	add	r3, sp, #36	; 0x24
 80103f0:	ec49 8b10 	vmov	d0, r8, r9
 80103f4:	9300      	str	r3, [sp, #0]
 80103f6:	6022      	str	r2, [r4, #0]
 80103f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80103fc:	4628      	mov	r0, r5
 80103fe:	f7ff fecd 	bl	801019c <__cvt>
 8010402:	9b06      	ldr	r3, [sp, #24]
 8010404:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010406:	2b47      	cmp	r3, #71	; 0x47
 8010408:	4680      	mov	r8, r0
 801040a:	d108      	bne.n	801041e <_printf_float+0x142>
 801040c:	1cc8      	adds	r0, r1, #3
 801040e:	db02      	blt.n	8010416 <_printf_float+0x13a>
 8010410:	6863      	ldr	r3, [r4, #4]
 8010412:	4299      	cmp	r1, r3
 8010414:	dd41      	ble.n	801049a <_printf_float+0x1be>
 8010416:	f1ab 0b02 	sub.w	fp, fp, #2
 801041a:	fa5f fb8b 	uxtb.w	fp, fp
 801041e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010422:	d820      	bhi.n	8010466 <_printf_float+0x18a>
 8010424:	3901      	subs	r1, #1
 8010426:	465a      	mov	r2, fp
 8010428:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801042c:	9109      	str	r1, [sp, #36]	; 0x24
 801042e:	f7ff ff17 	bl	8010260 <__exponent>
 8010432:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010434:	1813      	adds	r3, r2, r0
 8010436:	2a01      	cmp	r2, #1
 8010438:	4681      	mov	r9, r0
 801043a:	6123      	str	r3, [r4, #16]
 801043c:	dc02      	bgt.n	8010444 <_printf_float+0x168>
 801043e:	6822      	ldr	r2, [r4, #0]
 8010440:	07d2      	lsls	r2, r2, #31
 8010442:	d501      	bpl.n	8010448 <_printf_float+0x16c>
 8010444:	3301      	adds	r3, #1
 8010446:	6123      	str	r3, [r4, #16]
 8010448:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801044c:	2b00      	cmp	r3, #0
 801044e:	d09c      	beq.n	801038a <_printf_float+0xae>
 8010450:	232d      	movs	r3, #45	; 0x2d
 8010452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010456:	e798      	b.n	801038a <_printf_float+0xae>
 8010458:	9a06      	ldr	r2, [sp, #24]
 801045a:	2a47      	cmp	r2, #71	; 0x47
 801045c:	d1be      	bne.n	80103dc <_printf_float+0x100>
 801045e:	2b00      	cmp	r3, #0
 8010460:	d1bc      	bne.n	80103dc <_printf_float+0x100>
 8010462:	2301      	movs	r3, #1
 8010464:	e7b9      	b.n	80103da <_printf_float+0xfe>
 8010466:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801046a:	d118      	bne.n	801049e <_printf_float+0x1c2>
 801046c:	2900      	cmp	r1, #0
 801046e:	6863      	ldr	r3, [r4, #4]
 8010470:	dd0b      	ble.n	801048a <_printf_float+0x1ae>
 8010472:	6121      	str	r1, [r4, #16]
 8010474:	b913      	cbnz	r3, 801047c <_printf_float+0x1a0>
 8010476:	6822      	ldr	r2, [r4, #0]
 8010478:	07d0      	lsls	r0, r2, #31
 801047a:	d502      	bpl.n	8010482 <_printf_float+0x1a6>
 801047c:	3301      	adds	r3, #1
 801047e:	440b      	add	r3, r1
 8010480:	6123      	str	r3, [r4, #16]
 8010482:	65a1      	str	r1, [r4, #88]	; 0x58
 8010484:	f04f 0900 	mov.w	r9, #0
 8010488:	e7de      	b.n	8010448 <_printf_float+0x16c>
 801048a:	b913      	cbnz	r3, 8010492 <_printf_float+0x1b6>
 801048c:	6822      	ldr	r2, [r4, #0]
 801048e:	07d2      	lsls	r2, r2, #31
 8010490:	d501      	bpl.n	8010496 <_printf_float+0x1ba>
 8010492:	3302      	adds	r3, #2
 8010494:	e7f4      	b.n	8010480 <_printf_float+0x1a4>
 8010496:	2301      	movs	r3, #1
 8010498:	e7f2      	b.n	8010480 <_printf_float+0x1a4>
 801049a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801049e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104a0:	4299      	cmp	r1, r3
 80104a2:	db05      	blt.n	80104b0 <_printf_float+0x1d4>
 80104a4:	6823      	ldr	r3, [r4, #0]
 80104a6:	6121      	str	r1, [r4, #16]
 80104a8:	07d8      	lsls	r0, r3, #31
 80104aa:	d5ea      	bpl.n	8010482 <_printf_float+0x1a6>
 80104ac:	1c4b      	adds	r3, r1, #1
 80104ae:	e7e7      	b.n	8010480 <_printf_float+0x1a4>
 80104b0:	2900      	cmp	r1, #0
 80104b2:	bfd4      	ite	le
 80104b4:	f1c1 0202 	rsble	r2, r1, #2
 80104b8:	2201      	movgt	r2, #1
 80104ba:	4413      	add	r3, r2
 80104bc:	e7e0      	b.n	8010480 <_printf_float+0x1a4>
 80104be:	6823      	ldr	r3, [r4, #0]
 80104c0:	055a      	lsls	r2, r3, #21
 80104c2:	d407      	bmi.n	80104d4 <_printf_float+0x1f8>
 80104c4:	6923      	ldr	r3, [r4, #16]
 80104c6:	4642      	mov	r2, r8
 80104c8:	4631      	mov	r1, r6
 80104ca:	4628      	mov	r0, r5
 80104cc:	47b8      	blx	r7
 80104ce:	3001      	adds	r0, #1
 80104d0:	d12c      	bne.n	801052c <_printf_float+0x250>
 80104d2:	e764      	b.n	801039e <_printf_float+0xc2>
 80104d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80104d8:	f240 80e0 	bls.w	801069c <_printf_float+0x3c0>
 80104dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80104e0:	2200      	movs	r2, #0
 80104e2:	2300      	movs	r3, #0
 80104e4:	f7f0 fb10 	bl	8000b08 <__aeabi_dcmpeq>
 80104e8:	2800      	cmp	r0, #0
 80104ea:	d034      	beq.n	8010556 <_printf_float+0x27a>
 80104ec:	4a37      	ldr	r2, [pc, #220]	; (80105cc <_printf_float+0x2f0>)
 80104ee:	2301      	movs	r3, #1
 80104f0:	4631      	mov	r1, r6
 80104f2:	4628      	mov	r0, r5
 80104f4:	47b8      	blx	r7
 80104f6:	3001      	adds	r0, #1
 80104f8:	f43f af51 	beq.w	801039e <_printf_float+0xc2>
 80104fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010500:	429a      	cmp	r2, r3
 8010502:	db02      	blt.n	801050a <_printf_float+0x22e>
 8010504:	6823      	ldr	r3, [r4, #0]
 8010506:	07d8      	lsls	r0, r3, #31
 8010508:	d510      	bpl.n	801052c <_printf_float+0x250>
 801050a:	ee18 3a10 	vmov	r3, s16
 801050e:	4652      	mov	r2, sl
 8010510:	4631      	mov	r1, r6
 8010512:	4628      	mov	r0, r5
 8010514:	47b8      	blx	r7
 8010516:	3001      	adds	r0, #1
 8010518:	f43f af41 	beq.w	801039e <_printf_float+0xc2>
 801051c:	f04f 0800 	mov.w	r8, #0
 8010520:	f104 091a 	add.w	r9, r4, #26
 8010524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010526:	3b01      	subs	r3, #1
 8010528:	4543      	cmp	r3, r8
 801052a:	dc09      	bgt.n	8010540 <_printf_float+0x264>
 801052c:	6823      	ldr	r3, [r4, #0]
 801052e:	079b      	lsls	r3, r3, #30
 8010530:	f100 8105 	bmi.w	801073e <_printf_float+0x462>
 8010534:	68e0      	ldr	r0, [r4, #12]
 8010536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010538:	4298      	cmp	r0, r3
 801053a:	bfb8      	it	lt
 801053c:	4618      	movlt	r0, r3
 801053e:	e730      	b.n	80103a2 <_printf_float+0xc6>
 8010540:	2301      	movs	r3, #1
 8010542:	464a      	mov	r2, r9
 8010544:	4631      	mov	r1, r6
 8010546:	4628      	mov	r0, r5
 8010548:	47b8      	blx	r7
 801054a:	3001      	adds	r0, #1
 801054c:	f43f af27 	beq.w	801039e <_printf_float+0xc2>
 8010550:	f108 0801 	add.w	r8, r8, #1
 8010554:	e7e6      	b.n	8010524 <_printf_float+0x248>
 8010556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010558:	2b00      	cmp	r3, #0
 801055a:	dc39      	bgt.n	80105d0 <_printf_float+0x2f4>
 801055c:	4a1b      	ldr	r2, [pc, #108]	; (80105cc <_printf_float+0x2f0>)
 801055e:	2301      	movs	r3, #1
 8010560:	4631      	mov	r1, r6
 8010562:	4628      	mov	r0, r5
 8010564:	47b8      	blx	r7
 8010566:	3001      	adds	r0, #1
 8010568:	f43f af19 	beq.w	801039e <_printf_float+0xc2>
 801056c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010570:	4313      	orrs	r3, r2
 8010572:	d102      	bne.n	801057a <_printf_float+0x29e>
 8010574:	6823      	ldr	r3, [r4, #0]
 8010576:	07d9      	lsls	r1, r3, #31
 8010578:	d5d8      	bpl.n	801052c <_printf_float+0x250>
 801057a:	ee18 3a10 	vmov	r3, s16
 801057e:	4652      	mov	r2, sl
 8010580:	4631      	mov	r1, r6
 8010582:	4628      	mov	r0, r5
 8010584:	47b8      	blx	r7
 8010586:	3001      	adds	r0, #1
 8010588:	f43f af09 	beq.w	801039e <_printf_float+0xc2>
 801058c:	f04f 0900 	mov.w	r9, #0
 8010590:	f104 0a1a 	add.w	sl, r4, #26
 8010594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010596:	425b      	negs	r3, r3
 8010598:	454b      	cmp	r3, r9
 801059a:	dc01      	bgt.n	80105a0 <_printf_float+0x2c4>
 801059c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801059e:	e792      	b.n	80104c6 <_printf_float+0x1ea>
 80105a0:	2301      	movs	r3, #1
 80105a2:	4652      	mov	r2, sl
 80105a4:	4631      	mov	r1, r6
 80105a6:	4628      	mov	r0, r5
 80105a8:	47b8      	blx	r7
 80105aa:	3001      	adds	r0, #1
 80105ac:	f43f aef7 	beq.w	801039e <_printf_float+0xc2>
 80105b0:	f109 0901 	add.w	r9, r9, #1
 80105b4:	e7ee      	b.n	8010594 <_printf_float+0x2b8>
 80105b6:	bf00      	nop
 80105b8:	7fefffff 	.word	0x7fefffff
 80105bc:	08013d68 	.word	0x08013d68
 80105c0:	08013d6c 	.word	0x08013d6c
 80105c4:	08013d74 	.word	0x08013d74
 80105c8:	08013d70 	.word	0x08013d70
 80105cc:	08013d78 	.word	0x08013d78
 80105d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80105d4:	429a      	cmp	r2, r3
 80105d6:	bfa8      	it	ge
 80105d8:	461a      	movge	r2, r3
 80105da:	2a00      	cmp	r2, #0
 80105dc:	4691      	mov	r9, r2
 80105de:	dc37      	bgt.n	8010650 <_printf_float+0x374>
 80105e0:	f04f 0b00 	mov.w	fp, #0
 80105e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80105e8:	f104 021a 	add.w	r2, r4, #26
 80105ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80105ee:	9305      	str	r3, [sp, #20]
 80105f0:	eba3 0309 	sub.w	r3, r3, r9
 80105f4:	455b      	cmp	r3, fp
 80105f6:	dc33      	bgt.n	8010660 <_printf_float+0x384>
 80105f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80105fc:	429a      	cmp	r2, r3
 80105fe:	db3b      	blt.n	8010678 <_printf_float+0x39c>
 8010600:	6823      	ldr	r3, [r4, #0]
 8010602:	07da      	lsls	r2, r3, #31
 8010604:	d438      	bmi.n	8010678 <_printf_float+0x39c>
 8010606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010608:	9a05      	ldr	r2, [sp, #20]
 801060a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801060c:	1a9a      	subs	r2, r3, r2
 801060e:	eba3 0901 	sub.w	r9, r3, r1
 8010612:	4591      	cmp	r9, r2
 8010614:	bfa8      	it	ge
 8010616:	4691      	movge	r9, r2
 8010618:	f1b9 0f00 	cmp.w	r9, #0
 801061c:	dc35      	bgt.n	801068a <_printf_float+0x3ae>
 801061e:	f04f 0800 	mov.w	r8, #0
 8010622:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010626:	f104 0a1a 	add.w	sl, r4, #26
 801062a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801062e:	1a9b      	subs	r3, r3, r2
 8010630:	eba3 0309 	sub.w	r3, r3, r9
 8010634:	4543      	cmp	r3, r8
 8010636:	f77f af79 	ble.w	801052c <_printf_float+0x250>
 801063a:	2301      	movs	r3, #1
 801063c:	4652      	mov	r2, sl
 801063e:	4631      	mov	r1, r6
 8010640:	4628      	mov	r0, r5
 8010642:	47b8      	blx	r7
 8010644:	3001      	adds	r0, #1
 8010646:	f43f aeaa 	beq.w	801039e <_printf_float+0xc2>
 801064a:	f108 0801 	add.w	r8, r8, #1
 801064e:	e7ec      	b.n	801062a <_printf_float+0x34e>
 8010650:	4613      	mov	r3, r2
 8010652:	4631      	mov	r1, r6
 8010654:	4642      	mov	r2, r8
 8010656:	4628      	mov	r0, r5
 8010658:	47b8      	blx	r7
 801065a:	3001      	adds	r0, #1
 801065c:	d1c0      	bne.n	80105e0 <_printf_float+0x304>
 801065e:	e69e      	b.n	801039e <_printf_float+0xc2>
 8010660:	2301      	movs	r3, #1
 8010662:	4631      	mov	r1, r6
 8010664:	4628      	mov	r0, r5
 8010666:	9205      	str	r2, [sp, #20]
 8010668:	47b8      	blx	r7
 801066a:	3001      	adds	r0, #1
 801066c:	f43f ae97 	beq.w	801039e <_printf_float+0xc2>
 8010670:	9a05      	ldr	r2, [sp, #20]
 8010672:	f10b 0b01 	add.w	fp, fp, #1
 8010676:	e7b9      	b.n	80105ec <_printf_float+0x310>
 8010678:	ee18 3a10 	vmov	r3, s16
 801067c:	4652      	mov	r2, sl
 801067e:	4631      	mov	r1, r6
 8010680:	4628      	mov	r0, r5
 8010682:	47b8      	blx	r7
 8010684:	3001      	adds	r0, #1
 8010686:	d1be      	bne.n	8010606 <_printf_float+0x32a>
 8010688:	e689      	b.n	801039e <_printf_float+0xc2>
 801068a:	9a05      	ldr	r2, [sp, #20]
 801068c:	464b      	mov	r3, r9
 801068e:	4442      	add	r2, r8
 8010690:	4631      	mov	r1, r6
 8010692:	4628      	mov	r0, r5
 8010694:	47b8      	blx	r7
 8010696:	3001      	adds	r0, #1
 8010698:	d1c1      	bne.n	801061e <_printf_float+0x342>
 801069a:	e680      	b.n	801039e <_printf_float+0xc2>
 801069c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801069e:	2a01      	cmp	r2, #1
 80106a0:	dc01      	bgt.n	80106a6 <_printf_float+0x3ca>
 80106a2:	07db      	lsls	r3, r3, #31
 80106a4:	d538      	bpl.n	8010718 <_printf_float+0x43c>
 80106a6:	2301      	movs	r3, #1
 80106a8:	4642      	mov	r2, r8
 80106aa:	4631      	mov	r1, r6
 80106ac:	4628      	mov	r0, r5
 80106ae:	47b8      	blx	r7
 80106b0:	3001      	adds	r0, #1
 80106b2:	f43f ae74 	beq.w	801039e <_printf_float+0xc2>
 80106b6:	ee18 3a10 	vmov	r3, s16
 80106ba:	4652      	mov	r2, sl
 80106bc:	4631      	mov	r1, r6
 80106be:	4628      	mov	r0, r5
 80106c0:	47b8      	blx	r7
 80106c2:	3001      	adds	r0, #1
 80106c4:	f43f ae6b 	beq.w	801039e <_printf_float+0xc2>
 80106c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80106cc:	2200      	movs	r2, #0
 80106ce:	2300      	movs	r3, #0
 80106d0:	f7f0 fa1a 	bl	8000b08 <__aeabi_dcmpeq>
 80106d4:	b9d8      	cbnz	r0, 801070e <_printf_float+0x432>
 80106d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106d8:	f108 0201 	add.w	r2, r8, #1
 80106dc:	3b01      	subs	r3, #1
 80106de:	4631      	mov	r1, r6
 80106e0:	4628      	mov	r0, r5
 80106e2:	47b8      	blx	r7
 80106e4:	3001      	adds	r0, #1
 80106e6:	d10e      	bne.n	8010706 <_printf_float+0x42a>
 80106e8:	e659      	b.n	801039e <_printf_float+0xc2>
 80106ea:	2301      	movs	r3, #1
 80106ec:	4652      	mov	r2, sl
 80106ee:	4631      	mov	r1, r6
 80106f0:	4628      	mov	r0, r5
 80106f2:	47b8      	blx	r7
 80106f4:	3001      	adds	r0, #1
 80106f6:	f43f ae52 	beq.w	801039e <_printf_float+0xc2>
 80106fa:	f108 0801 	add.w	r8, r8, #1
 80106fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010700:	3b01      	subs	r3, #1
 8010702:	4543      	cmp	r3, r8
 8010704:	dcf1      	bgt.n	80106ea <_printf_float+0x40e>
 8010706:	464b      	mov	r3, r9
 8010708:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801070c:	e6dc      	b.n	80104c8 <_printf_float+0x1ec>
 801070e:	f04f 0800 	mov.w	r8, #0
 8010712:	f104 0a1a 	add.w	sl, r4, #26
 8010716:	e7f2      	b.n	80106fe <_printf_float+0x422>
 8010718:	2301      	movs	r3, #1
 801071a:	4642      	mov	r2, r8
 801071c:	e7df      	b.n	80106de <_printf_float+0x402>
 801071e:	2301      	movs	r3, #1
 8010720:	464a      	mov	r2, r9
 8010722:	4631      	mov	r1, r6
 8010724:	4628      	mov	r0, r5
 8010726:	47b8      	blx	r7
 8010728:	3001      	adds	r0, #1
 801072a:	f43f ae38 	beq.w	801039e <_printf_float+0xc2>
 801072e:	f108 0801 	add.w	r8, r8, #1
 8010732:	68e3      	ldr	r3, [r4, #12]
 8010734:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010736:	1a5b      	subs	r3, r3, r1
 8010738:	4543      	cmp	r3, r8
 801073a:	dcf0      	bgt.n	801071e <_printf_float+0x442>
 801073c:	e6fa      	b.n	8010534 <_printf_float+0x258>
 801073e:	f04f 0800 	mov.w	r8, #0
 8010742:	f104 0919 	add.w	r9, r4, #25
 8010746:	e7f4      	b.n	8010732 <_printf_float+0x456>

08010748 <_printf_common>:
 8010748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801074c:	4616      	mov	r6, r2
 801074e:	4699      	mov	r9, r3
 8010750:	688a      	ldr	r2, [r1, #8]
 8010752:	690b      	ldr	r3, [r1, #16]
 8010754:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010758:	4293      	cmp	r3, r2
 801075a:	bfb8      	it	lt
 801075c:	4613      	movlt	r3, r2
 801075e:	6033      	str	r3, [r6, #0]
 8010760:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010764:	4607      	mov	r7, r0
 8010766:	460c      	mov	r4, r1
 8010768:	b10a      	cbz	r2, 801076e <_printf_common+0x26>
 801076a:	3301      	adds	r3, #1
 801076c:	6033      	str	r3, [r6, #0]
 801076e:	6823      	ldr	r3, [r4, #0]
 8010770:	0699      	lsls	r1, r3, #26
 8010772:	bf42      	ittt	mi
 8010774:	6833      	ldrmi	r3, [r6, #0]
 8010776:	3302      	addmi	r3, #2
 8010778:	6033      	strmi	r3, [r6, #0]
 801077a:	6825      	ldr	r5, [r4, #0]
 801077c:	f015 0506 	ands.w	r5, r5, #6
 8010780:	d106      	bne.n	8010790 <_printf_common+0x48>
 8010782:	f104 0a19 	add.w	sl, r4, #25
 8010786:	68e3      	ldr	r3, [r4, #12]
 8010788:	6832      	ldr	r2, [r6, #0]
 801078a:	1a9b      	subs	r3, r3, r2
 801078c:	42ab      	cmp	r3, r5
 801078e:	dc26      	bgt.n	80107de <_printf_common+0x96>
 8010790:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010794:	1e13      	subs	r3, r2, #0
 8010796:	6822      	ldr	r2, [r4, #0]
 8010798:	bf18      	it	ne
 801079a:	2301      	movne	r3, #1
 801079c:	0692      	lsls	r2, r2, #26
 801079e:	d42b      	bmi.n	80107f8 <_printf_common+0xb0>
 80107a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80107a4:	4649      	mov	r1, r9
 80107a6:	4638      	mov	r0, r7
 80107a8:	47c0      	blx	r8
 80107aa:	3001      	adds	r0, #1
 80107ac:	d01e      	beq.n	80107ec <_printf_common+0xa4>
 80107ae:	6823      	ldr	r3, [r4, #0]
 80107b0:	68e5      	ldr	r5, [r4, #12]
 80107b2:	6832      	ldr	r2, [r6, #0]
 80107b4:	f003 0306 	and.w	r3, r3, #6
 80107b8:	2b04      	cmp	r3, #4
 80107ba:	bf08      	it	eq
 80107bc:	1aad      	subeq	r5, r5, r2
 80107be:	68a3      	ldr	r3, [r4, #8]
 80107c0:	6922      	ldr	r2, [r4, #16]
 80107c2:	bf0c      	ite	eq
 80107c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80107c8:	2500      	movne	r5, #0
 80107ca:	4293      	cmp	r3, r2
 80107cc:	bfc4      	itt	gt
 80107ce:	1a9b      	subgt	r3, r3, r2
 80107d0:	18ed      	addgt	r5, r5, r3
 80107d2:	2600      	movs	r6, #0
 80107d4:	341a      	adds	r4, #26
 80107d6:	42b5      	cmp	r5, r6
 80107d8:	d11a      	bne.n	8010810 <_printf_common+0xc8>
 80107da:	2000      	movs	r0, #0
 80107dc:	e008      	b.n	80107f0 <_printf_common+0xa8>
 80107de:	2301      	movs	r3, #1
 80107e0:	4652      	mov	r2, sl
 80107e2:	4649      	mov	r1, r9
 80107e4:	4638      	mov	r0, r7
 80107e6:	47c0      	blx	r8
 80107e8:	3001      	adds	r0, #1
 80107ea:	d103      	bne.n	80107f4 <_printf_common+0xac>
 80107ec:	f04f 30ff 	mov.w	r0, #4294967295
 80107f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107f4:	3501      	adds	r5, #1
 80107f6:	e7c6      	b.n	8010786 <_printf_common+0x3e>
 80107f8:	18e1      	adds	r1, r4, r3
 80107fa:	1c5a      	adds	r2, r3, #1
 80107fc:	2030      	movs	r0, #48	; 0x30
 80107fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010802:	4422      	add	r2, r4
 8010804:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010808:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801080c:	3302      	adds	r3, #2
 801080e:	e7c7      	b.n	80107a0 <_printf_common+0x58>
 8010810:	2301      	movs	r3, #1
 8010812:	4622      	mov	r2, r4
 8010814:	4649      	mov	r1, r9
 8010816:	4638      	mov	r0, r7
 8010818:	47c0      	blx	r8
 801081a:	3001      	adds	r0, #1
 801081c:	d0e6      	beq.n	80107ec <_printf_common+0xa4>
 801081e:	3601      	adds	r6, #1
 8010820:	e7d9      	b.n	80107d6 <_printf_common+0x8e>
	...

08010824 <_printf_i>:
 8010824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010828:	7e0f      	ldrb	r7, [r1, #24]
 801082a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801082c:	2f78      	cmp	r7, #120	; 0x78
 801082e:	4691      	mov	r9, r2
 8010830:	4680      	mov	r8, r0
 8010832:	460c      	mov	r4, r1
 8010834:	469a      	mov	sl, r3
 8010836:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801083a:	d807      	bhi.n	801084c <_printf_i+0x28>
 801083c:	2f62      	cmp	r7, #98	; 0x62
 801083e:	d80a      	bhi.n	8010856 <_printf_i+0x32>
 8010840:	2f00      	cmp	r7, #0
 8010842:	f000 80d8 	beq.w	80109f6 <_printf_i+0x1d2>
 8010846:	2f58      	cmp	r7, #88	; 0x58
 8010848:	f000 80a3 	beq.w	8010992 <_printf_i+0x16e>
 801084c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010850:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010854:	e03a      	b.n	80108cc <_printf_i+0xa8>
 8010856:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801085a:	2b15      	cmp	r3, #21
 801085c:	d8f6      	bhi.n	801084c <_printf_i+0x28>
 801085e:	a101      	add	r1, pc, #4	; (adr r1, 8010864 <_printf_i+0x40>)
 8010860:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010864:	080108bd 	.word	0x080108bd
 8010868:	080108d1 	.word	0x080108d1
 801086c:	0801084d 	.word	0x0801084d
 8010870:	0801084d 	.word	0x0801084d
 8010874:	0801084d 	.word	0x0801084d
 8010878:	0801084d 	.word	0x0801084d
 801087c:	080108d1 	.word	0x080108d1
 8010880:	0801084d 	.word	0x0801084d
 8010884:	0801084d 	.word	0x0801084d
 8010888:	0801084d 	.word	0x0801084d
 801088c:	0801084d 	.word	0x0801084d
 8010890:	080109dd 	.word	0x080109dd
 8010894:	08010901 	.word	0x08010901
 8010898:	080109bf 	.word	0x080109bf
 801089c:	0801084d 	.word	0x0801084d
 80108a0:	0801084d 	.word	0x0801084d
 80108a4:	080109ff 	.word	0x080109ff
 80108a8:	0801084d 	.word	0x0801084d
 80108ac:	08010901 	.word	0x08010901
 80108b0:	0801084d 	.word	0x0801084d
 80108b4:	0801084d 	.word	0x0801084d
 80108b8:	080109c7 	.word	0x080109c7
 80108bc:	682b      	ldr	r3, [r5, #0]
 80108be:	1d1a      	adds	r2, r3, #4
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	602a      	str	r2, [r5, #0]
 80108c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80108c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80108cc:	2301      	movs	r3, #1
 80108ce:	e0a3      	b.n	8010a18 <_printf_i+0x1f4>
 80108d0:	6820      	ldr	r0, [r4, #0]
 80108d2:	6829      	ldr	r1, [r5, #0]
 80108d4:	0606      	lsls	r6, r0, #24
 80108d6:	f101 0304 	add.w	r3, r1, #4
 80108da:	d50a      	bpl.n	80108f2 <_printf_i+0xce>
 80108dc:	680e      	ldr	r6, [r1, #0]
 80108de:	602b      	str	r3, [r5, #0]
 80108e0:	2e00      	cmp	r6, #0
 80108e2:	da03      	bge.n	80108ec <_printf_i+0xc8>
 80108e4:	232d      	movs	r3, #45	; 0x2d
 80108e6:	4276      	negs	r6, r6
 80108e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108ec:	485e      	ldr	r0, [pc, #376]	; (8010a68 <_printf_i+0x244>)
 80108ee:	230a      	movs	r3, #10
 80108f0:	e019      	b.n	8010926 <_printf_i+0x102>
 80108f2:	680e      	ldr	r6, [r1, #0]
 80108f4:	602b      	str	r3, [r5, #0]
 80108f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80108fa:	bf18      	it	ne
 80108fc:	b236      	sxthne	r6, r6
 80108fe:	e7ef      	b.n	80108e0 <_printf_i+0xbc>
 8010900:	682b      	ldr	r3, [r5, #0]
 8010902:	6820      	ldr	r0, [r4, #0]
 8010904:	1d19      	adds	r1, r3, #4
 8010906:	6029      	str	r1, [r5, #0]
 8010908:	0601      	lsls	r1, r0, #24
 801090a:	d501      	bpl.n	8010910 <_printf_i+0xec>
 801090c:	681e      	ldr	r6, [r3, #0]
 801090e:	e002      	b.n	8010916 <_printf_i+0xf2>
 8010910:	0646      	lsls	r6, r0, #25
 8010912:	d5fb      	bpl.n	801090c <_printf_i+0xe8>
 8010914:	881e      	ldrh	r6, [r3, #0]
 8010916:	4854      	ldr	r0, [pc, #336]	; (8010a68 <_printf_i+0x244>)
 8010918:	2f6f      	cmp	r7, #111	; 0x6f
 801091a:	bf0c      	ite	eq
 801091c:	2308      	moveq	r3, #8
 801091e:	230a      	movne	r3, #10
 8010920:	2100      	movs	r1, #0
 8010922:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010926:	6865      	ldr	r5, [r4, #4]
 8010928:	60a5      	str	r5, [r4, #8]
 801092a:	2d00      	cmp	r5, #0
 801092c:	bfa2      	ittt	ge
 801092e:	6821      	ldrge	r1, [r4, #0]
 8010930:	f021 0104 	bicge.w	r1, r1, #4
 8010934:	6021      	strge	r1, [r4, #0]
 8010936:	b90e      	cbnz	r6, 801093c <_printf_i+0x118>
 8010938:	2d00      	cmp	r5, #0
 801093a:	d04d      	beq.n	80109d8 <_printf_i+0x1b4>
 801093c:	4615      	mov	r5, r2
 801093e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010942:	fb03 6711 	mls	r7, r3, r1, r6
 8010946:	5dc7      	ldrb	r7, [r0, r7]
 8010948:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801094c:	4637      	mov	r7, r6
 801094e:	42bb      	cmp	r3, r7
 8010950:	460e      	mov	r6, r1
 8010952:	d9f4      	bls.n	801093e <_printf_i+0x11a>
 8010954:	2b08      	cmp	r3, #8
 8010956:	d10b      	bne.n	8010970 <_printf_i+0x14c>
 8010958:	6823      	ldr	r3, [r4, #0]
 801095a:	07de      	lsls	r6, r3, #31
 801095c:	d508      	bpl.n	8010970 <_printf_i+0x14c>
 801095e:	6923      	ldr	r3, [r4, #16]
 8010960:	6861      	ldr	r1, [r4, #4]
 8010962:	4299      	cmp	r1, r3
 8010964:	bfde      	ittt	le
 8010966:	2330      	movle	r3, #48	; 0x30
 8010968:	f805 3c01 	strble.w	r3, [r5, #-1]
 801096c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010970:	1b52      	subs	r2, r2, r5
 8010972:	6122      	str	r2, [r4, #16]
 8010974:	f8cd a000 	str.w	sl, [sp]
 8010978:	464b      	mov	r3, r9
 801097a:	aa03      	add	r2, sp, #12
 801097c:	4621      	mov	r1, r4
 801097e:	4640      	mov	r0, r8
 8010980:	f7ff fee2 	bl	8010748 <_printf_common>
 8010984:	3001      	adds	r0, #1
 8010986:	d14c      	bne.n	8010a22 <_printf_i+0x1fe>
 8010988:	f04f 30ff 	mov.w	r0, #4294967295
 801098c:	b004      	add	sp, #16
 801098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010992:	4835      	ldr	r0, [pc, #212]	; (8010a68 <_printf_i+0x244>)
 8010994:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010998:	6829      	ldr	r1, [r5, #0]
 801099a:	6823      	ldr	r3, [r4, #0]
 801099c:	f851 6b04 	ldr.w	r6, [r1], #4
 80109a0:	6029      	str	r1, [r5, #0]
 80109a2:	061d      	lsls	r5, r3, #24
 80109a4:	d514      	bpl.n	80109d0 <_printf_i+0x1ac>
 80109a6:	07df      	lsls	r7, r3, #31
 80109a8:	bf44      	itt	mi
 80109aa:	f043 0320 	orrmi.w	r3, r3, #32
 80109ae:	6023      	strmi	r3, [r4, #0]
 80109b0:	b91e      	cbnz	r6, 80109ba <_printf_i+0x196>
 80109b2:	6823      	ldr	r3, [r4, #0]
 80109b4:	f023 0320 	bic.w	r3, r3, #32
 80109b8:	6023      	str	r3, [r4, #0]
 80109ba:	2310      	movs	r3, #16
 80109bc:	e7b0      	b.n	8010920 <_printf_i+0xfc>
 80109be:	6823      	ldr	r3, [r4, #0]
 80109c0:	f043 0320 	orr.w	r3, r3, #32
 80109c4:	6023      	str	r3, [r4, #0]
 80109c6:	2378      	movs	r3, #120	; 0x78
 80109c8:	4828      	ldr	r0, [pc, #160]	; (8010a6c <_printf_i+0x248>)
 80109ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80109ce:	e7e3      	b.n	8010998 <_printf_i+0x174>
 80109d0:	0659      	lsls	r1, r3, #25
 80109d2:	bf48      	it	mi
 80109d4:	b2b6      	uxthmi	r6, r6
 80109d6:	e7e6      	b.n	80109a6 <_printf_i+0x182>
 80109d8:	4615      	mov	r5, r2
 80109da:	e7bb      	b.n	8010954 <_printf_i+0x130>
 80109dc:	682b      	ldr	r3, [r5, #0]
 80109de:	6826      	ldr	r6, [r4, #0]
 80109e0:	6961      	ldr	r1, [r4, #20]
 80109e2:	1d18      	adds	r0, r3, #4
 80109e4:	6028      	str	r0, [r5, #0]
 80109e6:	0635      	lsls	r5, r6, #24
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	d501      	bpl.n	80109f0 <_printf_i+0x1cc>
 80109ec:	6019      	str	r1, [r3, #0]
 80109ee:	e002      	b.n	80109f6 <_printf_i+0x1d2>
 80109f0:	0670      	lsls	r0, r6, #25
 80109f2:	d5fb      	bpl.n	80109ec <_printf_i+0x1c8>
 80109f4:	8019      	strh	r1, [r3, #0]
 80109f6:	2300      	movs	r3, #0
 80109f8:	6123      	str	r3, [r4, #16]
 80109fa:	4615      	mov	r5, r2
 80109fc:	e7ba      	b.n	8010974 <_printf_i+0x150>
 80109fe:	682b      	ldr	r3, [r5, #0]
 8010a00:	1d1a      	adds	r2, r3, #4
 8010a02:	602a      	str	r2, [r5, #0]
 8010a04:	681d      	ldr	r5, [r3, #0]
 8010a06:	6862      	ldr	r2, [r4, #4]
 8010a08:	2100      	movs	r1, #0
 8010a0a:	4628      	mov	r0, r5
 8010a0c:	f7ef fc08 	bl	8000220 <memchr>
 8010a10:	b108      	cbz	r0, 8010a16 <_printf_i+0x1f2>
 8010a12:	1b40      	subs	r0, r0, r5
 8010a14:	6060      	str	r0, [r4, #4]
 8010a16:	6863      	ldr	r3, [r4, #4]
 8010a18:	6123      	str	r3, [r4, #16]
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a20:	e7a8      	b.n	8010974 <_printf_i+0x150>
 8010a22:	6923      	ldr	r3, [r4, #16]
 8010a24:	462a      	mov	r2, r5
 8010a26:	4649      	mov	r1, r9
 8010a28:	4640      	mov	r0, r8
 8010a2a:	47d0      	blx	sl
 8010a2c:	3001      	adds	r0, #1
 8010a2e:	d0ab      	beq.n	8010988 <_printf_i+0x164>
 8010a30:	6823      	ldr	r3, [r4, #0]
 8010a32:	079b      	lsls	r3, r3, #30
 8010a34:	d413      	bmi.n	8010a5e <_printf_i+0x23a>
 8010a36:	68e0      	ldr	r0, [r4, #12]
 8010a38:	9b03      	ldr	r3, [sp, #12]
 8010a3a:	4298      	cmp	r0, r3
 8010a3c:	bfb8      	it	lt
 8010a3e:	4618      	movlt	r0, r3
 8010a40:	e7a4      	b.n	801098c <_printf_i+0x168>
 8010a42:	2301      	movs	r3, #1
 8010a44:	4632      	mov	r2, r6
 8010a46:	4649      	mov	r1, r9
 8010a48:	4640      	mov	r0, r8
 8010a4a:	47d0      	blx	sl
 8010a4c:	3001      	adds	r0, #1
 8010a4e:	d09b      	beq.n	8010988 <_printf_i+0x164>
 8010a50:	3501      	adds	r5, #1
 8010a52:	68e3      	ldr	r3, [r4, #12]
 8010a54:	9903      	ldr	r1, [sp, #12]
 8010a56:	1a5b      	subs	r3, r3, r1
 8010a58:	42ab      	cmp	r3, r5
 8010a5a:	dcf2      	bgt.n	8010a42 <_printf_i+0x21e>
 8010a5c:	e7eb      	b.n	8010a36 <_printf_i+0x212>
 8010a5e:	2500      	movs	r5, #0
 8010a60:	f104 0619 	add.w	r6, r4, #25
 8010a64:	e7f5      	b.n	8010a52 <_printf_i+0x22e>
 8010a66:	bf00      	nop
 8010a68:	08013d7a 	.word	0x08013d7a
 8010a6c:	08013d8b 	.word	0x08013d8b

08010a70 <strnlen>:
 8010a70:	b510      	push	{r4, lr}
 8010a72:	4602      	mov	r2, r0
 8010a74:	4401      	add	r1, r0
 8010a76:	428a      	cmp	r2, r1
 8010a78:	4613      	mov	r3, r2
 8010a7a:	d003      	beq.n	8010a84 <strnlen+0x14>
 8010a7c:	781c      	ldrb	r4, [r3, #0]
 8010a7e:	3201      	adds	r2, #1
 8010a80:	2c00      	cmp	r4, #0
 8010a82:	d1f8      	bne.n	8010a76 <strnlen+0x6>
 8010a84:	1a18      	subs	r0, r3, r0
 8010a86:	bd10      	pop	{r4, pc}

08010a88 <strstr>:
 8010a88:	780a      	ldrb	r2, [r1, #0]
 8010a8a:	b570      	push	{r4, r5, r6, lr}
 8010a8c:	b96a      	cbnz	r2, 8010aaa <strstr+0x22>
 8010a8e:	bd70      	pop	{r4, r5, r6, pc}
 8010a90:	429a      	cmp	r2, r3
 8010a92:	d109      	bne.n	8010aa8 <strstr+0x20>
 8010a94:	460c      	mov	r4, r1
 8010a96:	4605      	mov	r5, r0
 8010a98:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d0f6      	beq.n	8010a8e <strstr+0x6>
 8010aa0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010aa4:	429e      	cmp	r6, r3
 8010aa6:	d0f7      	beq.n	8010a98 <strstr+0x10>
 8010aa8:	3001      	adds	r0, #1
 8010aaa:	7803      	ldrb	r3, [r0, #0]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d1ef      	bne.n	8010a90 <strstr+0x8>
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	e7ec      	b.n	8010a8e <strstr+0x6>

08010ab4 <quorem>:
 8010ab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ab8:	6903      	ldr	r3, [r0, #16]
 8010aba:	690c      	ldr	r4, [r1, #16]
 8010abc:	42a3      	cmp	r3, r4
 8010abe:	4607      	mov	r7, r0
 8010ac0:	f2c0 8081 	blt.w	8010bc6 <quorem+0x112>
 8010ac4:	3c01      	subs	r4, #1
 8010ac6:	f101 0814 	add.w	r8, r1, #20
 8010aca:	f100 0514 	add.w	r5, r0, #20
 8010ace:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010ad2:	9301      	str	r3, [sp, #4]
 8010ad4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010ad8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010adc:	3301      	adds	r3, #1
 8010ade:	429a      	cmp	r2, r3
 8010ae0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010ae4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010ae8:	fbb2 f6f3 	udiv	r6, r2, r3
 8010aec:	d331      	bcc.n	8010b52 <quorem+0x9e>
 8010aee:	f04f 0e00 	mov.w	lr, #0
 8010af2:	4640      	mov	r0, r8
 8010af4:	46ac      	mov	ip, r5
 8010af6:	46f2      	mov	sl, lr
 8010af8:	f850 2b04 	ldr.w	r2, [r0], #4
 8010afc:	b293      	uxth	r3, r2
 8010afe:	fb06 e303 	mla	r3, r6, r3, lr
 8010b02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010b06:	b29b      	uxth	r3, r3
 8010b08:	ebaa 0303 	sub.w	r3, sl, r3
 8010b0c:	f8dc a000 	ldr.w	sl, [ip]
 8010b10:	0c12      	lsrs	r2, r2, #16
 8010b12:	fa13 f38a 	uxtah	r3, r3, sl
 8010b16:	fb06 e202 	mla	r2, r6, r2, lr
 8010b1a:	9300      	str	r3, [sp, #0]
 8010b1c:	9b00      	ldr	r3, [sp, #0]
 8010b1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010b22:	b292      	uxth	r2, r2
 8010b24:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010b28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010b2c:	f8bd 3000 	ldrh.w	r3, [sp]
 8010b30:	4581      	cmp	r9, r0
 8010b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010b36:	f84c 3b04 	str.w	r3, [ip], #4
 8010b3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010b3e:	d2db      	bcs.n	8010af8 <quorem+0x44>
 8010b40:	f855 300b 	ldr.w	r3, [r5, fp]
 8010b44:	b92b      	cbnz	r3, 8010b52 <quorem+0x9e>
 8010b46:	9b01      	ldr	r3, [sp, #4]
 8010b48:	3b04      	subs	r3, #4
 8010b4a:	429d      	cmp	r5, r3
 8010b4c:	461a      	mov	r2, r3
 8010b4e:	d32e      	bcc.n	8010bae <quorem+0xfa>
 8010b50:	613c      	str	r4, [r7, #16]
 8010b52:	4638      	mov	r0, r7
 8010b54:	f001 f9b2 	bl	8011ebc <__mcmp>
 8010b58:	2800      	cmp	r0, #0
 8010b5a:	db24      	blt.n	8010ba6 <quorem+0xf2>
 8010b5c:	3601      	adds	r6, #1
 8010b5e:	4628      	mov	r0, r5
 8010b60:	f04f 0c00 	mov.w	ip, #0
 8010b64:	f858 2b04 	ldr.w	r2, [r8], #4
 8010b68:	f8d0 e000 	ldr.w	lr, [r0]
 8010b6c:	b293      	uxth	r3, r2
 8010b6e:	ebac 0303 	sub.w	r3, ip, r3
 8010b72:	0c12      	lsrs	r2, r2, #16
 8010b74:	fa13 f38e 	uxtah	r3, r3, lr
 8010b78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010b7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010b80:	b29b      	uxth	r3, r3
 8010b82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010b86:	45c1      	cmp	r9, r8
 8010b88:	f840 3b04 	str.w	r3, [r0], #4
 8010b8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010b90:	d2e8      	bcs.n	8010b64 <quorem+0xb0>
 8010b92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010b96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010b9a:	b922      	cbnz	r2, 8010ba6 <quorem+0xf2>
 8010b9c:	3b04      	subs	r3, #4
 8010b9e:	429d      	cmp	r5, r3
 8010ba0:	461a      	mov	r2, r3
 8010ba2:	d30a      	bcc.n	8010bba <quorem+0x106>
 8010ba4:	613c      	str	r4, [r7, #16]
 8010ba6:	4630      	mov	r0, r6
 8010ba8:	b003      	add	sp, #12
 8010baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bae:	6812      	ldr	r2, [r2, #0]
 8010bb0:	3b04      	subs	r3, #4
 8010bb2:	2a00      	cmp	r2, #0
 8010bb4:	d1cc      	bne.n	8010b50 <quorem+0x9c>
 8010bb6:	3c01      	subs	r4, #1
 8010bb8:	e7c7      	b.n	8010b4a <quorem+0x96>
 8010bba:	6812      	ldr	r2, [r2, #0]
 8010bbc:	3b04      	subs	r3, #4
 8010bbe:	2a00      	cmp	r2, #0
 8010bc0:	d1f0      	bne.n	8010ba4 <quorem+0xf0>
 8010bc2:	3c01      	subs	r4, #1
 8010bc4:	e7eb      	b.n	8010b9e <quorem+0xea>
 8010bc6:	2000      	movs	r0, #0
 8010bc8:	e7ee      	b.n	8010ba8 <quorem+0xf4>
 8010bca:	0000      	movs	r0, r0
 8010bcc:	0000      	movs	r0, r0
	...

08010bd0 <_dtoa_r>:
 8010bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bd4:	ed2d 8b04 	vpush	{d8-d9}
 8010bd8:	ec57 6b10 	vmov	r6, r7, d0
 8010bdc:	b093      	sub	sp, #76	; 0x4c
 8010bde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010be0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010be4:	9106      	str	r1, [sp, #24]
 8010be6:	ee10 aa10 	vmov	sl, s0
 8010bea:	4604      	mov	r4, r0
 8010bec:	9209      	str	r2, [sp, #36]	; 0x24
 8010bee:	930c      	str	r3, [sp, #48]	; 0x30
 8010bf0:	46bb      	mov	fp, r7
 8010bf2:	b975      	cbnz	r5, 8010c12 <_dtoa_r+0x42>
 8010bf4:	2010      	movs	r0, #16
 8010bf6:	f000 fed7 	bl	80119a8 <malloc>
 8010bfa:	4602      	mov	r2, r0
 8010bfc:	6260      	str	r0, [r4, #36]	; 0x24
 8010bfe:	b920      	cbnz	r0, 8010c0a <_dtoa_r+0x3a>
 8010c00:	4ba7      	ldr	r3, [pc, #668]	; (8010ea0 <_dtoa_r+0x2d0>)
 8010c02:	21ea      	movs	r1, #234	; 0xea
 8010c04:	48a7      	ldr	r0, [pc, #668]	; (8010ea4 <_dtoa_r+0x2d4>)
 8010c06:	f001 fdd1 	bl	80127ac <__assert_func>
 8010c0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010c0e:	6005      	str	r5, [r0, #0]
 8010c10:	60c5      	str	r5, [r0, #12]
 8010c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c14:	6819      	ldr	r1, [r3, #0]
 8010c16:	b151      	cbz	r1, 8010c2e <_dtoa_r+0x5e>
 8010c18:	685a      	ldr	r2, [r3, #4]
 8010c1a:	604a      	str	r2, [r1, #4]
 8010c1c:	2301      	movs	r3, #1
 8010c1e:	4093      	lsls	r3, r2
 8010c20:	608b      	str	r3, [r1, #8]
 8010c22:	4620      	mov	r0, r4
 8010c24:	f000 ff08 	bl	8011a38 <_Bfree>
 8010c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	601a      	str	r2, [r3, #0]
 8010c2e:	1e3b      	subs	r3, r7, #0
 8010c30:	bfaa      	itet	ge
 8010c32:	2300      	movge	r3, #0
 8010c34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010c38:	f8c8 3000 	strge.w	r3, [r8]
 8010c3c:	4b9a      	ldr	r3, [pc, #616]	; (8010ea8 <_dtoa_r+0x2d8>)
 8010c3e:	bfbc      	itt	lt
 8010c40:	2201      	movlt	r2, #1
 8010c42:	f8c8 2000 	strlt.w	r2, [r8]
 8010c46:	ea33 030b 	bics.w	r3, r3, fp
 8010c4a:	d11b      	bne.n	8010c84 <_dtoa_r+0xb4>
 8010c4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c4e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010c52:	6013      	str	r3, [r2, #0]
 8010c54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010c58:	4333      	orrs	r3, r6
 8010c5a:	f000 8592 	beq.w	8011782 <_dtoa_r+0xbb2>
 8010c5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010c60:	b963      	cbnz	r3, 8010c7c <_dtoa_r+0xac>
 8010c62:	4b92      	ldr	r3, [pc, #584]	; (8010eac <_dtoa_r+0x2dc>)
 8010c64:	e022      	b.n	8010cac <_dtoa_r+0xdc>
 8010c66:	4b92      	ldr	r3, [pc, #584]	; (8010eb0 <_dtoa_r+0x2e0>)
 8010c68:	9301      	str	r3, [sp, #4]
 8010c6a:	3308      	adds	r3, #8
 8010c6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010c6e:	6013      	str	r3, [r2, #0]
 8010c70:	9801      	ldr	r0, [sp, #4]
 8010c72:	b013      	add	sp, #76	; 0x4c
 8010c74:	ecbd 8b04 	vpop	{d8-d9}
 8010c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c7c:	4b8b      	ldr	r3, [pc, #556]	; (8010eac <_dtoa_r+0x2dc>)
 8010c7e:	9301      	str	r3, [sp, #4]
 8010c80:	3303      	adds	r3, #3
 8010c82:	e7f3      	b.n	8010c6c <_dtoa_r+0x9c>
 8010c84:	2200      	movs	r2, #0
 8010c86:	2300      	movs	r3, #0
 8010c88:	4650      	mov	r0, sl
 8010c8a:	4659      	mov	r1, fp
 8010c8c:	f7ef ff3c 	bl	8000b08 <__aeabi_dcmpeq>
 8010c90:	ec4b ab19 	vmov	d9, sl, fp
 8010c94:	4680      	mov	r8, r0
 8010c96:	b158      	cbz	r0, 8010cb0 <_dtoa_r+0xe0>
 8010c98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	6013      	str	r3, [r2, #0]
 8010c9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	f000 856b 	beq.w	801177c <_dtoa_r+0xbac>
 8010ca6:	4883      	ldr	r0, [pc, #524]	; (8010eb4 <_dtoa_r+0x2e4>)
 8010ca8:	6018      	str	r0, [r3, #0]
 8010caa:	1e43      	subs	r3, r0, #1
 8010cac:	9301      	str	r3, [sp, #4]
 8010cae:	e7df      	b.n	8010c70 <_dtoa_r+0xa0>
 8010cb0:	ec4b ab10 	vmov	d0, sl, fp
 8010cb4:	aa10      	add	r2, sp, #64	; 0x40
 8010cb6:	a911      	add	r1, sp, #68	; 0x44
 8010cb8:	4620      	mov	r0, r4
 8010cba:	f001 f9a5 	bl	8012008 <__d2b>
 8010cbe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010cc2:	ee08 0a10 	vmov	s16, r0
 8010cc6:	2d00      	cmp	r5, #0
 8010cc8:	f000 8084 	beq.w	8010dd4 <_dtoa_r+0x204>
 8010ccc:	ee19 3a90 	vmov	r3, s19
 8010cd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010cd4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010cd8:	4656      	mov	r6, sl
 8010cda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010cde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010ce2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010ce6:	4b74      	ldr	r3, [pc, #464]	; (8010eb8 <_dtoa_r+0x2e8>)
 8010ce8:	2200      	movs	r2, #0
 8010cea:	4630      	mov	r0, r6
 8010cec:	4639      	mov	r1, r7
 8010cee:	f7ef faeb 	bl	80002c8 <__aeabi_dsub>
 8010cf2:	a365      	add	r3, pc, #404	; (adr r3, 8010e88 <_dtoa_r+0x2b8>)
 8010cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf8:	f7ef fc9e 	bl	8000638 <__aeabi_dmul>
 8010cfc:	a364      	add	r3, pc, #400	; (adr r3, 8010e90 <_dtoa_r+0x2c0>)
 8010cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d02:	f7ef fae3 	bl	80002cc <__adddf3>
 8010d06:	4606      	mov	r6, r0
 8010d08:	4628      	mov	r0, r5
 8010d0a:	460f      	mov	r7, r1
 8010d0c:	f7ef fc2a 	bl	8000564 <__aeabi_i2d>
 8010d10:	a361      	add	r3, pc, #388	; (adr r3, 8010e98 <_dtoa_r+0x2c8>)
 8010d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d16:	f7ef fc8f 	bl	8000638 <__aeabi_dmul>
 8010d1a:	4602      	mov	r2, r0
 8010d1c:	460b      	mov	r3, r1
 8010d1e:	4630      	mov	r0, r6
 8010d20:	4639      	mov	r1, r7
 8010d22:	f7ef fad3 	bl	80002cc <__adddf3>
 8010d26:	4606      	mov	r6, r0
 8010d28:	460f      	mov	r7, r1
 8010d2a:	f7ef ff35 	bl	8000b98 <__aeabi_d2iz>
 8010d2e:	2200      	movs	r2, #0
 8010d30:	9000      	str	r0, [sp, #0]
 8010d32:	2300      	movs	r3, #0
 8010d34:	4630      	mov	r0, r6
 8010d36:	4639      	mov	r1, r7
 8010d38:	f7ef fef0 	bl	8000b1c <__aeabi_dcmplt>
 8010d3c:	b150      	cbz	r0, 8010d54 <_dtoa_r+0x184>
 8010d3e:	9800      	ldr	r0, [sp, #0]
 8010d40:	f7ef fc10 	bl	8000564 <__aeabi_i2d>
 8010d44:	4632      	mov	r2, r6
 8010d46:	463b      	mov	r3, r7
 8010d48:	f7ef fede 	bl	8000b08 <__aeabi_dcmpeq>
 8010d4c:	b910      	cbnz	r0, 8010d54 <_dtoa_r+0x184>
 8010d4e:	9b00      	ldr	r3, [sp, #0]
 8010d50:	3b01      	subs	r3, #1
 8010d52:	9300      	str	r3, [sp, #0]
 8010d54:	9b00      	ldr	r3, [sp, #0]
 8010d56:	2b16      	cmp	r3, #22
 8010d58:	d85a      	bhi.n	8010e10 <_dtoa_r+0x240>
 8010d5a:	9a00      	ldr	r2, [sp, #0]
 8010d5c:	4b57      	ldr	r3, [pc, #348]	; (8010ebc <_dtoa_r+0x2ec>)
 8010d5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d66:	ec51 0b19 	vmov	r0, r1, d9
 8010d6a:	f7ef fed7 	bl	8000b1c <__aeabi_dcmplt>
 8010d6e:	2800      	cmp	r0, #0
 8010d70:	d050      	beq.n	8010e14 <_dtoa_r+0x244>
 8010d72:	9b00      	ldr	r3, [sp, #0]
 8010d74:	3b01      	subs	r3, #1
 8010d76:	9300      	str	r3, [sp, #0]
 8010d78:	2300      	movs	r3, #0
 8010d7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010d7e:	1b5d      	subs	r5, r3, r5
 8010d80:	1e6b      	subs	r3, r5, #1
 8010d82:	9305      	str	r3, [sp, #20]
 8010d84:	bf45      	ittet	mi
 8010d86:	f1c5 0301 	rsbmi	r3, r5, #1
 8010d8a:	9304      	strmi	r3, [sp, #16]
 8010d8c:	2300      	movpl	r3, #0
 8010d8e:	2300      	movmi	r3, #0
 8010d90:	bf4c      	ite	mi
 8010d92:	9305      	strmi	r3, [sp, #20]
 8010d94:	9304      	strpl	r3, [sp, #16]
 8010d96:	9b00      	ldr	r3, [sp, #0]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	db3d      	blt.n	8010e18 <_dtoa_r+0x248>
 8010d9c:	9b05      	ldr	r3, [sp, #20]
 8010d9e:	9a00      	ldr	r2, [sp, #0]
 8010da0:	920a      	str	r2, [sp, #40]	; 0x28
 8010da2:	4413      	add	r3, r2
 8010da4:	9305      	str	r3, [sp, #20]
 8010da6:	2300      	movs	r3, #0
 8010da8:	9307      	str	r3, [sp, #28]
 8010daa:	9b06      	ldr	r3, [sp, #24]
 8010dac:	2b09      	cmp	r3, #9
 8010dae:	f200 8089 	bhi.w	8010ec4 <_dtoa_r+0x2f4>
 8010db2:	2b05      	cmp	r3, #5
 8010db4:	bfc4      	itt	gt
 8010db6:	3b04      	subgt	r3, #4
 8010db8:	9306      	strgt	r3, [sp, #24]
 8010dba:	9b06      	ldr	r3, [sp, #24]
 8010dbc:	f1a3 0302 	sub.w	r3, r3, #2
 8010dc0:	bfcc      	ite	gt
 8010dc2:	2500      	movgt	r5, #0
 8010dc4:	2501      	movle	r5, #1
 8010dc6:	2b03      	cmp	r3, #3
 8010dc8:	f200 8087 	bhi.w	8010eda <_dtoa_r+0x30a>
 8010dcc:	e8df f003 	tbb	[pc, r3]
 8010dd0:	59383a2d 	.word	0x59383a2d
 8010dd4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010dd8:	441d      	add	r5, r3
 8010dda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010dde:	2b20      	cmp	r3, #32
 8010de0:	bfc1      	itttt	gt
 8010de2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010de6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010dea:	fa0b f303 	lslgt.w	r3, fp, r3
 8010dee:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010df2:	bfda      	itte	le
 8010df4:	f1c3 0320 	rsble	r3, r3, #32
 8010df8:	fa06 f003 	lslle.w	r0, r6, r3
 8010dfc:	4318      	orrgt	r0, r3
 8010dfe:	f7ef fba1 	bl	8000544 <__aeabi_ui2d>
 8010e02:	2301      	movs	r3, #1
 8010e04:	4606      	mov	r6, r0
 8010e06:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010e0a:	3d01      	subs	r5, #1
 8010e0c:	930e      	str	r3, [sp, #56]	; 0x38
 8010e0e:	e76a      	b.n	8010ce6 <_dtoa_r+0x116>
 8010e10:	2301      	movs	r3, #1
 8010e12:	e7b2      	b.n	8010d7a <_dtoa_r+0x1aa>
 8010e14:	900b      	str	r0, [sp, #44]	; 0x2c
 8010e16:	e7b1      	b.n	8010d7c <_dtoa_r+0x1ac>
 8010e18:	9b04      	ldr	r3, [sp, #16]
 8010e1a:	9a00      	ldr	r2, [sp, #0]
 8010e1c:	1a9b      	subs	r3, r3, r2
 8010e1e:	9304      	str	r3, [sp, #16]
 8010e20:	4253      	negs	r3, r2
 8010e22:	9307      	str	r3, [sp, #28]
 8010e24:	2300      	movs	r3, #0
 8010e26:	930a      	str	r3, [sp, #40]	; 0x28
 8010e28:	e7bf      	b.n	8010daa <_dtoa_r+0x1da>
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	9308      	str	r3, [sp, #32]
 8010e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	dc55      	bgt.n	8010ee0 <_dtoa_r+0x310>
 8010e34:	2301      	movs	r3, #1
 8010e36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010e3a:	461a      	mov	r2, r3
 8010e3c:	9209      	str	r2, [sp, #36]	; 0x24
 8010e3e:	e00c      	b.n	8010e5a <_dtoa_r+0x28a>
 8010e40:	2301      	movs	r3, #1
 8010e42:	e7f3      	b.n	8010e2c <_dtoa_r+0x25c>
 8010e44:	2300      	movs	r3, #0
 8010e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e48:	9308      	str	r3, [sp, #32]
 8010e4a:	9b00      	ldr	r3, [sp, #0]
 8010e4c:	4413      	add	r3, r2
 8010e4e:	9302      	str	r3, [sp, #8]
 8010e50:	3301      	adds	r3, #1
 8010e52:	2b01      	cmp	r3, #1
 8010e54:	9303      	str	r3, [sp, #12]
 8010e56:	bfb8      	it	lt
 8010e58:	2301      	movlt	r3, #1
 8010e5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	6042      	str	r2, [r0, #4]
 8010e60:	2204      	movs	r2, #4
 8010e62:	f102 0614 	add.w	r6, r2, #20
 8010e66:	429e      	cmp	r6, r3
 8010e68:	6841      	ldr	r1, [r0, #4]
 8010e6a:	d93d      	bls.n	8010ee8 <_dtoa_r+0x318>
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	f000 fda3 	bl	80119b8 <_Balloc>
 8010e72:	9001      	str	r0, [sp, #4]
 8010e74:	2800      	cmp	r0, #0
 8010e76:	d13b      	bne.n	8010ef0 <_dtoa_r+0x320>
 8010e78:	4b11      	ldr	r3, [pc, #68]	; (8010ec0 <_dtoa_r+0x2f0>)
 8010e7a:	4602      	mov	r2, r0
 8010e7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010e80:	e6c0      	b.n	8010c04 <_dtoa_r+0x34>
 8010e82:	2301      	movs	r3, #1
 8010e84:	e7df      	b.n	8010e46 <_dtoa_r+0x276>
 8010e86:	bf00      	nop
 8010e88:	636f4361 	.word	0x636f4361
 8010e8c:	3fd287a7 	.word	0x3fd287a7
 8010e90:	8b60c8b3 	.word	0x8b60c8b3
 8010e94:	3fc68a28 	.word	0x3fc68a28
 8010e98:	509f79fb 	.word	0x509f79fb
 8010e9c:	3fd34413 	.word	0x3fd34413
 8010ea0:	08013da9 	.word	0x08013da9
 8010ea4:	08013dc0 	.word	0x08013dc0
 8010ea8:	7ff00000 	.word	0x7ff00000
 8010eac:	08013da5 	.word	0x08013da5
 8010eb0:	08013d9c 	.word	0x08013d9c
 8010eb4:	08013d79 	.word	0x08013d79
 8010eb8:	3ff80000 	.word	0x3ff80000
 8010ebc:	08013f10 	.word	0x08013f10
 8010ec0:	08013e1b 	.word	0x08013e1b
 8010ec4:	2501      	movs	r5, #1
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	9306      	str	r3, [sp, #24]
 8010eca:	9508      	str	r5, [sp, #32]
 8010ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8010ed0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	2312      	movs	r3, #18
 8010ed8:	e7b0      	b.n	8010e3c <_dtoa_r+0x26c>
 8010eda:	2301      	movs	r3, #1
 8010edc:	9308      	str	r3, [sp, #32]
 8010ede:	e7f5      	b.n	8010ecc <_dtoa_r+0x2fc>
 8010ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ee2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010ee6:	e7b8      	b.n	8010e5a <_dtoa_r+0x28a>
 8010ee8:	3101      	adds	r1, #1
 8010eea:	6041      	str	r1, [r0, #4]
 8010eec:	0052      	lsls	r2, r2, #1
 8010eee:	e7b8      	b.n	8010e62 <_dtoa_r+0x292>
 8010ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ef2:	9a01      	ldr	r2, [sp, #4]
 8010ef4:	601a      	str	r2, [r3, #0]
 8010ef6:	9b03      	ldr	r3, [sp, #12]
 8010ef8:	2b0e      	cmp	r3, #14
 8010efa:	f200 809d 	bhi.w	8011038 <_dtoa_r+0x468>
 8010efe:	2d00      	cmp	r5, #0
 8010f00:	f000 809a 	beq.w	8011038 <_dtoa_r+0x468>
 8010f04:	9b00      	ldr	r3, [sp, #0]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	dd32      	ble.n	8010f70 <_dtoa_r+0x3a0>
 8010f0a:	4ab7      	ldr	r2, [pc, #732]	; (80111e8 <_dtoa_r+0x618>)
 8010f0c:	f003 030f 	and.w	r3, r3, #15
 8010f10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010f14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f18:	9b00      	ldr	r3, [sp, #0]
 8010f1a:	05d8      	lsls	r0, r3, #23
 8010f1c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010f20:	d516      	bpl.n	8010f50 <_dtoa_r+0x380>
 8010f22:	4bb2      	ldr	r3, [pc, #712]	; (80111ec <_dtoa_r+0x61c>)
 8010f24:	ec51 0b19 	vmov	r0, r1, d9
 8010f28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010f2c:	f7ef fcae 	bl	800088c <__aeabi_ddiv>
 8010f30:	f007 070f 	and.w	r7, r7, #15
 8010f34:	4682      	mov	sl, r0
 8010f36:	468b      	mov	fp, r1
 8010f38:	2503      	movs	r5, #3
 8010f3a:	4eac      	ldr	r6, [pc, #688]	; (80111ec <_dtoa_r+0x61c>)
 8010f3c:	b957      	cbnz	r7, 8010f54 <_dtoa_r+0x384>
 8010f3e:	4642      	mov	r2, r8
 8010f40:	464b      	mov	r3, r9
 8010f42:	4650      	mov	r0, sl
 8010f44:	4659      	mov	r1, fp
 8010f46:	f7ef fca1 	bl	800088c <__aeabi_ddiv>
 8010f4a:	4682      	mov	sl, r0
 8010f4c:	468b      	mov	fp, r1
 8010f4e:	e028      	b.n	8010fa2 <_dtoa_r+0x3d2>
 8010f50:	2502      	movs	r5, #2
 8010f52:	e7f2      	b.n	8010f3a <_dtoa_r+0x36a>
 8010f54:	07f9      	lsls	r1, r7, #31
 8010f56:	d508      	bpl.n	8010f6a <_dtoa_r+0x39a>
 8010f58:	4640      	mov	r0, r8
 8010f5a:	4649      	mov	r1, r9
 8010f5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010f60:	f7ef fb6a 	bl	8000638 <__aeabi_dmul>
 8010f64:	3501      	adds	r5, #1
 8010f66:	4680      	mov	r8, r0
 8010f68:	4689      	mov	r9, r1
 8010f6a:	107f      	asrs	r7, r7, #1
 8010f6c:	3608      	adds	r6, #8
 8010f6e:	e7e5      	b.n	8010f3c <_dtoa_r+0x36c>
 8010f70:	f000 809b 	beq.w	80110aa <_dtoa_r+0x4da>
 8010f74:	9b00      	ldr	r3, [sp, #0]
 8010f76:	4f9d      	ldr	r7, [pc, #628]	; (80111ec <_dtoa_r+0x61c>)
 8010f78:	425e      	negs	r6, r3
 8010f7a:	4b9b      	ldr	r3, [pc, #620]	; (80111e8 <_dtoa_r+0x618>)
 8010f7c:	f006 020f 	and.w	r2, r6, #15
 8010f80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f88:	ec51 0b19 	vmov	r0, r1, d9
 8010f8c:	f7ef fb54 	bl	8000638 <__aeabi_dmul>
 8010f90:	1136      	asrs	r6, r6, #4
 8010f92:	4682      	mov	sl, r0
 8010f94:	468b      	mov	fp, r1
 8010f96:	2300      	movs	r3, #0
 8010f98:	2502      	movs	r5, #2
 8010f9a:	2e00      	cmp	r6, #0
 8010f9c:	d17a      	bne.n	8011094 <_dtoa_r+0x4c4>
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d1d3      	bne.n	8010f4a <_dtoa_r+0x37a>
 8010fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	f000 8082 	beq.w	80110ae <_dtoa_r+0x4de>
 8010faa:	4b91      	ldr	r3, [pc, #580]	; (80111f0 <_dtoa_r+0x620>)
 8010fac:	2200      	movs	r2, #0
 8010fae:	4650      	mov	r0, sl
 8010fb0:	4659      	mov	r1, fp
 8010fb2:	f7ef fdb3 	bl	8000b1c <__aeabi_dcmplt>
 8010fb6:	2800      	cmp	r0, #0
 8010fb8:	d079      	beq.n	80110ae <_dtoa_r+0x4de>
 8010fba:	9b03      	ldr	r3, [sp, #12]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d076      	beq.n	80110ae <_dtoa_r+0x4de>
 8010fc0:	9b02      	ldr	r3, [sp, #8]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	dd36      	ble.n	8011034 <_dtoa_r+0x464>
 8010fc6:	9b00      	ldr	r3, [sp, #0]
 8010fc8:	4650      	mov	r0, sl
 8010fca:	4659      	mov	r1, fp
 8010fcc:	1e5f      	subs	r7, r3, #1
 8010fce:	2200      	movs	r2, #0
 8010fd0:	4b88      	ldr	r3, [pc, #544]	; (80111f4 <_dtoa_r+0x624>)
 8010fd2:	f7ef fb31 	bl	8000638 <__aeabi_dmul>
 8010fd6:	9e02      	ldr	r6, [sp, #8]
 8010fd8:	4682      	mov	sl, r0
 8010fda:	468b      	mov	fp, r1
 8010fdc:	3501      	adds	r5, #1
 8010fde:	4628      	mov	r0, r5
 8010fe0:	f7ef fac0 	bl	8000564 <__aeabi_i2d>
 8010fe4:	4652      	mov	r2, sl
 8010fe6:	465b      	mov	r3, fp
 8010fe8:	f7ef fb26 	bl	8000638 <__aeabi_dmul>
 8010fec:	4b82      	ldr	r3, [pc, #520]	; (80111f8 <_dtoa_r+0x628>)
 8010fee:	2200      	movs	r2, #0
 8010ff0:	f7ef f96c 	bl	80002cc <__adddf3>
 8010ff4:	46d0      	mov	r8, sl
 8010ff6:	46d9      	mov	r9, fp
 8010ff8:	4682      	mov	sl, r0
 8010ffa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010ffe:	2e00      	cmp	r6, #0
 8011000:	d158      	bne.n	80110b4 <_dtoa_r+0x4e4>
 8011002:	4b7e      	ldr	r3, [pc, #504]	; (80111fc <_dtoa_r+0x62c>)
 8011004:	2200      	movs	r2, #0
 8011006:	4640      	mov	r0, r8
 8011008:	4649      	mov	r1, r9
 801100a:	f7ef f95d 	bl	80002c8 <__aeabi_dsub>
 801100e:	4652      	mov	r2, sl
 8011010:	465b      	mov	r3, fp
 8011012:	4680      	mov	r8, r0
 8011014:	4689      	mov	r9, r1
 8011016:	f7ef fd9f 	bl	8000b58 <__aeabi_dcmpgt>
 801101a:	2800      	cmp	r0, #0
 801101c:	f040 8295 	bne.w	801154a <_dtoa_r+0x97a>
 8011020:	4652      	mov	r2, sl
 8011022:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011026:	4640      	mov	r0, r8
 8011028:	4649      	mov	r1, r9
 801102a:	f7ef fd77 	bl	8000b1c <__aeabi_dcmplt>
 801102e:	2800      	cmp	r0, #0
 8011030:	f040 8289 	bne.w	8011546 <_dtoa_r+0x976>
 8011034:	ec5b ab19 	vmov	sl, fp, d9
 8011038:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801103a:	2b00      	cmp	r3, #0
 801103c:	f2c0 8148 	blt.w	80112d0 <_dtoa_r+0x700>
 8011040:	9a00      	ldr	r2, [sp, #0]
 8011042:	2a0e      	cmp	r2, #14
 8011044:	f300 8144 	bgt.w	80112d0 <_dtoa_r+0x700>
 8011048:	4b67      	ldr	r3, [pc, #412]	; (80111e8 <_dtoa_r+0x618>)
 801104a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801104e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011054:	2b00      	cmp	r3, #0
 8011056:	f280 80d5 	bge.w	8011204 <_dtoa_r+0x634>
 801105a:	9b03      	ldr	r3, [sp, #12]
 801105c:	2b00      	cmp	r3, #0
 801105e:	f300 80d1 	bgt.w	8011204 <_dtoa_r+0x634>
 8011062:	f040 826f 	bne.w	8011544 <_dtoa_r+0x974>
 8011066:	4b65      	ldr	r3, [pc, #404]	; (80111fc <_dtoa_r+0x62c>)
 8011068:	2200      	movs	r2, #0
 801106a:	4640      	mov	r0, r8
 801106c:	4649      	mov	r1, r9
 801106e:	f7ef fae3 	bl	8000638 <__aeabi_dmul>
 8011072:	4652      	mov	r2, sl
 8011074:	465b      	mov	r3, fp
 8011076:	f7ef fd65 	bl	8000b44 <__aeabi_dcmpge>
 801107a:	9e03      	ldr	r6, [sp, #12]
 801107c:	4637      	mov	r7, r6
 801107e:	2800      	cmp	r0, #0
 8011080:	f040 8245 	bne.w	801150e <_dtoa_r+0x93e>
 8011084:	9d01      	ldr	r5, [sp, #4]
 8011086:	2331      	movs	r3, #49	; 0x31
 8011088:	f805 3b01 	strb.w	r3, [r5], #1
 801108c:	9b00      	ldr	r3, [sp, #0]
 801108e:	3301      	adds	r3, #1
 8011090:	9300      	str	r3, [sp, #0]
 8011092:	e240      	b.n	8011516 <_dtoa_r+0x946>
 8011094:	07f2      	lsls	r2, r6, #31
 8011096:	d505      	bpl.n	80110a4 <_dtoa_r+0x4d4>
 8011098:	e9d7 2300 	ldrd	r2, r3, [r7]
 801109c:	f7ef facc 	bl	8000638 <__aeabi_dmul>
 80110a0:	3501      	adds	r5, #1
 80110a2:	2301      	movs	r3, #1
 80110a4:	1076      	asrs	r6, r6, #1
 80110a6:	3708      	adds	r7, #8
 80110a8:	e777      	b.n	8010f9a <_dtoa_r+0x3ca>
 80110aa:	2502      	movs	r5, #2
 80110ac:	e779      	b.n	8010fa2 <_dtoa_r+0x3d2>
 80110ae:	9f00      	ldr	r7, [sp, #0]
 80110b0:	9e03      	ldr	r6, [sp, #12]
 80110b2:	e794      	b.n	8010fde <_dtoa_r+0x40e>
 80110b4:	9901      	ldr	r1, [sp, #4]
 80110b6:	4b4c      	ldr	r3, [pc, #304]	; (80111e8 <_dtoa_r+0x618>)
 80110b8:	4431      	add	r1, r6
 80110ba:	910d      	str	r1, [sp, #52]	; 0x34
 80110bc:	9908      	ldr	r1, [sp, #32]
 80110be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80110c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80110c6:	2900      	cmp	r1, #0
 80110c8:	d043      	beq.n	8011152 <_dtoa_r+0x582>
 80110ca:	494d      	ldr	r1, [pc, #308]	; (8011200 <_dtoa_r+0x630>)
 80110cc:	2000      	movs	r0, #0
 80110ce:	f7ef fbdd 	bl	800088c <__aeabi_ddiv>
 80110d2:	4652      	mov	r2, sl
 80110d4:	465b      	mov	r3, fp
 80110d6:	f7ef f8f7 	bl	80002c8 <__aeabi_dsub>
 80110da:	9d01      	ldr	r5, [sp, #4]
 80110dc:	4682      	mov	sl, r0
 80110de:	468b      	mov	fp, r1
 80110e0:	4649      	mov	r1, r9
 80110e2:	4640      	mov	r0, r8
 80110e4:	f7ef fd58 	bl	8000b98 <__aeabi_d2iz>
 80110e8:	4606      	mov	r6, r0
 80110ea:	f7ef fa3b 	bl	8000564 <__aeabi_i2d>
 80110ee:	4602      	mov	r2, r0
 80110f0:	460b      	mov	r3, r1
 80110f2:	4640      	mov	r0, r8
 80110f4:	4649      	mov	r1, r9
 80110f6:	f7ef f8e7 	bl	80002c8 <__aeabi_dsub>
 80110fa:	3630      	adds	r6, #48	; 0x30
 80110fc:	f805 6b01 	strb.w	r6, [r5], #1
 8011100:	4652      	mov	r2, sl
 8011102:	465b      	mov	r3, fp
 8011104:	4680      	mov	r8, r0
 8011106:	4689      	mov	r9, r1
 8011108:	f7ef fd08 	bl	8000b1c <__aeabi_dcmplt>
 801110c:	2800      	cmp	r0, #0
 801110e:	d163      	bne.n	80111d8 <_dtoa_r+0x608>
 8011110:	4642      	mov	r2, r8
 8011112:	464b      	mov	r3, r9
 8011114:	4936      	ldr	r1, [pc, #216]	; (80111f0 <_dtoa_r+0x620>)
 8011116:	2000      	movs	r0, #0
 8011118:	f7ef f8d6 	bl	80002c8 <__aeabi_dsub>
 801111c:	4652      	mov	r2, sl
 801111e:	465b      	mov	r3, fp
 8011120:	f7ef fcfc 	bl	8000b1c <__aeabi_dcmplt>
 8011124:	2800      	cmp	r0, #0
 8011126:	f040 80b5 	bne.w	8011294 <_dtoa_r+0x6c4>
 801112a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801112c:	429d      	cmp	r5, r3
 801112e:	d081      	beq.n	8011034 <_dtoa_r+0x464>
 8011130:	4b30      	ldr	r3, [pc, #192]	; (80111f4 <_dtoa_r+0x624>)
 8011132:	2200      	movs	r2, #0
 8011134:	4650      	mov	r0, sl
 8011136:	4659      	mov	r1, fp
 8011138:	f7ef fa7e 	bl	8000638 <__aeabi_dmul>
 801113c:	4b2d      	ldr	r3, [pc, #180]	; (80111f4 <_dtoa_r+0x624>)
 801113e:	4682      	mov	sl, r0
 8011140:	468b      	mov	fp, r1
 8011142:	4640      	mov	r0, r8
 8011144:	4649      	mov	r1, r9
 8011146:	2200      	movs	r2, #0
 8011148:	f7ef fa76 	bl	8000638 <__aeabi_dmul>
 801114c:	4680      	mov	r8, r0
 801114e:	4689      	mov	r9, r1
 8011150:	e7c6      	b.n	80110e0 <_dtoa_r+0x510>
 8011152:	4650      	mov	r0, sl
 8011154:	4659      	mov	r1, fp
 8011156:	f7ef fa6f 	bl	8000638 <__aeabi_dmul>
 801115a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801115c:	9d01      	ldr	r5, [sp, #4]
 801115e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011160:	4682      	mov	sl, r0
 8011162:	468b      	mov	fp, r1
 8011164:	4649      	mov	r1, r9
 8011166:	4640      	mov	r0, r8
 8011168:	f7ef fd16 	bl	8000b98 <__aeabi_d2iz>
 801116c:	4606      	mov	r6, r0
 801116e:	f7ef f9f9 	bl	8000564 <__aeabi_i2d>
 8011172:	3630      	adds	r6, #48	; 0x30
 8011174:	4602      	mov	r2, r0
 8011176:	460b      	mov	r3, r1
 8011178:	4640      	mov	r0, r8
 801117a:	4649      	mov	r1, r9
 801117c:	f7ef f8a4 	bl	80002c8 <__aeabi_dsub>
 8011180:	f805 6b01 	strb.w	r6, [r5], #1
 8011184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011186:	429d      	cmp	r5, r3
 8011188:	4680      	mov	r8, r0
 801118a:	4689      	mov	r9, r1
 801118c:	f04f 0200 	mov.w	r2, #0
 8011190:	d124      	bne.n	80111dc <_dtoa_r+0x60c>
 8011192:	4b1b      	ldr	r3, [pc, #108]	; (8011200 <_dtoa_r+0x630>)
 8011194:	4650      	mov	r0, sl
 8011196:	4659      	mov	r1, fp
 8011198:	f7ef f898 	bl	80002cc <__adddf3>
 801119c:	4602      	mov	r2, r0
 801119e:	460b      	mov	r3, r1
 80111a0:	4640      	mov	r0, r8
 80111a2:	4649      	mov	r1, r9
 80111a4:	f7ef fcd8 	bl	8000b58 <__aeabi_dcmpgt>
 80111a8:	2800      	cmp	r0, #0
 80111aa:	d173      	bne.n	8011294 <_dtoa_r+0x6c4>
 80111ac:	4652      	mov	r2, sl
 80111ae:	465b      	mov	r3, fp
 80111b0:	4913      	ldr	r1, [pc, #76]	; (8011200 <_dtoa_r+0x630>)
 80111b2:	2000      	movs	r0, #0
 80111b4:	f7ef f888 	bl	80002c8 <__aeabi_dsub>
 80111b8:	4602      	mov	r2, r0
 80111ba:	460b      	mov	r3, r1
 80111bc:	4640      	mov	r0, r8
 80111be:	4649      	mov	r1, r9
 80111c0:	f7ef fcac 	bl	8000b1c <__aeabi_dcmplt>
 80111c4:	2800      	cmp	r0, #0
 80111c6:	f43f af35 	beq.w	8011034 <_dtoa_r+0x464>
 80111ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80111cc:	1e6b      	subs	r3, r5, #1
 80111ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80111d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80111d4:	2b30      	cmp	r3, #48	; 0x30
 80111d6:	d0f8      	beq.n	80111ca <_dtoa_r+0x5fa>
 80111d8:	9700      	str	r7, [sp, #0]
 80111da:	e049      	b.n	8011270 <_dtoa_r+0x6a0>
 80111dc:	4b05      	ldr	r3, [pc, #20]	; (80111f4 <_dtoa_r+0x624>)
 80111de:	f7ef fa2b 	bl	8000638 <__aeabi_dmul>
 80111e2:	4680      	mov	r8, r0
 80111e4:	4689      	mov	r9, r1
 80111e6:	e7bd      	b.n	8011164 <_dtoa_r+0x594>
 80111e8:	08013f10 	.word	0x08013f10
 80111ec:	08013ee8 	.word	0x08013ee8
 80111f0:	3ff00000 	.word	0x3ff00000
 80111f4:	40240000 	.word	0x40240000
 80111f8:	401c0000 	.word	0x401c0000
 80111fc:	40140000 	.word	0x40140000
 8011200:	3fe00000 	.word	0x3fe00000
 8011204:	9d01      	ldr	r5, [sp, #4]
 8011206:	4656      	mov	r6, sl
 8011208:	465f      	mov	r7, fp
 801120a:	4642      	mov	r2, r8
 801120c:	464b      	mov	r3, r9
 801120e:	4630      	mov	r0, r6
 8011210:	4639      	mov	r1, r7
 8011212:	f7ef fb3b 	bl	800088c <__aeabi_ddiv>
 8011216:	f7ef fcbf 	bl	8000b98 <__aeabi_d2iz>
 801121a:	4682      	mov	sl, r0
 801121c:	f7ef f9a2 	bl	8000564 <__aeabi_i2d>
 8011220:	4642      	mov	r2, r8
 8011222:	464b      	mov	r3, r9
 8011224:	f7ef fa08 	bl	8000638 <__aeabi_dmul>
 8011228:	4602      	mov	r2, r0
 801122a:	460b      	mov	r3, r1
 801122c:	4630      	mov	r0, r6
 801122e:	4639      	mov	r1, r7
 8011230:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011234:	f7ef f848 	bl	80002c8 <__aeabi_dsub>
 8011238:	f805 6b01 	strb.w	r6, [r5], #1
 801123c:	9e01      	ldr	r6, [sp, #4]
 801123e:	9f03      	ldr	r7, [sp, #12]
 8011240:	1bae      	subs	r6, r5, r6
 8011242:	42b7      	cmp	r7, r6
 8011244:	4602      	mov	r2, r0
 8011246:	460b      	mov	r3, r1
 8011248:	d135      	bne.n	80112b6 <_dtoa_r+0x6e6>
 801124a:	f7ef f83f 	bl	80002cc <__adddf3>
 801124e:	4642      	mov	r2, r8
 8011250:	464b      	mov	r3, r9
 8011252:	4606      	mov	r6, r0
 8011254:	460f      	mov	r7, r1
 8011256:	f7ef fc7f 	bl	8000b58 <__aeabi_dcmpgt>
 801125a:	b9d0      	cbnz	r0, 8011292 <_dtoa_r+0x6c2>
 801125c:	4642      	mov	r2, r8
 801125e:	464b      	mov	r3, r9
 8011260:	4630      	mov	r0, r6
 8011262:	4639      	mov	r1, r7
 8011264:	f7ef fc50 	bl	8000b08 <__aeabi_dcmpeq>
 8011268:	b110      	cbz	r0, 8011270 <_dtoa_r+0x6a0>
 801126a:	f01a 0f01 	tst.w	sl, #1
 801126e:	d110      	bne.n	8011292 <_dtoa_r+0x6c2>
 8011270:	4620      	mov	r0, r4
 8011272:	ee18 1a10 	vmov	r1, s16
 8011276:	f000 fbdf 	bl	8011a38 <_Bfree>
 801127a:	2300      	movs	r3, #0
 801127c:	9800      	ldr	r0, [sp, #0]
 801127e:	702b      	strb	r3, [r5, #0]
 8011280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011282:	3001      	adds	r0, #1
 8011284:	6018      	str	r0, [r3, #0]
 8011286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011288:	2b00      	cmp	r3, #0
 801128a:	f43f acf1 	beq.w	8010c70 <_dtoa_r+0xa0>
 801128e:	601d      	str	r5, [r3, #0]
 8011290:	e4ee      	b.n	8010c70 <_dtoa_r+0xa0>
 8011292:	9f00      	ldr	r7, [sp, #0]
 8011294:	462b      	mov	r3, r5
 8011296:	461d      	mov	r5, r3
 8011298:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801129c:	2a39      	cmp	r2, #57	; 0x39
 801129e:	d106      	bne.n	80112ae <_dtoa_r+0x6de>
 80112a0:	9a01      	ldr	r2, [sp, #4]
 80112a2:	429a      	cmp	r2, r3
 80112a4:	d1f7      	bne.n	8011296 <_dtoa_r+0x6c6>
 80112a6:	9901      	ldr	r1, [sp, #4]
 80112a8:	2230      	movs	r2, #48	; 0x30
 80112aa:	3701      	adds	r7, #1
 80112ac:	700a      	strb	r2, [r1, #0]
 80112ae:	781a      	ldrb	r2, [r3, #0]
 80112b0:	3201      	adds	r2, #1
 80112b2:	701a      	strb	r2, [r3, #0]
 80112b4:	e790      	b.n	80111d8 <_dtoa_r+0x608>
 80112b6:	4ba6      	ldr	r3, [pc, #664]	; (8011550 <_dtoa_r+0x980>)
 80112b8:	2200      	movs	r2, #0
 80112ba:	f7ef f9bd 	bl	8000638 <__aeabi_dmul>
 80112be:	2200      	movs	r2, #0
 80112c0:	2300      	movs	r3, #0
 80112c2:	4606      	mov	r6, r0
 80112c4:	460f      	mov	r7, r1
 80112c6:	f7ef fc1f 	bl	8000b08 <__aeabi_dcmpeq>
 80112ca:	2800      	cmp	r0, #0
 80112cc:	d09d      	beq.n	801120a <_dtoa_r+0x63a>
 80112ce:	e7cf      	b.n	8011270 <_dtoa_r+0x6a0>
 80112d0:	9a08      	ldr	r2, [sp, #32]
 80112d2:	2a00      	cmp	r2, #0
 80112d4:	f000 80d7 	beq.w	8011486 <_dtoa_r+0x8b6>
 80112d8:	9a06      	ldr	r2, [sp, #24]
 80112da:	2a01      	cmp	r2, #1
 80112dc:	f300 80ba 	bgt.w	8011454 <_dtoa_r+0x884>
 80112e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80112e2:	2a00      	cmp	r2, #0
 80112e4:	f000 80b2 	beq.w	801144c <_dtoa_r+0x87c>
 80112e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80112ec:	9e07      	ldr	r6, [sp, #28]
 80112ee:	9d04      	ldr	r5, [sp, #16]
 80112f0:	9a04      	ldr	r2, [sp, #16]
 80112f2:	441a      	add	r2, r3
 80112f4:	9204      	str	r2, [sp, #16]
 80112f6:	9a05      	ldr	r2, [sp, #20]
 80112f8:	2101      	movs	r1, #1
 80112fa:	441a      	add	r2, r3
 80112fc:	4620      	mov	r0, r4
 80112fe:	9205      	str	r2, [sp, #20]
 8011300:	f000 fc52 	bl	8011ba8 <__i2b>
 8011304:	4607      	mov	r7, r0
 8011306:	2d00      	cmp	r5, #0
 8011308:	dd0c      	ble.n	8011324 <_dtoa_r+0x754>
 801130a:	9b05      	ldr	r3, [sp, #20]
 801130c:	2b00      	cmp	r3, #0
 801130e:	dd09      	ble.n	8011324 <_dtoa_r+0x754>
 8011310:	42ab      	cmp	r3, r5
 8011312:	9a04      	ldr	r2, [sp, #16]
 8011314:	bfa8      	it	ge
 8011316:	462b      	movge	r3, r5
 8011318:	1ad2      	subs	r2, r2, r3
 801131a:	9204      	str	r2, [sp, #16]
 801131c:	9a05      	ldr	r2, [sp, #20]
 801131e:	1aed      	subs	r5, r5, r3
 8011320:	1ad3      	subs	r3, r2, r3
 8011322:	9305      	str	r3, [sp, #20]
 8011324:	9b07      	ldr	r3, [sp, #28]
 8011326:	b31b      	cbz	r3, 8011370 <_dtoa_r+0x7a0>
 8011328:	9b08      	ldr	r3, [sp, #32]
 801132a:	2b00      	cmp	r3, #0
 801132c:	f000 80af 	beq.w	801148e <_dtoa_r+0x8be>
 8011330:	2e00      	cmp	r6, #0
 8011332:	dd13      	ble.n	801135c <_dtoa_r+0x78c>
 8011334:	4639      	mov	r1, r7
 8011336:	4632      	mov	r2, r6
 8011338:	4620      	mov	r0, r4
 801133a:	f000 fcf5 	bl	8011d28 <__pow5mult>
 801133e:	ee18 2a10 	vmov	r2, s16
 8011342:	4601      	mov	r1, r0
 8011344:	4607      	mov	r7, r0
 8011346:	4620      	mov	r0, r4
 8011348:	f000 fc44 	bl	8011bd4 <__multiply>
 801134c:	ee18 1a10 	vmov	r1, s16
 8011350:	4680      	mov	r8, r0
 8011352:	4620      	mov	r0, r4
 8011354:	f000 fb70 	bl	8011a38 <_Bfree>
 8011358:	ee08 8a10 	vmov	s16, r8
 801135c:	9b07      	ldr	r3, [sp, #28]
 801135e:	1b9a      	subs	r2, r3, r6
 8011360:	d006      	beq.n	8011370 <_dtoa_r+0x7a0>
 8011362:	ee18 1a10 	vmov	r1, s16
 8011366:	4620      	mov	r0, r4
 8011368:	f000 fcde 	bl	8011d28 <__pow5mult>
 801136c:	ee08 0a10 	vmov	s16, r0
 8011370:	2101      	movs	r1, #1
 8011372:	4620      	mov	r0, r4
 8011374:	f000 fc18 	bl	8011ba8 <__i2b>
 8011378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801137a:	2b00      	cmp	r3, #0
 801137c:	4606      	mov	r6, r0
 801137e:	f340 8088 	ble.w	8011492 <_dtoa_r+0x8c2>
 8011382:	461a      	mov	r2, r3
 8011384:	4601      	mov	r1, r0
 8011386:	4620      	mov	r0, r4
 8011388:	f000 fcce 	bl	8011d28 <__pow5mult>
 801138c:	9b06      	ldr	r3, [sp, #24]
 801138e:	2b01      	cmp	r3, #1
 8011390:	4606      	mov	r6, r0
 8011392:	f340 8081 	ble.w	8011498 <_dtoa_r+0x8c8>
 8011396:	f04f 0800 	mov.w	r8, #0
 801139a:	6933      	ldr	r3, [r6, #16]
 801139c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80113a0:	6918      	ldr	r0, [r3, #16]
 80113a2:	f000 fbb1 	bl	8011b08 <__hi0bits>
 80113a6:	f1c0 0020 	rsb	r0, r0, #32
 80113aa:	9b05      	ldr	r3, [sp, #20]
 80113ac:	4418      	add	r0, r3
 80113ae:	f010 001f 	ands.w	r0, r0, #31
 80113b2:	f000 8092 	beq.w	80114da <_dtoa_r+0x90a>
 80113b6:	f1c0 0320 	rsb	r3, r0, #32
 80113ba:	2b04      	cmp	r3, #4
 80113bc:	f340 808a 	ble.w	80114d4 <_dtoa_r+0x904>
 80113c0:	f1c0 001c 	rsb	r0, r0, #28
 80113c4:	9b04      	ldr	r3, [sp, #16]
 80113c6:	4403      	add	r3, r0
 80113c8:	9304      	str	r3, [sp, #16]
 80113ca:	9b05      	ldr	r3, [sp, #20]
 80113cc:	4403      	add	r3, r0
 80113ce:	4405      	add	r5, r0
 80113d0:	9305      	str	r3, [sp, #20]
 80113d2:	9b04      	ldr	r3, [sp, #16]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	dd07      	ble.n	80113e8 <_dtoa_r+0x818>
 80113d8:	ee18 1a10 	vmov	r1, s16
 80113dc:	461a      	mov	r2, r3
 80113de:	4620      	mov	r0, r4
 80113e0:	f000 fcfc 	bl	8011ddc <__lshift>
 80113e4:	ee08 0a10 	vmov	s16, r0
 80113e8:	9b05      	ldr	r3, [sp, #20]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	dd05      	ble.n	80113fa <_dtoa_r+0x82a>
 80113ee:	4631      	mov	r1, r6
 80113f0:	461a      	mov	r2, r3
 80113f2:	4620      	mov	r0, r4
 80113f4:	f000 fcf2 	bl	8011ddc <__lshift>
 80113f8:	4606      	mov	r6, r0
 80113fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d06e      	beq.n	80114de <_dtoa_r+0x90e>
 8011400:	ee18 0a10 	vmov	r0, s16
 8011404:	4631      	mov	r1, r6
 8011406:	f000 fd59 	bl	8011ebc <__mcmp>
 801140a:	2800      	cmp	r0, #0
 801140c:	da67      	bge.n	80114de <_dtoa_r+0x90e>
 801140e:	9b00      	ldr	r3, [sp, #0]
 8011410:	3b01      	subs	r3, #1
 8011412:	ee18 1a10 	vmov	r1, s16
 8011416:	9300      	str	r3, [sp, #0]
 8011418:	220a      	movs	r2, #10
 801141a:	2300      	movs	r3, #0
 801141c:	4620      	mov	r0, r4
 801141e:	f000 fb2d 	bl	8011a7c <__multadd>
 8011422:	9b08      	ldr	r3, [sp, #32]
 8011424:	ee08 0a10 	vmov	s16, r0
 8011428:	2b00      	cmp	r3, #0
 801142a:	f000 81b1 	beq.w	8011790 <_dtoa_r+0xbc0>
 801142e:	2300      	movs	r3, #0
 8011430:	4639      	mov	r1, r7
 8011432:	220a      	movs	r2, #10
 8011434:	4620      	mov	r0, r4
 8011436:	f000 fb21 	bl	8011a7c <__multadd>
 801143a:	9b02      	ldr	r3, [sp, #8]
 801143c:	2b00      	cmp	r3, #0
 801143e:	4607      	mov	r7, r0
 8011440:	f300 808e 	bgt.w	8011560 <_dtoa_r+0x990>
 8011444:	9b06      	ldr	r3, [sp, #24]
 8011446:	2b02      	cmp	r3, #2
 8011448:	dc51      	bgt.n	80114ee <_dtoa_r+0x91e>
 801144a:	e089      	b.n	8011560 <_dtoa_r+0x990>
 801144c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801144e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011452:	e74b      	b.n	80112ec <_dtoa_r+0x71c>
 8011454:	9b03      	ldr	r3, [sp, #12]
 8011456:	1e5e      	subs	r6, r3, #1
 8011458:	9b07      	ldr	r3, [sp, #28]
 801145a:	42b3      	cmp	r3, r6
 801145c:	bfbf      	itttt	lt
 801145e:	9b07      	ldrlt	r3, [sp, #28]
 8011460:	9607      	strlt	r6, [sp, #28]
 8011462:	1af2      	sublt	r2, r6, r3
 8011464:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011466:	bfb6      	itet	lt
 8011468:	189b      	addlt	r3, r3, r2
 801146a:	1b9e      	subge	r6, r3, r6
 801146c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801146e:	9b03      	ldr	r3, [sp, #12]
 8011470:	bfb8      	it	lt
 8011472:	2600      	movlt	r6, #0
 8011474:	2b00      	cmp	r3, #0
 8011476:	bfb7      	itett	lt
 8011478:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801147c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011480:	1a9d      	sublt	r5, r3, r2
 8011482:	2300      	movlt	r3, #0
 8011484:	e734      	b.n	80112f0 <_dtoa_r+0x720>
 8011486:	9e07      	ldr	r6, [sp, #28]
 8011488:	9d04      	ldr	r5, [sp, #16]
 801148a:	9f08      	ldr	r7, [sp, #32]
 801148c:	e73b      	b.n	8011306 <_dtoa_r+0x736>
 801148e:	9a07      	ldr	r2, [sp, #28]
 8011490:	e767      	b.n	8011362 <_dtoa_r+0x792>
 8011492:	9b06      	ldr	r3, [sp, #24]
 8011494:	2b01      	cmp	r3, #1
 8011496:	dc18      	bgt.n	80114ca <_dtoa_r+0x8fa>
 8011498:	f1ba 0f00 	cmp.w	sl, #0
 801149c:	d115      	bne.n	80114ca <_dtoa_r+0x8fa>
 801149e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80114a2:	b993      	cbnz	r3, 80114ca <_dtoa_r+0x8fa>
 80114a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80114a8:	0d1b      	lsrs	r3, r3, #20
 80114aa:	051b      	lsls	r3, r3, #20
 80114ac:	b183      	cbz	r3, 80114d0 <_dtoa_r+0x900>
 80114ae:	9b04      	ldr	r3, [sp, #16]
 80114b0:	3301      	adds	r3, #1
 80114b2:	9304      	str	r3, [sp, #16]
 80114b4:	9b05      	ldr	r3, [sp, #20]
 80114b6:	3301      	adds	r3, #1
 80114b8:	9305      	str	r3, [sp, #20]
 80114ba:	f04f 0801 	mov.w	r8, #1
 80114be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	f47f af6a 	bne.w	801139a <_dtoa_r+0x7ca>
 80114c6:	2001      	movs	r0, #1
 80114c8:	e76f      	b.n	80113aa <_dtoa_r+0x7da>
 80114ca:	f04f 0800 	mov.w	r8, #0
 80114ce:	e7f6      	b.n	80114be <_dtoa_r+0x8ee>
 80114d0:	4698      	mov	r8, r3
 80114d2:	e7f4      	b.n	80114be <_dtoa_r+0x8ee>
 80114d4:	f43f af7d 	beq.w	80113d2 <_dtoa_r+0x802>
 80114d8:	4618      	mov	r0, r3
 80114da:	301c      	adds	r0, #28
 80114dc:	e772      	b.n	80113c4 <_dtoa_r+0x7f4>
 80114de:	9b03      	ldr	r3, [sp, #12]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	dc37      	bgt.n	8011554 <_dtoa_r+0x984>
 80114e4:	9b06      	ldr	r3, [sp, #24]
 80114e6:	2b02      	cmp	r3, #2
 80114e8:	dd34      	ble.n	8011554 <_dtoa_r+0x984>
 80114ea:	9b03      	ldr	r3, [sp, #12]
 80114ec:	9302      	str	r3, [sp, #8]
 80114ee:	9b02      	ldr	r3, [sp, #8]
 80114f0:	b96b      	cbnz	r3, 801150e <_dtoa_r+0x93e>
 80114f2:	4631      	mov	r1, r6
 80114f4:	2205      	movs	r2, #5
 80114f6:	4620      	mov	r0, r4
 80114f8:	f000 fac0 	bl	8011a7c <__multadd>
 80114fc:	4601      	mov	r1, r0
 80114fe:	4606      	mov	r6, r0
 8011500:	ee18 0a10 	vmov	r0, s16
 8011504:	f000 fcda 	bl	8011ebc <__mcmp>
 8011508:	2800      	cmp	r0, #0
 801150a:	f73f adbb 	bgt.w	8011084 <_dtoa_r+0x4b4>
 801150e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011510:	9d01      	ldr	r5, [sp, #4]
 8011512:	43db      	mvns	r3, r3
 8011514:	9300      	str	r3, [sp, #0]
 8011516:	f04f 0800 	mov.w	r8, #0
 801151a:	4631      	mov	r1, r6
 801151c:	4620      	mov	r0, r4
 801151e:	f000 fa8b 	bl	8011a38 <_Bfree>
 8011522:	2f00      	cmp	r7, #0
 8011524:	f43f aea4 	beq.w	8011270 <_dtoa_r+0x6a0>
 8011528:	f1b8 0f00 	cmp.w	r8, #0
 801152c:	d005      	beq.n	801153a <_dtoa_r+0x96a>
 801152e:	45b8      	cmp	r8, r7
 8011530:	d003      	beq.n	801153a <_dtoa_r+0x96a>
 8011532:	4641      	mov	r1, r8
 8011534:	4620      	mov	r0, r4
 8011536:	f000 fa7f 	bl	8011a38 <_Bfree>
 801153a:	4639      	mov	r1, r7
 801153c:	4620      	mov	r0, r4
 801153e:	f000 fa7b 	bl	8011a38 <_Bfree>
 8011542:	e695      	b.n	8011270 <_dtoa_r+0x6a0>
 8011544:	2600      	movs	r6, #0
 8011546:	4637      	mov	r7, r6
 8011548:	e7e1      	b.n	801150e <_dtoa_r+0x93e>
 801154a:	9700      	str	r7, [sp, #0]
 801154c:	4637      	mov	r7, r6
 801154e:	e599      	b.n	8011084 <_dtoa_r+0x4b4>
 8011550:	40240000 	.word	0x40240000
 8011554:	9b08      	ldr	r3, [sp, #32]
 8011556:	2b00      	cmp	r3, #0
 8011558:	f000 80ca 	beq.w	80116f0 <_dtoa_r+0xb20>
 801155c:	9b03      	ldr	r3, [sp, #12]
 801155e:	9302      	str	r3, [sp, #8]
 8011560:	2d00      	cmp	r5, #0
 8011562:	dd05      	ble.n	8011570 <_dtoa_r+0x9a0>
 8011564:	4639      	mov	r1, r7
 8011566:	462a      	mov	r2, r5
 8011568:	4620      	mov	r0, r4
 801156a:	f000 fc37 	bl	8011ddc <__lshift>
 801156e:	4607      	mov	r7, r0
 8011570:	f1b8 0f00 	cmp.w	r8, #0
 8011574:	d05b      	beq.n	801162e <_dtoa_r+0xa5e>
 8011576:	6879      	ldr	r1, [r7, #4]
 8011578:	4620      	mov	r0, r4
 801157a:	f000 fa1d 	bl	80119b8 <_Balloc>
 801157e:	4605      	mov	r5, r0
 8011580:	b928      	cbnz	r0, 801158e <_dtoa_r+0x9be>
 8011582:	4b87      	ldr	r3, [pc, #540]	; (80117a0 <_dtoa_r+0xbd0>)
 8011584:	4602      	mov	r2, r0
 8011586:	f240 21ea 	movw	r1, #746	; 0x2ea
 801158a:	f7ff bb3b 	b.w	8010c04 <_dtoa_r+0x34>
 801158e:	693a      	ldr	r2, [r7, #16]
 8011590:	3202      	adds	r2, #2
 8011592:	0092      	lsls	r2, r2, #2
 8011594:	f107 010c 	add.w	r1, r7, #12
 8011598:	300c      	adds	r0, #12
 801159a:	f7fe fdcf 	bl	801013c <memcpy>
 801159e:	2201      	movs	r2, #1
 80115a0:	4629      	mov	r1, r5
 80115a2:	4620      	mov	r0, r4
 80115a4:	f000 fc1a 	bl	8011ddc <__lshift>
 80115a8:	9b01      	ldr	r3, [sp, #4]
 80115aa:	f103 0901 	add.w	r9, r3, #1
 80115ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80115b2:	4413      	add	r3, r2
 80115b4:	9305      	str	r3, [sp, #20]
 80115b6:	f00a 0301 	and.w	r3, sl, #1
 80115ba:	46b8      	mov	r8, r7
 80115bc:	9304      	str	r3, [sp, #16]
 80115be:	4607      	mov	r7, r0
 80115c0:	4631      	mov	r1, r6
 80115c2:	ee18 0a10 	vmov	r0, s16
 80115c6:	f7ff fa75 	bl	8010ab4 <quorem>
 80115ca:	4641      	mov	r1, r8
 80115cc:	9002      	str	r0, [sp, #8]
 80115ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80115d2:	ee18 0a10 	vmov	r0, s16
 80115d6:	f000 fc71 	bl	8011ebc <__mcmp>
 80115da:	463a      	mov	r2, r7
 80115dc:	9003      	str	r0, [sp, #12]
 80115de:	4631      	mov	r1, r6
 80115e0:	4620      	mov	r0, r4
 80115e2:	f000 fc87 	bl	8011ef4 <__mdiff>
 80115e6:	68c2      	ldr	r2, [r0, #12]
 80115e8:	f109 3bff 	add.w	fp, r9, #4294967295
 80115ec:	4605      	mov	r5, r0
 80115ee:	bb02      	cbnz	r2, 8011632 <_dtoa_r+0xa62>
 80115f0:	4601      	mov	r1, r0
 80115f2:	ee18 0a10 	vmov	r0, s16
 80115f6:	f000 fc61 	bl	8011ebc <__mcmp>
 80115fa:	4602      	mov	r2, r0
 80115fc:	4629      	mov	r1, r5
 80115fe:	4620      	mov	r0, r4
 8011600:	9207      	str	r2, [sp, #28]
 8011602:	f000 fa19 	bl	8011a38 <_Bfree>
 8011606:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801160a:	ea43 0102 	orr.w	r1, r3, r2
 801160e:	9b04      	ldr	r3, [sp, #16]
 8011610:	430b      	orrs	r3, r1
 8011612:	464d      	mov	r5, r9
 8011614:	d10f      	bne.n	8011636 <_dtoa_r+0xa66>
 8011616:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801161a:	d02a      	beq.n	8011672 <_dtoa_r+0xaa2>
 801161c:	9b03      	ldr	r3, [sp, #12]
 801161e:	2b00      	cmp	r3, #0
 8011620:	dd02      	ble.n	8011628 <_dtoa_r+0xa58>
 8011622:	9b02      	ldr	r3, [sp, #8]
 8011624:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011628:	f88b a000 	strb.w	sl, [fp]
 801162c:	e775      	b.n	801151a <_dtoa_r+0x94a>
 801162e:	4638      	mov	r0, r7
 8011630:	e7ba      	b.n	80115a8 <_dtoa_r+0x9d8>
 8011632:	2201      	movs	r2, #1
 8011634:	e7e2      	b.n	80115fc <_dtoa_r+0xa2c>
 8011636:	9b03      	ldr	r3, [sp, #12]
 8011638:	2b00      	cmp	r3, #0
 801163a:	db04      	blt.n	8011646 <_dtoa_r+0xa76>
 801163c:	9906      	ldr	r1, [sp, #24]
 801163e:	430b      	orrs	r3, r1
 8011640:	9904      	ldr	r1, [sp, #16]
 8011642:	430b      	orrs	r3, r1
 8011644:	d122      	bne.n	801168c <_dtoa_r+0xabc>
 8011646:	2a00      	cmp	r2, #0
 8011648:	ddee      	ble.n	8011628 <_dtoa_r+0xa58>
 801164a:	ee18 1a10 	vmov	r1, s16
 801164e:	2201      	movs	r2, #1
 8011650:	4620      	mov	r0, r4
 8011652:	f000 fbc3 	bl	8011ddc <__lshift>
 8011656:	4631      	mov	r1, r6
 8011658:	ee08 0a10 	vmov	s16, r0
 801165c:	f000 fc2e 	bl	8011ebc <__mcmp>
 8011660:	2800      	cmp	r0, #0
 8011662:	dc03      	bgt.n	801166c <_dtoa_r+0xa9c>
 8011664:	d1e0      	bne.n	8011628 <_dtoa_r+0xa58>
 8011666:	f01a 0f01 	tst.w	sl, #1
 801166a:	d0dd      	beq.n	8011628 <_dtoa_r+0xa58>
 801166c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011670:	d1d7      	bne.n	8011622 <_dtoa_r+0xa52>
 8011672:	2339      	movs	r3, #57	; 0x39
 8011674:	f88b 3000 	strb.w	r3, [fp]
 8011678:	462b      	mov	r3, r5
 801167a:	461d      	mov	r5, r3
 801167c:	3b01      	subs	r3, #1
 801167e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011682:	2a39      	cmp	r2, #57	; 0x39
 8011684:	d071      	beq.n	801176a <_dtoa_r+0xb9a>
 8011686:	3201      	adds	r2, #1
 8011688:	701a      	strb	r2, [r3, #0]
 801168a:	e746      	b.n	801151a <_dtoa_r+0x94a>
 801168c:	2a00      	cmp	r2, #0
 801168e:	dd07      	ble.n	80116a0 <_dtoa_r+0xad0>
 8011690:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011694:	d0ed      	beq.n	8011672 <_dtoa_r+0xaa2>
 8011696:	f10a 0301 	add.w	r3, sl, #1
 801169a:	f88b 3000 	strb.w	r3, [fp]
 801169e:	e73c      	b.n	801151a <_dtoa_r+0x94a>
 80116a0:	9b05      	ldr	r3, [sp, #20]
 80116a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80116a6:	4599      	cmp	r9, r3
 80116a8:	d047      	beq.n	801173a <_dtoa_r+0xb6a>
 80116aa:	ee18 1a10 	vmov	r1, s16
 80116ae:	2300      	movs	r3, #0
 80116b0:	220a      	movs	r2, #10
 80116b2:	4620      	mov	r0, r4
 80116b4:	f000 f9e2 	bl	8011a7c <__multadd>
 80116b8:	45b8      	cmp	r8, r7
 80116ba:	ee08 0a10 	vmov	s16, r0
 80116be:	f04f 0300 	mov.w	r3, #0
 80116c2:	f04f 020a 	mov.w	r2, #10
 80116c6:	4641      	mov	r1, r8
 80116c8:	4620      	mov	r0, r4
 80116ca:	d106      	bne.n	80116da <_dtoa_r+0xb0a>
 80116cc:	f000 f9d6 	bl	8011a7c <__multadd>
 80116d0:	4680      	mov	r8, r0
 80116d2:	4607      	mov	r7, r0
 80116d4:	f109 0901 	add.w	r9, r9, #1
 80116d8:	e772      	b.n	80115c0 <_dtoa_r+0x9f0>
 80116da:	f000 f9cf 	bl	8011a7c <__multadd>
 80116de:	4639      	mov	r1, r7
 80116e0:	4680      	mov	r8, r0
 80116e2:	2300      	movs	r3, #0
 80116e4:	220a      	movs	r2, #10
 80116e6:	4620      	mov	r0, r4
 80116e8:	f000 f9c8 	bl	8011a7c <__multadd>
 80116ec:	4607      	mov	r7, r0
 80116ee:	e7f1      	b.n	80116d4 <_dtoa_r+0xb04>
 80116f0:	9b03      	ldr	r3, [sp, #12]
 80116f2:	9302      	str	r3, [sp, #8]
 80116f4:	9d01      	ldr	r5, [sp, #4]
 80116f6:	ee18 0a10 	vmov	r0, s16
 80116fa:	4631      	mov	r1, r6
 80116fc:	f7ff f9da 	bl	8010ab4 <quorem>
 8011700:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011704:	9b01      	ldr	r3, [sp, #4]
 8011706:	f805 ab01 	strb.w	sl, [r5], #1
 801170a:	1aea      	subs	r2, r5, r3
 801170c:	9b02      	ldr	r3, [sp, #8]
 801170e:	4293      	cmp	r3, r2
 8011710:	dd09      	ble.n	8011726 <_dtoa_r+0xb56>
 8011712:	ee18 1a10 	vmov	r1, s16
 8011716:	2300      	movs	r3, #0
 8011718:	220a      	movs	r2, #10
 801171a:	4620      	mov	r0, r4
 801171c:	f000 f9ae 	bl	8011a7c <__multadd>
 8011720:	ee08 0a10 	vmov	s16, r0
 8011724:	e7e7      	b.n	80116f6 <_dtoa_r+0xb26>
 8011726:	9b02      	ldr	r3, [sp, #8]
 8011728:	2b00      	cmp	r3, #0
 801172a:	bfc8      	it	gt
 801172c:	461d      	movgt	r5, r3
 801172e:	9b01      	ldr	r3, [sp, #4]
 8011730:	bfd8      	it	le
 8011732:	2501      	movle	r5, #1
 8011734:	441d      	add	r5, r3
 8011736:	f04f 0800 	mov.w	r8, #0
 801173a:	ee18 1a10 	vmov	r1, s16
 801173e:	2201      	movs	r2, #1
 8011740:	4620      	mov	r0, r4
 8011742:	f000 fb4b 	bl	8011ddc <__lshift>
 8011746:	4631      	mov	r1, r6
 8011748:	ee08 0a10 	vmov	s16, r0
 801174c:	f000 fbb6 	bl	8011ebc <__mcmp>
 8011750:	2800      	cmp	r0, #0
 8011752:	dc91      	bgt.n	8011678 <_dtoa_r+0xaa8>
 8011754:	d102      	bne.n	801175c <_dtoa_r+0xb8c>
 8011756:	f01a 0f01 	tst.w	sl, #1
 801175a:	d18d      	bne.n	8011678 <_dtoa_r+0xaa8>
 801175c:	462b      	mov	r3, r5
 801175e:	461d      	mov	r5, r3
 8011760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011764:	2a30      	cmp	r2, #48	; 0x30
 8011766:	d0fa      	beq.n	801175e <_dtoa_r+0xb8e>
 8011768:	e6d7      	b.n	801151a <_dtoa_r+0x94a>
 801176a:	9a01      	ldr	r2, [sp, #4]
 801176c:	429a      	cmp	r2, r3
 801176e:	d184      	bne.n	801167a <_dtoa_r+0xaaa>
 8011770:	9b00      	ldr	r3, [sp, #0]
 8011772:	3301      	adds	r3, #1
 8011774:	9300      	str	r3, [sp, #0]
 8011776:	2331      	movs	r3, #49	; 0x31
 8011778:	7013      	strb	r3, [r2, #0]
 801177a:	e6ce      	b.n	801151a <_dtoa_r+0x94a>
 801177c:	4b09      	ldr	r3, [pc, #36]	; (80117a4 <_dtoa_r+0xbd4>)
 801177e:	f7ff ba95 	b.w	8010cac <_dtoa_r+0xdc>
 8011782:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011784:	2b00      	cmp	r3, #0
 8011786:	f47f aa6e 	bne.w	8010c66 <_dtoa_r+0x96>
 801178a:	4b07      	ldr	r3, [pc, #28]	; (80117a8 <_dtoa_r+0xbd8>)
 801178c:	f7ff ba8e 	b.w	8010cac <_dtoa_r+0xdc>
 8011790:	9b02      	ldr	r3, [sp, #8]
 8011792:	2b00      	cmp	r3, #0
 8011794:	dcae      	bgt.n	80116f4 <_dtoa_r+0xb24>
 8011796:	9b06      	ldr	r3, [sp, #24]
 8011798:	2b02      	cmp	r3, #2
 801179a:	f73f aea8 	bgt.w	80114ee <_dtoa_r+0x91e>
 801179e:	e7a9      	b.n	80116f4 <_dtoa_r+0xb24>
 80117a0:	08013e1b 	.word	0x08013e1b
 80117a4:	08013d78 	.word	0x08013d78
 80117a8:	08013d9c 	.word	0x08013d9c

080117ac <std>:
 80117ac:	2300      	movs	r3, #0
 80117ae:	b510      	push	{r4, lr}
 80117b0:	4604      	mov	r4, r0
 80117b2:	e9c0 3300 	strd	r3, r3, [r0]
 80117b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80117ba:	6083      	str	r3, [r0, #8]
 80117bc:	8181      	strh	r1, [r0, #12]
 80117be:	6643      	str	r3, [r0, #100]	; 0x64
 80117c0:	81c2      	strh	r2, [r0, #14]
 80117c2:	6183      	str	r3, [r0, #24]
 80117c4:	4619      	mov	r1, r3
 80117c6:	2208      	movs	r2, #8
 80117c8:	305c      	adds	r0, #92	; 0x5c
 80117ca:	f7fe fcdf 	bl	801018c <memset>
 80117ce:	4b05      	ldr	r3, [pc, #20]	; (80117e4 <std+0x38>)
 80117d0:	6263      	str	r3, [r4, #36]	; 0x24
 80117d2:	4b05      	ldr	r3, [pc, #20]	; (80117e8 <std+0x3c>)
 80117d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80117d6:	4b05      	ldr	r3, [pc, #20]	; (80117ec <std+0x40>)
 80117d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80117da:	4b05      	ldr	r3, [pc, #20]	; (80117f0 <std+0x44>)
 80117dc:	6224      	str	r4, [r4, #32]
 80117de:	6323      	str	r3, [r4, #48]	; 0x30
 80117e0:	bd10      	pop	{r4, pc}
 80117e2:	bf00      	nop
 80117e4:	08012581 	.word	0x08012581
 80117e8:	080125a3 	.word	0x080125a3
 80117ec:	080125db 	.word	0x080125db
 80117f0:	080125ff 	.word	0x080125ff

080117f4 <_cleanup_r>:
 80117f4:	4901      	ldr	r1, [pc, #4]	; (80117fc <_cleanup_r+0x8>)
 80117f6:	f000 b8af 	b.w	8011958 <_fwalk_reent>
 80117fa:	bf00      	nop
 80117fc:	08012915 	.word	0x08012915

08011800 <__sfmoreglue>:
 8011800:	b570      	push	{r4, r5, r6, lr}
 8011802:	2268      	movs	r2, #104	; 0x68
 8011804:	1e4d      	subs	r5, r1, #1
 8011806:	4355      	muls	r5, r2
 8011808:	460e      	mov	r6, r1
 801180a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801180e:	f000 fcd9 	bl	80121c4 <_malloc_r>
 8011812:	4604      	mov	r4, r0
 8011814:	b140      	cbz	r0, 8011828 <__sfmoreglue+0x28>
 8011816:	2100      	movs	r1, #0
 8011818:	e9c0 1600 	strd	r1, r6, [r0]
 801181c:	300c      	adds	r0, #12
 801181e:	60a0      	str	r0, [r4, #8]
 8011820:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011824:	f7fe fcb2 	bl	801018c <memset>
 8011828:	4620      	mov	r0, r4
 801182a:	bd70      	pop	{r4, r5, r6, pc}

0801182c <__sfp_lock_acquire>:
 801182c:	4801      	ldr	r0, [pc, #4]	; (8011834 <__sfp_lock_acquire+0x8>)
 801182e:	f000 b8b8 	b.w	80119a2 <__retarget_lock_acquire_recursive>
 8011832:	bf00      	nop
 8011834:	200059c5 	.word	0x200059c5

08011838 <__sfp_lock_release>:
 8011838:	4801      	ldr	r0, [pc, #4]	; (8011840 <__sfp_lock_release+0x8>)
 801183a:	f000 b8b3 	b.w	80119a4 <__retarget_lock_release_recursive>
 801183e:	bf00      	nop
 8011840:	200059c5 	.word	0x200059c5

08011844 <__sinit_lock_acquire>:
 8011844:	4801      	ldr	r0, [pc, #4]	; (801184c <__sinit_lock_acquire+0x8>)
 8011846:	f000 b8ac 	b.w	80119a2 <__retarget_lock_acquire_recursive>
 801184a:	bf00      	nop
 801184c:	200059c6 	.word	0x200059c6

08011850 <__sinit_lock_release>:
 8011850:	4801      	ldr	r0, [pc, #4]	; (8011858 <__sinit_lock_release+0x8>)
 8011852:	f000 b8a7 	b.w	80119a4 <__retarget_lock_release_recursive>
 8011856:	bf00      	nop
 8011858:	200059c6 	.word	0x200059c6

0801185c <__sinit>:
 801185c:	b510      	push	{r4, lr}
 801185e:	4604      	mov	r4, r0
 8011860:	f7ff fff0 	bl	8011844 <__sinit_lock_acquire>
 8011864:	69a3      	ldr	r3, [r4, #24]
 8011866:	b11b      	cbz	r3, 8011870 <__sinit+0x14>
 8011868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801186c:	f7ff bff0 	b.w	8011850 <__sinit_lock_release>
 8011870:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011874:	6523      	str	r3, [r4, #80]	; 0x50
 8011876:	4b13      	ldr	r3, [pc, #76]	; (80118c4 <__sinit+0x68>)
 8011878:	4a13      	ldr	r2, [pc, #76]	; (80118c8 <__sinit+0x6c>)
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	62a2      	str	r2, [r4, #40]	; 0x28
 801187e:	42a3      	cmp	r3, r4
 8011880:	bf04      	itt	eq
 8011882:	2301      	moveq	r3, #1
 8011884:	61a3      	streq	r3, [r4, #24]
 8011886:	4620      	mov	r0, r4
 8011888:	f000 f820 	bl	80118cc <__sfp>
 801188c:	6060      	str	r0, [r4, #4]
 801188e:	4620      	mov	r0, r4
 8011890:	f000 f81c 	bl	80118cc <__sfp>
 8011894:	60a0      	str	r0, [r4, #8]
 8011896:	4620      	mov	r0, r4
 8011898:	f000 f818 	bl	80118cc <__sfp>
 801189c:	2200      	movs	r2, #0
 801189e:	60e0      	str	r0, [r4, #12]
 80118a0:	2104      	movs	r1, #4
 80118a2:	6860      	ldr	r0, [r4, #4]
 80118a4:	f7ff ff82 	bl	80117ac <std>
 80118a8:	68a0      	ldr	r0, [r4, #8]
 80118aa:	2201      	movs	r2, #1
 80118ac:	2109      	movs	r1, #9
 80118ae:	f7ff ff7d 	bl	80117ac <std>
 80118b2:	68e0      	ldr	r0, [r4, #12]
 80118b4:	2202      	movs	r2, #2
 80118b6:	2112      	movs	r1, #18
 80118b8:	f7ff ff78 	bl	80117ac <std>
 80118bc:	2301      	movs	r3, #1
 80118be:	61a3      	str	r3, [r4, #24]
 80118c0:	e7d2      	b.n	8011868 <__sinit+0xc>
 80118c2:	bf00      	nop
 80118c4:	08013d64 	.word	0x08013d64
 80118c8:	080117f5 	.word	0x080117f5

080118cc <__sfp>:
 80118cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118ce:	4607      	mov	r7, r0
 80118d0:	f7ff ffac 	bl	801182c <__sfp_lock_acquire>
 80118d4:	4b1e      	ldr	r3, [pc, #120]	; (8011950 <__sfp+0x84>)
 80118d6:	681e      	ldr	r6, [r3, #0]
 80118d8:	69b3      	ldr	r3, [r6, #24]
 80118da:	b913      	cbnz	r3, 80118e2 <__sfp+0x16>
 80118dc:	4630      	mov	r0, r6
 80118de:	f7ff ffbd 	bl	801185c <__sinit>
 80118e2:	3648      	adds	r6, #72	; 0x48
 80118e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80118e8:	3b01      	subs	r3, #1
 80118ea:	d503      	bpl.n	80118f4 <__sfp+0x28>
 80118ec:	6833      	ldr	r3, [r6, #0]
 80118ee:	b30b      	cbz	r3, 8011934 <__sfp+0x68>
 80118f0:	6836      	ldr	r6, [r6, #0]
 80118f2:	e7f7      	b.n	80118e4 <__sfp+0x18>
 80118f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80118f8:	b9d5      	cbnz	r5, 8011930 <__sfp+0x64>
 80118fa:	4b16      	ldr	r3, [pc, #88]	; (8011954 <__sfp+0x88>)
 80118fc:	60e3      	str	r3, [r4, #12]
 80118fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011902:	6665      	str	r5, [r4, #100]	; 0x64
 8011904:	f000 f84c 	bl	80119a0 <__retarget_lock_init_recursive>
 8011908:	f7ff ff96 	bl	8011838 <__sfp_lock_release>
 801190c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011910:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011914:	6025      	str	r5, [r4, #0]
 8011916:	61a5      	str	r5, [r4, #24]
 8011918:	2208      	movs	r2, #8
 801191a:	4629      	mov	r1, r5
 801191c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011920:	f7fe fc34 	bl	801018c <memset>
 8011924:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011928:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801192c:	4620      	mov	r0, r4
 801192e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011930:	3468      	adds	r4, #104	; 0x68
 8011932:	e7d9      	b.n	80118e8 <__sfp+0x1c>
 8011934:	2104      	movs	r1, #4
 8011936:	4638      	mov	r0, r7
 8011938:	f7ff ff62 	bl	8011800 <__sfmoreglue>
 801193c:	4604      	mov	r4, r0
 801193e:	6030      	str	r0, [r6, #0]
 8011940:	2800      	cmp	r0, #0
 8011942:	d1d5      	bne.n	80118f0 <__sfp+0x24>
 8011944:	f7ff ff78 	bl	8011838 <__sfp_lock_release>
 8011948:	230c      	movs	r3, #12
 801194a:	603b      	str	r3, [r7, #0]
 801194c:	e7ee      	b.n	801192c <__sfp+0x60>
 801194e:	bf00      	nop
 8011950:	08013d64 	.word	0x08013d64
 8011954:	ffff0001 	.word	0xffff0001

08011958 <_fwalk_reent>:
 8011958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801195c:	4606      	mov	r6, r0
 801195e:	4688      	mov	r8, r1
 8011960:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011964:	2700      	movs	r7, #0
 8011966:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801196a:	f1b9 0901 	subs.w	r9, r9, #1
 801196e:	d505      	bpl.n	801197c <_fwalk_reent+0x24>
 8011970:	6824      	ldr	r4, [r4, #0]
 8011972:	2c00      	cmp	r4, #0
 8011974:	d1f7      	bne.n	8011966 <_fwalk_reent+0xe>
 8011976:	4638      	mov	r0, r7
 8011978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801197c:	89ab      	ldrh	r3, [r5, #12]
 801197e:	2b01      	cmp	r3, #1
 8011980:	d907      	bls.n	8011992 <_fwalk_reent+0x3a>
 8011982:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011986:	3301      	adds	r3, #1
 8011988:	d003      	beq.n	8011992 <_fwalk_reent+0x3a>
 801198a:	4629      	mov	r1, r5
 801198c:	4630      	mov	r0, r6
 801198e:	47c0      	blx	r8
 8011990:	4307      	orrs	r7, r0
 8011992:	3568      	adds	r5, #104	; 0x68
 8011994:	e7e9      	b.n	801196a <_fwalk_reent+0x12>
	...

08011998 <_localeconv_r>:
 8011998:	4800      	ldr	r0, [pc, #0]	; (801199c <_localeconv_r+0x4>)
 801199a:	4770      	bx	lr
 801199c:	2000059c 	.word	0x2000059c

080119a0 <__retarget_lock_init_recursive>:
 80119a0:	4770      	bx	lr

080119a2 <__retarget_lock_acquire_recursive>:
 80119a2:	4770      	bx	lr

080119a4 <__retarget_lock_release_recursive>:
 80119a4:	4770      	bx	lr
	...

080119a8 <malloc>:
 80119a8:	4b02      	ldr	r3, [pc, #8]	; (80119b4 <malloc+0xc>)
 80119aa:	4601      	mov	r1, r0
 80119ac:	6818      	ldr	r0, [r3, #0]
 80119ae:	f000 bc09 	b.w	80121c4 <_malloc_r>
 80119b2:	bf00      	nop
 80119b4:	20000448 	.word	0x20000448

080119b8 <_Balloc>:
 80119b8:	b570      	push	{r4, r5, r6, lr}
 80119ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80119bc:	4604      	mov	r4, r0
 80119be:	460d      	mov	r5, r1
 80119c0:	b976      	cbnz	r6, 80119e0 <_Balloc+0x28>
 80119c2:	2010      	movs	r0, #16
 80119c4:	f7ff fff0 	bl	80119a8 <malloc>
 80119c8:	4602      	mov	r2, r0
 80119ca:	6260      	str	r0, [r4, #36]	; 0x24
 80119cc:	b920      	cbnz	r0, 80119d8 <_Balloc+0x20>
 80119ce:	4b18      	ldr	r3, [pc, #96]	; (8011a30 <_Balloc+0x78>)
 80119d0:	4818      	ldr	r0, [pc, #96]	; (8011a34 <_Balloc+0x7c>)
 80119d2:	2166      	movs	r1, #102	; 0x66
 80119d4:	f000 feea 	bl	80127ac <__assert_func>
 80119d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80119dc:	6006      	str	r6, [r0, #0]
 80119de:	60c6      	str	r6, [r0, #12]
 80119e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80119e2:	68f3      	ldr	r3, [r6, #12]
 80119e4:	b183      	cbz	r3, 8011a08 <_Balloc+0x50>
 80119e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80119e8:	68db      	ldr	r3, [r3, #12]
 80119ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80119ee:	b9b8      	cbnz	r0, 8011a20 <_Balloc+0x68>
 80119f0:	2101      	movs	r1, #1
 80119f2:	fa01 f605 	lsl.w	r6, r1, r5
 80119f6:	1d72      	adds	r2, r6, #5
 80119f8:	0092      	lsls	r2, r2, #2
 80119fa:	4620      	mov	r0, r4
 80119fc:	f000 fb60 	bl	80120c0 <_calloc_r>
 8011a00:	b160      	cbz	r0, 8011a1c <_Balloc+0x64>
 8011a02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011a06:	e00e      	b.n	8011a26 <_Balloc+0x6e>
 8011a08:	2221      	movs	r2, #33	; 0x21
 8011a0a:	2104      	movs	r1, #4
 8011a0c:	4620      	mov	r0, r4
 8011a0e:	f000 fb57 	bl	80120c0 <_calloc_r>
 8011a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a14:	60f0      	str	r0, [r6, #12]
 8011a16:	68db      	ldr	r3, [r3, #12]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d1e4      	bne.n	80119e6 <_Balloc+0x2e>
 8011a1c:	2000      	movs	r0, #0
 8011a1e:	bd70      	pop	{r4, r5, r6, pc}
 8011a20:	6802      	ldr	r2, [r0, #0]
 8011a22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011a26:	2300      	movs	r3, #0
 8011a28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011a2c:	e7f7      	b.n	8011a1e <_Balloc+0x66>
 8011a2e:	bf00      	nop
 8011a30:	08013da9 	.word	0x08013da9
 8011a34:	08013e8c 	.word	0x08013e8c

08011a38 <_Bfree>:
 8011a38:	b570      	push	{r4, r5, r6, lr}
 8011a3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011a3c:	4605      	mov	r5, r0
 8011a3e:	460c      	mov	r4, r1
 8011a40:	b976      	cbnz	r6, 8011a60 <_Bfree+0x28>
 8011a42:	2010      	movs	r0, #16
 8011a44:	f7ff ffb0 	bl	80119a8 <malloc>
 8011a48:	4602      	mov	r2, r0
 8011a4a:	6268      	str	r0, [r5, #36]	; 0x24
 8011a4c:	b920      	cbnz	r0, 8011a58 <_Bfree+0x20>
 8011a4e:	4b09      	ldr	r3, [pc, #36]	; (8011a74 <_Bfree+0x3c>)
 8011a50:	4809      	ldr	r0, [pc, #36]	; (8011a78 <_Bfree+0x40>)
 8011a52:	218a      	movs	r1, #138	; 0x8a
 8011a54:	f000 feaa 	bl	80127ac <__assert_func>
 8011a58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011a5c:	6006      	str	r6, [r0, #0]
 8011a5e:	60c6      	str	r6, [r0, #12]
 8011a60:	b13c      	cbz	r4, 8011a72 <_Bfree+0x3a>
 8011a62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011a64:	6862      	ldr	r2, [r4, #4]
 8011a66:	68db      	ldr	r3, [r3, #12]
 8011a68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011a6c:	6021      	str	r1, [r4, #0]
 8011a6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011a72:	bd70      	pop	{r4, r5, r6, pc}
 8011a74:	08013da9 	.word	0x08013da9
 8011a78:	08013e8c 	.word	0x08013e8c

08011a7c <__multadd>:
 8011a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a80:	690d      	ldr	r5, [r1, #16]
 8011a82:	4607      	mov	r7, r0
 8011a84:	460c      	mov	r4, r1
 8011a86:	461e      	mov	r6, r3
 8011a88:	f101 0c14 	add.w	ip, r1, #20
 8011a8c:	2000      	movs	r0, #0
 8011a8e:	f8dc 3000 	ldr.w	r3, [ip]
 8011a92:	b299      	uxth	r1, r3
 8011a94:	fb02 6101 	mla	r1, r2, r1, r6
 8011a98:	0c1e      	lsrs	r6, r3, #16
 8011a9a:	0c0b      	lsrs	r3, r1, #16
 8011a9c:	fb02 3306 	mla	r3, r2, r6, r3
 8011aa0:	b289      	uxth	r1, r1
 8011aa2:	3001      	adds	r0, #1
 8011aa4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011aa8:	4285      	cmp	r5, r0
 8011aaa:	f84c 1b04 	str.w	r1, [ip], #4
 8011aae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011ab2:	dcec      	bgt.n	8011a8e <__multadd+0x12>
 8011ab4:	b30e      	cbz	r6, 8011afa <__multadd+0x7e>
 8011ab6:	68a3      	ldr	r3, [r4, #8]
 8011ab8:	42ab      	cmp	r3, r5
 8011aba:	dc19      	bgt.n	8011af0 <__multadd+0x74>
 8011abc:	6861      	ldr	r1, [r4, #4]
 8011abe:	4638      	mov	r0, r7
 8011ac0:	3101      	adds	r1, #1
 8011ac2:	f7ff ff79 	bl	80119b8 <_Balloc>
 8011ac6:	4680      	mov	r8, r0
 8011ac8:	b928      	cbnz	r0, 8011ad6 <__multadd+0x5a>
 8011aca:	4602      	mov	r2, r0
 8011acc:	4b0c      	ldr	r3, [pc, #48]	; (8011b00 <__multadd+0x84>)
 8011ace:	480d      	ldr	r0, [pc, #52]	; (8011b04 <__multadd+0x88>)
 8011ad0:	21b5      	movs	r1, #181	; 0xb5
 8011ad2:	f000 fe6b 	bl	80127ac <__assert_func>
 8011ad6:	6922      	ldr	r2, [r4, #16]
 8011ad8:	3202      	adds	r2, #2
 8011ada:	f104 010c 	add.w	r1, r4, #12
 8011ade:	0092      	lsls	r2, r2, #2
 8011ae0:	300c      	adds	r0, #12
 8011ae2:	f7fe fb2b 	bl	801013c <memcpy>
 8011ae6:	4621      	mov	r1, r4
 8011ae8:	4638      	mov	r0, r7
 8011aea:	f7ff ffa5 	bl	8011a38 <_Bfree>
 8011aee:	4644      	mov	r4, r8
 8011af0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011af4:	3501      	adds	r5, #1
 8011af6:	615e      	str	r6, [r3, #20]
 8011af8:	6125      	str	r5, [r4, #16]
 8011afa:	4620      	mov	r0, r4
 8011afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b00:	08013e1b 	.word	0x08013e1b
 8011b04:	08013e8c 	.word	0x08013e8c

08011b08 <__hi0bits>:
 8011b08:	0c03      	lsrs	r3, r0, #16
 8011b0a:	041b      	lsls	r3, r3, #16
 8011b0c:	b9d3      	cbnz	r3, 8011b44 <__hi0bits+0x3c>
 8011b0e:	0400      	lsls	r0, r0, #16
 8011b10:	2310      	movs	r3, #16
 8011b12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011b16:	bf04      	itt	eq
 8011b18:	0200      	lsleq	r0, r0, #8
 8011b1a:	3308      	addeq	r3, #8
 8011b1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011b20:	bf04      	itt	eq
 8011b22:	0100      	lsleq	r0, r0, #4
 8011b24:	3304      	addeq	r3, #4
 8011b26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011b2a:	bf04      	itt	eq
 8011b2c:	0080      	lsleq	r0, r0, #2
 8011b2e:	3302      	addeq	r3, #2
 8011b30:	2800      	cmp	r0, #0
 8011b32:	db05      	blt.n	8011b40 <__hi0bits+0x38>
 8011b34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011b38:	f103 0301 	add.w	r3, r3, #1
 8011b3c:	bf08      	it	eq
 8011b3e:	2320      	moveq	r3, #32
 8011b40:	4618      	mov	r0, r3
 8011b42:	4770      	bx	lr
 8011b44:	2300      	movs	r3, #0
 8011b46:	e7e4      	b.n	8011b12 <__hi0bits+0xa>

08011b48 <__lo0bits>:
 8011b48:	6803      	ldr	r3, [r0, #0]
 8011b4a:	f013 0207 	ands.w	r2, r3, #7
 8011b4e:	4601      	mov	r1, r0
 8011b50:	d00b      	beq.n	8011b6a <__lo0bits+0x22>
 8011b52:	07da      	lsls	r2, r3, #31
 8011b54:	d423      	bmi.n	8011b9e <__lo0bits+0x56>
 8011b56:	0798      	lsls	r0, r3, #30
 8011b58:	bf49      	itett	mi
 8011b5a:	085b      	lsrmi	r3, r3, #1
 8011b5c:	089b      	lsrpl	r3, r3, #2
 8011b5e:	2001      	movmi	r0, #1
 8011b60:	600b      	strmi	r3, [r1, #0]
 8011b62:	bf5c      	itt	pl
 8011b64:	600b      	strpl	r3, [r1, #0]
 8011b66:	2002      	movpl	r0, #2
 8011b68:	4770      	bx	lr
 8011b6a:	b298      	uxth	r0, r3
 8011b6c:	b9a8      	cbnz	r0, 8011b9a <__lo0bits+0x52>
 8011b6e:	0c1b      	lsrs	r3, r3, #16
 8011b70:	2010      	movs	r0, #16
 8011b72:	b2da      	uxtb	r2, r3
 8011b74:	b90a      	cbnz	r2, 8011b7a <__lo0bits+0x32>
 8011b76:	3008      	adds	r0, #8
 8011b78:	0a1b      	lsrs	r3, r3, #8
 8011b7a:	071a      	lsls	r2, r3, #28
 8011b7c:	bf04      	itt	eq
 8011b7e:	091b      	lsreq	r3, r3, #4
 8011b80:	3004      	addeq	r0, #4
 8011b82:	079a      	lsls	r2, r3, #30
 8011b84:	bf04      	itt	eq
 8011b86:	089b      	lsreq	r3, r3, #2
 8011b88:	3002      	addeq	r0, #2
 8011b8a:	07da      	lsls	r2, r3, #31
 8011b8c:	d403      	bmi.n	8011b96 <__lo0bits+0x4e>
 8011b8e:	085b      	lsrs	r3, r3, #1
 8011b90:	f100 0001 	add.w	r0, r0, #1
 8011b94:	d005      	beq.n	8011ba2 <__lo0bits+0x5a>
 8011b96:	600b      	str	r3, [r1, #0]
 8011b98:	4770      	bx	lr
 8011b9a:	4610      	mov	r0, r2
 8011b9c:	e7e9      	b.n	8011b72 <__lo0bits+0x2a>
 8011b9e:	2000      	movs	r0, #0
 8011ba0:	4770      	bx	lr
 8011ba2:	2020      	movs	r0, #32
 8011ba4:	4770      	bx	lr
	...

08011ba8 <__i2b>:
 8011ba8:	b510      	push	{r4, lr}
 8011baa:	460c      	mov	r4, r1
 8011bac:	2101      	movs	r1, #1
 8011bae:	f7ff ff03 	bl	80119b8 <_Balloc>
 8011bb2:	4602      	mov	r2, r0
 8011bb4:	b928      	cbnz	r0, 8011bc2 <__i2b+0x1a>
 8011bb6:	4b05      	ldr	r3, [pc, #20]	; (8011bcc <__i2b+0x24>)
 8011bb8:	4805      	ldr	r0, [pc, #20]	; (8011bd0 <__i2b+0x28>)
 8011bba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011bbe:	f000 fdf5 	bl	80127ac <__assert_func>
 8011bc2:	2301      	movs	r3, #1
 8011bc4:	6144      	str	r4, [r0, #20]
 8011bc6:	6103      	str	r3, [r0, #16]
 8011bc8:	bd10      	pop	{r4, pc}
 8011bca:	bf00      	nop
 8011bcc:	08013e1b 	.word	0x08013e1b
 8011bd0:	08013e8c 	.word	0x08013e8c

08011bd4 <__multiply>:
 8011bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bd8:	4691      	mov	r9, r2
 8011bda:	690a      	ldr	r2, [r1, #16]
 8011bdc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011be0:	429a      	cmp	r2, r3
 8011be2:	bfb8      	it	lt
 8011be4:	460b      	movlt	r3, r1
 8011be6:	460c      	mov	r4, r1
 8011be8:	bfbc      	itt	lt
 8011bea:	464c      	movlt	r4, r9
 8011bec:	4699      	movlt	r9, r3
 8011bee:	6927      	ldr	r7, [r4, #16]
 8011bf0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011bf4:	68a3      	ldr	r3, [r4, #8]
 8011bf6:	6861      	ldr	r1, [r4, #4]
 8011bf8:	eb07 060a 	add.w	r6, r7, sl
 8011bfc:	42b3      	cmp	r3, r6
 8011bfe:	b085      	sub	sp, #20
 8011c00:	bfb8      	it	lt
 8011c02:	3101      	addlt	r1, #1
 8011c04:	f7ff fed8 	bl	80119b8 <_Balloc>
 8011c08:	b930      	cbnz	r0, 8011c18 <__multiply+0x44>
 8011c0a:	4602      	mov	r2, r0
 8011c0c:	4b44      	ldr	r3, [pc, #272]	; (8011d20 <__multiply+0x14c>)
 8011c0e:	4845      	ldr	r0, [pc, #276]	; (8011d24 <__multiply+0x150>)
 8011c10:	f240 115d 	movw	r1, #349	; 0x15d
 8011c14:	f000 fdca 	bl	80127ac <__assert_func>
 8011c18:	f100 0514 	add.w	r5, r0, #20
 8011c1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011c20:	462b      	mov	r3, r5
 8011c22:	2200      	movs	r2, #0
 8011c24:	4543      	cmp	r3, r8
 8011c26:	d321      	bcc.n	8011c6c <__multiply+0x98>
 8011c28:	f104 0314 	add.w	r3, r4, #20
 8011c2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011c30:	f109 0314 	add.w	r3, r9, #20
 8011c34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011c38:	9202      	str	r2, [sp, #8]
 8011c3a:	1b3a      	subs	r2, r7, r4
 8011c3c:	3a15      	subs	r2, #21
 8011c3e:	f022 0203 	bic.w	r2, r2, #3
 8011c42:	3204      	adds	r2, #4
 8011c44:	f104 0115 	add.w	r1, r4, #21
 8011c48:	428f      	cmp	r7, r1
 8011c4a:	bf38      	it	cc
 8011c4c:	2204      	movcc	r2, #4
 8011c4e:	9201      	str	r2, [sp, #4]
 8011c50:	9a02      	ldr	r2, [sp, #8]
 8011c52:	9303      	str	r3, [sp, #12]
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d80c      	bhi.n	8011c72 <__multiply+0x9e>
 8011c58:	2e00      	cmp	r6, #0
 8011c5a:	dd03      	ble.n	8011c64 <__multiply+0x90>
 8011c5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d05a      	beq.n	8011d1a <__multiply+0x146>
 8011c64:	6106      	str	r6, [r0, #16]
 8011c66:	b005      	add	sp, #20
 8011c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c6c:	f843 2b04 	str.w	r2, [r3], #4
 8011c70:	e7d8      	b.n	8011c24 <__multiply+0x50>
 8011c72:	f8b3 a000 	ldrh.w	sl, [r3]
 8011c76:	f1ba 0f00 	cmp.w	sl, #0
 8011c7a:	d024      	beq.n	8011cc6 <__multiply+0xf2>
 8011c7c:	f104 0e14 	add.w	lr, r4, #20
 8011c80:	46a9      	mov	r9, r5
 8011c82:	f04f 0c00 	mov.w	ip, #0
 8011c86:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011c8a:	f8d9 1000 	ldr.w	r1, [r9]
 8011c8e:	fa1f fb82 	uxth.w	fp, r2
 8011c92:	b289      	uxth	r1, r1
 8011c94:	fb0a 110b 	mla	r1, sl, fp, r1
 8011c98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011c9c:	f8d9 2000 	ldr.w	r2, [r9]
 8011ca0:	4461      	add	r1, ip
 8011ca2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011ca6:	fb0a c20b 	mla	r2, sl, fp, ip
 8011caa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011cae:	b289      	uxth	r1, r1
 8011cb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011cb4:	4577      	cmp	r7, lr
 8011cb6:	f849 1b04 	str.w	r1, [r9], #4
 8011cba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011cbe:	d8e2      	bhi.n	8011c86 <__multiply+0xb2>
 8011cc0:	9a01      	ldr	r2, [sp, #4]
 8011cc2:	f845 c002 	str.w	ip, [r5, r2]
 8011cc6:	9a03      	ldr	r2, [sp, #12]
 8011cc8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011ccc:	3304      	adds	r3, #4
 8011cce:	f1b9 0f00 	cmp.w	r9, #0
 8011cd2:	d020      	beq.n	8011d16 <__multiply+0x142>
 8011cd4:	6829      	ldr	r1, [r5, #0]
 8011cd6:	f104 0c14 	add.w	ip, r4, #20
 8011cda:	46ae      	mov	lr, r5
 8011cdc:	f04f 0a00 	mov.w	sl, #0
 8011ce0:	f8bc b000 	ldrh.w	fp, [ip]
 8011ce4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011ce8:	fb09 220b 	mla	r2, r9, fp, r2
 8011cec:	4492      	add	sl, r2
 8011cee:	b289      	uxth	r1, r1
 8011cf0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011cf4:	f84e 1b04 	str.w	r1, [lr], #4
 8011cf8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011cfc:	f8be 1000 	ldrh.w	r1, [lr]
 8011d00:	0c12      	lsrs	r2, r2, #16
 8011d02:	fb09 1102 	mla	r1, r9, r2, r1
 8011d06:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011d0a:	4567      	cmp	r7, ip
 8011d0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011d10:	d8e6      	bhi.n	8011ce0 <__multiply+0x10c>
 8011d12:	9a01      	ldr	r2, [sp, #4]
 8011d14:	50a9      	str	r1, [r5, r2]
 8011d16:	3504      	adds	r5, #4
 8011d18:	e79a      	b.n	8011c50 <__multiply+0x7c>
 8011d1a:	3e01      	subs	r6, #1
 8011d1c:	e79c      	b.n	8011c58 <__multiply+0x84>
 8011d1e:	bf00      	nop
 8011d20:	08013e1b 	.word	0x08013e1b
 8011d24:	08013e8c 	.word	0x08013e8c

08011d28 <__pow5mult>:
 8011d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d2c:	4615      	mov	r5, r2
 8011d2e:	f012 0203 	ands.w	r2, r2, #3
 8011d32:	4606      	mov	r6, r0
 8011d34:	460f      	mov	r7, r1
 8011d36:	d007      	beq.n	8011d48 <__pow5mult+0x20>
 8011d38:	4c25      	ldr	r4, [pc, #148]	; (8011dd0 <__pow5mult+0xa8>)
 8011d3a:	3a01      	subs	r2, #1
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011d42:	f7ff fe9b 	bl	8011a7c <__multadd>
 8011d46:	4607      	mov	r7, r0
 8011d48:	10ad      	asrs	r5, r5, #2
 8011d4a:	d03d      	beq.n	8011dc8 <__pow5mult+0xa0>
 8011d4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011d4e:	b97c      	cbnz	r4, 8011d70 <__pow5mult+0x48>
 8011d50:	2010      	movs	r0, #16
 8011d52:	f7ff fe29 	bl	80119a8 <malloc>
 8011d56:	4602      	mov	r2, r0
 8011d58:	6270      	str	r0, [r6, #36]	; 0x24
 8011d5a:	b928      	cbnz	r0, 8011d68 <__pow5mult+0x40>
 8011d5c:	4b1d      	ldr	r3, [pc, #116]	; (8011dd4 <__pow5mult+0xac>)
 8011d5e:	481e      	ldr	r0, [pc, #120]	; (8011dd8 <__pow5mult+0xb0>)
 8011d60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011d64:	f000 fd22 	bl	80127ac <__assert_func>
 8011d68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011d6c:	6004      	str	r4, [r0, #0]
 8011d6e:	60c4      	str	r4, [r0, #12]
 8011d70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011d74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011d78:	b94c      	cbnz	r4, 8011d8e <__pow5mult+0x66>
 8011d7a:	f240 2171 	movw	r1, #625	; 0x271
 8011d7e:	4630      	mov	r0, r6
 8011d80:	f7ff ff12 	bl	8011ba8 <__i2b>
 8011d84:	2300      	movs	r3, #0
 8011d86:	f8c8 0008 	str.w	r0, [r8, #8]
 8011d8a:	4604      	mov	r4, r0
 8011d8c:	6003      	str	r3, [r0, #0]
 8011d8e:	f04f 0900 	mov.w	r9, #0
 8011d92:	07eb      	lsls	r3, r5, #31
 8011d94:	d50a      	bpl.n	8011dac <__pow5mult+0x84>
 8011d96:	4639      	mov	r1, r7
 8011d98:	4622      	mov	r2, r4
 8011d9a:	4630      	mov	r0, r6
 8011d9c:	f7ff ff1a 	bl	8011bd4 <__multiply>
 8011da0:	4639      	mov	r1, r7
 8011da2:	4680      	mov	r8, r0
 8011da4:	4630      	mov	r0, r6
 8011da6:	f7ff fe47 	bl	8011a38 <_Bfree>
 8011daa:	4647      	mov	r7, r8
 8011dac:	106d      	asrs	r5, r5, #1
 8011dae:	d00b      	beq.n	8011dc8 <__pow5mult+0xa0>
 8011db0:	6820      	ldr	r0, [r4, #0]
 8011db2:	b938      	cbnz	r0, 8011dc4 <__pow5mult+0x9c>
 8011db4:	4622      	mov	r2, r4
 8011db6:	4621      	mov	r1, r4
 8011db8:	4630      	mov	r0, r6
 8011dba:	f7ff ff0b 	bl	8011bd4 <__multiply>
 8011dbe:	6020      	str	r0, [r4, #0]
 8011dc0:	f8c0 9000 	str.w	r9, [r0]
 8011dc4:	4604      	mov	r4, r0
 8011dc6:	e7e4      	b.n	8011d92 <__pow5mult+0x6a>
 8011dc8:	4638      	mov	r0, r7
 8011dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dce:	bf00      	nop
 8011dd0:	08013fd8 	.word	0x08013fd8
 8011dd4:	08013da9 	.word	0x08013da9
 8011dd8:	08013e8c 	.word	0x08013e8c

08011ddc <__lshift>:
 8011ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011de0:	460c      	mov	r4, r1
 8011de2:	6849      	ldr	r1, [r1, #4]
 8011de4:	6923      	ldr	r3, [r4, #16]
 8011de6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011dea:	68a3      	ldr	r3, [r4, #8]
 8011dec:	4607      	mov	r7, r0
 8011dee:	4691      	mov	r9, r2
 8011df0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011df4:	f108 0601 	add.w	r6, r8, #1
 8011df8:	42b3      	cmp	r3, r6
 8011dfa:	db0b      	blt.n	8011e14 <__lshift+0x38>
 8011dfc:	4638      	mov	r0, r7
 8011dfe:	f7ff fddb 	bl	80119b8 <_Balloc>
 8011e02:	4605      	mov	r5, r0
 8011e04:	b948      	cbnz	r0, 8011e1a <__lshift+0x3e>
 8011e06:	4602      	mov	r2, r0
 8011e08:	4b2a      	ldr	r3, [pc, #168]	; (8011eb4 <__lshift+0xd8>)
 8011e0a:	482b      	ldr	r0, [pc, #172]	; (8011eb8 <__lshift+0xdc>)
 8011e0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011e10:	f000 fccc 	bl	80127ac <__assert_func>
 8011e14:	3101      	adds	r1, #1
 8011e16:	005b      	lsls	r3, r3, #1
 8011e18:	e7ee      	b.n	8011df8 <__lshift+0x1c>
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	f100 0114 	add.w	r1, r0, #20
 8011e20:	f100 0210 	add.w	r2, r0, #16
 8011e24:	4618      	mov	r0, r3
 8011e26:	4553      	cmp	r3, sl
 8011e28:	db37      	blt.n	8011e9a <__lshift+0xbe>
 8011e2a:	6920      	ldr	r0, [r4, #16]
 8011e2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011e30:	f104 0314 	add.w	r3, r4, #20
 8011e34:	f019 091f 	ands.w	r9, r9, #31
 8011e38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011e3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011e40:	d02f      	beq.n	8011ea2 <__lshift+0xc6>
 8011e42:	f1c9 0e20 	rsb	lr, r9, #32
 8011e46:	468a      	mov	sl, r1
 8011e48:	f04f 0c00 	mov.w	ip, #0
 8011e4c:	681a      	ldr	r2, [r3, #0]
 8011e4e:	fa02 f209 	lsl.w	r2, r2, r9
 8011e52:	ea42 020c 	orr.w	r2, r2, ip
 8011e56:	f84a 2b04 	str.w	r2, [sl], #4
 8011e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e5e:	4298      	cmp	r0, r3
 8011e60:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011e64:	d8f2      	bhi.n	8011e4c <__lshift+0x70>
 8011e66:	1b03      	subs	r3, r0, r4
 8011e68:	3b15      	subs	r3, #21
 8011e6a:	f023 0303 	bic.w	r3, r3, #3
 8011e6e:	3304      	adds	r3, #4
 8011e70:	f104 0215 	add.w	r2, r4, #21
 8011e74:	4290      	cmp	r0, r2
 8011e76:	bf38      	it	cc
 8011e78:	2304      	movcc	r3, #4
 8011e7a:	f841 c003 	str.w	ip, [r1, r3]
 8011e7e:	f1bc 0f00 	cmp.w	ip, #0
 8011e82:	d001      	beq.n	8011e88 <__lshift+0xac>
 8011e84:	f108 0602 	add.w	r6, r8, #2
 8011e88:	3e01      	subs	r6, #1
 8011e8a:	4638      	mov	r0, r7
 8011e8c:	612e      	str	r6, [r5, #16]
 8011e8e:	4621      	mov	r1, r4
 8011e90:	f7ff fdd2 	bl	8011a38 <_Bfree>
 8011e94:	4628      	mov	r0, r5
 8011e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8011e9e:	3301      	adds	r3, #1
 8011ea0:	e7c1      	b.n	8011e26 <__lshift+0x4a>
 8011ea2:	3904      	subs	r1, #4
 8011ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ea8:	f841 2f04 	str.w	r2, [r1, #4]!
 8011eac:	4298      	cmp	r0, r3
 8011eae:	d8f9      	bhi.n	8011ea4 <__lshift+0xc8>
 8011eb0:	e7ea      	b.n	8011e88 <__lshift+0xac>
 8011eb2:	bf00      	nop
 8011eb4:	08013e1b 	.word	0x08013e1b
 8011eb8:	08013e8c 	.word	0x08013e8c

08011ebc <__mcmp>:
 8011ebc:	b530      	push	{r4, r5, lr}
 8011ebe:	6902      	ldr	r2, [r0, #16]
 8011ec0:	690c      	ldr	r4, [r1, #16]
 8011ec2:	1b12      	subs	r2, r2, r4
 8011ec4:	d10e      	bne.n	8011ee4 <__mcmp+0x28>
 8011ec6:	f100 0314 	add.w	r3, r0, #20
 8011eca:	3114      	adds	r1, #20
 8011ecc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011ed0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011ed4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011ed8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011edc:	42a5      	cmp	r5, r4
 8011ede:	d003      	beq.n	8011ee8 <__mcmp+0x2c>
 8011ee0:	d305      	bcc.n	8011eee <__mcmp+0x32>
 8011ee2:	2201      	movs	r2, #1
 8011ee4:	4610      	mov	r0, r2
 8011ee6:	bd30      	pop	{r4, r5, pc}
 8011ee8:	4283      	cmp	r3, r0
 8011eea:	d3f3      	bcc.n	8011ed4 <__mcmp+0x18>
 8011eec:	e7fa      	b.n	8011ee4 <__mcmp+0x28>
 8011eee:	f04f 32ff 	mov.w	r2, #4294967295
 8011ef2:	e7f7      	b.n	8011ee4 <__mcmp+0x28>

08011ef4 <__mdiff>:
 8011ef4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ef8:	460c      	mov	r4, r1
 8011efa:	4606      	mov	r6, r0
 8011efc:	4611      	mov	r1, r2
 8011efe:	4620      	mov	r0, r4
 8011f00:	4690      	mov	r8, r2
 8011f02:	f7ff ffdb 	bl	8011ebc <__mcmp>
 8011f06:	1e05      	subs	r5, r0, #0
 8011f08:	d110      	bne.n	8011f2c <__mdiff+0x38>
 8011f0a:	4629      	mov	r1, r5
 8011f0c:	4630      	mov	r0, r6
 8011f0e:	f7ff fd53 	bl	80119b8 <_Balloc>
 8011f12:	b930      	cbnz	r0, 8011f22 <__mdiff+0x2e>
 8011f14:	4b3a      	ldr	r3, [pc, #232]	; (8012000 <__mdiff+0x10c>)
 8011f16:	4602      	mov	r2, r0
 8011f18:	f240 2132 	movw	r1, #562	; 0x232
 8011f1c:	4839      	ldr	r0, [pc, #228]	; (8012004 <__mdiff+0x110>)
 8011f1e:	f000 fc45 	bl	80127ac <__assert_func>
 8011f22:	2301      	movs	r3, #1
 8011f24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011f28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f2c:	bfa4      	itt	ge
 8011f2e:	4643      	movge	r3, r8
 8011f30:	46a0      	movge	r8, r4
 8011f32:	4630      	mov	r0, r6
 8011f34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011f38:	bfa6      	itte	ge
 8011f3a:	461c      	movge	r4, r3
 8011f3c:	2500      	movge	r5, #0
 8011f3e:	2501      	movlt	r5, #1
 8011f40:	f7ff fd3a 	bl	80119b8 <_Balloc>
 8011f44:	b920      	cbnz	r0, 8011f50 <__mdiff+0x5c>
 8011f46:	4b2e      	ldr	r3, [pc, #184]	; (8012000 <__mdiff+0x10c>)
 8011f48:	4602      	mov	r2, r0
 8011f4a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011f4e:	e7e5      	b.n	8011f1c <__mdiff+0x28>
 8011f50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011f54:	6926      	ldr	r6, [r4, #16]
 8011f56:	60c5      	str	r5, [r0, #12]
 8011f58:	f104 0914 	add.w	r9, r4, #20
 8011f5c:	f108 0514 	add.w	r5, r8, #20
 8011f60:	f100 0e14 	add.w	lr, r0, #20
 8011f64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011f68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011f6c:	f108 0210 	add.w	r2, r8, #16
 8011f70:	46f2      	mov	sl, lr
 8011f72:	2100      	movs	r1, #0
 8011f74:	f859 3b04 	ldr.w	r3, [r9], #4
 8011f78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011f7c:	fa1f f883 	uxth.w	r8, r3
 8011f80:	fa11 f18b 	uxtah	r1, r1, fp
 8011f84:	0c1b      	lsrs	r3, r3, #16
 8011f86:	eba1 0808 	sub.w	r8, r1, r8
 8011f8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011f8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011f92:	fa1f f888 	uxth.w	r8, r8
 8011f96:	1419      	asrs	r1, r3, #16
 8011f98:	454e      	cmp	r6, r9
 8011f9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011f9e:	f84a 3b04 	str.w	r3, [sl], #4
 8011fa2:	d8e7      	bhi.n	8011f74 <__mdiff+0x80>
 8011fa4:	1b33      	subs	r3, r6, r4
 8011fa6:	3b15      	subs	r3, #21
 8011fa8:	f023 0303 	bic.w	r3, r3, #3
 8011fac:	3304      	adds	r3, #4
 8011fae:	3415      	adds	r4, #21
 8011fb0:	42a6      	cmp	r6, r4
 8011fb2:	bf38      	it	cc
 8011fb4:	2304      	movcc	r3, #4
 8011fb6:	441d      	add	r5, r3
 8011fb8:	4473      	add	r3, lr
 8011fba:	469e      	mov	lr, r3
 8011fbc:	462e      	mov	r6, r5
 8011fbe:	4566      	cmp	r6, ip
 8011fc0:	d30e      	bcc.n	8011fe0 <__mdiff+0xec>
 8011fc2:	f10c 0203 	add.w	r2, ip, #3
 8011fc6:	1b52      	subs	r2, r2, r5
 8011fc8:	f022 0203 	bic.w	r2, r2, #3
 8011fcc:	3d03      	subs	r5, #3
 8011fce:	45ac      	cmp	ip, r5
 8011fd0:	bf38      	it	cc
 8011fd2:	2200      	movcc	r2, #0
 8011fd4:	441a      	add	r2, r3
 8011fd6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011fda:	b17b      	cbz	r3, 8011ffc <__mdiff+0x108>
 8011fdc:	6107      	str	r7, [r0, #16]
 8011fde:	e7a3      	b.n	8011f28 <__mdiff+0x34>
 8011fe0:	f856 8b04 	ldr.w	r8, [r6], #4
 8011fe4:	fa11 f288 	uxtah	r2, r1, r8
 8011fe8:	1414      	asrs	r4, r2, #16
 8011fea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011fee:	b292      	uxth	r2, r2
 8011ff0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011ff4:	f84e 2b04 	str.w	r2, [lr], #4
 8011ff8:	1421      	asrs	r1, r4, #16
 8011ffa:	e7e0      	b.n	8011fbe <__mdiff+0xca>
 8011ffc:	3f01      	subs	r7, #1
 8011ffe:	e7ea      	b.n	8011fd6 <__mdiff+0xe2>
 8012000:	08013e1b 	.word	0x08013e1b
 8012004:	08013e8c 	.word	0x08013e8c

08012008 <__d2b>:
 8012008:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801200c:	4689      	mov	r9, r1
 801200e:	2101      	movs	r1, #1
 8012010:	ec57 6b10 	vmov	r6, r7, d0
 8012014:	4690      	mov	r8, r2
 8012016:	f7ff fccf 	bl	80119b8 <_Balloc>
 801201a:	4604      	mov	r4, r0
 801201c:	b930      	cbnz	r0, 801202c <__d2b+0x24>
 801201e:	4602      	mov	r2, r0
 8012020:	4b25      	ldr	r3, [pc, #148]	; (80120b8 <__d2b+0xb0>)
 8012022:	4826      	ldr	r0, [pc, #152]	; (80120bc <__d2b+0xb4>)
 8012024:	f240 310a 	movw	r1, #778	; 0x30a
 8012028:	f000 fbc0 	bl	80127ac <__assert_func>
 801202c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012030:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012034:	bb35      	cbnz	r5, 8012084 <__d2b+0x7c>
 8012036:	2e00      	cmp	r6, #0
 8012038:	9301      	str	r3, [sp, #4]
 801203a:	d028      	beq.n	801208e <__d2b+0x86>
 801203c:	4668      	mov	r0, sp
 801203e:	9600      	str	r6, [sp, #0]
 8012040:	f7ff fd82 	bl	8011b48 <__lo0bits>
 8012044:	9900      	ldr	r1, [sp, #0]
 8012046:	b300      	cbz	r0, 801208a <__d2b+0x82>
 8012048:	9a01      	ldr	r2, [sp, #4]
 801204a:	f1c0 0320 	rsb	r3, r0, #32
 801204e:	fa02 f303 	lsl.w	r3, r2, r3
 8012052:	430b      	orrs	r3, r1
 8012054:	40c2      	lsrs	r2, r0
 8012056:	6163      	str	r3, [r4, #20]
 8012058:	9201      	str	r2, [sp, #4]
 801205a:	9b01      	ldr	r3, [sp, #4]
 801205c:	61a3      	str	r3, [r4, #24]
 801205e:	2b00      	cmp	r3, #0
 8012060:	bf14      	ite	ne
 8012062:	2202      	movne	r2, #2
 8012064:	2201      	moveq	r2, #1
 8012066:	6122      	str	r2, [r4, #16]
 8012068:	b1d5      	cbz	r5, 80120a0 <__d2b+0x98>
 801206a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801206e:	4405      	add	r5, r0
 8012070:	f8c9 5000 	str.w	r5, [r9]
 8012074:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012078:	f8c8 0000 	str.w	r0, [r8]
 801207c:	4620      	mov	r0, r4
 801207e:	b003      	add	sp, #12
 8012080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012084:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012088:	e7d5      	b.n	8012036 <__d2b+0x2e>
 801208a:	6161      	str	r1, [r4, #20]
 801208c:	e7e5      	b.n	801205a <__d2b+0x52>
 801208e:	a801      	add	r0, sp, #4
 8012090:	f7ff fd5a 	bl	8011b48 <__lo0bits>
 8012094:	9b01      	ldr	r3, [sp, #4]
 8012096:	6163      	str	r3, [r4, #20]
 8012098:	2201      	movs	r2, #1
 801209a:	6122      	str	r2, [r4, #16]
 801209c:	3020      	adds	r0, #32
 801209e:	e7e3      	b.n	8012068 <__d2b+0x60>
 80120a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80120a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80120a8:	f8c9 0000 	str.w	r0, [r9]
 80120ac:	6918      	ldr	r0, [r3, #16]
 80120ae:	f7ff fd2b 	bl	8011b08 <__hi0bits>
 80120b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80120b6:	e7df      	b.n	8012078 <__d2b+0x70>
 80120b8:	08013e1b 	.word	0x08013e1b
 80120bc:	08013e8c 	.word	0x08013e8c

080120c0 <_calloc_r>:
 80120c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80120c2:	fba1 2402 	umull	r2, r4, r1, r2
 80120c6:	b94c      	cbnz	r4, 80120dc <_calloc_r+0x1c>
 80120c8:	4611      	mov	r1, r2
 80120ca:	9201      	str	r2, [sp, #4]
 80120cc:	f000 f87a 	bl	80121c4 <_malloc_r>
 80120d0:	9a01      	ldr	r2, [sp, #4]
 80120d2:	4605      	mov	r5, r0
 80120d4:	b930      	cbnz	r0, 80120e4 <_calloc_r+0x24>
 80120d6:	4628      	mov	r0, r5
 80120d8:	b003      	add	sp, #12
 80120da:	bd30      	pop	{r4, r5, pc}
 80120dc:	220c      	movs	r2, #12
 80120de:	6002      	str	r2, [r0, #0]
 80120e0:	2500      	movs	r5, #0
 80120e2:	e7f8      	b.n	80120d6 <_calloc_r+0x16>
 80120e4:	4621      	mov	r1, r4
 80120e6:	f7fe f851 	bl	801018c <memset>
 80120ea:	e7f4      	b.n	80120d6 <_calloc_r+0x16>

080120ec <_free_r>:
 80120ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80120ee:	2900      	cmp	r1, #0
 80120f0:	d044      	beq.n	801217c <_free_r+0x90>
 80120f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120f6:	9001      	str	r0, [sp, #4]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	f1a1 0404 	sub.w	r4, r1, #4
 80120fe:	bfb8      	it	lt
 8012100:	18e4      	addlt	r4, r4, r3
 8012102:	f000 fcdf 	bl	8012ac4 <__malloc_lock>
 8012106:	4a1e      	ldr	r2, [pc, #120]	; (8012180 <_free_r+0x94>)
 8012108:	9801      	ldr	r0, [sp, #4]
 801210a:	6813      	ldr	r3, [r2, #0]
 801210c:	b933      	cbnz	r3, 801211c <_free_r+0x30>
 801210e:	6063      	str	r3, [r4, #4]
 8012110:	6014      	str	r4, [r2, #0]
 8012112:	b003      	add	sp, #12
 8012114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012118:	f000 bcda 	b.w	8012ad0 <__malloc_unlock>
 801211c:	42a3      	cmp	r3, r4
 801211e:	d908      	bls.n	8012132 <_free_r+0x46>
 8012120:	6825      	ldr	r5, [r4, #0]
 8012122:	1961      	adds	r1, r4, r5
 8012124:	428b      	cmp	r3, r1
 8012126:	bf01      	itttt	eq
 8012128:	6819      	ldreq	r1, [r3, #0]
 801212a:	685b      	ldreq	r3, [r3, #4]
 801212c:	1949      	addeq	r1, r1, r5
 801212e:	6021      	streq	r1, [r4, #0]
 8012130:	e7ed      	b.n	801210e <_free_r+0x22>
 8012132:	461a      	mov	r2, r3
 8012134:	685b      	ldr	r3, [r3, #4]
 8012136:	b10b      	cbz	r3, 801213c <_free_r+0x50>
 8012138:	42a3      	cmp	r3, r4
 801213a:	d9fa      	bls.n	8012132 <_free_r+0x46>
 801213c:	6811      	ldr	r1, [r2, #0]
 801213e:	1855      	adds	r5, r2, r1
 8012140:	42a5      	cmp	r5, r4
 8012142:	d10b      	bne.n	801215c <_free_r+0x70>
 8012144:	6824      	ldr	r4, [r4, #0]
 8012146:	4421      	add	r1, r4
 8012148:	1854      	adds	r4, r2, r1
 801214a:	42a3      	cmp	r3, r4
 801214c:	6011      	str	r1, [r2, #0]
 801214e:	d1e0      	bne.n	8012112 <_free_r+0x26>
 8012150:	681c      	ldr	r4, [r3, #0]
 8012152:	685b      	ldr	r3, [r3, #4]
 8012154:	6053      	str	r3, [r2, #4]
 8012156:	4421      	add	r1, r4
 8012158:	6011      	str	r1, [r2, #0]
 801215a:	e7da      	b.n	8012112 <_free_r+0x26>
 801215c:	d902      	bls.n	8012164 <_free_r+0x78>
 801215e:	230c      	movs	r3, #12
 8012160:	6003      	str	r3, [r0, #0]
 8012162:	e7d6      	b.n	8012112 <_free_r+0x26>
 8012164:	6825      	ldr	r5, [r4, #0]
 8012166:	1961      	adds	r1, r4, r5
 8012168:	428b      	cmp	r3, r1
 801216a:	bf04      	itt	eq
 801216c:	6819      	ldreq	r1, [r3, #0]
 801216e:	685b      	ldreq	r3, [r3, #4]
 8012170:	6063      	str	r3, [r4, #4]
 8012172:	bf04      	itt	eq
 8012174:	1949      	addeq	r1, r1, r5
 8012176:	6021      	streq	r1, [r4, #0]
 8012178:	6054      	str	r4, [r2, #4]
 801217a:	e7ca      	b.n	8012112 <_free_r+0x26>
 801217c:	b003      	add	sp, #12
 801217e:	bd30      	pop	{r4, r5, pc}
 8012180:	200059c8 	.word	0x200059c8

08012184 <sbrk_aligned>:
 8012184:	b570      	push	{r4, r5, r6, lr}
 8012186:	4e0e      	ldr	r6, [pc, #56]	; (80121c0 <sbrk_aligned+0x3c>)
 8012188:	460c      	mov	r4, r1
 801218a:	6831      	ldr	r1, [r6, #0]
 801218c:	4605      	mov	r5, r0
 801218e:	b911      	cbnz	r1, 8012196 <sbrk_aligned+0x12>
 8012190:	f000 f9e6 	bl	8012560 <_sbrk_r>
 8012194:	6030      	str	r0, [r6, #0]
 8012196:	4621      	mov	r1, r4
 8012198:	4628      	mov	r0, r5
 801219a:	f000 f9e1 	bl	8012560 <_sbrk_r>
 801219e:	1c43      	adds	r3, r0, #1
 80121a0:	d00a      	beq.n	80121b8 <sbrk_aligned+0x34>
 80121a2:	1cc4      	adds	r4, r0, #3
 80121a4:	f024 0403 	bic.w	r4, r4, #3
 80121a8:	42a0      	cmp	r0, r4
 80121aa:	d007      	beq.n	80121bc <sbrk_aligned+0x38>
 80121ac:	1a21      	subs	r1, r4, r0
 80121ae:	4628      	mov	r0, r5
 80121b0:	f000 f9d6 	bl	8012560 <_sbrk_r>
 80121b4:	3001      	adds	r0, #1
 80121b6:	d101      	bne.n	80121bc <sbrk_aligned+0x38>
 80121b8:	f04f 34ff 	mov.w	r4, #4294967295
 80121bc:	4620      	mov	r0, r4
 80121be:	bd70      	pop	{r4, r5, r6, pc}
 80121c0:	200059cc 	.word	0x200059cc

080121c4 <_malloc_r>:
 80121c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121c8:	1ccd      	adds	r5, r1, #3
 80121ca:	f025 0503 	bic.w	r5, r5, #3
 80121ce:	3508      	adds	r5, #8
 80121d0:	2d0c      	cmp	r5, #12
 80121d2:	bf38      	it	cc
 80121d4:	250c      	movcc	r5, #12
 80121d6:	2d00      	cmp	r5, #0
 80121d8:	4607      	mov	r7, r0
 80121da:	db01      	blt.n	80121e0 <_malloc_r+0x1c>
 80121dc:	42a9      	cmp	r1, r5
 80121de:	d905      	bls.n	80121ec <_malloc_r+0x28>
 80121e0:	230c      	movs	r3, #12
 80121e2:	603b      	str	r3, [r7, #0]
 80121e4:	2600      	movs	r6, #0
 80121e6:	4630      	mov	r0, r6
 80121e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121ec:	4e2e      	ldr	r6, [pc, #184]	; (80122a8 <_malloc_r+0xe4>)
 80121ee:	f000 fc69 	bl	8012ac4 <__malloc_lock>
 80121f2:	6833      	ldr	r3, [r6, #0]
 80121f4:	461c      	mov	r4, r3
 80121f6:	bb34      	cbnz	r4, 8012246 <_malloc_r+0x82>
 80121f8:	4629      	mov	r1, r5
 80121fa:	4638      	mov	r0, r7
 80121fc:	f7ff ffc2 	bl	8012184 <sbrk_aligned>
 8012200:	1c43      	adds	r3, r0, #1
 8012202:	4604      	mov	r4, r0
 8012204:	d14d      	bne.n	80122a2 <_malloc_r+0xde>
 8012206:	6834      	ldr	r4, [r6, #0]
 8012208:	4626      	mov	r6, r4
 801220a:	2e00      	cmp	r6, #0
 801220c:	d140      	bne.n	8012290 <_malloc_r+0xcc>
 801220e:	6823      	ldr	r3, [r4, #0]
 8012210:	4631      	mov	r1, r6
 8012212:	4638      	mov	r0, r7
 8012214:	eb04 0803 	add.w	r8, r4, r3
 8012218:	f000 f9a2 	bl	8012560 <_sbrk_r>
 801221c:	4580      	cmp	r8, r0
 801221e:	d13a      	bne.n	8012296 <_malloc_r+0xd2>
 8012220:	6821      	ldr	r1, [r4, #0]
 8012222:	3503      	adds	r5, #3
 8012224:	1a6d      	subs	r5, r5, r1
 8012226:	f025 0503 	bic.w	r5, r5, #3
 801222a:	3508      	adds	r5, #8
 801222c:	2d0c      	cmp	r5, #12
 801222e:	bf38      	it	cc
 8012230:	250c      	movcc	r5, #12
 8012232:	4629      	mov	r1, r5
 8012234:	4638      	mov	r0, r7
 8012236:	f7ff ffa5 	bl	8012184 <sbrk_aligned>
 801223a:	3001      	adds	r0, #1
 801223c:	d02b      	beq.n	8012296 <_malloc_r+0xd2>
 801223e:	6823      	ldr	r3, [r4, #0]
 8012240:	442b      	add	r3, r5
 8012242:	6023      	str	r3, [r4, #0]
 8012244:	e00e      	b.n	8012264 <_malloc_r+0xa0>
 8012246:	6822      	ldr	r2, [r4, #0]
 8012248:	1b52      	subs	r2, r2, r5
 801224a:	d41e      	bmi.n	801228a <_malloc_r+0xc6>
 801224c:	2a0b      	cmp	r2, #11
 801224e:	d916      	bls.n	801227e <_malloc_r+0xba>
 8012250:	1961      	adds	r1, r4, r5
 8012252:	42a3      	cmp	r3, r4
 8012254:	6025      	str	r5, [r4, #0]
 8012256:	bf18      	it	ne
 8012258:	6059      	strne	r1, [r3, #4]
 801225a:	6863      	ldr	r3, [r4, #4]
 801225c:	bf08      	it	eq
 801225e:	6031      	streq	r1, [r6, #0]
 8012260:	5162      	str	r2, [r4, r5]
 8012262:	604b      	str	r3, [r1, #4]
 8012264:	4638      	mov	r0, r7
 8012266:	f104 060b 	add.w	r6, r4, #11
 801226a:	f000 fc31 	bl	8012ad0 <__malloc_unlock>
 801226e:	f026 0607 	bic.w	r6, r6, #7
 8012272:	1d23      	adds	r3, r4, #4
 8012274:	1af2      	subs	r2, r6, r3
 8012276:	d0b6      	beq.n	80121e6 <_malloc_r+0x22>
 8012278:	1b9b      	subs	r3, r3, r6
 801227a:	50a3      	str	r3, [r4, r2]
 801227c:	e7b3      	b.n	80121e6 <_malloc_r+0x22>
 801227e:	6862      	ldr	r2, [r4, #4]
 8012280:	42a3      	cmp	r3, r4
 8012282:	bf0c      	ite	eq
 8012284:	6032      	streq	r2, [r6, #0]
 8012286:	605a      	strne	r2, [r3, #4]
 8012288:	e7ec      	b.n	8012264 <_malloc_r+0xa0>
 801228a:	4623      	mov	r3, r4
 801228c:	6864      	ldr	r4, [r4, #4]
 801228e:	e7b2      	b.n	80121f6 <_malloc_r+0x32>
 8012290:	4634      	mov	r4, r6
 8012292:	6876      	ldr	r6, [r6, #4]
 8012294:	e7b9      	b.n	801220a <_malloc_r+0x46>
 8012296:	230c      	movs	r3, #12
 8012298:	603b      	str	r3, [r7, #0]
 801229a:	4638      	mov	r0, r7
 801229c:	f000 fc18 	bl	8012ad0 <__malloc_unlock>
 80122a0:	e7a1      	b.n	80121e6 <_malloc_r+0x22>
 80122a2:	6025      	str	r5, [r4, #0]
 80122a4:	e7de      	b.n	8012264 <_malloc_r+0xa0>
 80122a6:	bf00      	nop
 80122a8:	200059c8 	.word	0x200059c8

080122ac <__sfputc_r>:
 80122ac:	6893      	ldr	r3, [r2, #8]
 80122ae:	3b01      	subs	r3, #1
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	b410      	push	{r4}
 80122b4:	6093      	str	r3, [r2, #8]
 80122b6:	da08      	bge.n	80122ca <__sfputc_r+0x1e>
 80122b8:	6994      	ldr	r4, [r2, #24]
 80122ba:	42a3      	cmp	r3, r4
 80122bc:	db01      	blt.n	80122c2 <__sfputc_r+0x16>
 80122be:	290a      	cmp	r1, #10
 80122c0:	d103      	bne.n	80122ca <__sfputc_r+0x1e>
 80122c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122c6:	f000 b99f 	b.w	8012608 <__swbuf_r>
 80122ca:	6813      	ldr	r3, [r2, #0]
 80122cc:	1c58      	adds	r0, r3, #1
 80122ce:	6010      	str	r0, [r2, #0]
 80122d0:	7019      	strb	r1, [r3, #0]
 80122d2:	4608      	mov	r0, r1
 80122d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122d8:	4770      	bx	lr

080122da <__sfputs_r>:
 80122da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122dc:	4606      	mov	r6, r0
 80122de:	460f      	mov	r7, r1
 80122e0:	4614      	mov	r4, r2
 80122e2:	18d5      	adds	r5, r2, r3
 80122e4:	42ac      	cmp	r4, r5
 80122e6:	d101      	bne.n	80122ec <__sfputs_r+0x12>
 80122e8:	2000      	movs	r0, #0
 80122ea:	e007      	b.n	80122fc <__sfputs_r+0x22>
 80122ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122f0:	463a      	mov	r2, r7
 80122f2:	4630      	mov	r0, r6
 80122f4:	f7ff ffda 	bl	80122ac <__sfputc_r>
 80122f8:	1c43      	adds	r3, r0, #1
 80122fa:	d1f3      	bne.n	80122e4 <__sfputs_r+0xa>
 80122fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012300 <_vfiprintf_r>:
 8012300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012304:	460d      	mov	r5, r1
 8012306:	b09d      	sub	sp, #116	; 0x74
 8012308:	4614      	mov	r4, r2
 801230a:	4698      	mov	r8, r3
 801230c:	4606      	mov	r6, r0
 801230e:	b118      	cbz	r0, 8012318 <_vfiprintf_r+0x18>
 8012310:	6983      	ldr	r3, [r0, #24]
 8012312:	b90b      	cbnz	r3, 8012318 <_vfiprintf_r+0x18>
 8012314:	f7ff faa2 	bl	801185c <__sinit>
 8012318:	4b89      	ldr	r3, [pc, #548]	; (8012540 <_vfiprintf_r+0x240>)
 801231a:	429d      	cmp	r5, r3
 801231c:	d11b      	bne.n	8012356 <_vfiprintf_r+0x56>
 801231e:	6875      	ldr	r5, [r6, #4]
 8012320:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012322:	07d9      	lsls	r1, r3, #31
 8012324:	d405      	bmi.n	8012332 <_vfiprintf_r+0x32>
 8012326:	89ab      	ldrh	r3, [r5, #12]
 8012328:	059a      	lsls	r2, r3, #22
 801232a:	d402      	bmi.n	8012332 <_vfiprintf_r+0x32>
 801232c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801232e:	f7ff fb38 	bl	80119a2 <__retarget_lock_acquire_recursive>
 8012332:	89ab      	ldrh	r3, [r5, #12]
 8012334:	071b      	lsls	r3, r3, #28
 8012336:	d501      	bpl.n	801233c <_vfiprintf_r+0x3c>
 8012338:	692b      	ldr	r3, [r5, #16]
 801233a:	b9eb      	cbnz	r3, 8012378 <_vfiprintf_r+0x78>
 801233c:	4629      	mov	r1, r5
 801233e:	4630      	mov	r0, r6
 8012340:	f000 f9c6 	bl	80126d0 <__swsetup_r>
 8012344:	b1c0      	cbz	r0, 8012378 <_vfiprintf_r+0x78>
 8012346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012348:	07dc      	lsls	r4, r3, #31
 801234a:	d50e      	bpl.n	801236a <_vfiprintf_r+0x6a>
 801234c:	f04f 30ff 	mov.w	r0, #4294967295
 8012350:	b01d      	add	sp, #116	; 0x74
 8012352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012356:	4b7b      	ldr	r3, [pc, #492]	; (8012544 <_vfiprintf_r+0x244>)
 8012358:	429d      	cmp	r5, r3
 801235a:	d101      	bne.n	8012360 <_vfiprintf_r+0x60>
 801235c:	68b5      	ldr	r5, [r6, #8]
 801235e:	e7df      	b.n	8012320 <_vfiprintf_r+0x20>
 8012360:	4b79      	ldr	r3, [pc, #484]	; (8012548 <_vfiprintf_r+0x248>)
 8012362:	429d      	cmp	r5, r3
 8012364:	bf08      	it	eq
 8012366:	68f5      	ldreq	r5, [r6, #12]
 8012368:	e7da      	b.n	8012320 <_vfiprintf_r+0x20>
 801236a:	89ab      	ldrh	r3, [r5, #12]
 801236c:	0598      	lsls	r0, r3, #22
 801236e:	d4ed      	bmi.n	801234c <_vfiprintf_r+0x4c>
 8012370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012372:	f7ff fb17 	bl	80119a4 <__retarget_lock_release_recursive>
 8012376:	e7e9      	b.n	801234c <_vfiprintf_r+0x4c>
 8012378:	2300      	movs	r3, #0
 801237a:	9309      	str	r3, [sp, #36]	; 0x24
 801237c:	2320      	movs	r3, #32
 801237e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012382:	f8cd 800c 	str.w	r8, [sp, #12]
 8012386:	2330      	movs	r3, #48	; 0x30
 8012388:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801254c <_vfiprintf_r+0x24c>
 801238c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012390:	f04f 0901 	mov.w	r9, #1
 8012394:	4623      	mov	r3, r4
 8012396:	469a      	mov	sl, r3
 8012398:	f813 2b01 	ldrb.w	r2, [r3], #1
 801239c:	b10a      	cbz	r2, 80123a2 <_vfiprintf_r+0xa2>
 801239e:	2a25      	cmp	r2, #37	; 0x25
 80123a0:	d1f9      	bne.n	8012396 <_vfiprintf_r+0x96>
 80123a2:	ebba 0b04 	subs.w	fp, sl, r4
 80123a6:	d00b      	beq.n	80123c0 <_vfiprintf_r+0xc0>
 80123a8:	465b      	mov	r3, fp
 80123aa:	4622      	mov	r2, r4
 80123ac:	4629      	mov	r1, r5
 80123ae:	4630      	mov	r0, r6
 80123b0:	f7ff ff93 	bl	80122da <__sfputs_r>
 80123b4:	3001      	adds	r0, #1
 80123b6:	f000 80aa 	beq.w	801250e <_vfiprintf_r+0x20e>
 80123ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80123bc:	445a      	add	r2, fp
 80123be:	9209      	str	r2, [sp, #36]	; 0x24
 80123c0:	f89a 3000 	ldrb.w	r3, [sl]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	f000 80a2 	beq.w	801250e <_vfiprintf_r+0x20e>
 80123ca:	2300      	movs	r3, #0
 80123cc:	f04f 32ff 	mov.w	r2, #4294967295
 80123d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123d4:	f10a 0a01 	add.w	sl, sl, #1
 80123d8:	9304      	str	r3, [sp, #16]
 80123da:	9307      	str	r3, [sp, #28]
 80123dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80123e0:	931a      	str	r3, [sp, #104]	; 0x68
 80123e2:	4654      	mov	r4, sl
 80123e4:	2205      	movs	r2, #5
 80123e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123ea:	4858      	ldr	r0, [pc, #352]	; (801254c <_vfiprintf_r+0x24c>)
 80123ec:	f7ed ff18 	bl	8000220 <memchr>
 80123f0:	9a04      	ldr	r2, [sp, #16]
 80123f2:	b9d8      	cbnz	r0, 801242c <_vfiprintf_r+0x12c>
 80123f4:	06d1      	lsls	r1, r2, #27
 80123f6:	bf44      	itt	mi
 80123f8:	2320      	movmi	r3, #32
 80123fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80123fe:	0713      	lsls	r3, r2, #28
 8012400:	bf44      	itt	mi
 8012402:	232b      	movmi	r3, #43	; 0x2b
 8012404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012408:	f89a 3000 	ldrb.w	r3, [sl]
 801240c:	2b2a      	cmp	r3, #42	; 0x2a
 801240e:	d015      	beq.n	801243c <_vfiprintf_r+0x13c>
 8012410:	9a07      	ldr	r2, [sp, #28]
 8012412:	4654      	mov	r4, sl
 8012414:	2000      	movs	r0, #0
 8012416:	f04f 0c0a 	mov.w	ip, #10
 801241a:	4621      	mov	r1, r4
 801241c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012420:	3b30      	subs	r3, #48	; 0x30
 8012422:	2b09      	cmp	r3, #9
 8012424:	d94e      	bls.n	80124c4 <_vfiprintf_r+0x1c4>
 8012426:	b1b0      	cbz	r0, 8012456 <_vfiprintf_r+0x156>
 8012428:	9207      	str	r2, [sp, #28]
 801242a:	e014      	b.n	8012456 <_vfiprintf_r+0x156>
 801242c:	eba0 0308 	sub.w	r3, r0, r8
 8012430:	fa09 f303 	lsl.w	r3, r9, r3
 8012434:	4313      	orrs	r3, r2
 8012436:	9304      	str	r3, [sp, #16]
 8012438:	46a2      	mov	sl, r4
 801243a:	e7d2      	b.n	80123e2 <_vfiprintf_r+0xe2>
 801243c:	9b03      	ldr	r3, [sp, #12]
 801243e:	1d19      	adds	r1, r3, #4
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	9103      	str	r1, [sp, #12]
 8012444:	2b00      	cmp	r3, #0
 8012446:	bfbb      	ittet	lt
 8012448:	425b      	neglt	r3, r3
 801244a:	f042 0202 	orrlt.w	r2, r2, #2
 801244e:	9307      	strge	r3, [sp, #28]
 8012450:	9307      	strlt	r3, [sp, #28]
 8012452:	bfb8      	it	lt
 8012454:	9204      	strlt	r2, [sp, #16]
 8012456:	7823      	ldrb	r3, [r4, #0]
 8012458:	2b2e      	cmp	r3, #46	; 0x2e
 801245a:	d10c      	bne.n	8012476 <_vfiprintf_r+0x176>
 801245c:	7863      	ldrb	r3, [r4, #1]
 801245e:	2b2a      	cmp	r3, #42	; 0x2a
 8012460:	d135      	bne.n	80124ce <_vfiprintf_r+0x1ce>
 8012462:	9b03      	ldr	r3, [sp, #12]
 8012464:	1d1a      	adds	r2, r3, #4
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	9203      	str	r2, [sp, #12]
 801246a:	2b00      	cmp	r3, #0
 801246c:	bfb8      	it	lt
 801246e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012472:	3402      	adds	r4, #2
 8012474:	9305      	str	r3, [sp, #20]
 8012476:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801255c <_vfiprintf_r+0x25c>
 801247a:	7821      	ldrb	r1, [r4, #0]
 801247c:	2203      	movs	r2, #3
 801247e:	4650      	mov	r0, sl
 8012480:	f7ed fece 	bl	8000220 <memchr>
 8012484:	b140      	cbz	r0, 8012498 <_vfiprintf_r+0x198>
 8012486:	2340      	movs	r3, #64	; 0x40
 8012488:	eba0 000a 	sub.w	r0, r0, sl
 801248c:	fa03 f000 	lsl.w	r0, r3, r0
 8012490:	9b04      	ldr	r3, [sp, #16]
 8012492:	4303      	orrs	r3, r0
 8012494:	3401      	adds	r4, #1
 8012496:	9304      	str	r3, [sp, #16]
 8012498:	f814 1b01 	ldrb.w	r1, [r4], #1
 801249c:	482c      	ldr	r0, [pc, #176]	; (8012550 <_vfiprintf_r+0x250>)
 801249e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80124a2:	2206      	movs	r2, #6
 80124a4:	f7ed febc 	bl	8000220 <memchr>
 80124a8:	2800      	cmp	r0, #0
 80124aa:	d03f      	beq.n	801252c <_vfiprintf_r+0x22c>
 80124ac:	4b29      	ldr	r3, [pc, #164]	; (8012554 <_vfiprintf_r+0x254>)
 80124ae:	bb1b      	cbnz	r3, 80124f8 <_vfiprintf_r+0x1f8>
 80124b0:	9b03      	ldr	r3, [sp, #12]
 80124b2:	3307      	adds	r3, #7
 80124b4:	f023 0307 	bic.w	r3, r3, #7
 80124b8:	3308      	adds	r3, #8
 80124ba:	9303      	str	r3, [sp, #12]
 80124bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124be:	443b      	add	r3, r7
 80124c0:	9309      	str	r3, [sp, #36]	; 0x24
 80124c2:	e767      	b.n	8012394 <_vfiprintf_r+0x94>
 80124c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80124c8:	460c      	mov	r4, r1
 80124ca:	2001      	movs	r0, #1
 80124cc:	e7a5      	b.n	801241a <_vfiprintf_r+0x11a>
 80124ce:	2300      	movs	r3, #0
 80124d0:	3401      	adds	r4, #1
 80124d2:	9305      	str	r3, [sp, #20]
 80124d4:	4619      	mov	r1, r3
 80124d6:	f04f 0c0a 	mov.w	ip, #10
 80124da:	4620      	mov	r0, r4
 80124dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80124e0:	3a30      	subs	r2, #48	; 0x30
 80124e2:	2a09      	cmp	r2, #9
 80124e4:	d903      	bls.n	80124ee <_vfiprintf_r+0x1ee>
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d0c5      	beq.n	8012476 <_vfiprintf_r+0x176>
 80124ea:	9105      	str	r1, [sp, #20]
 80124ec:	e7c3      	b.n	8012476 <_vfiprintf_r+0x176>
 80124ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80124f2:	4604      	mov	r4, r0
 80124f4:	2301      	movs	r3, #1
 80124f6:	e7f0      	b.n	80124da <_vfiprintf_r+0x1da>
 80124f8:	ab03      	add	r3, sp, #12
 80124fa:	9300      	str	r3, [sp, #0]
 80124fc:	462a      	mov	r2, r5
 80124fe:	4b16      	ldr	r3, [pc, #88]	; (8012558 <_vfiprintf_r+0x258>)
 8012500:	a904      	add	r1, sp, #16
 8012502:	4630      	mov	r0, r6
 8012504:	f7fd feea 	bl	80102dc <_printf_float>
 8012508:	4607      	mov	r7, r0
 801250a:	1c78      	adds	r0, r7, #1
 801250c:	d1d6      	bne.n	80124bc <_vfiprintf_r+0x1bc>
 801250e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012510:	07d9      	lsls	r1, r3, #31
 8012512:	d405      	bmi.n	8012520 <_vfiprintf_r+0x220>
 8012514:	89ab      	ldrh	r3, [r5, #12]
 8012516:	059a      	lsls	r2, r3, #22
 8012518:	d402      	bmi.n	8012520 <_vfiprintf_r+0x220>
 801251a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801251c:	f7ff fa42 	bl	80119a4 <__retarget_lock_release_recursive>
 8012520:	89ab      	ldrh	r3, [r5, #12]
 8012522:	065b      	lsls	r3, r3, #25
 8012524:	f53f af12 	bmi.w	801234c <_vfiprintf_r+0x4c>
 8012528:	9809      	ldr	r0, [sp, #36]	; 0x24
 801252a:	e711      	b.n	8012350 <_vfiprintf_r+0x50>
 801252c:	ab03      	add	r3, sp, #12
 801252e:	9300      	str	r3, [sp, #0]
 8012530:	462a      	mov	r2, r5
 8012532:	4b09      	ldr	r3, [pc, #36]	; (8012558 <_vfiprintf_r+0x258>)
 8012534:	a904      	add	r1, sp, #16
 8012536:	4630      	mov	r0, r6
 8012538:	f7fe f974 	bl	8010824 <_printf_i>
 801253c:	e7e4      	b.n	8012508 <_vfiprintf_r+0x208>
 801253e:	bf00      	nop
 8012540:	08013e4c 	.word	0x08013e4c
 8012544:	08013e6c 	.word	0x08013e6c
 8012548:	08013e2c 	.word	0x08013e2c
 801254c:	08013fe4 	.word	0x08013fe4
 8012550:	08013fee 	.word	0x08013fee
 8012554:	080102dd 	.word	0x080102dd
 8012558:	080122db 	.word	0x080122db
 801255c:	08013fea 	.word	0x08013fea

08012560 <_sbrk_r>:
 8012560:	b538      	push	{r3, r4, r5, lr}
 8012562:	4d06      	ldr	r5, [pc, #24]	; (801257c <_sbrk_r+0x1c>)
 8012564:	2300      	movs	r3, #0
 8012566:	4604      	mov	r4, r0
 8012568:	4608      	mov	r0, r1
 801256a:	602b      	str	r3, [r5, #0]
 801256c:	f7f2 fd7e 	bl	800506c <_sbrk>
 8012570:	1c43      	adds	r3, r0, #1
 8012572:	d102      	bne.n	801257a <_sbrk_r+0x1a>
 8012574:	682b      	ldr	r3, [r5, #0]
 8012576:	b103      	cbz	r3, 801257a <_sbrk_r+0x1a>
 8012578:	6023      	str	r3, [r4, #0]
 801257a:	bd38      	pop	{r3, r4, r5, pc}
 801257c:	200059d0 	.word	0x200059d0

08012580 <__sread>:
 8012580:	b510      	push	{r4, lr}
 8012582:	460c      	mov	r4, r1
 8012584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012588:	f000 faa8 	bl	8012adc <_read_r>
 801258c:	2800      	cmp	r0, #0
 801258e:	bfab      	itete	ge
 8012590:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012592:	89a3      	ldrhlt	r3, [r4, #12]
 8012594:	181b      	addge	r3, r3, r0
 8012596:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801259a:	bfac      	ite	ge
 801259c:	6563      	strge	r3, [r4, #84]	; 0x54
 801259e:	81a3      	strhlt	r3, [r4, #12]
 80125a0:	bd10      	pop	{r4, pc}

080125a2 <__swrite>:
 80125a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125a6:	461f      	mov	r7, r3
 80125a8:	898b      	ldrh	r3, [r1, #12]
 80125aa:	05db      	lsls	r3, r3, #23
 80125ac:	4605      	mov	r5, r0
 80125ae:	460c      	mov	r4, r1
 80125b0:	4616      	mov	r6, r2
 80125b2:	d505      	bpl.n	80125c0 <__swrite+0x1e>
 80125b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125b8:	2302      	movs	r3, #2
 80125ba:	2200      	movs	r2, #0
 80125bc:	f000 f9f8 	bl	80129b0 <_lseek_r>
 80125c0:	89a3      	ldrh	r3, [r4, #12]
 80125c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80125ca:	81a3      	strh	r3, [r4, #12]
 80125cc:	4632      	mov	r2, r6
 80125ce:	463b      	mov	r3, r7
 80125d0:	4628      	mov	r0, r5
 80125d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125d6:	f000 b869 	b.w	80126ac <_write_r>

080125da <__sseek>:
 80125da:	b510      	push	{r4, lr}
 80125dc:	460c      	mov	r4, r1
 80125de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125e2:	f000 f9e5 	bl	80129b0 <_lseek_r>
 80125e6:	1c43      	adds	r3, r0, #1
 80125e8:	89a3      	ldrh	r3, [r4, #12]
 80125ea:	bf15      	itete	ne
 80125ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80125ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80125f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80125f6:	81a3      	strheq	r3, [r4, #12]
 80125f8:	bf18      	it	ne
 80125fa:	81a3      	strhne	r3, [r4, #12]
 80125fc:	bd10      	pop	{r4, pc}

080125fe <__sclose>:
 80125fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012602:	f000 b8f1 	b.w	80127e8 <_close_r>
	...

08012608 <__swbuf_r>:
 8012608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801260a:	460e      	mov	r6, r1
 801260c:	4614      	mov	r4, r2
 801260e:	4605      	mov	r5, r0
 8012610:	b118      	cbz	r0, 801261a <__swbuf_r+0x12>
 8012612:	6983      	ldr	r3, [r0, #24]
 8012614:	b90b      	cbnz	r3, 801261a <__swbuf_r+0x12>
 8012616:	f7ff f921 	bl	801185c <__sinit>
 801261a:	4b21      	ldr	r3, [pc, #132]	; (80126a0 <__swbuf_r+0x98>)
 801261c:	429c      	cmp	r4, r3
 801261e:	d12b      	bne.n	8012678 <__swbuf_r+0x70>
 8012620:	686c      	ldr	r4, [r5, #4]
 8012622:	69a3      	ldr	r3, [r4, #24]
 8012624:	60a3      	str	r3, [r4, #8]
 8012626:	89a3      	ldrh	r3, [r4, #12]
 8012628:	071a      	lsls	r2, r3, #28
 801262a:	d52f      	bpl.n	801268c <__swbuf_r+0x84>
 801262c:	6923      	ldr	r3, [r4, #16]
 801262e:	b36b      	cbz	r3, 801268c <__swbuf_r+0x84>
 8012630:	6923      	ldr	r3, [r4, #16]
 8012632:	6820      	ldr	r0, [r4, #0]
 8012634:	1ac0      	subs	r0, r0, r3
 8012636:	6963      	ldr	r3, [r4, #20]
 8012638:	b2f6      	uxtb	r6, r6
 801263a:	4283      	cmp	r3, r0
 801263c:	4637      	mov	r7, r6
 801263e:	dc04      	bgt.n	801264a <__swbuf_r+0x42>
 8012640:	4621      	mov	r1, r4
 8012642:	4628      	mov	r0, r5
 8012644:	f000 f966 	bl	8012914 <_fflush_r>
 8012648:	bb30      	cbnz	r0, 8012698 <__swbuf_r+0x90>
 801264a:	68a3      	ldr	r3, [r4, #8]
 801264c:	3b01      	subs	r3, #1
 801264e:	60a3      	str	r3, [r4, #8]
 8012650:	6823      	ldr	r3, [r4, #0]
 8012652:	1c5a      	adds	r2, r3, #1
 8012654:	6022      	str	r2, [r4, #0]
 8012656:	701e      	strb	r6, [r3, #0]
 8012658:	6963      	ldr	r3, [r4, #20]
 801265a:	3001      	adds	r0, #1
 801265c:	4283      	cmp	r3, r0
 801265e:	d004      	beq.n	801266a <__swbuf_r+0x62>
 8012660:	89a3      	ldrh	r3, [r4, #12]
 8012662:	07db      	lsls	r3, r3, #31
 8012664:	d506      	bpl.n	8012674 <__swbuf_r+0x6c>
 8012666:	2e0a      	cmp	r6, #10
 8012668:	d104      	bne.n	8012674 <__swbuf_r+0x6c>
 801266a:	4621      	mov	r1, r4
 801266c:	4628      	mov	r0, r5
 801266e:	f000 f951 	bl	8012914 <_fflush_r>
 8012672:	b988      	cbnz	r0, 8012698 <__swbuf_r+0x90>
 8012674:	4638      	mov	r0, r7
 8012676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012678:	4b0a      	ldr	r3, [pc, #40]	; (80126a4 <__swbuf_r+0x9c>)
 801267a:	429c      	cmp	r4, r3
 801267c:	d101      	bne.n	8012682 <__swbuf_r+0x7a>
 801267e:	68ac      	ldr	r4, [r5, #8]
 8012680:	e7cf      	b.n	8012622 <__swbuf_r+0x1a>
 8012682:	4b09      	ldr	r3, [pc, #36]	; (80126a8 <__swbuf_r+0xa0>)
 8012684:	429c      	cmp	r4, r3
 8012686:	bf08      	it	eq
 8012688:	68ec      	ldreq	r4, [r5, #12]
 801268a:	e7ca      	b.n	8012622 <__swbuf_r+0x1a>
 801268c:	4621      	mov	r1, r4
 801268e:	4628      	mov	r0, r5
 8012690:	f000 f81e 	bl	80126d0 <__swsetup_r>
 8012694:	2800      	cmp	r0, #0
 8012696:	d0cb      	beq.n	8012630 <__swbuf_r+0x28>
 8012698:	f04f 37ff 	mov.w	r7, #4294967295
 801269c:	e7ea      	b.n	8012674 <__swbuf_r+0x6c>
 801269e:	bf00      	nop
 80126a0:	08013e4c 	.word	0x08013e4c
 80126a4:	08013e6c 	.word	0x08013e6c
 80126a8:	08013e2c 	.word	0x08013e2c

080126ac <_write_r>:
 80126ac:	b538      	push	{r3, r4, r5, lr}
 80126ae:	4d07      	ldr	r5, [pc, #28]	; (80126cc <_write_r+0x20>)
 80126b0:	4604      	mov	r4, r0
 80126b2:	4608      	mov	r0, r1
 80126b4:	4611      	mov	r1, r2
 80126b6:	2200      	movs	r2, #0
 80126b8:	602a      	str	r2, [r5, #0]
 80126ba:	461a      	mov	r2, r3
 80126bc:	f7f2 fc86 	bl	8004fcc <_write>
 80126c0:	1c43      	adds	r3, r0, #1
 80126c2:	d102      	bne.n	80126ca <_write_r+0x1e>
 80126c4:	682b      	ldr	r3, [r5, #0]
 80126c6:	b103      	cbz	r3, 80126ca <_write_r+0x1e>
 80126c8:	6023      	str	r3, [r4, #0]
 80126ca:	bd38      	pop	{r3, r4, r5, pc}
 80126cc:	200059d0 	.word	0x200059d0

080126d0 <__swsetup_r>:
 80126d0:	4b32      	ldr	r3, [pc, #200]	; (801279c <__swsetup_r+0xcc>)
 80126d2:	b570      	push	{r4, r5, r6, lr}
 80126d4:	681d      	ldr	r5, [r3, #0]
 80126d6:	4606      	mov	r6, r0
 80126d8:	460c      	mov	r4, r1
 80126da:	b125      	cbz	r5, 80126e6 <__swsetup_r+0x16>
 80126dc:	69ab      	ldr	r3, [r5, #24]
 80126de:	b913      	cbnz	r3, 80126e6 <__swsetup_r+0x16>
 80126e0:	4628      	mov	r0, r5
 80126e2:	f7ff f8bb 	bl	801185c <__sinit>
 80126e6:	4b2e      	ldr	r3, [pc, #184]	; (80127a0 <__swsetup_r+0xd0>)
 80126e8:	429c      	cmp	r4, r3
 80126ea:	d10f      	bne.n	801270c <__swsetup_r+0x3c>
 80126ec:	686c      	ldr	r4, [r5, #4]
 80126ee:	89a3      	ldrh	r3, [r4, #12]
 80126f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80126f4:	0719      	lsls	r1, r3, #28
 80126f6:	d42c      	bmi.n	8012752 <__swsetup_r+0x82>
 80126f8:	06dd      	lsls	r5, r3, #27
 80126fa:	d411      	bmi.n	8012720 <__swsetup_r+0x50>
 80126fc:	2309      	movs	r3, #9
 80126fe:	6033      	str	r3, [r6, #0]
 8012700:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012704:	81a3      	strh	r3, [r4, #12]
 8012706:	f04f 30ff 	mov.w	r0, #4294967295
 801270a:	e03e      	b.n	801278a <__swsetup_r+0xba>
 801270c:	4b25      	ldr	r3, [pc, #148]	; (80127a4 <__swsetup_r+0xd4>)
 801270e:	429c      	cmp	r4, r3
 8012710:	d101      	bne.n	8012716 <__swsetup_r+0x46>
 8012712:	68ac      	ldr	r4, [r5, #8]
 8012714:	e7eb      	b.n	80126ee <__swsetup_r+0x1e>
 8012716:	4b24      	ldr	r3, [pc, #144]	; (80127a8 <__swsetup_r+0xd8>)
 8012718:	429c      	cmp	r4, r3
 801271a:	bf08      	it	eq
 801271c:	68ec      	ldreq	r4, [r5, #12]
 801271e:	e7e6      	b.n	80126ee <__swsetup_r+0x1e>
 8012720:	0758      	lsls	r0, r3, #29
 8012722:	d512      	bpl.n	801274a <__swsetup_r+0x7a>
 8012724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012726:	b141      	cbz	r1, 801273a <__swsetup_r+0x6a>
 8012728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801272c:	4299      	cmp	r1, r3
 801272e:	d002      	beq.n	8012736 <__swsetup_r+0x66>
 8012730:	4630      	mov	r0, r6
 8012732:	f7ff fcdb 	bl	80120ec <_free_r>
 8012736:	2300      	movs	r3, #0
 8012738:	6363      	str	r3, [r4, #52]	; 0x34
 801273a:	89a3      	ldrh	r3, [r4, #12]
 801273c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012740:	81a3      	strh	r3, [r4, #12]
 8012742:	2300      	movs	r3, #0
 8012744:	6063      	str	r3, [r4, #4]
 8012746:	6923      	ldr	r3, [r4, #16]
 8012748:	6023      	str	r3, [r4, #0]
 801274a:	89a3      	ldrh	r3, [r4, #12]
 801274c:	f043 0308 	orr.w	r3, r3, #8
 8012750:	81a3      	strh	r3, [r4, #12]
 8012752:	6923      	ldr	r3, [r4, #16]
 8012754:	b94b      	cbnz	r3, 801276a <__swsetup_r+0x9a>
 8012756:	89a3      	ldrh	r3, [r4, #12]
 8012758:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801275c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012760:	d003      	beq.n	801276a <__swsetup_r+0x9a>
 8012762:	4621      	mov	r1, r4
 8012764:	4630      	mov	r0, r6
 8012766:	f000 f95b 	bl	8012a20 <__smakebuf_r>
 801276a:	89a0      	ldrh	r0, [r4, #12]
 801276c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012770:	f010 0301 	ands.w	r3, r0, #1
 8012774:	d00a      	beq.n	801278c <__swsetup_r+0xbc>
 8012776:	2300      	movs	r3, #0
 8012778:	60a3      	str	r3, [r4, #8]
 801277a:	6963      	ldr	r3, [r4, #20]
 801277c:	425b      	negs	r3, r3
 801277e:	61a3      	str	r3, [r4, #24]
 8012780:	6923      	ldr	r3, [r4, #16]
 8012782:	b943      	cbnz	r3, 8012796 <__swsetup_r+0xc6>
 8012784:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012788:	d1ba      	bne.n	8012700 <__swsetup_r+0x30>
 801278a:	bd70      	pop	{r4, r5, r6, pc}
 801278c:	0781      	lsls	r1, r0, #30
 801278e:	bf58      	it	pl
 8012790:	6963      	ldrpl	r3, [r4, #20]
 8012792:	60a3      	str	r3, [r4, #8]
 8012794:	e7f4      	b.n	8012780 <__swsetup_r+0xb0>
 8012796:	2000      	movs	r0, #0
 8012798:	e7f7      	b.n	801278a <__swsetup_r+0xba>
 801279a:	bf00      	nop
 801279c:	20000448 	.word	0x20000448
 80127a0:	08013e4c 	.word	0x08013e4c
 80127a4:	08013e6c 	.word	0x08013e6c
 80127a8:	08013e2c 	.word	0x08013e2c

080127ac <__assert_func>:
 80127ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80127ae:	4614      	mov	r4, r2
 80127b0:	461a      	mov	r2, r3
 80127b2:	4b09      	ldr	r3, [pc, #36]	; (80127d8 <__assert_func+0x2c>)
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	4605      	mov	r5, r0
 80127b8:	68d8      	ldr	r0, [r3, #12]
 80127ba:	b14c      	cbz	r4, 80127d0 <__assert_func+0x24>
 80127bc:	4b07      	ldr	r3, [pc, #28]	; (80127dc <__assert_func+0x30>)
 80127be:	9100      	str	r1, [sp, #0]
 80127c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80127c4:	4906      	ldr	r1, [pc, #24]	; (80127e0 <__assert_func+0x34>)
 80127c6:	462b      	mov	r3, r5
 80127c8:	f000 f8e0 	bl	801298c <fiprintf>
 80127cc:	f000 f9a5 	bl	8012b1a <abort>
 80127d0:	4b04      	ldr	r3, [pc, #16]	; (80127e4 <__assert_func+0x38>)
 80127d2:	461c      	mov	r4, r3
 80127d4:	e7f3      	b.n	80127be <__assert_func+0x12>
 80127d6:	bf00      	nop
 80127d8:	20000448 	.word	0x20000448
 80127dc:	08013ff5 	.word	0x08013ff5
 80127e0:	08014002 	.word	0x08014002
 80127e4:	08014030 	.word	0x08014030

080127e8 <_close_r>:
 80127e8:	b538      	push	{r3, r4, r5, lr}
 80127ea:	4d06      	ldr	r5, [pc, #24]	; (8012804 <_close_r+0x1c>)
 80127ec:	2300      	movs	r3, #0
 80127ee:	4604      	mov	r4, r0
 80127f0:	4608      	mov	r0, r1
 80127f2:	602b      	str	r3, [r5, #0]
 80127f4:	f7f2 fc06 	bl	8005004 <_close>
 80127f8:	1c43      	adds	r3, r0, #1
 80127fa:	d102      	bne.n	8012802 <_close_r+0x1a>
 80127fc:	682b      	ldr	r3, [r5, #0]
 80127fe:	b103      	cbz	r3, 8012802 <_close_r+0x1a>
 8012800:	6023      	str	r3, [r4, #0]
 8012802:	bd38      	pop	{r3, r4, r5, pc}
 8012804:	200059d0 	.word	0x200059d0

08012808 <__sflush_r>:
 8012808:	898a      	ldrh	r2, [r1, #12]
 801280a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801280e:	4605      	mov	r5, r0
 8012810:	0710      	lsls	r0, r2, #28
 8012812:	460c      	mov	r4, r1
 8012814:	d458      	bmi.n	80128c8 <__sflush_r+0xc0>
 8012816:	684b      	ldr	r3, [r1, #4]
 8012818:	2b00      	cmp	r3, #0
 801281a:	dc05      	bgt.n	8012828 <__sflush_r+0x20>
 801281c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801281e:	2b00      	cmp	r3, #0
 8012820:	dc02      	bgt.n	8012828 <__sflush_r+0x20>
 8012822:	2000      	movs	r0, #0
 8012824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801282a:	2e00      	cmp	r6, #0
 801282c:	d0f9      	beq.n	8012822 <__sflush_r+0x1a>
 801282e:	2300      	movs	r3, #0
 8012830:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012834:	682f      	ldr	r7, [r5, #0]
 8012836:	602b      	str	r3, [r5, #0]
 8012838:	d032      	beq.n	80128a0 <__sflush_r+0x98>
 801283a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801283c:	89a3      	ldrh	r3, [r4, #12]
 801283e:	075a      	lsls	r2, r3, #29
 8012840:	d505      	bpl.n	801284e <__sflush_r+0x46>
 8012842:	6863      	ldr	r3, [r4, #4]
 8012844:	1ac0      	subs	r0, r0, r3
 8012846:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012848:	b10b      	cbz	r3, 801284e <__sflush_r+0x46>
 801284a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801284c:	1ac0      	subs	r0, r0, r3
 801284e:	2300      	movs	r3, #0
 8012850:	4602      	mov	r2, r0
 8012852:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012854:	6a21      	ldr	r1, [r4, #32]
 8012856:	4628      	mov	r0, r5
 8012858:	47b0      	blx	r6
 801285a:	1c43      	adds	r3, r0, #1
 801285c:	89a3      	ldrh	r3, [r4, #12]
 801285e:	d106      	bne.n	801286e <__sflush_r+0x66>
 8012860:	6829      	ldr	r1, [r5, #0]
 8012862:	291d      	cmp	r1, #29
 8012864:	d82c      	bhi.n	80128c0 <__sflush_r+0xb8>
 8012866:	4a2a      	ldr	r2, [pc, #168]	; (8012910 <__sflush_r+0x108>)
 8012868:	40ca      	lsrs	r2, r1
 801286a:	07d6      	lsls	r6, r2, #31
 801286c:	d528      	bpl.n	80128c0 <__sflush_r+0xb8>
 801286e:	2200      	movs	r2, #0
 8012870:	6062      	str	r2, [r4, #4]
 8012872:	04d9      	lsls	r1, r3, #19
 8012874:	6922      	ldr	r2, [r4, #16]
 8012876:	6022      	str	r2, [r4, #0]
 8012878:	d504      	bpl.n	8012884 <__sflush_r+0x7c>
 801287a:	1c42      	adds	r2, r0, #1
 801287c:	d101      	bne.n	8012882 <__sflush_r+0x7a>
 801287e:	682b      	ldr	r3, [r5, #0]
 8012880:	b903      	cbnz	r3, 8012884 <__sflush_r+0x7c>
 8012882:	6560      	str	r0, [r4, #84]	; 0x54
 8012884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012886:	602f      	str	r7, [r5, #0]
 8012888:	2900      	cmp	r1, #0
 801288a:	d0ca      	beq.n	8012822 <__sflush_r+0x1a>
 801288c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012890:	4299      	cmp	r1, r3
 8012892:	d002      	beq.n	801289a <__sflush_r+0x92>
 8012894:	4628      	mov	r0, r5
 8012896:	f7ff fc29 	bl	80120ec <_free_r>
 801289a:	2000      	movs	r0, #0
 801289c:	6360      	str	r0, [r4, #52]	; 0x34
 801289e:	e7c1      	b.n	8012824 <__sflush_r+0x1c>
 80128a0:	6a21      	ldr	r1, [r4, #32]
 80128a2:	2301      	movs	r3, #1
 80128a4:	4628      	mov	r0, r5
 80128a6:	47b0      	blx	r6
 80128a8:	1c41      	adds	r1, r0, #1
 80128aa:	d1c7      	bne.n	801283c <__sflush_r+0x34>
 80128ac:	682b      	ldr	r3, [r5, #0]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d0c4      	beq.n	801283c <__sflush_r+0x34>
 80128b2:	2b1d      	cmp	r3, #29
 80128b4:	d001      	beq.n	80128ba <__sflush_r+0xb2>
 80128b6:	2b16      	cmp	r3, #22
 80128b8:	d101      	bne.n	80128be <__sflush_r+0xb6>
 80128ba:	602f      	str	r7, [r5, #0]
 80128bc:	e7b1      	b.n	8012822 <__sflush_r+0x1a>
 80128be:	89a3      	ldrh	r3, [r4, #12]
 80128c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128c4:	81a3      	strh	r3, [r4, #12]
 80128c6:	e7ad      	b.n	8012824 <__sflush_r+0x1c>
 80128c8:	690f      	ldr	r7, [r1, #16]
 80128ca:	2f00      	cmp	r7, #0
 80128cc:	d0a9      	beq.n	8012822 <__sflush_r+0x1a>
 80128ce:	0793      	lsls	r3, r2, #30
 80128d0:	680e      	ldr	r6, [r1, #0]
 80128d2:	bf08      	it	eq
 80128d4:	694b      	ldreq	r3, [r1, #20]
 80128d6:	600f      	str	r7, [r1, #0]
 80128d8:	bf18      	it	ne
 80128da:	2300      	movne	r3, #0
 80128dc:	eba6 0807 	sub.w	r8, r6, r7
 80128e0:	608b      	str	r3, [r1, #8]
 80128e2:	f1b8 0f00 	cmp.w	r8, #0
 80128e6:	dd9c      	ble.n	8012822 <__sflush_r+0x1a>
 80128e8:	6a21      	ldr	r1, [r4, #32]
 80128ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80128ec:	4643      	mov	r3, r8
 80128ee:	463a      	mov	r2, r7
 80128f0:	4628      	mov	r0, r5
 80128f2:	47b0      	blx	r6
 80128f4:	2800      	cmp	r0, #0
 80128f6:	dc06      	bgt.n	8012906 <__sflush_r+0xfe>
 80128f8:	89a3      	ldrh	r3, [r4, #12]
 80128fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128fe:	81a3      	strh	r3, [r4, #12]
 8012900:	f04f 30ff 	mov.w	r0, #4294967295
 8012904:	e78e      	b.n	8012824 <__sflush_r+0x1c>
 8012906:	4407      	add	r7, r0
 8012908:	eba8 0800 	sub.w	r8, r8, r0
 801290c:	e7e9      	b.n	80128e2 <__sflush_r+0xda>
 801290e:	bf00      	nop
 8012910:	20400001 	.word	0x20400001

08012914 <_fflush_r>:
 8012914:	b538      	push	{r3, r4, r5, lr}
 8012916:	690b      	ldr	r3, [r1, #16]
 8012918:	4605      	mov	r5, r0
 801291a:	460c      	mov	r4, r1
 801291c:	b913      	cbnz	r3, 8012924 <_fflush_r+0x10>
 801291e:	2500      	movs	r5, #0
 8012920:	4628      	mov	r0, r5
 8012922:	bd38      	pop	{r3, r4, r5, pc}
 8012924:	b118      	cbz	r0, 801292e <_fflush_r+0x1a>
 8012926:	6983      	ldr	r3, [r0, #24]
 8012928:	b90b      	cbnz	r3, 801292e <_fflush_r+0x1a>
 801292a:	f7fe ff97 	bl	801185c <__sinit>
 801292e:	4b14      	ldr	r3, [pc, #80]	; (8012980 <_fflush_r+0x6c>)
 8012930:	429c      	cmp	r4, r3
 8012932:	d11b      	bne.n	801296c <_fflush_r+0x58>
 8012934:	686c      	ldr	r4, [r5, #4]
 8012936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d0ef      	beq.n	801291e <_fflush_r+0xa>
 801293e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012940:	07d0      	lsls	r0, r2, #31
 8012942:	d404      	bmi.n	801294e <_fflush_r+0x3a>
 8012944:	0599      	lsls	r1, r3, #22
 8012946:	d402      	bmi.n	801294e <_fflush_r+0x3a>
 8012948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801294a:	f7ff f82a 	bl	80119a2 <__retarget_lock_acquire_recursive>
 801294e:	4628      	mov	r0, r5
 8012950:	4621      	mov	r1, r4
 8012952:	f7ff ff59 	bl	8012808 <__sflush_r>
 8012956:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012958:	07da      	lsls	r2, r3, #31
 801295a:	4605      	mov	r5, r0
 801295c:	d4e0      	bmi.n	8012920 <_fflush_r+0xc>
 801295e:	89a3      	ldrh	r3, [r4, #12]
 8012960:	059b      	lsls	r3, r3, #22
 8012962:	d4dd      	bmi.n	8012920 <_fflush_r+0xc>
 8012964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012966:	f7ff f81d 	bl	80119a4 <__retarget_lock_release_recursive>
 801296a:	e7d9      	b.n	8012920 <_fflush_r+0xc>
 801296c:	4b05      	ldr	r3, [pc, #20]	; (8012984 <_fflush_r+0x70>)
 801296e:	429c      	cmp	r4, r3
 8012970:	d101      	bne.n	8012976 <_fflush_r+0x62>
 8012972:	68ac      	ldr	r4, [r5, #8]
 8012974:	e7df      	b.n	8012936 <_fflush_r+0x22>
 8012976:	4b04      	ldr	r3, [pc, #16]	; (8012988 <_fflush_r+0x74>)
 8012978:	429c      	cmp	r4, r3
 801297a:	bf08      	it	eq
 801297c:	68ec      	ldreq	r4, [r5, #12]
 801297e:	e7da      	b.n	8012936 <_fflush_r+0x22>
 8012980:	08013e4c 	.word	0x08013e4c
 8012984:	08013e6c 	.word	0x08013e6c
 8012988:	08013e2c 	.word	0x08013e2c

0801298c <fiprintf>:
 801298c:	b40e      	push	{r1, r2, r3}
 801298e:	b503      	push	{r0, r1, lr}
 8012990:	4601      	mov	r1, r0
 8012992:	ab03      	add	r3, sp, #12
 8012994:	4805      	ldr	r0, [pc, #20]	; (80129ac <fiprintf+0x20>)
 8012996:	f853 2b04 	ldr.w	r2, [r3], #4
 801299a:	6800      	ldr	r0, [r0, #0]
 801299c:	9301      	str	r3, [sp, #4]
 801299e:	f7ff fcaf 	bl	8012300 <_vfiprintf_r>
 80129a2:	b002      	add	sp, #8
 80129a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80129a8:	b003      	add	sp, #12
 80129aa:	4770      	bx	lr
 80129ac:	20000448 	.word	0x20000448

080129b0 <_lseek_r>:
 80129b0:	b538      	push	{r3, r4, r5, lr}
 80129b2:	4d07      	ldr	r5, [pc, #28]	; (80129d0 <_lseek_r+0x20>)
 80129b4:	4604      	mov	r4, r0
 80129b6:	4608      	mov	r0, r1
 80129b8:	4611      	mov	r1, r2
 80129ba:	2200      	movs	r2, #0
 80129bc:	602a      	str	r2, [r5, #0]
 80129be:	461a      	mov	r2, r3
 80129c0:	f7f2 fb47 	bl	8005052 <_lseek>
 80129c4:	1c43      	adds	r3, r0, #1
 80129c6:	d102      	bne.n	80129ce <_lseek_r+0x1e>
 80129c8:	682b      	ldr	r3, [r5, #0]
 80129ca:	b103      	cbz	r3, 80129ce <_lseek_r+0x1e>
 80129cc:	6023      	str	r3, [r4, #0]
 80129ce:	bd38      	pop	{r3, r4, r5, pc}
 80129d0:	200059d0 	.word	0x200059d0

080129d4 <__swhatbuf_r>:
 80129d4:	b570      	push	{r4, r5, r6, lr}
 80129d6:	460e      	mov	r6, r1
 80129d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129dc:	2900      	cmp	r1, #0
 80129de:	b096      	sub	sp, #88	; 0x58
 80129e0:	4614      	mov	r4, r2
 80129e2:	461d      	mov	r5, r3
 80129e4:	da08      	bge.n	80129f8 <__swhatbuf_r+0x24>
 80129e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80129ea:	2200      	movs	r2, #0
 80129ec:	602a      	str	r2, [r5, #0]
 80129ee:	061a      	lsls	r2, r3, #24
 80129f0:	d410      	bmi.n	8012a14 <__swhatbuf_r+0x40>
 80129f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80129f6:	e00e      	b.n	8012a16 <__swhatbuf_r+0x42>
 80129f8:	466a      	mov	r2, sp
 80129fa:	f000 f895 	bl	8012b28 <_fstat_r>
 80129fe:	2800      	cmp	r0, #0
 8012a00:	dbf1      	blt.n	80129e6 <__swhatbuf_r+0x12>
 8012a02:	9a01      	ldr	r2, [sp, #4]
 8012a04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012a08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012a0c:	425a      	negs	r2, r3
 8012a0e:	415a      	adcs	r2, r3
 8012a10:	602a      	str	r2, [r5, #0]
 8012a12:	e7ee      	b.n	80129f2 <__swhatbuf_r+0x1e>
 8012a14:	2340      	movs	r3, #64	; 0x40
 8012a16:	2000      	movs	r0, #0
 8012a18:	6023      	str	r3, [r4, #0]
 8012a1a:	b016      	add	sp, #88	; 0x58
 8012a1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012a20 <__smakebuf_r>:
 8012a20:	898b      	ldrh	r3, [r1, #12]
 8012a22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012a24:	079d      	lsls	r5, r3, #30
 8012a26:	4606      	mov	r6, r0
 8012a28:	460c      	mov	r4, r1
 8012a2a:	d507      	bpl.n	8012a3c <__smakebuf_r+0x1c>
 8012a2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012a30:	6023      	str	r3, [r4, #0]
 8012a32:	6123      	str	r3, [r4, #16]
 8012a34:	2301      	movs	r3, #1
 8012a36:	6163      	str	r3, [r4, #20]
 8012a38:	b002      	add	sp, #8
 8012a3a:	bd70      	pop	{r4, r5, r6, pc}
 8012a3c:	ab01      	add	r3, sp, #4
 8012a3e:	466a      	mov	r2, sp
 8012a40:	f7ff ffc8 	bl	80129d4 <__swhatbuf_r>
 8012a44:	9900      	ldr	r1, [sp, #0]
 8012a46:	4605      	mov	r5, r0
 8012a48:	4630      	mov	r0, r6
 8012a4a:	f7ff fbbb 	bl	80121c4 <_malloc_r>
 8012a4e:	b948      	cbnz	r0, 8012a64 <__smakebuf_r+0x44>
 8012a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a54:	059a      	lsls	r2, r3, #22
 8012a56:	d4ef      	bmi.n	8012a38 <__smakebuf_r+0x18>
 8012a58:	f023 0303 	bic.w	r3, r3, #3
 8012a5c:	f043 0302 	orr.w	r3, r3, #2
 8012a60:	81a3      	strh	r3, [r4, #12]
 8012a62:	e7e3      	b.n	8012a2c <__smakebuf_r+0xc>
 8012a64:	4b0d      	ldr	r3, [pc, #52]	; (8012a9c <__smakebuf_r+0x7c>)
 8012a66:	62b3      	str	r3, [r6, #40]	; 0x28
 8012a68:	89a3      	ldrh	r3, [r4, #12]
 8012a6a:	6020      	str	r0, [r4, #0]
 8012a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a70:	81a3      	strh	r3, [r4, #12]
 8012a72:	9b00      	ldr	r3, [sp, #0]
 8012a74:	6163      	str	r3, [r4, #20]
 8012a76:	9b01      	ldr	r3, [sp, #4]
 8012a78:	6120      	str	r0, [r4, #16]
 8012a7a:	b15b      	cbz	r3, 8012a94 <__smakebuf_r+0x74>
 8012a7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a80:	4630      	mov	r0, r6
 8012a82:	f000 f863 	bl	8012b4c <_isatty_r>
 8012a86:	b128      	cbz	r0, 8012a94 <__smakebuf_r+0x74>
 8012a88:	89a3      	ldrh	r3, [r4, #12]
 8012a8a:	f023 0303 	bic.w	r3, r3, #3
 8012a8e:	f043 0301 	orr.w	r3, r3, #1
 8012a92:	81a3      	strh	r3, [r4, #12]
 8012a94:	89a0      	ldrh	r0, [r4, #12]
 8012a96:	4305      	orrs	r5, r0
 8012a98:	81a5      	strh	r5, [r4, #12]
 8012a9a:	e7cd      	b.n	8012a38 <__smakebuf_r+0x18>
 8012a9c:	080117f5 	.word	0x080117f5

08012aa0 <__ascii_mbtowc>:
 8012aa0:	b082      	sub	sp, #8
 8012aa2:	b901      	cbnz	r1, 8012aa6 <__ascii_mbtowc+0x6>
 8012aa4:	a901      	add	r1, sp, #4
 8012aa6:	b142      	cbz	r2, 8012aba <__ascii_mbtowc+0x1a>
 8012aa8:	b14b      	cbz	r3, 8012abe <__ascii_mbtowc+0x1e>
 8012aaa:	7813      	ldrb	r3, [r2, #0]
 8012aac:	600b      	str	r3, [r1, #0]
 8012aae:	7812      	ldrb	r2, [r2, #0]
 8012ab0:	1e10      	subs	r0, r2, #0
 8012ab2:	bf18      	it	ne
 8012ab4:	2001      	movne	r0, #1
 8012ab6:	b002      	add	sp, #8
 8012ab8:	4770      	bx	lr
 8012aba:	4610      	mov	r0, r2
 8012abc:	e7fb      	b.n	8012ab6 <__ascii_mbtowc+0x16>
 8012abe:	f06f 0001 	mvn.w	r0, #1
 8012ac2:	e7f8      	b.n	8012ab6 <__ascii_mbtowc+0x16>

08012ac4 <__malloc_lock>:
 8012ac4:	4801      	ldr	r0, [pc, #4]	; (8012acc <__malloc_lock+0x8>)
 8012ac6:	f7fe bf6c 	b.w	80119a2 <__retarget_lock_acquire_recursive>
 8012aca:	bf00      	nop
 8012acc:	200059c4 	.word	0x200059c4

08012ad0 <__malloc_unlock>:
 8012ad0:	4801      	ldr	r0, [pc, #4]	; (8012ad8 <__malloc_unlock+0x8>)
 8012ad2:	f7fe bf67 	b.w	80119a4 <__retarget_lock_release_recursive>
 8012ad6:	bf00      	nop
 8012ad8:	200059c4 	.word	0x200059c4

08012adc <_read_r>:
 8012adc:	b538      	push	{r3, r4, r5, lr}
 8012ade:	4d07      	ldr	r5, [pc, #28]	; (8012afc <_read_r+0x20>)
 8012ae0:	4604      	mov	r4, r0
 8012ae2:	4608      	mov	r0, r1
 8012ae4:	4611      	mov	r1, r2
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	602a      	str	r2, [r5, #0]
 8012aea:	461a      	mov	r2, r3
 8012aec:	f7f2 fa51 	bl	8004f92 <_read>
 8012af0:	1c43      	adds	r3, r0, #1
 8012af2:	d102      	bne.n	8012afa <_read_r+0x1e>
 8012af4:	682b      	ldr	r3, [r5, #0]
 8012af6:	b103      	cbz	r3, 8012afa <_read_r+0x1e>
 8012af8:	6023      	str	r3, [r4, #0]
 8012afa:	bd38      	pop	{r3, r4, r5, pc}
 8012afc:	200059d0 	.word	0x200059d0

08012b00 <__ascii_wctomb>:
 8012b00:	b149      	cbz	r1, 8012b16 <__ascii_wctomb+0x16>
 8012b02:	2aff      	cmp	r2, #255	; 0xff
 8012b04:	bf85      	ittet	hi
 8012b06:	238a      	movhi	r3, #138	; 0x8a
 8012b08:	6003      	strhi	r3, [r0, #0]
 8012b0a:	700a      	strbls	r2, [r1, #0]
 8012b0c:	f04f 30ff 	movhi.w	r0, #4294967295
 8012b10:	bf98      	it	ls
 8012b12:	2001      	movls	r0, #1
 8012b14:	4770      	bx	lr
 8012b16:	4608      	mov	r0, r1
 8012b18:	4770      	bx	lr

08012b1a <abort>:
 8012b1a:	b508      	push	{r3, lr}
 8012b1c:	2006      	movs	r0, #6
 8012b1e:	f000 f84d 	bl	8012bbc <raise>
 8012b22:	2001      	movs	r0, #1
 8012b24:	f7f2 fa2b 	bl	8004f7e <_exit>

08012b28 <_fstat_r>:
 8012b28:	b538      	push	{r3, r4, r5, lr}
 8012b2a:	4d07      	ldr	r5, [pc, #28]	; (8012b48 <_fstat_r+0x20>)
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	4604      	mov	r4, r0
 8012b30:	4608      	mov	r0, r1
 8012b32:	4611      	mov	r1, r2
 8012b34:	602b      	str	r3, [r5, #0]
 8012b36:	f7f2 fa71 	bl	800501c <_fstat>
 8012b3a:	1c43      	adds	r3, r0, #1
 8012b3c:	d102      	bne.n	8012b44 <_fstat_r+0x1c>
 8012b3e:	682b      	ldr	r3, [r5, #0]
 8012b40:	b103      	cbz	r3, 8012b44 <_fstat_r+0x1c>
 8012b42:	6023      	str	r3, [r4, #0]
 8012b44:	bd38      	pop	{r3, r4, r5, pc}
 8012b46:	bf00      	nop
 8012b48:	200059d0 	.word	0x200059d0

08012b4c <_isatty_r>:
 8012b4c:	b538      	push	{r3, r4, r5, lr}
 8012b4e:	4d06      	ldr	r5, [pc, #24]	; (8012b68 <_isatty_r+0x1c>)
 8012b50:	2300      	movs	r3, #0
 8012b52:	4604      	mov	r4, r0
 8012b54:	4608      	mov	r0, r1
 8012b56:	602b      	str	r3, [r5, #0]
 8012b58:	f7f2 fa70 	bl	800503c <_isatty>
 8012b5c:	1c43      	adds	r3, r0, #1
 8012b5e:	d102      	bne.n	8012b66 <_isatty_r+0x1a>
 8012b60:	682b      	ldr	r3, [r5, #0]
 8012b62:	b103      	cbz	r3, 8012b66 <_isatty_r+0x1a>
 8012b64:	6023      	str	r3, [r4, #0]
 8012b66:	bd38      	pop	{r3, r4, r5, pc}
 8012b68:	200059d0 	.word	0x200059d0

08012b6c <_raise_r>:
 8012b6c:	291f      	cmp	r1, #31
 8012b6e:	b538      	push	{r3, r4, r5, lr}
 8012b70:	4604      	mov	r4, r0
 8012b72:	460d      	mov	r5, r1
 8012b74:	d904      	bls.n	8012b80 <_raise_r+0x14>
 8012b76:	2316      	movs	r3, #22
 8012b78:	6003      	str	r3, [r0, #0]
 8012b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8012b7e:	bd38      	pop	{r3, r4, r5, pc}
 8012b80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012b82:	b112      	cbz	r2, 8012b8a <_raise_r+0x1e>
 8012b84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012b88:	b94b      	cbnz	r3, 8012b9e <_raise_r+0x32>
 8012b8a:	4620      	mov	r0, r4
 8012b8c:	f000 f830 	bl	8012bf0 <_getpid_r>
 8012b90:	462a      	mov	r2, r5
 8012b92:	4601      	mov	r1, r0
 8012b94:	4620      	mov	r0, r4
 8012b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b9a:	f000 b817 	b.w	8012bcc <_kill_r>
 8012b9e:	2b01      	cmp	r3, #1
 8012ba0:	d00a      	beq.n	8012bb8 <_raise_r+0x4c>
 8012ba2:	1c59      	adds	r1, r3, #1
 8012ba4:	d103      	bne.n	8012bae <_raise_r+0x42>
 8012ba6:	2316      	movs	r3, #22
 8012ba8:	6003      	str	r3, [r0, #0]
 8012baa:	2001      	movs	r0, #1
 8012bac:	e7e7      	b.n	8012b7e <_raise_r+0x12>
 8012bae:	2400      	movs	r4, #0
 8012bb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012bb4:	4628      	mov	r0, r5
 8012bb6:	4798      	blx	r3
 8012bb8:	2000      	movs	r0, #0
 8012bba:	e7e0      	b.n	8012b7e <_raise_r+0x12>

08012bbc <raise>:
 8012bbc:	4b02      	ldr	r3, [pc, #8]	; (8012bc8 <raise+0xc>)
 8012bbe:	4601      	mov	r1, r0
 8012bc0:	6818      	ldr	r0, [r3, #0]
 8012bc2:	f7ff bfd3 	b.w	8012b6c <_raise_r>
 8012bc6:	bf00      	nop
 8012bc8:	20000448 	.word	0x20000448

08012bcc <_kill_r>:
 8012bcc:	b538      	push	{r3, r4, r5, lr}
 8012bce:	4d07      	ldr	r5, [pc, #28]	; (8012bec <_kill_r+0x20>)
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	4604      	mov	r4, r0
 8012bd4:	4608      	mov	r0, r1
 8012bd6:	4611      	mov	r1, r2
 8012bd8:	602b      	str	r3, [r5, #0]
 8012bda:	f7f2 f9c0 	bl	8004f5e <_kill>
 8012bde:	1c43      	adds	r3, r0, #1
 8012be0:	d102      	bne.n	8012be8 <_kill_r+0x1c>
 8012be2:	682b      	ldr	r3, [r5, #0]
 8012be4:	b103      	cbz	r3, 8012be8 <_kill_r+0x1c>
 8012be6:	6023      	str	r3, [r4, #0]
 8012be8:	bd38      	pop	{r3, r4, r5, pc}
 8012bea:	bf00      	nop
 8012bec:	200059d0 	.word	0x200059d0

08012bf0 <_getpid_r>:
 8012bf0:	f7f2 b9ad 	b.w	8004f4e <_getpid>

08012bf4 <roundf>:
 8012bf4:	ee10 0a10 	vmov	r0, s0
 8012bf8:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8012bfc:	3a7f      	subs	r2, #127	; 0x7f
 8012bfe:	2a16      	cmp	r2, #22
 8012c00:	dc15      	bgt.n	8012c2e <roundf+0x3a>
 8012c02:	2a00      	cmp	r2, #0
 8012c04:	da08      	bge.n	8012c18 <roundf+0x24>
 8012c06:	3201      	adds	r2, #1
 8012c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8012c0c:	d101      	bne.n	8012c12 <roundf+0x1e>
 8012c0e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8012c12:	ee00 3a10 	vmov	s0, r3
 8012c16:	4770      	bx	lr
 8012c18:	4907      	ldr	r1, [pc, #28]	; (8012c38 <roundf+0x44>)
 8012c1a:	4111      	asrs	r1, r2
 8012c1c:	4208      	tst	r0, r1
 8012c1e:	d0fa      	beq.n	8012c16 <roundf+0x22>
 8012c20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012c24:	4113      	asrs	r3, r2
 8012c26:	4403      	add	r3, r0
 8012c28:	ea23 0301 	bic.w	r3, r3, r1
 8012c2c:	e7f1      	b.n	8012c12 <roundf+0x1e>
 8012c2e:	2a80      	cmp	r2, #128	; 0x80
 8012c30:	d1f1      	bne.n	8012c16 <roundf+0x22>
 8012c32:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012c36:	4770      	bx	lr
 8012c38:	007fffff 	.word	0x007fffff

08012c3c <powf>:
 8012c3c:	b508      	push	{r3, lr}
 8012c3e:	ed2d 8b04 	vpush	{d8-d9}
 8012c42:	eeb0 8a60 	vmov.f32	s16, s1
 8012c46:	eeb0 9a40 	vmov.f32	s18, s0
 8012c4a:	f000 f84f 	bl	8012cec <__ieee754_powf>
 8012c4e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c56:	eef0 8a40 	vmov.f32	s17, s0
 8012c5a:	d63e      	bvs.n	8012cda <powf+0x9e>
 8012c5c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c64:	d112      	bne.n	8012c8c <powf+0x50>
 8012c66:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c6e:	d039      	beq.n	8012ce4 <powf+0xa8>
 8012c70:	eeb0 0a48 	vmov.f32	s0, s16
 8012c74:	f000 fb35 	bl	80132e2 <finitef>
 8012c78:	b378      	cbz	r0, 8012cda <powf+0x9e>
 8012c7a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c82:	d52a      	bpl.n	8012cda <powf+0x9e>
 8012c84:	f7fd fa30 	bl	80100e8 <__errno>
 8012c88:	2322      	movs	r3, #34	; 0x22
 8012c8a:	e014      	b.n	8012cb6 <powf+0x7a>
 8012c8c:	f000 fb29 	bl	80132e2 <finitef>
 8012c90:	b998      	cbnz	r0, 8012cba <powf+0x7e>
 8012c92:	eeb0 0a49 	vmov.f32	s0, s18
 8012c96:	f000 fb24 	bl	80132e2 <finitef>
 8012c9a:	b170      	cbz	r0, 8012cba <powf+0x7e>
 8012c9c:	eeb0 0a48 	vmov.f32	s0, s16
 8012ca0:	f000 fb1f 	bl	80132e2 <finitef>
 8012ca4:	b148      	cbz	r0, 8012cba <powf+0x7e>
 8012ca6:	eef4 8a68 	vcmp.f32	s17, s17
 8012caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cae:	d7e9      	bvc.n	8012c84 <powf+0x48>
 8012cb0:	f7fd fa1a 	bl	80100e8 <__errno>
 8012cb4:	2321      	movs	r3, #33	; 0x21
 8012cb6:	6003      	str	r3, [r0, #0]
 8012cb8:	e00f      	b.n	8012cda <powf+0x9e>
 8012cba:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cc2:	d10a      	bne.n	8012cda <powf+0x9e>
 8012cc4:	eeb0 0a49 	vmov.f32	s0, s18
 8012cc8:	f000 fb0b 	bl	80132e2 <finitef>
 8012ccc:	b128      	cbz	r0, 8012cda <powf+0x9e>
 8012cce:	eeb0 0a48 	vmov.f32	s0, s16
 8012cd2:	f000 fb06 	bl	80132e2 <finitef>
 8012cd6:	2800      	cmp	r0, #0
 8012cd8:	d1d4      	bne.n	8012c84 <powf+0x48>
 8012cda:	eeb0 0a68 	vmov.f32	s0, s17
 8012cde:	ecbd 8b04 	vpop	{d8-d9}
 8012ce2:	bd08      	pop	{r3, pc}
 8012ce4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012ce8:	e7f7      	b.n	8012cda <powf+0x9e>
	...

08012cec <__ieee754_powf>:
 8012cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cf0:	ee10 4a90 	vmov	r4, s1
 8012cf4:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8012cf8:	ed2d 8b02 	vpush	{d8}
 8012cfc:	ee10 6a10 	vmov	r6, s0
 8012d00:	eeb0 8a40 	vmov.f32	s16, s0
 8012d04:	eef0 8a60 	vmov.f32	s17, s1
 8012d08:	d10c      	bne.n	8012d24 <__ieee754_powf+0x38>
 8012d0a:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8012d0e:	0076      	lsls	r6, r6, #1
 8012d10:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8012d14:	f240 8296 	bls.w	8013244 <__ieee754_powf+0x558>
 8012d18:	ee38 0a28 	vadd.f32	s0, s16, s17
 8012d1c:	ecbd 8b02 	vpop	{d8}
 8012d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d24:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8012d28:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8012d2c:	dcf4      	bgt.n	8012d18 <__ieee754_powf+0x2c>
 8012d2e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8012d32:	dd08      	ble.n	8012d46 <__ieee754_powf+0x5a>
 8012d34:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8012d38:	d1ee      	bne.n	8012d18 <__ieee754_powf+0x2c>
 8012d3a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8012d3e:	0064      	lsls	r4, r4, #1
 8012d40:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8012d44:	e7e6      	b.n	8012d14 <__ieee754_powf+0x28>
 8012d46:	2e00      	cmp	r6, #0
 8012d48:	da20      	bge.n	8012d8c <__ieee754_powf+0xa0>
 8012d4a:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8012d4e:	da2d      	bge.n	8012dac <__ieee754_powf+0xc0>
 8012d50:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8012d54:	f2c0 827f 	blt.w	8013256 <__ieee754_powf+0x56a>
 8012d58:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8012d5c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8012d60:	fa48 f703 	asr.w	r7, r8, r3
 8012d64:	fa07 f303 	lsl.w	r3, r7, r3
 8012d68:	4543      	cmp	r3, r8
 8012d6a:	f040 8274 	bne.w	8013256 <__ieee754_powf+0x56a>
 8012d6e:	f007 0701 	and.w	r7, r7, #1
 8012d72:	f1c7 0702 	rsb	r7, r7, #2
 8012d76:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8012d7a:	d11f      	bne.n	8012dbc <__ieee754_powf+0xd0>
 8012d7c:	2c00      	cmp	r4, #0
 8012d7e:	f280 8267 	bge.w	8013250 <__ieee754_powf+0x564>
 8012d82:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012d86:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8012d8a:	e7c7      	b.n	8012d1c <__ieee754_powf+0x30>
 8012d8c:	2700      	movs	r7, #0
 8012d8e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8012d92:	d1f0      	bne.n	8012d76 <__ieee754_powf+0x8a>
 8012d94:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8012d98:	f000 8254 	beq.w	8013244 <__ieee754_powf+0x558>
 8012d9c:	dd08      	ble.n	8012db0 <__ieee754_powf+0xc4>
 8012d9e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 80130a8 <__ieee754_powf+0x3bc>
 8012da2:	2c00      	cmp	r4, #0
 8012da4:	bfa8      	it	ge
 8012da6:	eeb0 0a68 	vmovge.f32	s0, s17
 8012daa:	e7b7      	b.n	8012d1c <__ieee754_powf+0x30>
 8012dac:	2702      	movs	r7, #2
 8012dae:	e7ee      	b.n	8012d8e <__ieee754_powf+0xa2>
 8012db0:	2c00      	cmp	r4, #0
 8012db2:	f280 824a 	bge.w	801324a <__ieee754_powf+0x55e>
 8012db6:	eeb1 0a68 	vneg.f32	s0, s17
 8012dba:	e7af      	b.n	8012d1c <__ieee754_powf+0x30>
 8012dbc:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8012dc0:	d102      	bne.n	8012dc8 <__ieee754_powf+0xdc>
 8012dc2:	ee28 0a08 	vmul.f32	s0, s16, s16
 8012dc6:	e7a9      	b.n	8012d1c <__ieee754_powf+0x30>
 8012dc8:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8012dcc:	eeb0 0a48 	vmov.f32	s0, s16
 8012dd0:	d107      	bne.n	8012de2 <__ieee754_powf+0xf6>
 8012dd2:	2e00      	cmp	r6, #0
 8012dd4:	db05      	blt.n	8012de2 <__ieee754_powf+0xf6>
 8012dd6:	ecbd 8b02 	vpop	{d8}
 8012dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012dde:	f000 ba53 	b.w	8013288 <__ieee754_sqrtf>
 8012de2:	f000 fa77 	bl	80132d4 <fabsf>
 8012de6:	b125      	cbz	r5, 8012df2 <__ieee754_powf+0x106>
 8012de8:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8012dec:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8012df0:	d116      	bne.n	8012e20 <__ieee754_powf+0x134>
 8012df2:	2c00      	cmp	r4, #0
 8012df4:	bfbc      	itt	lt
 8012df6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8012dfa:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8012dfe:	2e00      	cmp	r6, #0
 8012e00:	da8c      	bge.n	8012d1c <__ieee754_powf+0x30>
 8012e02:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8012e06:	ea55 0307 	orrs.w	r3, r5, r7
 8012e0a:	d104      	bne.n	8012e16 <__ieee754_powf+0x12a>
 8012e0c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012e10:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012e14:	e782      	b.n	8012d1c <__ieee754_powf+0x30>
 8012e16:	2f01      	cmp	r7, #1
 8012e18:	d180      	bne.n	8012d1c <__ieee754_powf+0x30>
 8012e1a:	eeb1 0a40 	vneg.f32	s0, s0
 8012e1e:	e77d      	b.n	8012d1c <__ieee754_powf+0x30>
 8012e20:	0ff0      	lsrs	r0, r6, #31
 8012e22:	3801      	subs	r0, #1
 8012e24:	ea57 0300 	orrs.w	r3, r7, r0
 8012e28:	d104      	bne.n	8012e34 <__ieee754_powf+0x148>
 8012e2a:	ee38 8a48 	vsub.f32	s16, s16, s16
 8012e2e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8012e32:	e773      	b.n	8012d1c <__ieee754_powf+0x30>
 8012e34:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8012e38:	dd74      	ble.n	8012f24 <__ieee754_powf+0x238>
 8012e3a:	4b9c      	ldr	r3, [pc, #624]	; (80130ac <__ieee754_powf+0x3c0>)
 8012e3c:	429d      	cmp	r5, r3
 8012e3e:	dc08      	bgt.n	8012e52 <__ieee754_powf+0x166>
 8012e40:	2c00      	cmp	r4, #0
 8012e42:	da0b      	bge.n	8012e5c <__ieee754_powf+0x170>
 8012e44:	2000      	movs	r0, #0
 8012e46:	ecbd 8b02 	vpop	{d8}
 8012e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e4e:	f000 ba3b 	b.w	80132c8 <__math_oflowf>
 8012e52:	4b97      	ldr	r3, [pc, #604]	; (80130b0 <__ieee754_powf+0x3c4>)
 8012e54:	429d      	cmp	r5, r3
 8012e56:	dd08      	ble.n	8012e6a <__ieee754_powf+0x17e>
 8012e58:	2c00      	cmp	r4, #0
 8012e5a:	dcf3      	bgt.n	8012e44 <__ieee754_powf+0x158>
 8012e5c:	2000      	movs	r0, #0
 8012e5e:	ecbd 8b02 	vpop	{d8}
 8012e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e66:	f000 ba29 	b.w	80132bc <__math_uflowf>
 8012e6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012e6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012e72:	eddf 6a90 	vldr	s13, [pc, #576]	; 80130b4 <__ieee754_powf+0x3c8>
 8012e76:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8012e7a:	eee0 6a67 	vfms.f32	s13, s0, s15
 8012e7e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012e82:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8012e86:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012e8e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80130b8 <__ieee754_powf+0x3cc>
 8012e92:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8012e96:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80130bc <__ieee754_powf+0x3d0>
 8012e9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012e9e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80130c0 <__ieee754_powf+0x3d4>
 8012ea2:	eef0 6a67 	vmov.f32	s13, s15
 8012ea6:	eee0 6a07 	vfma.f32	s13, s0, s14
 8012eaa:	ee16 3a90 	vmov	r3, s13
 8012eae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012eb2:	f023 030f 	bic.w	r3, r3, #15
 8012eb6:	ee00 3a90 	vmov	s1, r3
 8012eba:	eee0 0a47 	vfms.f32	s1, s0, s14
 8012ebe:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012ec2:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8012ec6:	f024 040f 	bic.w	r4, r4, #15
 8012eca:	ee07 4a10 	vmov	s14, r4
 8012ece:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8012ed2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8012ed6:	ee07 3a90 	vmov	s15, r3
 8012eda:	eee7 0a27 	vfma.f32	s1, s14, s15
 8012ede:	3f01      	subs	r7, #1
 8012ee0:	ea57 0200 	orrs.w	r2, r7, r0
 8012ee4:	ee07 4a10 	vmov	s14, r4
 8012ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012eec:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8012ef0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8012ef4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8012ef8:	ee17 4a10 	vmov	r4, s14
 8012efc:	bf08      	it	eq
 8012efe:	eeb0 8a40 	vmoveq.f32	s16, s0
 8012f02:	2c00      	cmp	r4, #0
 8012f04:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012f08:	f340 817e 	ble.w	8013208 <__ieee754_powf+0x51c>
 8012f0c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8012f10:	f340 80f8 	ble.w	8013104 <__ieee754_powf+0x418>
 8012f14:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f1c:	bf4c      	ite	mi
 8012f1e:	2001      	movmi	r0, #1
 8012f20:	2000      	movpl	r0, #0
 8012f22:	e790      	b.n	8012e46 <__ieee754_powf+0x15a>
 8012f24:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8012f28:	bf01      	itttt	eq
 8012f2a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80130c4 <__ieee754_powf+0x3d8>
 8012f2e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8012f32:	f06f 0217 	mvneq.w	r2, #23
 8012f36:	ee17 5a90 	vmoveq	r5, s15
 8012f3a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8012f3e:	bf18      	it	ne
 8012f40:	2200      	movne	r2, #0
 8012f42:	3b7f      	subs	r3, #127	; 0x7f
 8012f44:	4413      	add	r3, r2
 8012f46:	4a60      	ldr	r2, [pc, #384]	; (80130c8 <__ieee754_powf+0x3dc>)
 8012f48:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8012f4c:	4295      	cmp	r5, r2
 8012f4e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8012f52:	dd06      	ble.n	8012f62 <__ieee754_powf+0x276>
 8012f54:	4a5d      	ldr	r2, [pc, #372]	; (80130cc <__ieee754_powf+0x3e0>)
 8012f56:	4295      	cmp	r5, r2
 8012f58:	f340 80a4 	ble.w	80130a4 <__ieee754_powf+0x3b8>
 8012f5c:	3301      	adds	r3, #1
 8012f5e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8012f62:	2500      	movs	r5, #0
 8012f64:	4a5a      	ldr	r2, [pc, #360]	; (80130d0 <__ieee754_powf+0x3e4>)
 8012f66:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8012f6a:	ee07 1a90 	vmov	s15, r1
 8012f6e:	ed92 7a00 	vldr	s14, [r2]
 8012f72:	4a58      	ldr	r2, [pc, #352]	; (80130d4 <__ieee754_powf+0x3e8>)
 8012f74:	ee37 6a27 	vadd.f32	s12, s14, s15
 8012f78:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012f7c:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8012f80:	1049      	asrs	r1, r1, #1
 8012f82:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8012f86:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8012f8a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8012f8e:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8012f92:	ee06 1a10 	vmov	s12, r1
 8012f96:	ee65 4a26 	vmul.f32	s9, s10, s13
 8012f9a:	ee36 7a47 	vsub.f32	s14, s12, s14
 8012f9e:	ee14 6a90 	vmov	r6, s9
 8012fa2:	4016      	ands	r6, r2
 8012fa4:	ee05 6a90 	vmov	s11, r6
 8012fa8:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8012fac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012fb0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80130d8 <__ieee754_powf+0x3ec>
 8012fb4:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8012fb8:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8012fbc:	ee25 6a26 	vmul.f32	s12, s10, s13
 8012fc0:	eddf 6a46 	vldr	s13, [pc, #280]	; 80130dc <__ieee754_powf+0x3f0>
 8012fc4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012fc8:	eddf 6a45 	vldr	s13, [pc, #276]	; 80130e0 <__ieee754_powf+0x3f4>
 8012fcc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012fd0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80130b4 <__ieee754_powf+0x3c8>
 8012fd4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012fd8:	eddf 6a42 	vldr	s13, [pc, #264]	; 80130e4 <__ieee754_powf+0x3f8>
 8012fdc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012fe0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80130e8 <__ieee754_powf+0x3fc>
 8012fe4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012fe8:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8012fec:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8012ff0:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012ff4:	eee5 6a07 	vfma.f32	s13, s10, s14
 8012ff8:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8012ffc:	eef0 7a45 	vmov.f32	s15, s10
 8013000:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8013004:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013008:	ee17 1a90 	vmov	r1, s15
 801300c:	4011      	ands	r1, r2
 801300e:	ee07 1a90 	vmov	s15, r1
 8013012:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8013016:	eea5 7ae5 	vfms.f32	s14, s11, s11
 801301a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801301e:	ee27 7a24 	vmul.f32	s14, s14, s9
 8013022:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013026:	eeb0 6a47 	vmov.f32	s12, s14
 801302a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801302e:	ee16 1a10 	vmov	r1, s12
 8013032:	4011      	ands	r1, r2
 8013034:	ee06 1a90 	vmov	s13, r1
 8013038:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801303c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80130ec <__ieee754_powf+0x400>
 8013040:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80130f0 <__ieee754_powf+0x404>
 8013044:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013048:	ee06 1a10 	vmov	s12, r1
 801304c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013050:	eddf 7a28 	vldr	s15, [pc, #160]	; 80130f4 <__ieee754_powf+0x408>
 8013054:	4928      	ldr	r1, [pc, #160]	; (80130f8 <__ieee754_powf+0x40c>)
 8013056:	eea6 7a27 	vfma.f32	s14, s12, s15
 801305a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801305e:	edd1 7a00 	vldr	s15, [r1]
 8013062:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013066:	ee07 3a90 	vmov	s15, r3
 801306a:	4b24      	ldr	r3, [pc, #144]	; (80130fc <__ieee754_powf+0x410>)
 801306c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013070:	eef0 7a47 	vmov.f32	s15, s14
 8013074:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013078:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801307c:	edd5 0a00 	vldr	s1, [r5]
 8013080:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8013084:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013088:	ee17 3a90 	vmov	r3, s15
 801308c:	4013      	ands	r3, r2
 801308e:	ee07 3a90 	vmov	s15, r3
 8013092:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8013096:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801309a:	eee6 6a65 	vfms.f32	s13, s12, s11
 801309e:	ee77 7a66 	vsub.f32	s15, s14, s13
 80130a2:	e70e      	b.n	8012ec2 <__ieee754_powf+0x1d6>
 80130a4:	2501      	movs	r5, #1
 80130a6:	e75d      	b.n	8012f64 <__ieee754_powf+0x278>
 80130a8:	00000000 	.word	0x00000000
 80130ac:	3f7ffff3 	.word	0x3f7ffff3
 80130b0:	3f800007 	.word	0x3f800007
 80130b4:	3eaaaaab 	.word	0x3eaaaaab
 80130b8:	3fb8aa3b 	.word	0x3fb8aa3b
 80130bc:	36eca570 	.word	0x36eca570
 80130c0:	3fb8aa00 	.word	0x3fb8aa00
 80130c4:	4b800000 	.word	0x4b800000
 80130c8:	001cc471 	.word	0x001cc471
 80130cc:	005db3d6 	.word	0x005db3d6
 80130d0:	0801413c 	.word	0x0801413c
 80130d4:	fffff000 	.word	0xfffff000
 80130d8:	3e6c3255 	.word	0x3e6c3255
 80130dc:	3e53f142 	.word	0x3e53f142
 80130e0:	3e8ba305 	.word	0x3e8ba305
 80130e4:	3edb6db7 	.word	0x3edb6db7
 80130e8:	3f19999a 	.word	0x3f19999a
 80130ec:	3f76384f 	.word	0x3f76384f
 80130f0:	3f763800 	.word	0x3f763800
 80130f4:	369dc3a0 	.word	0x369dc3a0
 80130f8:	0801414c 	.word	0x0801414c
 80130fc:	08014144 	.word	0x08014144
 8013100:	3338aa3c 	.word	0x3338aa3c
 8013104:	f040 8095 	bne.w	8013232 <__ieee754_powf+0x546>
 8013108:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8013100 <__ieee754_powf+0x414>
 801310c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013110:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8013114:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801311c:	f73f aefa 	bgt.w	8012f14 <__ieee754_powf+0x228>
 8013120:	15db      	asrs	r3, r3, #23
 8013122:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8013126:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801312a:	4103      	asrs	r3, r0
 801312c:	4423      	add	r3, r4
 801312e:	494b      	ldr	r1, [pc, #300]	; (801325c <__ieee754_powf+0x570>)
 8013130:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013134:	3a7f      	subs	r2, #127	; 0x7f
 8013136:	4111      	asrs	r1, r2
 8013138:	ea23 0101 	bic.w	r1, r3, r1
 801313c:	ee07 1a10 	vmov	s14, r1
 8013140:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8013144:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8013148:	f1c2 0217 	rsb	r2, r2, #23
 801314c:	4110      	asrs	r0, r2
 801314e:	2c00      	cmp	r4, #0
 8013150:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013154:	bfb8      	it	lt
 8013156:	4240      	neglt	r0, r0
 8013158:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801315c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8013260 <__ieee754_powf+0x574>
 8013160:	eddf 6a40 	vldr	s13, [pc, #256]	; 8013264 <__ieee754_powf+0x578>
 8013164:	ee17 3a10 	vmov	r3, s14
 8013168:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801316c:	f023 030f 	bic.w	r3, r3, #15
 8013170:	ee07 3a10 	vmov	s14, r3
 8013174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013178:	ee27 0a00 	vmul.f32	s0, s14, s0
 801317c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013180:	eddf 7a39 	vldr	s15, [pc, #228]	; 8013268 <__ieee754_powf+0x57c>
 8013184:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8013188:	eef0 7a40 	vmov.f32	s15, s0
 801318c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8013190:	eeb0 6a67 	vmov.f32	s12, s15
 8013194:	eea7 6a66 	vfms.f32	s12, s14, s13
 8013198:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801319c:	ee30 0a46 	vsub.f32	s0, s0, s12
 80131a0:	eddf 6a32 	vldr	s13, [pc, #200]	; 801326c <__ieee754_powf+0x580>
 80131a4:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8013270 <__ieee754_powf+0x584>
 80131a8:	eee7 6a06 	vfma.f32	s13, s14, s12
 80131ac:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8013274 <__ieee754_powf+0x588>
 80131b0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80131b4:	eddf 6a30 	vldr	s13, [pc, #192]	; 8013278 <__ieee754_powf+0x58c>
 80131b8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80131bc:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801327c <__ieee754_powf+0x590>
 80131c0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80131c4:	eef0 6a67 	vmov.f32	s13, s15
 80131c8:	eee6 6a47 	vfms.f32	s13, s12, s14
 80131cc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80131d0:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80131d4:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80131d8:	eea7 0a80 	vfma.f32	s0, s15, s0
 80131dc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80131e0:	ee37 0a40 	vsub.f32	s0, s14, s0
 80131e4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80131e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80131ec:	ee30 0a67 	vsub.f32	s0, s0, s15
 80131f0:	ee10 3a10 	vmov	r3, s0
 80131f4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80131f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80131fc:	da1f      	bge.n	801323e <__ieee754_powf+0x552>
 80131fe:	f000 f87d 	bl	80132fc <scalbnf>
 8013202:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013206:	e589      	b.n	8012d1c <__ieee754_powf+0x30>
 8013208:	4a1d      	ldr	r2, [pc, #116]	; (8013280 <__ieee754_powf+0x594>)
 801320a:	4293      	cmp	r3, r2
 801320c:	dd07      	ble.n	801321e <__ieee754_powf+0x532>
 801320e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013216:	bf4c      	ite	mi
 8013218:	2001      	movmi	r0, #1
 801321a:	2000      	movpl	r0, #0
 801321c:	e61f      	b.n	8012e5e <__ieee754_powf+0x172>
 801321e:	d108      	bne.n	8013232 <__ieee754_powf+0x546>
 8013220:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013224:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8013228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801322c:	f6ff af78 	blt.w	8013120 <__ieee754_powf+0x434>
 8013230:	e7ed      	b.n	801320e <__ieee754_powf+0x522>
 8013232:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8013236:	f73f af73 	bgt.w	8013120 <__ieee754_powf+0x434>
 801323a:	2000      	movs	r0, #0
 801323c:	e78c      	b.n	8013158 <__ieee754_powf+0x46c>
 801323e:	ee00 3a10 	vmov	s0, r3
 8013242:	e7de      	b.n	8013202 <__ieee754_powf+0x516>
 8013244:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013248:	e568      	b.n	8012d1c <__ieee754_powf+0x30>
 801324a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8013284 <__ieee754_powf+0x598>
 801324e:	e565      	b.n	8012d1c <__ieee754_powf+0x30>
 8013250:	eeb0 0a48 	vmov.f32	s0, s16
 8013254:	e562      	b.n	8012d1c <__ieee754_powf+0x30>
 8013256:	2700      	movs	r7, #0
 8013258:	e58d      	b.n	8012d76 <__ieee754_powf+0x8a>
 801325a:	bf00      	nop
 801325c:	007fffff 	.word	0x007fffff
 8013260:	35bfbe8c 	.word	0x35bfbe8c
 8013264:	3f317200 	.word	0x3f317200
 8013268:	3f317218 	.word	0x3f317218
 801326c:	b5ddea0e 	.word	0xb5ddea0e
 8013270:	3331bb4c 	.word	0x3331bb4c
 8013274:	388ab355 	.word	0x388ab355
 8013278:	bb360b61 	.word	0xbb360b61
 801327c:	3e2aaaab 	.word	0x3e2aaaab
 8013280:	43160000 	.word	0x43160000
 8013284:	00000000 	.word	0x00000000

08013288 <__ieee754_sqrtf>:
 8013288:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801328c:	4770      	bx	lr

0801328e <with_errnof>:
 801328e:	b513      	push	{r0, r1, r4, lr}
 8013290:	4604      	mov	r4, r0
 8013292:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013296:	f7fc ff27 	bl	80100e8 <__errno>
 801329a:	ed9d 0a01 	vldr	s0, [sp, #4]
 801329e:	6004      	str	r4, [r0, #0]
 80132a0:	b002      	add	sp, #8
 80132a2:	bd10      	pop	{r4, pc}

080132a4 <xflowf>:
 80132a4:	b130      	cbz	r0, 80132b4 <xflowf+0x10>
 80132a6:	eef1 7a40 	vneg.f32	s15, s0
 80132aa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80132ae:	2022      	movs	r0, #34	; 0x22
 80132b0:	f7ff bfed 	b.w	801328e <with_errnof>
 80132b4:	eef0 7a40 	vmov.f32	s15, s0
 80132b8:	e7f7      	b.n	80132aa <xflowf+0x6>
	...

080132bc <__math_uflowf>:
 80132bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80132c4 <__math_uflowf+0x8>
 80132c0:	f7ff bff0 	b.w	80132a4 <xflowf>
 80132c4:	10000000 	.word	0x10000000

080132c8 <__math_oflowf>:
 80132c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80132d0 <__math_oflowf+0x8>
 80132cc:	f7ff bfea 	b.w	80132a4 <xflowf>
 80132d0:	70000000 	.word	0x70000000

080132d4 <fabsf>:
 80132d4:	ee10 3a10 	vmov	r3, s0
 80132d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80132dc:	ee00 3a10 	vmov	s0, r3
 80132e0:	4770      	bx	lr

080132e2 <finitef>:
 80132e2:	b082      	sub	sp, #8
 80132e4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80132e8:	9801      	ldr	r0, [sp, #4]
 80132ea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80132ee:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80132f2:	bfac      	ite	ge
 80132f4:	2000      	movge	r0, #0
 80132f6:	2001      	movlt	r0, #1
 80132f8:	b002      	add	sp, #8
 80132fa:	4770      	bx	lr

080132fc <scalbnf>:
 80132fc:	ee10 3a10 	vmov	r3, s0
 8013300:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8013304:	d025      	beq.n	8013352 <scalbnf+0x56>
 8013306:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801330a:	d302      	bcc.n	8013312 <scalbnf+0x16>
 801330c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013310:	4770      	bx	lr
 8013312:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8013316:	d122      	bne.n	801335e <scalbnf+0x62>
 8013318:	4b2a      	ldr	r3, [pc, #168]	; (80133c4 <scalbnf+0xc8>)
 801331a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80133c8 <scalbnf+0xcc>
 801331e:	4298      	cmp	r0, r3
 8013320:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013324:	db16      	blt.n	8013354 <scalbnf+0x58>
 8013326:	ee10 3a10 	vmov	r3, s0
 801332a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801332e:	3a19      	subs	r2, #25
 8013330:	4402      	add	r2, r0
 8013332:	2afe      	cmp	r2, #254	; 0xfe
 8013334:	dd15      	ble.n	8013362 <scalbnf+0x66>
 8013336:	ee10 3a10 	vmov	r3, s0
 801333a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80133cc <scalbnf+0xd0>
 801333e:	eddf 6a24 	vldr	s13, [pc, #144]	; 80133d0 <scalbnf+0xd4>
 8013342:	2b00      	cmp	r3, #0
 8013344:	eeb0 7a67 	vmov.f32	s14, s15
 8013348:	bfb8      	it	lt
 801334a:	eef0 7a66 	vmovlt.f32	s15, s13
 801334e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8013352:	4770      	bx	lr
 8013354:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80133d4 <scalbnf+0xd8>
 8013358:	ee20 0a27 	vmul.f32	s0, s0, s15
 801335c:	4770      	bx	lr
 801335e:	0dd2      	lsrs	r2, r2, #23
 8013360:	e7e6      	b.n	8013330 <scalbnf+0x34>
 8013362:	2a00      	cmp	r2, #0
 8013364:	dd06      	ble.n	8013374 <scalbnf+0x78>
 8013366:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801336a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801336e:	ee00 3a10 	vmov	s0, r3
 8013372:	4770      	bx	lr
 8013374:	f112 0f16 	cmn.w	r2, #22
 8013378:	da1a      	bge.n	80133b0 <scalbnf+0xb4>
 801337a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801337e:	4298      	cmp	r0, r3
 8013380:	ee10 3a10 	vmov	r3, s0
 8013384:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013388:	dd0a      	ble.n	80133a0 <scalbnf+0xa4>
 801338a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80133cc <scalbnf+0xd0>
 801338e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80133d0 <scalbnf+0xd4>
 8013392:	eef0 7a40 	vmov.f32	s15, s0
 8013396:	2b00      	cmp	r3, #0
 8013398:	bf18      	it	ne
 801339a:	eeb0 0a47 	vmovne.f32	s0, s14
 801339e:	e7db      	b.n	8013358 <scalbnf+0x5c>
 80133a0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80133d4 <scalbnf+0xd8>
 80133a4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80133d8 <scalbnf+0xdc>
 80133a8:	eef0 7a40 	vmov.f32	s15, s0
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	e7f3      	b.n	8013398 <scalbnf+0x9c>
 80133b0:	3219      	adds	r2, #25
 80133b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80133b6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80133ba:	eddf 7a08 	vldr	s15, [pc, #32]	; 80133dc <scalbnf+0xe0>
 80133be:	ee07 3a10 	vmov	s14, r3
 80133c2:	e7c4      	b.n	801334e <scalbnf+0x52>
 80133c4:	ffff3cb0 	.word	0xffff3cb0
 80133c8:	4c000000 	.word	0x4c000000
 80133cc:	7149f2ca 	.word	0x7149f2ca
 80133d0:	f149f2ca 	.word	0xf149f2ca
 80133d4:	0da24260 	.word	0x0da24260
 80133d8:	8da24260 	.word	0x8da24260
 80133dc:	33000000 	.word	0x33000000

080133e0 <_init>:
 80133e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133e2:	bf00      	nop
 80133e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133e6:	bc08      	pop	{r3}
 80133e8:	469e      	mov	lr, r3
 80133ea:	4770      	bx	lr

080133ec <_fini>:
 80133ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133ee:	bf00      	nop
 80133f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133f2:	bc08      	pop	{r3}
 80133f4:	469e      	mov	lr, r3
 80133f6:	4770      	bx	lr
