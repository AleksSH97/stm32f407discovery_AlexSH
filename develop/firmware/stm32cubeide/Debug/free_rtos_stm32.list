
free_rtos_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd2c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000954  0800cee0  0800cee0  0001cee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d834  0800d834  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800d834  0800d834  0001d834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d83c  0800d83c  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d83c  0800d83c  0001d83c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d840  0800d840  0001d840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800d844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020210  2**0
                  CONTENTS
 10 .bss          00004c38  20000210  20000210  00020210  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004e48  20004e48  00020210  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ff51  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ef3  00000000  00000000  00040191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001aa8  00000000  00000000  00045088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018b8  00000000  00000000  00046b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029165  00000000  00000000  000483e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024770  00000000  00000000  0007154d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfc35  00000000  00000000  00095cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001758f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007e84  00000000  00000000  00175944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000210 	.word	0x20000210
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cec4 	.word	0x0800cec4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000214 	.word	0x20000214
 80001ec:	0800cec4 	.word	0x0800cec4

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <initialize_button>:

/**
 * @brief          Button initialization (CLK, GPIO, NVIC)
 */
void initialize_button(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]

   __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <initialize_button+0xb8>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a26      	ldr	r2, [pc, #152]	; (8000fa4 <initialize_button+0xb8>)
 8000f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <initialize_button+0xb8>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <initialize_button+0xb8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a1f      	ldr	r2, [pc, #124]	; (8000fa4 <initialize_button+0xb8>)
 8000f28:	f043 0308 	orr.w	r3, r3, #8
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <initialize_button+0xb8>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0308 	and.w	r3, r3, #8
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <initialize_button+0xb8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a18      	ldr	r2, [pc, #96]	; (8000fa4 <initialize_button+0xb8>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <initialize_button+0xb8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <initialize_button+0xb8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a11      	ldr	r2, [pc, #68]	; (8000fa4 <initialize_button+0xb8>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <initialize_button+0xb8>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]

   HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	2006      	movs	r0, #6
 8000f78:	f005 fb91 	bl	800669e <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f7c:	2006      	movs	r0, #6
 8000f7e:	f005 fbaa 	bl	80066d6 <HAL_NVIC_EnableIRQ>

   GPIO_InitStruct.Pin = BUTTON_Pin;
 8000f82:	2301      	movs	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f8a:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <initialize_button+0xbc>)
 8000f98:	f005 fc4a 	bl	8006830 <HAL_GPIO_Init>
}
 8000f9c:	bf00      	nop
 8000f9e:	3728      	adds	r7, #40	; 0x28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020000 	.word	0x40020000

08000fac <ButtonTaskStart>:
/******************************************************************************/



void ButtonTaskStart(void *argumet)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b0a2      	sub	sp, #136	; 0x88
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    uint8_t ddd[128] = {0};
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	227c      	movs	r2, #124	; 0x7c
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f009 fa4b 	bl	800a45c <memset>
    UNUSED(ddd);

    for (;;)
    {
        button_check_mode();
 8000fc6:	f000 f811 	bl	8000fec <button_check_mode>
        osDelay(1);
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f002 ff74 	bl	8003eb8 <osDelay>
        button_check_mode();
 8000fd0:	e7f9      	b.n	8000fc6 <ButtonTaskStart+0x1a>

08000fd2 <button_activate>:

/**
 * @brief          Button activation from EXTI Callback
 */
void button_activate(struct user_button *user_button_ptr)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
	user_button_ptr->activate = true;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	705a      	strb	r2, [r3, #1]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <button_check_mode>:

/**
 * @brief          This functions calls from SysTick constantly to check button mode
 */
void button_check_mode(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	button_check_algorithm(&user_button);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <button_check_mode+0x10>)
 8000ff2:	f000 f805 	bl	8001000 <button_check_algorithm>
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	2000022c 	.word	0x2000022c

08001000 <button_check_algorithm>:

/**
 * @brief          Button check algorithm (for singlne, double and hold modes)
 */
void button_check_algorithm(struct user_button *user_button_ptr)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	if (user_button_ptr->activate) {
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	785b      	ldrb	r3, [r3, #1]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d016      	beq.n	800103e <button_check_algorithm+0x3e>
		if (!timeout_started(&user_button.debounce_timeout)) {
 8001010:	483d      	ldr	r0, [pc, #244]	; (8001108 <button_check_algorithm+0x108>)
 8001012:	f000 fdc9 	bl	8001ba8 <timeout_started>
 8001016:	4603      	mov	r3, r0
 8001018:	f083 0301 	eor.w	r3, r3, #1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00a      	beq.n	8001038 <button_check_algorithm+0x38>
			user_button_ptr->mode = BUTTON_ONE_CLICK;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
			user_button_ptr->activate = false;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	705a      	strb	r2, [r3, #1]
			timeout_start(&user_button.debounce_timeout, BUTTON_DEBOUNCE_TIME_MS);
 800102e:	2132      	movs	r1, #50	; 0x32
 8001030:	4835      	ldr	r0, [pc, #212]	; (8001108 <button_check_algorithm+0x108>)
 8001032:	f000 fd8c 	bl	8001b4e <timeout_start>
 8001036:	e002      	b.n	800103e <button_check_algorithm+0x3e>
		}
		else {
			user_button_ptr->mode = BUTTON_DOUBLE_CLICK;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]
		}
	}

	if ((timeout_started(&user_button.debounce_timeout)) && (timeout_check(&user_button.debounce_timeout, (5 * user_button_ptr->held_pressed_counter)))) {
 800103e:	4832      	ldr	r0, [pc, #200]	; (8001108 <button_check_algorithm+0x108>)
 8001040:	f000 fdb2 	bl	8001ba8 <timeout_started>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d023      	beq.n	8001092 <button_check_algorithm+0x92>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	789b      	ldrb	r3, [r3, #2]
 800104e:	461a      	mov	r2, r3
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	4619      	mov	r1, r3
 8001058:	482b      	ldr	r0, [pc, #172]	; (8001108 <button_check_algorithm+0x108>)
 800105a:	f000 fdb7 	bl	8001bcc <timeout_check>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d016      	beq.n	8001092 <button_check_algorithm+0x92>
		if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET) {
 8001064:	2101      	movs	r1, #1
 8001066:	4829      	ldr	r0, [pc, #164]	; (800110c <button_check_algorithm+0x10c>)
 8001068:	f005 fd7e 	bl	8006b68 <HAL_GPIO_ReadPin>
 800106c:	4603      	mov	r3, r0
 800106e:	2b01      	cmp	r3, #1
 8001070:	d105      	bne.n	800107e <button_check_algorithm+0x7e>
			++user_button_ptr->held_pressed_counter;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	789b      	ldrb	r3, [r3, #2]
 8001076:	3301      	adds	r3, #1
 8001078:	b2da      	uxtb	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	709a      	strb	r2, [r3, #2]
		}
		user_button_ptr->mode = (user_button_ptr->held_pressed_counter >= 71) ? BUTTON_HELD_PRESSED : user_button_ptr->mode;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	789b      	ldrb	r3, [r3, #2]
 8001082:	2b46      	cmp	r3, #70	; 0x46
 8001084:	d802      	bhi.n	800108c <button_check_algorithm+0x8c>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	e000      	b.n	800108e <button_check_algorithm+0x8e>
 800108c:	2202      	movs	r2, #2
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	701a      	strb	r2, [r3, #0]
	}

	if ((timeout_started(&user_button.debounce_timeout)) && (timeout_check(&user_button.debounce_timeout, 350))) {
 8001092:	481d      	ldr	r0, [pc, #116]	; (8001108 <button_check_algorithm+0x108>)
 8001094:	f000 fd88 	bl	8001ba8 <timeout_started>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d030      	beq.n	8001100 <button_check_algorithm+0x100>
 800109e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80010a2:	4819      	ldr	r0, [pc, #100]	; (8001108 <button_check_algorithm+0x108>)
 80010a4:	f000 fd92 	bl	8001bcc <timeout_check>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d028      	beq.n	8001100 <button_check_algorithm+0x100>
		switch (user_button_ptr->mode) {
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d018      	beq.n	80010e8 <button_check_algorithm+0xe8>
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	dc19      	bgt.n	80010ee <button_check_algorithm+0xee>
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <button_check_algorithm+0xc4>
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d00f      	beq.n	80010e2 <button_check_algorithm+0xe2>
 80010c2:	e014      	b.n	80010ee <button_check_algorithm+0xee>
		    case BUTTON_ONE_CLICK:
		        if(!uart_send_byte(&huart3, 0x02)) {
 80010c4:	2102      	movs	r1, #2
 80010c6:	4812      	ldr	r0, [pc, #72]	; (8001110 <button_check_algorithm+0x110>)
 80010c8:	f002 fbb6 	bl	8003838 <uart_send_byte>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f083 0301 	eor.w	r3, r3, #1
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <button_check_algorithm+0xdc>
		            indication_led_error();
 80010d8:	f000 fa18 	bl	800150c <indication_led_error>
		        }
		    	indication_led_button();
 80010dc:	f000 f99e 	bl	800141c <indication_led_button>
			   	break;
 80010e0:	e005      	b.n	80010ee <button_check_algorithm+0xee>
		    case BUTTON_DOUBLE_CLICK:
			 	indication_led_button_double_click();
 80010e2:	f000 f9eb 	bl	80014bc <indication_led_button_double_click>
			   	break;
 80010e6:	e002      	b.n	80010ee <button_check_algorithm+0xee>
			case BUTTON_HELD_PRESSED:
			    indication_led_button_hold();
 80010e8:	f000 f9c0 	bl	800146c <indication_led_button_hold>
			    break;
 80010ec:	bf00      	nop
		}
		user_button_ptr->held_pressed_counter = 0;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	709a      	strb	r2, [r3, #2]
		timeout_stop(&user_button.debounce_timeout);
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <button_check_algorithm+0x108>)
 80010f6:	f000 fd45 	bl	8001b84 <timeout_stop>
		user_button_ptr->activate = false;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	705a      	strb	r2, [r3, #1]
	}
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000230 	.word	0x20000230
 800110c:	40020000 	.word	0x40020000
 8001110:	20000410 	.word	0x20000410

08001114 <EXTI0_IRQHandler>:

/**
 * @brief          EXTI0 IRQHandler - for interrupt with button
 */
void EXTI0_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001118:	2001      	movs	r0, #1
 800111a:	f005 fd71 	bl	8006c00 <HAL_GPIO_EXTI_IRQHandler>
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_GPIO_EXTI_Callback>:

/**
 * @brief          Callback of EXTI0
 */
void HAL_GPIO_EXTI_Callback(uint16_t gpio_pin)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	80fb      	strh	r3, [r7, #6]
	if (gpio_pin == BUTTON_Pin) {
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d102      	bne.n	800113a <HAL_GPIO_EXTI_Callback+0x16>
		button_activate(&user_button);
 8001134:	4803      	ldr	r0, [pc, #12]	; (8001144 <HAL_GPIO_EXTI_Callback+0x20>)
 8001136:	f7ff ff4c 	bl	8000fd2 <button_activate>
	}
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000022c 	.word	0x2000022c

08001148 <MX_FREERTOS_Init>:
        .priority = (osPriority_t) osPriorityNormal,
};


void MX_FREERTOS_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
    LogsInput = osThreadNew(LogsTaskStart, NULL, &LogsTask_attributes);
 800114c:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <MX_FREERTOS_Init+0x38>)
 800114e:	2100      	movs	r1, #0
 8001150:	480c      	ldr	r0, [pc, #48]	; (8001184 <MX_FREERTOS_Init+0x3c>)
 8001152:	f002 fe1f 	bl	8003d94 <osThreadNew>
 8001156:	4603      	mov	r3, r0
 8001158:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <MX_FREERTOS_Init+0x40>)
 800115a:	6013      	str	r3, [r2, #0]
    ButtonInput = osThreadNew(ButtonTaskStart, NULL, &ButtonTask_attributes);
 800115c:	4a0b      	ldr	r2, [pc, #44]	; (800118c <MX_FREERTOS_Init+0x44>)
 800115e:	2100      	movs	r1, #0
 8001160:	480b      	ldr	r0, [pc, #44]	; (8001190 <MX_FREERTOS_Init+0x48>)
 8001162:	f002 fe17 	bl	8003d94 <osThreadNew>
 8001166:	4603      	mov	r3, r0
 8001168:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <MX_FREERTOS_Init+0x4c>)
 800116a:	6013      	str	r3, [r2, #0]
    IndicationUpdate = osThreadNew(IndicationUpdateTaskStart, NULL, &IndicationTask_attributes);
 800116c:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <MX_FREERTOS_Init+0x50>)
 800116e:	2100      	movs	r1, #0
 8001170:	480a      	ldr	r0, [pc, #40]	; (800119c <MX_FREERTOS_Init+0x54>)
 8001172:	f002 fe0f 	bl	8003d94 <osThreadNew>
 8001176:	4603      	mov	r3, r0
 8001178:	4a09      	ldr	r2, [pc, #36]	; (80011a0 <MX_FREERTOS_Init+0x58>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	0800d3d8 	.word	0x0800d3d8
 8001184:	080023cd 	.word	0x080023cd
 8001188:	2000023c 	.word	0x2000023c
 800118c:	0800d3fc 	.word	0x0800d3fc
 8001190:	08000fad 	.word	0x08000fad
 8001194:	20000240 	.word	0x20000240
 8001198:	0800d420 	.word	0x0800d420
 800119c:	080012e9 	.word	0x080012e9
 80011a0:	20000244 	.word	0x20000244

080011a4 <initialize_led_indication>:

/**
 * @brief          Initialization off led CLK, Pins, hardware, fns and init of each led fns
 */
void initialize_led_indication(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af00      	add	r7, sp, #0
	mculed_ctrl_t fns = {0};
 80011aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOD_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <initialize_led_indication+0x120>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a3d      	ldr	r2, [pc, #244]	; (80012c4 <initialize_led_indication+0x120>)
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <initialize_led_indication+0x120>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <initialize_led_indication+0x120>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a36      	ldr	r2, [pc, #216]	; (80012c4 <initialize_led_indication+0x120>)
 80011ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b34      	ldr	r3, [pc, #208]	; (80012c4 <initialize_led_indication+0x120>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <initialize_led_indication+0x120>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a2f      	ldr	r2, [pc, #188]	; (80012c4 <initialize_led_indication+0x120>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <initialize_led_indication+0x120>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin|LED_TOP_Pin|LED_RIGHT_Pin|LED_BOTTOM_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001220:	4829      	ldr	r0, [pc, #164]	; (80012c8 <initialize_led_indication+0x124>)
 8001222:	f005 fcb9 	bl	8006b98 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = LED_LEFT_Pin|LED_TOP_Pin|LED_RIGHT_Pin|LED_BOTTOM_Pin;
 8001226:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800122a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	2301      	movs	r3, #1
 800122e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	4619      	mov	r1, r3
 800123e:	4822      	ldr	r0, [pc, #136]	; (80012c8 <initialize_led_indication+0x124>)
 8001240:	f005 faf6 	bl	8006830 <HAL_GPIO_Init>

	mculed[LED_TOP].hardware.port    =    (uint32_t) LED_TOP_GPIO_Port;
 8001244:	4b21      	ldr	r3, [pc, #132]	; (80012cc <initialize_led_indication+0x128>)
 8001246:	4a20      	ldr	r2, [pc, #128]	; (80012c8 <initialize_led_indication+0x124>)
 8001248:	60da      	str	r2, [r3, #12]
	mculed[LED_TOP].hardware.pin     =    (uint32_t) LED_TOP_Pin;
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <initialize_led_indication+0x128>)
 800124c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001250:	609a      	str	r2, [r3, #8]
	mculed[LED_LEFT].hardware.port   =    (uint32_t) LED_LEFT_GPIO_Port;
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <initialize_led_indication+0x128>)
 8001254:	4a1c      	ldr	r2, [pc, #112]	; (80012c8 <initialize_led_indication+0x124>)
 8001256:	635a      	str	r2, [r3, #52]	; 0x34
	mculed[LED_LEFT].hardware.pin    =    (uint32_t) LED_LEFT_Pin;
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <initialize_led_indication+0x128>)
 800125a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800125e:	631a      	str	r2, [r3, #48]	; 0x30
	mculed[LED_BOTTOM].hardware.port =    (uint32_t) LED_BOTTOM_GPIO_Port;
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <initialize_led_indication+0x128>)
 8001262:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <initialize_led_indication+0x124>)
 8001264:	65da      	str	r2, [r3, #92]	; 0x5c
	mculed[LED_BOTTOM].hardware.pin  =    (uint32_t) LED_BOTTOM_Pin;
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <initialize_led_indication+0x128>)
 8001268:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800126c:	659a      	str	r2, [r3, #88]	; 0x58
	mculed[LED_RIGHT].hardware.port  =    (uint32_t) LED_RIGHT_GPIO_Port;
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <initialize_led_indication+0x128>)
 8001270:	4a15      	ldr	r2, [pc, #84]	; (80012c8 <initialize_led_indication+0x124>)
 8001272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	mculed[LED_RIGHT].hardware.pin   =    (uint32_t) LED_RIGHT_Pin;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <initialize_led_indication+0x128>)
 8001278:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	fns.turn_on = indication_led_turn_on;
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <initialize_led_indication+0x12c>)
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
	fns.turn_off = indication_led_turn_off;
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <initialize_led_indication+0x130>)
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
	fns.toggle = indication_led_toggle;
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <initialize_led_indication+0x134>)
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c

	mculed_init(&mculed[LED_TOP], &fns);
 800128c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001290:	4619      	mov	r1, r3
 8001292:	480e      	ldr	r0, [pc, #56]	; (80012cc <initialize_led_indication+0x128>)
 8001294:	f000 fb72 	bl	800197c <mculed_init>
	mculed_init(&mculed[LED_LEFT], &fns);
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	4619      	mov	r1, r3
 800129e:	480f      	ldr	r0, [pc, #60]	; (80012dc <initialize_led_indication+0x138>)
 80012a0:	f000 fb6c 	bl	800197c <mculed_init>
	mculed_init(&mculed[LED_BOTTOM], &fns);
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	4619      	mov	r1, r3
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <initialize_led_indication+0x13c>)
 80012ac:	f000 fb66 	bl	800197c <mculed_init>
	mculed_init(&mculed[LED_RIGHT], &fns);
 80012b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b4:	4619      	mov	r1, r3
 80012b6:	480b      	ldr	r0, [pc, #44]	; (80012e4 <initialize_led_indication+0x140>)
 80012b8:	f000 fb60 	bl	800197c <mculed_init>
}
 80012bc:	bf00      	nop
 80012be:	3730      	adds	r7, #48	; 0x30
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	20000248 	.word	0x20000248
 80012d0:	0800130f 	.word	0x0800130f
 80012d4:	08001333 	.word	0x08001333
 80012d8:	08001357 	.word	0x08001357
 80012dc:	20000270 	.word	0x20000270
 80012e0:	20000298 	.word	0x20000298
 80012e4:	200002c0 	.word	0x200002c0

080012e8 <IndicationUpdateTaskStart>:




void IndicationUpdateTaskStart(void *argument)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b0a2      	sub	sp, #136	; 0x88
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
    uint8_t ddd[128] = {0};
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	227c      	movs	r2, #124	; 0x7c
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f009 f8ad 	bl	800a45c <memset>
    UNUSED(ddd);

    for (;;)
    {
        indication_leds_update();
 8001302:	f000 fb1d 	bl	8001940 <indication_leds_update>

        osDelay(1);
 8001306:	2001      	movs	r0, #1
 8001308:	f002 fdd6 	bl	8003eb8 <osDelay>
        indication_leds_update();
 800130c:	e7f9      	b.n	8001302 <IndicationUpdateTaskStart+0x1a>

0800130e <indication_led_turn_on>:

/**
 * @brief          Led actions fns
 */
void indication_led_turn_on(mculed_t *self)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef *) self->hardware.port, self->hardware.pin, GPIO_PIN_SET);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	4618      	mov	r0, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	b29b      	uxth	r3, r3
 8001322:	2201      	movs	r2, #1
 8001324:	4619      	mov	r1, r3
 8001326:	f005 fc37 	bl	8006b98 <HAL_GPIO_WritePin>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <indication_led_turn_off>:

void indication_led_turn_off(mculed_t *self)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef *) self->hardware.port, self->hardware.pin, GPIO_PIN_RESET);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	4618      	mov	r0, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	b29b      	uxth	r3, r3
 8001346:	2200      	movs	r2, #0
 8001348:	4619      	mov	r1, r3
 800134a:	f005 fc25 	bl	8006b98 <HAL_GPIO_WritePin>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <indication_led_toggle>:

void indication_led_toggle(mculed_t *self)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin((GPIO_TypeDef *)self->hardware.port, self->hardware.pin);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	b29b      	uxth	r3, r3
 800136a:	4619      	mov	r1, r3
 800136c:	4610      	mov	r0, r2
 800136e:	f005 fc2c 	bl	8006bca <HAL_GPIO_TogglePin>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <indication_led_loading>:

/**
 * @brief          Loading led animation function
 */
void indication_led_loading(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
	for (int led_index = 0; led_index < N_LED; led_index++) {
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	e017      	b.n	80013b8 <indication_led_loading+0x3c>
		indication_led_loading_setup(&mculed[led_index], led_index);
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <indication_led_loading+0x4c>)
 8001394:	4413      	add	r3, r2
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	4618      	mov	r0, r3
 800139a:	f000 f93d 	bl	8001618 <indication_led_loading_setup>
		led_function(&mculed[led_index]);
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <indication_led_loading+0x4c>)
 80013aa:	4413      	add	r3, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 fb1e 	bl	80019ee <led_function>
	for (int led_index = 0; led_index < N_LED; led_index++) {
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3301      	adds	r3, #1
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d9e4      	bls.n	8001388 <indication_led_loading+0xc>
	}
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000248 	.word	0x20000248

080013cc <indication_led>:

/**
 * @brief          LED on
 */
void indication_led(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
	for (int led_index = 0; led_index < N_LED; led_index++) {
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	e017      	b.n	8001408 <indication_led+0x3c>
		indication_led_setup(&mculed[led_index], led_index);
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <indication_led+0x4c>)
 80013e4:	4413      	add	r3, r2
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 f8b7 	bl	800155c <indication_led_setup>
		led_function(&mculed[led_index]);
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4a07      	ldr	r2, [pc, #28]	; (8001418 <indication_led+0x4c>)
 80013fa:	4413      	add	r3, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 faf6 	bl	80019ee <led_function>
	for (int led_index = 0; led_index < N_LED; led_index++) {
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3301      	adds	r3, #1
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b03      	cmp	r3, #3
 800140c:	d9e4      	bls.n	80013d8 <indication_led+0xc>
	}
}
 800140e:	bf00      	nop
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000248 	.word	0x20000248

0800141c <indication_led_button>:

/**
 * @brief          Button led function
 */
void indication_led_button(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
    for (int led_index = 0; led_index < N_LED; led_index++) {
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	e017      	b.n	8001458 <indication_led_button+0x3c>
        indication_led_button_setup(&mculed[led_index], led_index);
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <indication_led_button+0x4c>)
 8001434:	4413      	add	r3, r2
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f947 	bl	80016cc <indication_led_button_setup>
        led_function(&mculed[led_index]);
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4a07      	ldr	r2, [pc, #28]	; (8001468 <indication_led_button+0x4c>)
 800144a:	4413      	add	r3, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f000 face 	bl	80019ee <led_function>
    for (int led_index = 0; led_index < N_LED; led_index++) {
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3301      	adds	r3, #1
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b03      	cmp	r3, #3
 800145c:	d9e4      	bls.n	8001428 <indication_led_button+0xc>
    }
}
 800145e:	bf00      	nop
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000248 	.word	0x20000248

0800146c <indication_led_button_hold>:

/**
 * @brief          Hold button led function
 */
void indication_led_button_hold(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
	for (int led_index = 0; led_index < N_LED; led_index++) {
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	e017      	b.n	80014a8 <indication_led_button_hold+0x3c>
		indication_led_button_hold_setup(&mculed[led_index], led_index);
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <indication_led_button_hold+0x4c>)
 8001484:	4413      	add	r3, r2
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	f000 f973 	bl	8001774 <indication_led_button_hold_setup>
		led_function(&mculed[led_index]);
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <indication_led_button_hold+0x4c>)
 800149a:	4413      	add	r3, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f000 faa6 	bl	80019ee <led_function>
	for (int led_index = 0; led_index < N_LED; led_index++) {
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3301      	adds	r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d9e4      	bls.n	8001478 <indication_led_button_hold+0xc>
	}
}
 80014ae:	bf00      	nop
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000248 	.word	0x20000248

080014bc <indication_led_button_double_click>:

/**
 * @brief          Double click button led function
 */
void indication_led_button_double_click(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
	for (int led_index = 0; led_index < N_LED; led_index++) {
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	e017      	b.n	80014f8 <indication_led_button_double_click+0x3c>
		indication_led_button_double_click_setup(&mculed[led_index], led_index);
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <indication_led_button_double_click+0x4c>)
 80014d4:	4413      	add	r3, r2
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 f9af 	bl	800183c <indication_led_button_double_click_setup>
		led_function(&mculed[led_index]);
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4a07      	ldr	r2, [pc, #28]	; (8001508 <indication_led_button_double_click+0x4c>)
 80014ea:	4413      	add	r3, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fa7e 	bl	80019ee <led_function>
	for (int led_index = 0; led_index < N_LED; led_index++) {
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3301      	adds	r3, #1
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d9e4      	bls.n	80014c8 <indication_led_button_double_click+0xc>
	}
}
 80014fe:	bf00      	nop
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000248 	.word	0x20000248

0800150c <indication_led_error>:

/**
 * @brief          Error led function
 */
void indication_led_error(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
	for (int led_index = 0; led_index < N_LED; led_index++) {
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	e016      	b.n	8001546 <indication_led_error+0x3a>
		indication_led_error_setup(&mculed[led_index]);
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <indication_led_error+0x4c>)
 8001524:	4413      	add	r3, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f9e6 	bl	80018f8 <indication_led_error_setup>
		led_function(&mculed[led_index]);
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4a08      	ldr	r2, [pc, #32]	; (8001558 <indication_led_error+0x4c>)
 8001538:	4413      	add	r3, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fa57 	bl	80019ee <led_function>
	for (int led_index = 0; led_index < N_LED; led_index++) {
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3301      	adds	r3, #1
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b03      	cmp	r3, #3
 800154a:	d9e5      	bls.n	8001518 <indication_led_error+0xc>
	}
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000248 	.word	0x20000248

0800155c <indication_led_setup>:

/**
 * @brief          Loading led animation setup
 */
void indication_led_setup(mculed_t *led_ptr, int led_index)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
    led_ptr->setup.iterations_num = INDICATION_LED_BUTTON_NUM;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	80da      	strh	r2, [r3, #6]

    switch (led_index) {
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2b03      	cmp	r3, #3
 8001570:	d83f      	bhi.n	80015f2 <indication_led_setup+0x96>
 8001572:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <indication_led_setup+0x1c>)
 8001574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001578:	08001589 	.word	0x08001589
 800157c:	080015a5 	.word	0x080015a5
 8001580:	080015bf 	.word	0x080015bf
 8001584:	080015d9 	.word	0x080015d9
        case LED_TOP:
            led_ptr->hardware.mode = MCULED_ON_STATE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	741a      	strb	r2, [r3, #16]
            led_ptr->setup.on_ms = (INDICATION_LED_SPEED_FAST * LED_RIGHT_TIME_ON);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	22dc      	movs	r2, #220	; 0xdc
 8001592:	801a      	strh	r2, [r3, #0]
            led_ptr->setup.off_ms = (INDICATION_LED_SPEED_FAST * LED_RIGHT_TIME_OFF);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f44f 7282 	mov.w	r2, #260	; 0x104
 800159a:	805a      	strh	r2, [r3, #2]
            led_ptr->setup.delay_ms = ZERO_MS;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	809a      	strh	r2, [r3, #4]
            break;
 80015a2:	e027      	b.n	80015f4 <indication_led_setup+0x98>
        case LED_LEFT:
            led_ptr->hardware.mode = MCULED_OFF_STATE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	741a      	strb	r2, [r3, #16]
            led_ptr->setup.on_ms = ZERO_MS;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	801a      	strh	r2, [r3, #0]
            led_ptr->setup.delay_ms = ZERO_MS;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	809a      	strh	r2, [r3, #4]
            led_ptr->setup.off_ms = ZERO_MS;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	805a      	strh	r2, [r3, #2]
            break;
 80015bc:	e01a      	b.n	80015f4 <indication_led_setup+0x98>
        case LED_BOTTOM:
            led_ptr->hardware.mode = MCULED_OFF_STATE;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	741a      	strb	r2, [r3, #16]
            led_ptr->setup.on_ms = ZERO_MS;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	801a      	strh	r2, [r3, #0]
            led_ptr->setup.off_ms = ZERO_MS;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	805a      	strh	r2, [r3, #2]
            led_ptr->setup.delay_ms = ZERO_MS;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	809a      	strh	r2, [r3, #4]
            break;
 80015d6:	e00d      	b.n	80015f4 <indication_led_setup+0x98>
        case LED_RIGHT:
            led_ptr->hardware.mode = MCULED_OFF_STATE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	741a      	strb	r2, [r3, #16]
            led_ptr->setup.on_ms = ZERO_MS;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	801a      	strh	r2, [r3, #0]
            led_ptr->setup.delay_ms = ZERO_MS;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	809a      	strh	r2, [r3, #4]
            led_ptr->setup.off_ms = ZERO_MS;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	805a      	strh	r2, [r3, #2]
            break;
 80015f0:	e000      	b.n	80015f4 <indication_led_setup+0x98>
        default:
            break;
 80015f2:	bf00      	nop
    }

    led_ptr->status.iterations_counter = 0;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	831a      	strh	r2, [r3, #24]
    led_ptr->status.on_timeout = led_ptr->setup.on_ms;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	881a      	ldrh	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	829a      	strh	r2, [r3, #20]
    led_ptr->status.off_timeout = led_ptr->setup.off_ms;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	885a      	ldrh	r2, [r3, #2]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	82da      	strh	r2, [r3, #22]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop

08001618 <indication_led_loading_setup>:

/**
 * @brief          Loading led animation setup
 */
void indication_led_loading_setup(mculed_t *led_ptr, int led_index)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
	led_ptr->hardware.mode = MCULED_LED_LOADING;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2204      	movs	r2, #4
 8001626:	741a      	strb	r2, [r3, #16]
	led_ptr->setup.iterations_num = INDICATION_LED_LOADING_NUM;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f242 7210 	movw	r2, #10000	; 0x2710
 800162e:	80da      	strh	r2, [r3, #6]

	switch (led_index) {
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	2b03      	cmp	r3, #3
 8001634:	d837      	bhi.n	80016a6 <indication_led_loading_setup+0x8e>
 8001636:	a201      	add	r2, pc, #4	; (adr r2, 800163c <indication_led_loading_setup+0x24>)
 8001638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163c:	0800164d 	.word	0x0800164d
 8001640:	08001661 	.word	0x08001661
 8001644:	08001677 	.word	0x08001677
 8001648:	0800168f 	.word	0x0800168f
		case LED_TOP:
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TOP_TIME_ON);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2296      	movs	r2, #150	; 0x96
 8001650:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TOP_TIME_OFF);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	22d2      	movs	r2, #210	; 0xd2
 8001656:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = (INDICATION_LED_SPEED_MIDDLE * (LED_RIGHT_TIME_OFF - LED_TOP_TIME_ON));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	22f0      	movs	r2, #240	; 0xf0
 800165c:	809a      	strh	r2, [r3, #4]
			break;
 800165e:	e023      	b.n	80016a8 <indication_led_loading_setup+0x90>
		case LED_LEFT:
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_LEFT_TIME_ON);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	22d2      	movs	r2, #210	; 0xd2
 8001664:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_LEFT_TIME_OFF);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800166c:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = (INDICATION_LED_SPEED_MIDDLE * (LED_RIGHT_TIME_OFF - LED_LEFT_TIME_ON));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	22b4      	movs	r2, #180	; 0xb4
 8001672:	809a      	strh	r2, [r3, #4]
			break;
 8001674:	e018      	b.n	80016a8 <indication_led_loading_setup+0x90>
		case LED_BOTTOM:
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_BOTTOM_TIME_ON);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800167c:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_BOTTOM_TIME_OFF);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8001684:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = (INDICATION_LED_SPEED_MIDDLE * (LED_RIGHT_TIME_OFF - LED_BOTTOM_TIME_ON));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2278      	movs	r2, #120	; 0x78
 800168a:	809a      	strh	r2, [r3, #4]
			break;
 800168c:	e00c      	b.n	80016a8 <indication_led_loading_setup+0x90>
		case LED_RIGHT:
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_RIGHT_TIME_ON);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8001694:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_RIGHT_TIME_OFF);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800169c:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = (INDICATION_LED_SPEED_MIDDLE * (LED_RIGHT_TIME_OFF - LED_RIGHT_TIME_ON));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	223c      	movs	r2, #60	; 0x3c
 80016a2:	809a      	strh	r2, [r3, #4]
			break;
 80016a4:	e000      	b.n	80016a8 <indication_led_loading_setup+0x90>
		default:
			break;
 80016a6:	bf00      	nop
 	}

	led_ptr->status.iterations_counter = 0;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	831a      	strh	r2, [r3, #24]
	led_ptr->status.on_timeout = led_ptr->setup.on_ms;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	881a      	ldrh	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	829a      	strh	r2, [r3, #20]
	led_ptr->status.off_timeout = led_ptr->setup.off_ms;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	885a      	ldrh	r2, [r3, #2]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	82da      	strh	r2, [r3, #22]
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop

080016cc <indication_led_button_setup>:

/**
 * @brief          Button led setup
 */
void indication_led_button_setup(mculed_t *led_ptr, int led_index)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
	switch (led_index) {
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d839      	bhi.n	8001750 <indication_led_button_setup+0x84>
 80016dc:	a201      	add	r2, pc, #4	; (adr r2, 80016e4 <indication_led_button_setup+0x18>)
 80016de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e2:	bf00      	nop
 80016e4:	080016f5 	.word	0x080016f5
 80016e8:	08001715 	.word	0x08001715
 80016ec:	08001729 	.word	0x08001729
 80016f0:	0800173d 	.word	0x0800173d
		case LED_TOP:
			led_ptr->hardware.mode = MCULED_ON_STATE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.iterations_num = INDICATION_LED_BUTTON_NUM;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	80da      	strh	r2, [r3, #6]
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TOP_TIME_ON);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2296      	movs	r2, #150	; 0x96
 8001704:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TOP_TIME_OFF);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	22d2      	movs	r2, #210	; 0xd2
 800170a:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	809a      	strh	r2, [r3, #4]
			break;
 8001712:	e01e      	b.n	8001752 <indication_led_button_setup+0x86>
		case LED_LEFT:
			led_ptr->hardware.mode = MCULED_OFF_STATE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.on_ms = ZERO_MS;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = ZERO_MS;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	805a      	strh	r2, [r3, #2]
			break;
 8001726:	e014      	b.n	8001752 <indication_led_button_setup+0x86>
		case LED_BOTTOM:
			led_ptr->hardware.mode = MCULED_OFF_STATE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.on_ms = ZERO_MS;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = ZERO_MS;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	805a      	strh	r2, [r3, #2]
			break;
 800173a:	e00a      	b.n	8001752 <indication_led_button_setup+0x86>
		case LED_RIGHT:
			led_ptr->hardware.mode = MCULED_OFF_STATE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.on_ms = ZERO_MS;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = ZERO_MS;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	805a      	strh	r2, [r3, #2]
			break;
 800174e:	e000      	b.n	8001752 <indication_led_button_setup+0x86>
		default:
			break;
 8001750:	bf00      	nop
 	}

	led_ptr->status.iterations_counter = 0;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	831a      	strh	r2, [r3, #24]
	led_ptr->status.on_timeout = led_ptr->setup.on_ms;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	881a      	ldrh	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	829a      	strh	r2, [r3, #20]
	led_ptr->status.off_timeout = led_ptr->setup.off_ms;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	885a      	ldrh	r2, [r3, #2]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	82da      	strh	r2, [r3, #22]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <indication_led_button_hold_setup>:

/**
 * @brief          Button hold led setup
 */
void indication_led_button_hold_setup(mculed_t *led_ptr, int led_index)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
	switch (led_index) {
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2b03      	cmp	r3, #3
 8001782:	d848      	bhi.n	8001816 <indication_led_button_hold_setup+0xa2>
 8001784:	a201      	add	r2, pc, #4	; (adr r2, 800178c <indication_led_button_hold_setup+0x18>)
 8001786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178a:	bf00      	nop
 800178c:	0800179d 	.word	0x0800179d
 8001790:	080017b7 	.word	0x080017b7
 8001794:	080017d7 	.word	0x080017d7
 8001798:	080017f7 	.word	0x080017f7
		case LED_TOP:
			led_ptr->hardware.mode = MCULED_OFF_STATE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.on_ms = ZERO_MS;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = ZERO_MS;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	809a      	strh	r2, [r3, #4]
			break;
 80017b4:	e030      	b.n	8001818 <indication_led_button_hold_setup+0xa4>
		case LED_LEFT:
			led_ptr->hardware.mode = MCULED_ON_STATE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.iterations_num = INDICATION_LED_BUTTON_NUM;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	80da      	strh	r2, [r3, #6]
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_ON);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2296      	movs	r2, #150	; 0x96
 80017c6:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_OFF);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	22d2      	movs	r2, #210	; 0xd2
 80017cc:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	809a      	strh	r2, [r3, #4]
			break;
 80017d4:	e020      	b.n	8001818 <indication_led_button_hold_setup+0xa4>
		case LED_BOTTOM:
			led_ptr->hardware.mode = MCULED_ON_STATE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.iterations_num = INDICATION_LED_BUTTON_NUM;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	80da      	strh	r2, [r3, #6]
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_ON);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2296      	movs	r2, #150	; 0x96
 80017e6:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_OFF);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	22d2      	movs	r2, #210	; 0xd2
 80017ec:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	809a      	strh	r2, [r3, #4]
			break;
 80017f4:	e010      	b.n	8001818 <indication_led_button_hold_setup+0xa4>
		case LED_RIGHT:
			led_ptr->hardware.mode = MCULED_ON_STATE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.iterations_num = INDICATION_LED_BUTTON_NUM;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	80da      	strh	r2, [r3, #6]
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_ON);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2296      	movs	r2, #150	; 0x96
 8001806:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_OFF);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	22d2      	movs	r2, #210	; 0xd2
 800180c:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	809a      	strh	r2, [r3, #4]
			break;
 8001814:	e000      	b.n	8001818 <indication_led_button_hold_setup+0xa4>
		default:
			break;
 8001816:	bf00      	nop
 	}

	led_ptr->status.iterations_counter = 0;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	831a      	strh	r2, [r3, #24]
	led_ptr->status.on_timeout = led_ptr->setup.on_ms;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	881a      	ldrh	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	829a      	strh	r2, [r3, #20]
	led_ptr->status.off_timeout = led_ptr->setup.off_ms;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	885a      	ldrh	r2, [r3, #2]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	82da      	strh	r2, [r3, #22]
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop

0800183c <indication_led_button_double_click_setup>:




void indication_led_button_double_click_setup(mculed_t *led_ptr, int led_index)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
	switch (led_index) {
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	2b03      	cmp	r3, #3
 800184a:	d842      	bhi.n	80018d2 <indication_led_button_double_click_setup+0x96>
 800184c:	a201      	add	r2, pc, #4	; (adr r2, 8001854 <indication_led_button_double_click_setup+0x18>)
 800184e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001852:	bf00      	nop
 8001854:	08001865 	.word	0x08001865
 8001858:	0800187f 	.word	0x0800187f
 800185c:	0800189f 	.word	0x0800189f
 8001860:	080018b9 	.word	0x080018b9
		case LED_TOP:
			led_ptr->hardware.mode = MCULED_OFF_STATE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.on_ms = ZERO_MS;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = ZERO_MS;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	809a      	strh	r2, [r3, #4]
			break;
 800187c:	e02a      	b.n	80018d4 <indication_led_button_double_click_setup+0x98>
		case LED_LEFT:
			led_ptr->hardware.mode = MCULED_ON_STATE;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.iterations_num = INDICATION_LED_BUTTON_NUM;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	80da      	strh	r2, [r3, #6]
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_ON);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2296      	movs	r2, #150	; 0x96
 800188e:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_OFF);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	22d2      	movs	r2, #210	; 0xd2
 8001894:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	809a      	strh	r2, [r3, #4]
			break;
 800189c:	e01a      	b.n	80018d4 <indication_led_button_double_click_setup+0x98>
		case LED_BOTTOM:
			led_ptr->hardware.mode = MCULED_OFF_STATE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.on_ms = ZERO_MS;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = ZERO_MS;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	809a      	strh	r2, [r3, #4]
			break;
 80018b6:	e00d      	b.n	80018d4 <indication_led_button_double_click_setup+0x98>
		case LED_RIGHT:
			led_ptr->hardware.mode = MCULED_OFF_STATE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.on_ms = ZERO_MS;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = ZERO_MS;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	809a      	strh	r2, [r3, #4]
			break;
 80018d0:	e000      	b.n	80018d4 <indication_led_button_double_click_setup+0x98>
		default:
			break;
 80018d2:	bf00      	nop
 	}

	led_ptr->status.iterations_counter = 0;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	831a      	strh	r2, [r3, #24]
	led_ptr->status.on_timeout = led_ptr->setup.on_ms;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	881a      	ldrh	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	829a      	strh	r2, [r3, #20]
	led_ptr->status.off_timeout = led_ptr->setup.off_ms;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	885a      	ldrh	r2, [r3, #2]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	82da      	strh	r2, [r3, #22]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <indication_led_error_setup>:

/**
 * @brief          Error led setup
 */
void indication_led_error_setup(mculed_t *led_ptr)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	led_ptr->hardware.mode = MCULED_ON_STATE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	741a      	strb	r2, [r3, #16]
	led_ptr->setup.iterations_num = INDICATION_LED_ERROR_NUM;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2203      	movs	r2, #3
 800190a:	80da      	strh	r2, [r3, #6]

	led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_ON);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2296      	movs	r2, #150	; 0x96
 8001910:	801a      	strh	r2, [r3, #0]
	led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_OFF);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	22d2      	movs	r2, #210	; 0xd2
 8001916:	805a      	strh	r2, [r3, #2]
	led_ptr->setup.delay_ms = ZERO_MS;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	809a      	strh	r2, [r3, #4]

	led_ptr->status.iterations_counter = 0;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	831a      	strh	r2, [r3, #24]
	led_ptr->status.on_timeout = led_ptr->setup.on_ms;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	881a      	ldrh	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	829a      	strh	r2, [r3, #20]
	led_ptr->status.off_timeout = led_ptr->setup.off_ms;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	885a      	ldrh	r2, [r3, #2]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	82da      	strh	r2, [r3, #22]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <indication_leds_update>:

/**
 * @brief          Led update from SysTick_Handler
 */
void indication_leds_update(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
	for (int led_index = 0; led_index < N_LED; led_index++) {
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	e00c      	b.n	8001966 <indication_leds_update+0x26>
		led_update(&mculed[led_index]);
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4a08      	ldr	r2, [pc, #32]	; (8001978 <indication_leds_update+0x38>)
 8001958:	4413      	add	r3, r2
 800195a:	4618      	mov	r0, r3
 800195c:	f000 f867 	bl	8001a2e <led_update>
	for (int led_index = 0; led_index < N_LED; led_index++) {
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3301      	adds	r3, #1
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d9ef      	bls.n	800194c <indication_leds_update+0xc>
	}
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000248 	.word	0x20000248

0800197c <mculed_init>:

/**
 * @brief          Initialization of each led
 */
mculedr_t mculed_init(mculed_t *self, mculed_ctrl_t *fns)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
	if (self == NULL || fns == NULL || fns->turn_on == NULL || fns->turn_off == NULL) {
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00a      	beq.n	80019a2 <mculed_init+0x26>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d007      	beq.n	80019a2 <mculed_init+0x26>
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <mculed_init+0x26>
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <mculed_init+0x2a>
		return MCULED_ERROR;
 80019a2:	23ff      	movs	r3, #255	; 0xff
 80019a4:	e01d      	b.n	80019e2 <mculed_init+0x66>
	}

	self->setup.on_ms = 0;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	801a      	strh	r2, [r3, #0]
	self->setup.off_ms = 0;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	805a      	strh	r2, [r3, #2]
	self->setup.iterations_num = 0;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	80da      	strh	r2, [r3, #6]
	self->setup.delay_ms = 0;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	809a      	strh	r2, [r3, #4]

	self->status.iterations_counter = 0;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	831a      	strh	r2, [r3, #24]
	self->status.off_timeout = 0;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	82da      	strh	r2, [r3, #22]
	self->status.on_timeout = 0;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	829a      	strh	r2, [r3, #20]

	self->fns.turn_on = fns->turn_on;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	61da      	str	r2, [r3, #28]
	self->fns.turn_off = fns->turn_off;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	621a      	str	r2, [r3, #32]

	return MCULED_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <led_function>:

/**
 * @brief          Led function for different modes of work
 */
void led_function(mculed_t *self)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
	if (self->hardware.mode == MCULED_OFF_STATE) {
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	7c1b      	ldrb	r3, [r3, #16]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d103      	bne.n	8001a06 <led_function+0x18>
		self->fns.turn_off(self);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	4798      	blx	r3
	}
	if (self->hardware.mode == MCULED_ON_STATE) {
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7c1b      	ldrb	r3, [r3, #16]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d103      	bne.n	8001a16 <led_function+0x28>
		self->fns.turn_on(self);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	4798      	blx	r3
	}
	if (self->hardware.mode == MCULED_TOGGLE_STATE) {
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7c1b      	ldrb	r3, [r3, #16]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d103      	bne.n	8001a26 <led_function+0x38>
		self->fns.toggle(self);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	4798      	blx	r3
	}
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <led_update>:

/**
 * @brief          Led update from SysTick_Handler for each led
 */
void led_update(mculed_t *self)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
	if (self->status.on_timeout) {
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	8a9b      	ldrh	r3, [r3, #20]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d02b      	beq.n	8001a96 <led_update+0x68>
		if (!--self->status.on_timeout) {
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	8a9b      	ldrh	r3, [r3, #20]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	829a      	strh	r2, [r3, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	8a9b      	ldrh	r3, [r3, #20]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d121      	bne.n	8001a96 <led_update+0x68>
			self->fns.turn_off(self); // TURN OFF
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	4798      	blx	r3
			if (self->setup.iterations_num) {
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	88db      	ldrh	r3, [r3, #6]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d019      	beq.n	8001a96 <led_update+0x68>
				self->status.iterations_counter++;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	8b1b      	ldrh	r3, [r3, #24]
 8001a66:	3301      	adds	r3, #1
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	831a      	strh	r2, [r3, #24]
				if (self->status.iterations_counter >= self->setup.iterations_num) {
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	8b1a      	ldrh	r2, [r3, #24]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	88db      	ldrh	r3, [r3, #6]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d305      	bcc.n	8001a86 <led_update+0x58>
					self->setup.off_ms = 0;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	805a      	strh	r2, [r3, #2]
					self->setup.delay_ms = 0;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	809a      	strh	r2, [r3, #4]
				}
				self->status.off_timeout = (self->setup.off_ms + self->setup.delay_ms);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	885a      	ldrh	r2, [r3, #2]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	889b      	ldrh	r3, [r3, #4]
 8001a8e:	4413      	add	r3, r2
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	82da      	strh	r2, [r3, #22]
			}
		}
	}

	if (self->status.off_timeout) {
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	8adb      	ldrh	r3, [r3, #22]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d015      	beq.n	8001aca <led_update+0x9c>
		if (!--self->status.off_timeout) {
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	8adb      	ldrh	r3, [r3, #22]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	82da      	strh	r2, [r3, #22]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	8adb      	ldrh	r3, [r3, #22]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10b      	bne.n	8001aca <led_update+0x9c>
			self->status.on_timeout = (self->setup.on_ms + self->setup.delay_ms);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	881a      	ldrh	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	889b      	ldrh	r3, [r3, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	829a      	strh	r2, [r3, #20]
			self->fns.turn_on(self); // TURN ON
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	4798      	blx	r3
		}
	}
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <ring_buf_init>:
// EVT - EVENT

#include "ring_buf.h"

void ring_buf_init()
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
    lwrb_init(&data_uart.lwrb, data_uart.buff, sizeof(data_uart.buff));
 8001ad8:	2208      	movs	r2, #8
 8001ada:	490b      	ldr	r1, [pc, #44]	; (8001b08 <ring_buf_init+0x34>)
 8001adc:	480b      	ldr	r0, [pc, #44]	; (8001b0c <ring_buf_init+0x38>)
 8001ade:	f008 fa3f 	bl	8009f60 <lwrb_init>

    if (!lwrb_is_ready(&data_uart.lwrb)) {
 8001ae2:	480a      	ldr	r0, [pc, #40]	; (8001b0c <ring_buf_init+0x38>)
 8001ae4:	f008 fa6d 	bl	8009fc2 <lwrb_is_ready>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d105      	bne.n	8001afa <ring_buf_init+0x26>
        log_printf_crlf("Error ring buf init");
 8001aee:	4808      	ldr	r0, [pc, #32]	; (8001b10 <ring_buf_init+0x3c>)
 8001af0:	f000 fc9c 	bl	800242c <log_printf>
 8001af4:	4807      	ldr	r0, [pc, #28]	; (8001b14 <ring_buf_init+0x40>)
 8001af6:	f000 fc99 	bl	800242c <log_printf>
    }

    lwrb_set_evt_fn(&data_uart.lwrb, ring_buf_evt_callback);
 8001afa:	4907      	ldr	r1, [pc, #28]	; (8001b18 <ring_buf_init+0x44>)
 8001afc:	4803      	ldr	r0, [pc, #12]	; (8001b0c <ring_buf_init+0x38>)
 8001afe:	f008 fa91 	bl	800a024 <lwrb_set_evt_fn>
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200004d0 	.word	0x200004d0
 8001b0c:	200004bc 	.word	0x200004bc
 8001b10:	0800cf08 	.word	0x0800cf08
 8001b14:	0800cf1c 	.word	0x0800cf1c
 8001b18:	08001b1d 	.word	0x08001b1d

08001b1c <ring_buf_evt_callback>:
{
    lwrb_peek(&self->lwrb, skip_count, data, byte_to_peek);
}

void ring_buf_evt_callback(struct uart *self, lwrb_evt_type_t evt, size_t bp)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	460b      	mov	r3, r1
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	72fb      	strb	r3, [r7, #11]
    switch(evt) {
 8001b2a:	7afb      	ldrb	r3, [r7, #11]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d005      	beq.n	8001b3c <ring_buf_evt_callback+0x20>
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	dc06      	bgt.n	8001b42 <ring_buf_evt_callback+0x26>
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <ring_buf_evt_callback+0x24>
 8001b38:	2b01      	cmp	r3, #1
        case LWRB_EVT_READ:
           // log_printf_crlf("Read %d bytes from ring buff event!", (int)bp);
            break;
        case LWRB_EVT_WRITE:
           // log_printf_crlf("Write %d bytes from ring buff event!", (int)bp);
            break;
 8001b3a:	e002      	b.n	8001b42 <ring_buf_evt_callback+0x26>
        case LWRB_EVT_RESET:
            //log_printf_crlf("Reset %d bytes from ring buff event!", (int)bp);
            break;
 8001b3c:	bf00      	nop
 8001b3e:	e000      	b.n	8001b42 <ring_buf_evt_callback+0x26>
            break;
 8001b40:	bf00      	nop
    }
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <timeout_start>:
#include "led.h"

TIM_HandleTypeDef htim1;

void timeout_start(struct timeout *timeout, uint32_t timeout_ms)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
	if (timeout == NULL) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d103      	bne.n	8001b66 <timeout_start+0x18>
		indication_led_error();
 8001b5e:	f7ff fcd5 	bl	800150c <indication_led_error>
		Error_Handler();
 8001b62:	f001 ff5b 	bl	8003a1c <Error_Handler>
	}

	timeout->timestamp_ms = HAL_GetTick();
 8001b66:	f004 fcb3 	bl	80064d0 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
	timeout->timeout_ms = timeout_ms;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	605a      	str	r2, [r3, #4]
	timeout->start_flag = true;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	701a      	strb	r2, [r3, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <timeout_stop>:

void timeout_stop(struct timeout *timeout)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	if (timeout == NULL) {
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d103      	bne.n	8001b9a <timeout_stop+0x16>
		indication_led_error();
 8001b92:	f7ff fcbb 	bl	800150c <indication_led_error>
		Error_Handler();
 8001b96:	f001 ff41 	bl	8003a1c <Error_Handler>
	}

	timeout->start_flag = false;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <timeout_started>:

bool timeout_started(struct timeout *timeout)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	if (timeout == NULL) {
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d103      	bne.n	8001bbe <timeout_started+0x16>
		indication_led_error();
 8001bb6:	f7ff fca9 	bl	800150c <indication_led_error>
		Error_Handler();
 8001bba:	f001 ff2f 	bl	8003a1c <Error_Handler>
	}

	return timeout->start_flag;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	b2db      	uxtb	r3, r3
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <timeout_check>:

	return false;
}

bool timeout_check(struct timeout *timeout, uint32_t msTime)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
	if ((HAL_GetTick() - timeout->timestamp_ms) > msTime) {
 8001bd6:	f004 fc7b 	bl	80064d0 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d201      	bcs.n	8001bec <timeout_check+0x20>
		return true;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <timeout_check+0x22>
	}

	return false;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <MX_TIM1_Init>:

void MX_TIM1_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bfe:	f107 0308 	add.w	r3, r7, #8
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001c14:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <MX_TIM1_Init+0x98>)
 8001c16:	4a1f      	ldr	r2, [pc, #124]	; (8001c94 <MX_TIM1_Init+0x9c>)
 8001c18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000;
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <MX_TIM1_Init+0x98>)
 8001c1c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001c20:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c22:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <MX_TIM1_Init+0x98>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <MX_TIM1_Init+0x98>)
 8001c2a:	2232      	movs	r2, #50	; 0x32
 8001c2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <MX_TIM1_Init+0x98>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c34:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <MX_TIM1_Init+0x98>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <MX_TIM1_Init+0x98>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c40:	4813      	ldr	r0, [pc, #76]	; (8001c90 <MX_TIM1_Init+0x98>)
 8001c42:	f005 fcb4 	bl	80075ae <HAL_TIM_Base_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001c4c:	f001 fee6 	bl	8003a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c56:	f107 0308 	add.w	r3, r7, #8
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	480c      	ldr	r0, [pc, #48]	; (8001c90 <MX_TIM1_Init+0x98>)
 8001c5e:	f005 fcf5 	bl	800764c <HAL_TIM_ConfigClockSource>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001c68:	f001 fed8 	bl	8003a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c74:	463b      	mov	r3, r7
 8001c76:	4619      	mov	r1, r3
 8001c78:	4805      	ldr	r0, [pc, #20]	; (8001c90 <MX_TIM1_Init+0x98>)
 8001c7a:	f005 fee9 	bl	8007a50 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001c84:	f001 feca 	bl	8003a1c <Error_Handler>
  }
}
 8001c88:	bf00      	nop
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	200002e8 	.word	0x200002e8
 8001c94:	40010000 	.word	0x40010000

08001c98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if(tim_baseHandle->Instance==TIM1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1a      	ldr	r2, [pc, #104]	; (8001d10 <HAL_TIM_Base_MspInit+0x78>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d12d      	bne.n	8001d06 <HAL_TIM_Base_MspInit+0x6e>
  {
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <HAL_TIM_Base_MspInit+0x7c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a18      	ldr	r2, [pc, #96]	; (8001d14 <HAL_TIM_Base_MspInit+0x7c>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <HAL_TIM_Base_MspInit+0x7c>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]

    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2018      	movs	r0, #24
 8001ccc:	f004 fce7 	bl	800669e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001cd0:	2018      	movs	r0, #24
 8001cd2:	f004 fd00 	bl	80066d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2100      	movs	r1, #0
 8001cda:	2019      	movs	r0, #25
 8001cdc:	f004 fcdf 	bl	800669e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ce0:	2019      	movs	r0, #25
 8001ce2:	f004 fcf8 	bl	80066d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2100      	movs	r1, #0
 8001cea:	201a      	movs	r0, #26
 8001cec:	f004 fcd7 	bl	800669e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001cf0:	201a      	movs	r0, #26
 8001cf2:	f004 fcf0 	bl	80066d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	201b      	movs	r0, #27
 8001cfc:	f004 fccf 	bl	800669e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001d00:	201b      	movs	r0, #27
 8001d02:	f004 fce8 	bl	80066d6 <HAL_NVIC_EnableIRQ>
  }
}
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40010000 	.word	0x40010000
 8001d14:	40023800 	.word	0x40023800

08001d18 <console_init>:
char *keyword[] = {_CMD_HELP, _CMD_CLEAR, _CMD_LOGIN, _CMD_LOGOUT, _CMD_BUFF, _CMD_RESET, _CMD_FREE, _CMD_EXIT};    //available  commands
char *read_save_key[] = {_SCMD_RD, _SCMD_SAVE};            // 'read/save' command arguments
char *compl_word [_NUM_OF_CMD + 1];                        // array for completion

void console_init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
    microrl_init(microrl_ptr, console_print, console_execute);
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <console_init+0x30>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <console_init+0x34>)
 8001d22:	490b      	ldr	r1, [pc, #44]	; (8001d50 <console_init+0x38>)
 8001d24:	4618      	mov	r0, r3
 8001d26:	f001 fa9b 	bl	8003260 <microrl_init>

#if MICRORL_CFG_USE_COMPLETE
    /* Set callback for auto-completion */
    microrl_set_complete_callback(microrl_ptr, console_complete);
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <console_init+0x30>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4909      	ldr	r1, [pc, #36]	; (8001d54 <console_init+0x3c>)
 8001d30:	4618      	mov	r0, r3
 8001d32:	f001 fade 	bl	80032f2 <microrl_set_complete_callback>
#endif /* MICRORL_CFG_USE_COMPLETE */

#if MICRORL_CFG_USE_CTRL_C
    /* Set callback for Ctrl+C handling */
    microrl_set_sigint_callback(microrl_ptr, console_sigint);
 8001d36:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <console_init+0x30>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4907      	ldr	r1, [pc, #28]	; (8001d58 <console_init+0x40>)
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f001 faef 	bl	8003320 <microrl_set_sigint_callback>
#endif /* MICRORL_CFG_USE_CTRL_C */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	08001ec1 	.word	0x08001ec1
 8001d50:	08001d81 	.word	0x08001d81
 8001d54:	08002159 	.word	0x08002159
 8001d58:	0800213d 	.word	0x0800213d

08001d5c <console_insert_char>:

void console_insert_char(char ch)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
    microrl_processing_input(microrl_ptr, &ch, sizeof(ch));
 8001d66:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <console_insert_char+0x20>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	1df9      	adds	r1, r7, #7
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f001 fc4d 	bl	800360e <microrl_processing_input>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000000 	.word	0x20000000

08001d80 <console_print>:

void console_print(microrl_t *microrl_ptr, const char *str)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
    UNUSED(microrl_ptr);
    log_printf_cont("%s", str);
 8001d8a:	6839      	ldr	r1, [r7, #0]
 8001d8c:	4803      	ldr	r0, [pc, #12]	; (8001d9c <console_print+0x1c>)
 8001d8e:	f000 fb4d 	bl	800242c <log_printf>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	0800cf6c 	.word	0x0800cf6c

08001da0 <console_execute_main>:
{
   return (char)data_uart.console_input;
}

#if MICRORL_CFG_USE_ECHO_OFF
int console_execute_main(microrl_t* microrl_ptr, int argc, const char* const *argv) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
#else
int console_execute(microrl_t *microrl_ptr, int argc, const char * const *argv) {
#endif /* MICRORL_CFG_USE_ECHO_OFF || __DOXYGEN__ */
    int i = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]

    while (i < argc) {
 8001db0:	e065      	b.n	8001e7e <console_execute_main+0xde>
        if (strcmp(argv[i], _CMD_HELP) == 0) {
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4934      	ldr	r1, [pc, #208]	; (8001e90 <console_execute_main+0xf0>)
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fa16 	bl	80001f0 <strcmp>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d103      	bne.n	8001dd2 <console_execute_main+0x32>
            console_print_help(microrl_ptr);        // print help
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 fa54 	bl	8002278 <console_print_help>
 8001dd0:	e052      	b.n	8001e78 <console_execute_main+0xd8>
        }
        else if (strcmp(argv[i], _CMD_CLEAR) == 0) {
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	492d      	ldr	r1, [pc, #180]	; (8001e94 <console_execute_main+0xf4>)
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fa06 	bl	80001f0 <strcmp>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d108      	bne.n	8001dfc <console_execute_main+0x5c>
            console_print(microrl_ptr, "\033[2J" _ENDLINE_SEQ);    // ESC seq for clear entire screen
 8001dea:	492b      	ldr	r1, [pc, #172]	; (8001e98 <console_execute_main+0xf8>)
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f7ff ffc7 	bl	8001d80 <console_print>
            console_print(microrl_ptr, "\033[H" _ENDLINE_SEQ);     // ESC seq for move cursor at left-top corner
 8001df2:	492a      	ldr	r1, [pc, #168]	; (8001e9c <console_execute_main+0xfc>)
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f7ff ffc3 	bl	8001d80 <console_print>
 8001dfa:	e03d      	b.n	8001e78 <console_execute_main+0xd8>
        }
        else if (strcmp(argv[i], _CMD_LOGOUT) == 0) {
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	4413      	add	r3, r2
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4926      	ldr	r1, [pc, #152]	; (8001ea0 <console_execute_main+0x100>)
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe f9f1 	bl	80001f0 <strcmp>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d108      	bne.n	8001e26 <console_execute_main+0x86>
            console_print(microrl_ptr, "\tBye!" _ENDLINE_SEQ);
 8001e14:	4923      	ldr	r1, [pc, #140]	; (8001ea4 <console_execute_main+0x104>)
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f7ff ffb2 	bl	8001d80 <console_print>
            microrl_set_execute_callback(microrl_ptr, console_execute);
 8001e1c:	4922      	ldr	r1, [pc, #136]	; (8001ea8 <console_execute_main+0x108>)
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f001 fa50 	bl	80032c4 <microrl_set_execute_callback>
 8001e24:	e028      	b.n	8001e78 <console_execute_main+0xd8>
        }
        else if (strcmp(argv[i], _CMD_BUFF) == 0) {
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	491e      	ldr	r1, [pc, #120]	; (8001eac <console_execute_main+0x10c>)
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe f9dc 	bl	80001f0 <strcmp>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10b      	bne.n	8001e56 <console_execute_main+0xb6>
            console_print(microrl_ptr, "\tChoose your action with buffer: " _ENDLINE_SEQ);
 8001e3e:	491c      	ldr	r1, [pc, #112]	; (8001eb0 <console_execute_main+0x110>)
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f7ff ff9d 	bl	8001d80 <console_print>
            console_print_buff(microrl_ptr);
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 fa70 	bl	800232c <console_print_buff>
            microrl_set_execute_callback(microrl_ptr, console_buff);
 8001e4c:	4919      	ldr	r1, [pc, #100]	; (8001eb4 <console_execute_main+0x114>)
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f001 fa38 	bl	80032c4 <microrl_set_execute_callback>
 8001e54:	e010      	b.n	8001e78 <console_execute_main+0xd8>
        }
        else {
            console_print(microrl_ptr, "command: '");
 8001e56:	4918      	ldr	r1, [pc, #96]	; (8001eb8 <console_execute_main+0x118>)
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f7ff ff91 	bl	8001d80 <console_print>
            console_print(microrl_ptr, (char*)argv[i]);
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7ff ff88 	bl	8001d80 <console_print>
            console_print(microrl_ptr, "' Not found." _ENDLINE_SEQ);
 8001e70:	4912      	ldr	r1, [pc, #72]	; (8001ebc <console_execute_main+0x11c>)
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f7ff ff84 	bl	8001d80 <console_print>
        }
        i++;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
    while (i < argc) {
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	db95      	blt.n	8001db2 <console_execute_main+0x12>
    }

    return 0;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	0800cf20 	.word	0x0800cf20
 8001e94:	0800cf28 	.word	0x0800cf28
 8001e98:	0800cf70 	.word	0x0800cf70
 8001e9c:	0800cf78 	.word	0x0800cf78
 8001ea0:	0800cf38 	.word	0x0800cf38
 8001ea4:	0800cf80 	.word	0x0800cf80
 8001ea8:	08001ec1 	.word	0x08001ec1
 8001eac:	0800cf40 	.word	0x0800cf40
 8001eb0:	0800cf88 	.word	0x0800cf88
 8001eb4:	08001ff9 	.word	0x08001ff9
 8001eb8:	0800cfac 	.word	0x0800cfac
 8001ebc:	0800cfb8 	.word	0x0800cfb8

08001ec0 <console_execute>:

int console_execute(microrl_t *microrl_ptr, int argc, const char * const *argv)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]

    while (i < argc) {
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	da70      	bge.n	8001fba <console_execute+0xfa>
        if (strcmp(argv[i], _CMD_LOGIN) == 0) {
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4938      	ldr	r1, [pc, #224]	; (8001fc4 <console_execute+0x104>)
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe f983 	bl	80001f0 <strcmp>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d12d      	bne.n	8001f4c <console_execute+0x8c>
            if (++i < argc) {
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	da20      	bge.n	8001f40 <console_execute+0x80>
                if (strcmp(argv[i], SESSION_ADMIN_LOGIN) == 0) {
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	492f      	ldr	r1, [pc, #188]	; (8001fc8 <console_execute+0x108>)
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe f970 	bl	80001f0 <strcmp>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10c      	bne.n	8001f30 <console_execute+0x70>
                    console_print(microrl_ptr, "\tEnter password:" _ENDLINE_SEQ);
 8001f16:	492d      	ldr	r1, [pc, #180]	; (8001fcc <console_execute+0x10c>)
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f7ff ff31 	bl	8001d80 <console_print>
                    microrl_set_echo(microrl_ptr, MICRORL_ECHO_ONCE);
 8001f1e:	2100      	movs	r1, #0
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f001 fa14 	bl	800334e <microrl_set_echo>
                    passw_in = 1;
 8001f26:	4b2a      	ldr	r3, [pc, #168]	; (8001fd0 <console_execute+0x110>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
                    return 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	e045      	b.n	8001fbc <console_execute+0xfc>
                }
                else {
                    console_print(microrl_ptr, "\tLogin name doesn't registered. Try again." _ENDLINE_SEQ);
 8001f30:	4928      	ldr	r1, [pc, #160]	; (8001fd4 <console_execute+0x114>)
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f7ff ff24 	bl	8001d80 <console_print>
                    indication_led_error();
 8001f38:	f7ff fae8 	bl	800150c <indication_led_error>
                    return 1;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e03d      	b.n	8001fbc <console_execute+0xfc>
                }
            }
            else {
                console_print(microrl_ptr, "\tEnter your login after 'login' command." _ENDLINE_SEQ);
 8001f40:	4925      	ldr	r1, [pc, #148]	; (8001fd8 <console_execute+0x118>)
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f7ff ff1c 	bl	8001d80 <console_print>
                return 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e037      	b.n	8001fbc <console_execute+0xfc>
            }
        }
        else if (passw_in == 1) {
 8001f4c:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <console_execute+0x110>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d126      	bne.n	8001fa2 <console_execute+0xe2>
            if (strcmp(argv[i], SESSION_ADMIN_PASSW) == 0) {
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	491f      	ldr	r1, [pc, #124]	; (8001fdc <console_execute+0x11c>)
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe f945 	bl	80001f0 <strcmp>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10f      	bne.n	8001f8c <console_execute+0xcc>
                console_print(microrl_ptr, "\tLogged in successfully." _ENDLINE_SEQ);
 8001f6c:	491c      	ldr	r1, [pc, #112]	; (8001fe0 <console_execute+0x120>)
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f7ff ff06 	bl	8001d80 <console_print>
                passw_in = 0;
 8001f74:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <console_execute+0x110>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
                logged_in = 1;
 8001f7a:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <console_execute+0x124>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]
                microrl_set_execute_callback(microrl_ptr, console_execute_main);
 8001f80:	4919      	ldr	r1, [pc, #100]	; (8001fe8 <console_execute+0x128>)
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f001 f99e 	bl	80032c4 <microrl_set_execute_callback>
                return 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e017      	b.n	8001fbc <console_execute+0xfc>
            }
            else {
                console_print(microrl_ptr, "\tWrong password. Try again." _ENDLINE_SEQ);
 8001f8c:	4917      	ldr	r1, [pc, #92]	; (8001fec <console_execute+0x12c>)
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f7ff fef6 	bl	8001d80 <console_print>
                indication_led_error();
 8001f94:	f7ff faba 	bl	800150c <indication_led_error>
                passw_in = 0;
 8001f98:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <console_execute+0x110>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
                return 1;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00c      	b.n	8001fbc <console_execute+0xfc>
            }
        }
        else {
            console_print(microrl_ptr, "\tYou need to login first!" _ENDLINE_SEQ);
 8001fa2:	4913      	ldr	r1, [pc, #76]	; (8001ff0 <console_execute+0x130>)
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f7ff feeb 	bl	8001d80 <console_print>
            console_print(microrl_ptr, "\tlogin YOUR_LOGIN"_ENDLINE_SEQ);
 8001faa:	4912      	ldr	r1, [pc, #72]	; (8001ff4 <console_execute+0x134>)
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f7ff fee7 	bl	8001d80 <console_print>
            indication_led_error();
 8001fb2:	f7ff faab 	bl	800150c <indication_led_error>
            return 1;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <console_execute+0xfc>
        }
        i++;
    }

    return 0;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	0800cf30 	.word	0x0800cf30
 8001fc8:	0800cfc8 	.word	0x0800cfc8
 8001fcc:	0800cfd0 	.word	0x0800cfd0
 8001fd0:	20000331 	.word	0x20000331
 8001fd4:	0800cfe4 	.word	0x0800cfe4
 8001fd8:	0800d014 	.word	0x0800d014
 8001fdc:	0800d040 	.word	0x0800d040
 8001fe0:	0800d04c 	.word	0x0800d04c
 8001fe4:	20000330 	.word	0x20000330
 8001fe8:	08001da1 	.word	0x08001da1
 8001fec:	0800d068 	.word	0x0800d068
 8001ff0:	0800d088 	.word	0x0800d088
 8001ff4:	0800d0a4 	.word	0x0800d0a4

08001ff8 <console_buff>:

int console_buff(microrl_t *microrl_ptr, int argc, const char * const *argv)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
    int i = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]

    while (i < argc) {
 8002008:	e072      	b.n	80020f0 <console_buff+0xf8>
        if (strcmp(argv[i], _CMD_RESET) == 0) {
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	493b      	ldr	r1, [pc, #236]	; (8002104 <console_buff+0x10c>)
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe f8ea 	bl	80001f0 <strcmp>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d107      	bne.n	8002032 <console_buff+0x3a>
            lwrb_reset(&debug_uart.lwrb);
 8002022:	4839      	ldr	r0, [pc, #228]	; (8002108 <console_buff+0x110>)
 8002024:	f008 f997 	bl	800a356 <lwrb_reset>
            console_print(microrl_ptr, "\tBuffer successfully reseted" _ENDLINE_SEQ);
 8002028:	4938      	ldr	r1, [pc, #224]	; (800210c <console_buff+0x114>)
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f7ff fea8 	bl	8001d80 <console_print>
 8002030:	e05b      	b.n	80020ea <console_buff+0xf2>
        }
        else if (strcmp(argv[i], _CMD_FREE) == 0) {
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4934      	ldr	r1, [pc, #208]	; (8002110 <console_buff+0x118>)
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe f8d6 	bl	80001f0 <strcmp>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d107      	bne.n	800205a <console_buff+0x62>
            lwrb_free(&debug_uart.lwrb);
 800204a:	482f      	ldr	r0, [pc, #188]	; (8002108 <console_buff+0x110>)
 800204c:	f007 ffd2 	bl	8009ff4 <lwrb_free>
            console_print(microrl_ptr, "\tBuffer successfully free" _ENDLINE_SEQ);
 8002050:	4930      	ldr	r1, [pc, #192]	; (8002114 <console_buff+0x11c>)
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f7ff fe94 	bl	8001d80 <console_print>
 8002058:	e047      	b.n	80020ea <console_buff+0xf2>
        }
        else if (strcmp(argv[i], _CMD_CHECK) == 0) {
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	492c      	ldr	r1, [pc, #176]	; (8002118 <console_buff+0x120>)
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe f8c2 	bl	80001f0 <strcmp>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d11a      	bne.n	80020a8 <console_buff+0xb0>
            console_print(microrl_ptr, "\tHere's your buffer:  ");
 8002072:	492a      	ldr	r1, [pc, #168]	; (800211c <console_buff+0x124>)
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f7ff fe83 	bl	8001d80 <console_print>
            for (int i = 0; i < UART_BUFF_SIZE; i++) {
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	e00b      	b.n	8002098 <console_buff+0xa0>
                log_printf("%d ", data_uart.lwrb.buff[i]);
 8002080:	4b27      	ldr	r3, [pc, #156]	; (8002120 <console_buff+0x128>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4413      	add	r3, r2
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	4619      	mov	r1, r3
 800208c:	4825      	ldr	r0, [pc, #148]	; (8002124 <console_buff+0x12c>)
 800208e:	f000 f9cd 	bl	800242c <log_printf>
            for (int i = 0; i < UART_BUFF_SIZE; i++) {
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	3301      	adds	r3, #1
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	2b07      	cmp	r3, #7
 800209c:	d9f0      	bls.n	8002080 <console_buff+0x88>
            }
            console_print(microrl_ptr, "\t " _ENDLINE_SEQ);
 800209e:	4922      	ldr	r1, [pc, #136]	; (8002128 <console_buff+0x130>)
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f7ff fe6d 	bl	8001d80 <console_print>
 80020a6:	e020      	b.n	80020ea <console_buff+0xf2>
        }
        else if (strcmp(argv[i], _CMD_EXIT) == 0) {
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	4413      	add	r3, r2
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	491e      	ldr	r1, [pc, #120]	; (800212c <console_buff+0x134>)
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe f89b 	bl	80001f0 <strcmp>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10b      	bne.n	80020d8 <console_buff+0xe0>
            console_print(microrl_ptr, "\tBack to main menu" _ENDLINE_SEQ _ENDLINE_SEQ _ENDLINE_SEQ);
 80020c0:	491b      	ldr	r1, [pc, #108]	; (8002130 <console_buff+0x138>)
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f7ff fe5c 	bl	8001d80 <console_print>
            console_print_help(microrl_ptr);
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 f8d5 	bl	8002278 <console_print_help>
            microrl_set_execute_callback(microrl_ptr, console_execute_main);
 80020ce:	4919      	ldr	r1, [pc, #100]	; (8002134 <console_buff+0x13c>)
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f001 f8f7 	bl	80032c4 <microrl_set_execute_callback>
 80020d6:	e008      	b.n	80020ea <console_buff+0xf2>
        }
        else {
            console_print(microrl_ptr, "\tUndefined command" _ENDLINE_SEQ);
 80020d8:	4917      	ldr	r1, [pc, #92]	; (8002138 <console_buff+0x140>)
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f7ff fe50 	bl	8001d80 <console_print>
            indication_led_error();
 80020e0:	f7ff fa14 	bl	800150c <indication_led_error>
            console_print_buff(microrl_ptr);
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 f921 	bl	800232c <console_print_buff>
        }
        i++;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	3301      	adds	r3, #1
 80020ee:	617b      	str	r3, [r7, #20]
    while (i < argc) {
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	db88      	blt.n	800200a <console_buff+0x12>
    }

    return 0;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	0800cf48 	.word	0x0800cf48
 8002108:	20000498 	.word	0x20000498
 800210c:	0800d0b8 	.word	0x0800d0b8
 8002110:	0800cf50 	.word	0x0800cf50
 8002114:	0800d0d8 	.word	0x0800d0d8
 8002118:	0800d0f4 	.word	0x0800d0f4
 800211c:	0800d0fc 	.word	0x0800d0fc
 8002120:	200004bc 	.word	0x200004bc
 8002124:	0800d114 	.word	0x0800d114
 8002128:	0800d118 	.word	0x0800d118
 800212c:	0800cf58 	.word	0x0800cf58
 8002130:	0800d120 	.word	0x0800d120
 8002134:	08001da1 	.word	0x08001da1
 8002138:	0800d13c 	.word	0x0800d13c

0800213c <console_sigint>:
/**
 * \brief           Ctrl+C terminal signal function
 * \param[in]       mrl: \ref microrl_t working instance
 */
void console_sigint(microrl_t *microrl_ptr)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
    console_print(microrl_ptr, "^C is caught!"_ENDLINE_SEQ);
 8002144:	4903      	ldr	r1, [pc, #12]	; (8002154 <console_sigint+0x18>)
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fe1a 	bl	8001d80 <console_print>
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	0800d154 	.word	0x0800d154

08002158 <console_complete>:

//*****************************************************************************
// completion callback for microrl library
char **console_complete(microrl_t *microrl_ptr, int argc, const char * const *argv)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
    UNUSED(microrl_ptr);
    int j = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]

    compl_word[0] = NULL;
 8002168:	4b3f      	ldr	r3, [pc, #252]	; (8002268 <console_complete+0x110>)
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]

    if (argc == 1) {
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d12b      	bne.n	80021cc <console_complete+0x74>
        char *bit = (char *)argv[argc - 1];
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800217a:	3b01      	subs	r3, #1
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	613b      	str	r3, [r7, #16]

        for (int i = 0; i < _NUM_OF_CMD; i++) {
 8002186:	2300      	movs	r3, #0
 8002188:	61bb      	str	r3, [r7, #24]
 800218a:	e01b      	b.n	80021c4 <console_complete+0x6c>
            if (strstr(keyword[i], bit) == keyword[i]) {
 800218c:	4a37      	ldr	r2, [pc, #220]	; (800226c <console_complete+0x114>)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002194:	6939      	ldr	r1, [r7, #16]
 8002196:	4618      	mov	r0, r3
 8002198:	f008 fdde 	bl	800ad58 <strstr>
 800219c:	4602      	mov	r2, r0
 800219e:	4933      	ldr	r1, [pc, #204]	; (800226c <console_complete+0x114>)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d109      	bne.n	80021be <console_complete+0x66>
                compl_word[j++] = keyword[i];
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	61fa      	str	r2, [r7, #28]
 80021b0:	492e      	ldr	r1, [pc, #184]	; (800226c <console_complete+0x114>)
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80021b8:	492b      	ldr	r1, [pc, #172]	; (8002268 <console_complete+0x110>)
 80021ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i < _NUM_OF_CMD; i++) {
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	3301      	adds	r3, #1
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b07      	cmp	r3, #7
 80021c8:	dde0      	ble.n	800218c <console_complete+0x34>
 80021ca:	e043      	b.n	8002254 <console_complete+0xfc>
            }
        }
    }
    else if ((argc > 1) && ((strcmp (argv[0], _CMD_LOGIN) == 0))) {  /*If command needs subcommands */
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	dd3d      	ble.n	800224e <console_complete+0xf6>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4926      	ldr	r1, [pc, #152]	; (8002270 <console_complete+0x118>)
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe f809 	bl	80001f0 <strcmp>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d134      	bne.n	800224e <console_complete+0xf6>
        /* Iterate through subcommand */
        for (int i = 0; i <  _NUM_OF_SETCLEAR_SCMD; i++) {
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	e022      	b.n	8002230 <console_complete+0xd8>
            if (strstr (read_save_key[i], argv[argc-1]) == read_save_key [i]) {
 80021ea:	4a22      	ldr	r2, [pc, #136]	; (8002274 <console_complete+0x11c>)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021f8:	3b01      	subs	r3, #1
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4619      	mov	r1, r3
 8002204:	f008 fda8 	bl	800ad58 <strstr>
 8002208:	4602      	mov	r2, r0
 800220a:	491a      	ldr	r1, [pc, #104]	; (8002274 <console_complete+0x11c>)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002212:	429a      	cmp	r2, r3
 8002214:	d109      	bne.n	800222a <console_complete+0xd2>
                compl_word[j++] = read_save_key[i];
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	61fa      	str	r2, [r7, #28]
 800221c:	4915      	ldr	r1, [pc, #84]	; (8002274 <console_complete+0x11c>)
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002224:	4910      	ldr	r1, [pc, #64]	; (8002268 <console_complete+0x110>)
 8002226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i <  _NUM_OF_SETCLEAR_SCMD; i++) {
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	3301      	adds	r3, #1
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2b01      	cmp	r3, #1
 8002234:	ddd9      	ble.n	80021ea <console_complete+0x92>
 8002236:	e00d      	b.n	8002254 <console_complete+0xfc>
            }
        }
    }
    else { /* If there is no token in cmdline, just print all available token */
        for (; j < _NUM_OF_CMD; j++) {
            compl_word[j] = keyword[j];
 8002238:	4a0c      	ldr	r2, [pc, #48]	; (800226c <console_complete+0x114>)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002240:	4909      	ldr	r1, [pc, #36]	; (8002268 <console_complete+0x110>)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (; j < _NUM_OF_CMD; j++) {
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	3301      	adds	r3, #1
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	2b07      	cmp	r3, #7
 8002252:	ddf1      	ble.n	8002238 <console_complete+0xe0>
        }
    }
    compl_word[j] = NULL; /* Last ptr in array always must be NULL */
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <console_complete+0x110>)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	2100      	movs	r1, #0
 800225a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    return compl_word;
 800225e:	4b02      	ldr	r3, [pc, #8]	; (8002268 <console_complete+0x110>)
}
 8002260:	4618      	mov	r0, r3
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	200003ec 	.word	0x200003ec
 800226c:	20000004 	.word	0x20000004
 8002270:	0800cf30 	.word	0x0800cf30
 8002274:	20000024 	.word	0x20000024

08002278 <console_print_help>:

#endif /* MICRORL_CFG_USE_COMPLETE || __DOXYGEN__ */

void console_print_help(microrl_t *microrl_ptr)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
    char ver_str[6] = {0};
 8002280:	2300      	movs	r3, #0
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	2300      	movs	r3, #0
 8002286:	81bb      	strh	r3, [r7, #12]
    console_get_version(ver_str);
 8002288:	f107 0308 	add.w	r3, r7, #8
 800228c:	4618      	mov	r0, r3
 800228e:	f000 f873 	bl	8002378 <console_get_version>

    console_print(microrl_ptr, "MicroRL v");
 8002292:	491b      	ldr	r1, [pc, #108]	; (8002300 <console_print_help+0x88>)
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff fd73 	bl	8001d80 <console_print>
    console_print(microrl_ptr, ver_str);
 800229a:	f107 0308 	add.w	r3, r7, #8
 800229e:	4619      	mov	r1, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff fd6d 	bl	8001d80 <console_print>
    console_print(microrl_ptr, " library DEMO v");
 80022a6:	4917      	ldr	r1, [pc, #92]	; (8002304 <console_print_help+0x8c>)
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff fd69 	bl	8001d80 <console_print>
    console_print(microrl_ptr, _STM32_DEMO_VER);
 80022ae:	4916      	ldr	r1, [pc, #88]	; (8002308 <console_print_help+0x90>)
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff fd65 	bl	8001d80 <console_print>
    console_print(microrl_ptr, _ENDLINE_SEQ);
 80022b6:	4915      	ldr	r1, [pc, #84]	; (800230c <console_print_help+0x94>)
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff fd61 	bl	8001d80 <console_print>

#if MICRORL_CFG_USE_ECHO_OFF
    if (!logged_in) {
 80022be:	4b14      	ldr	r3, [pc, #80]	; (8002310 <console_print_help+0x98>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d103      	bne.n	80022ce <console_print_help+0x56>
        console_print(microrl_ptr, "\tlogin YOUR_LOGIN      - 'admin' in this example"_ENDLINE_SEQ);
 80022c6:	4913      	ldr	r1, [pc, #76]	; (8002314 <console_print_help+0x9c>)
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff fd59 	bl	8001d80 <console_print>
    }
#endif /* MICRORL_CFG_USE_ECHO_OFF */

    console_print(microrl_ptr, "List of commands:"_ENDLINE_SEQ);
 80022ce:	4912      	ldr	r1, [pc, #72]	; (8002318 <console_print_help+0xa0>)
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff fd55 	bl	8001d80 <console_print>
    console_print(microrl_ptr, "\tclear               - clear screen"_ENDLINE_SEQ);
 80022d6:	4911      	ldr	r1, [pc, #68]	; (800231c <console_print_help+0xa4>)
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7ff fd51 	bl	8001d80 <console_print>
    console_print(microrl_ptr, "\tlogout              - end session"_ENDLINE_SEQ);
 80022de:	4910      	ldr	r1, [pc, #64]	; (8002320 <console_print_help+0xa8>)
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7ff fd4d 	bl	8001d80 <console_print>
    console_print(microrl_ptr, "\tbuff                - buff configuring menu"_ENDLINE_SEQ);
 80022e6:	490f      	ldr	r1, [pc, #60]	; (8002324 <console_print_help+0xac>)
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff fd49 	bl	8001d80 <console_print>

#if MICRORL_CFG_USE_COMPLETE
    console_print(microrl_ptr, "Use TAB key for completion"_ENDLINE_SEQ _ENDLINE_SEQ);
 80022ee:	490e      	ldr	r1, [pc, #56]	; (8002328 <console_print_help+0xb0>)
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff fd45 	bl	8001d80 <console_print>
#endif /* MICRORL_CFG_USE_COMPLETE */
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	0800d164 	.word	0x0800d164
 8002304:	0800d170 	.word	0x0800d170
 8002308:	0800d180 	.word	0x0800d180
 800230c:	0800d184 	.word	0x0800d184
 8002310:	20000330 	.word	0x20000330
 8002314:	0800d188 	.word	0x0800d188
 8002318:	0800d1bc 	.word	0x0800d1bc
 800231c:	0800d1d0 	.word	0x0800d1d0
 8002320:	0800d1f8 	.word	0x0800d1f8
 8002324:	0800d220 	.word	0x0800d220
 8002328:	0800d250 	.word	0x0800d250

0800232c <console_print_buff>:

void console_print_buff(microrl_t *microrl_ptr)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
    console_print(microrl_ptr, "List of buff commands:"_ENDLINE_SEQ);
 8002334:	490b      	ldr	r1, [pc, #44]	; (8002364 <console_print_buff+0x38>)
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff fd22 	bl	8001d80 <console_print>
    console_print(microrl_ptr, "\treset               - reset buffer"_ENDLINE_SEQ);
 800233c:	490a      	ldr	r1, [pc, #40]	; (8002368 <console_print_buff+0x3c>)
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff fd1e 	bl	8001d80 <console_print>
    console_print(microrl_ptr, "\tfree                - free buff memory"_ENDLINE_SEQ);
 8002344:	4909      	ldr	r1, [pc, #36]	; (800236c <console_print_buff+0x40>)
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff fd1a 	bl	8001d80 <console_print>
    console_print(microrl_ptr, "\tcheck               - check your buff"_ENDLINE_SEQ);
 800234c:	4908      	ldr	r1, [pc, #32]	; (8002370 <console_print_buff+0x44>)
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff fd16 	bl	8001d80 <console_print>
    console_print(microrl_ptr, "\texit                - back to main menu"_ENDLINE_SEQ _ENDLINE_SEQ);
 8002354:	4907      	ldr	r1, [pc, #28]	; (8002374 <console_print_buff+0x48>)
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff fd12 	bl	8001d80 <console_print>
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	0800d270 	.word	0x0800d270
 8002368:	0800d28c 	.word	0x0800d28c
 800236c:	0800d2b4 	.word	0x0800d2b4
 8002370:	0800d2e0 	.word	0x0800d2e0
 8002374:	0800d30c 	.word	0x0800d30c

08002378 <console_get_version>:

void console_get_version(char* ver_str)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
    uint32_t ver = microrl_get_version();
 8002380:	f001 f9c6 	bl	8003710 <microrl_get_version>
 8002384:	60f8      	str	r0, [r7, #12]

    ver_str[0] = (char)((ver >> 16) & 0x000000FF) + '0';
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	0c1b      	lsrs	r3, r3, #16
 800238a:	b2db      	uxtb	r3, r3
 800238c:	3330      	adds	r3, #48	; 0x30
 800238e:	b2da      	uxtb	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	701a      	strb	r2, [r3, #0]
    ver_str[1] = '.';
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3301      	adds	r3, #1
 8002398:	222e      	movs	r2, #46	; 0x2e
 800239a:	701a      	strb	r2, [r3, #0]
    ver_str[2] = (char)((ver >> 8) & 0x000000FF) + '0';
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	0a1b      	lsrs	r3, r3, #8
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3302      	adds	r3, #2
 80023a6:	3230      	adds	r2, #48	; 0x30
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	701a      	strb	r2, [r3, #0]
    ver_str[3] = '.';
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3303      	adds	r3, #3
 80023b0:	222e      	movs	r2, #46	; 0x2e
 80023b2:	701a      	strb	r2, [r3, #0]
    ver_str[4] = (char)(ver & 0x000000FF) + '0';
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3304      	adds	r3, #4
 80023bc:	3230      	adds	r2, #48	; 0x30
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]
}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <LogsTaskStart>:




void LogsTaskStart(void *argument)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b0a2      	sub	sp, #136	; 0x88
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
    uint8_t ddd[128] = {0};
 80023d4:	2300      	movs	r3, #0
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	f107 030c 	add.w	r3, r7, #12
 80023dc:	227c      	movs	r2, #124	; 0x7c
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f008 f83b 	bl	800a45c <memset>
    UNUSED(ddd);

    for (;;)
    {
        if (lwrb_get_full(&data_uart.lwrb) != 0) {
 80023e6:	480a      	ldr	r0, [pc, #40]	; (8002410 <LogsTaskStart+0x44>)
 80023e8:	f007 ff76 	bl	800a2d8 <lwrb_get_full>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <LogsTaskStart+0x3a>
            lwrb_read(&data_uart.lwrb, &data_uart.console_input, sizeof(char));
 80023f2:	2201      	movs	r2, #1
 80023f4:	4907      	ldr	r1, [pc, #28]	; (8002414 <LogsTaskStart+0x48>)
 80023f6:	4806      	ldr	r0, [pc, #24]	; (8002410 <LogsTaskStart+0x44>)
 80023f8:	f007 fead 	bl	800a156 <lwrb_read>
            console_insert_char(data_uart.console_input);
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <LogsTaskStart+0x44>)
 80023fe:	7f5b      	ldrb	r3, [r3, #29]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fcab 	bl	8001d5c <console_insert_char>
        }
        osDelay(100);
 8002406:	2064      	movs	r0, #100	; 0x64
 8002408:	f001 fd56 	bl	8003eb8 <osDelay>
        if (lwrb_get_full(&data_uart.lwrb) != 0) {
 800240c:	e7eb      	b.n	80023e6 <LogsTaskStart+0x1a>
 800240e:	bf00      	nop
 8002410:	200004bc 	.word	0x200004bc
 8002414:	200004d9 	.word	0x200004d9

08002418 <log_init>:




void log_init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
    lwprintf_init(lwprintf_logs_out);
 800241c:	4902      	ldr	r1, [pc, #8]	; (8002428 <log_init+0x10>)
 800241e:	2000      	movs	r0, #0
 8002420:	f007 fd5a 	bl	8009ed8 <lwprintf_init_ex>
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	08002459 	.word	0x08002459

0800242c <log_printf>:




int log_printf(const char *fmt, ...)
{
 800242c:	b40f      	push	{r0, r1, r2, r3}
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
    va_list args;
    int len;

    va_start(args, fmt);
 8002434:	f107 0314 	add.w	r3, r7, #20
 8002438:	603b      	str	r3, [r7, #0]
    len = lwprintf_vprintf(fmt, args);
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	6939      	ldr	r1, [r7, #16]
 800243e:	2000      	movs	r0, #0
 8002440:	f007 fd60 	bl	8009f04 <lwprintf_vprintf_ex>
 8002444:	6078      	str	r0, [r7, #4]
    va_end(args);

    return len;
 8002446:	687b      	ldr	r3, [r7, #4]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002452:	b004      	add	sp, #16
 8002454:	4770      	bx	lr
	...

08002458 <lwprintf_logs_out>:




static int lwprintf_logs_out(int ch, lwprintf_t* p)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
    uint8_t c = (uint8_t)ch;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	73fb      	strb	r3, [r7, #15]

    if (c == '\0') {
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <lwprintf_logs_out+0x18>
        return ch;           //to prevent printing '0' in the end of any (char*)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	e006      	b.n	800247e <lwprintf_logs_out+0x26>
    }

    return uart_send_byte(&huart3, ch);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	4619      	mov	r1, r3
 8002476:	4804      	ldr	r0, [pc, #16]	; (8002488 <lwprintf_logs_out+0x30>)
 8002478:	f001 f9de 	bl	8003838 <uart_send_byte>
 800247c:	4603      	mov	r3, r0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000410 	.word	0x20000410

0800248c <log_print_welcome_msg>:




void log_print_welcome_msg(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
    log_printf_crlf("Welcome to STM32F407 Discovery firmware with FreeRTOS");
 8002490:	4803      	ldr	r0, [pc, #12]	; (80024a0 <log_print_welcome_msg+0x14>)
 8002492:	f7ff ffcb 	bl	800242c <log_printf>
 8002496:	4803      	ldr	r0, [pc, #12]	; (80024a4 <log_print_welcome_msg+0x18>)
 8002498:	f7ff ffc8 	bl	800242c <log_printf>
}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	0800d33c 	.word	0x0800d33c
 80024a4:	0800d374 	.word	0x0800d374

080024a8 <prv_cmdline_buf_split>:
 * \param[out]      tkn_str_arr: Tokens buffer stored split words
 * \param[out]      tkn_cnt_ptr: Number of split tokens
 * \param[in]       limit: Number of command line characters to split
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
static microrlr_t prv_cmdline_buf_split(microrl_t* mrl, const char** tkn_str_arr, uint8_t* tkn_cnt_ptr, size_t limit) {
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
    uint8_t num = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	75fb      	strb	r3, [r7, #23]
    char *str = mrl->cmdline_str;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3314      	adds	r3, #20
 80024be:	613b      	str	r3, [r7, #16]

    /* Process complete string */
    while (*str != '\0') {
 80024c0:	e03c      	b.n	800253c <prv_cmdline_buf_split+0x94>
                    ++str;
                }
            }
        } else {
#endif /* MICRORL_CFG_USE_QUOTING */
            tkn_str_arr[num++] = str;           /* Set start of argument directly on character */
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	75fa      	strb	r2, [r7, #23]
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	4413      	add	r3, r2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	601a      	str	r2, [r3, #0]
            while ((*str != ' ' && *str != '\0')) {
 80024d2:	e018      	b.n	8002506 <prv_cmdline_buf_split+0x5e>
                if (!((size_t)(str - mrl->cmdline_str) < limit)) {
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	3314      	adds	r3, #20
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d80d      	bhi.n	8002500 <prv_cmdline_buf_split+0x58>
                    tkn_str_arr[--num] = NULL;
 80024e4:	7dfb      	ldrb	r3, [r7, #23]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	75fb      	strb	r3, [r7, #23]
 80024ea:	7dfb      	ldrb	r3, [r7, #23]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	4413      	add	r3, r2
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
                    *tkn_cnt_ptr = num;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	7dfa      	ldrb	r2, [r7, #23]
 80024fa:	701a      	strb	r2, [r3, #0]
                    return microrlOK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	e027      	b.n	8002550 <prv_cmdline_buf_split+0xa8>
#if MICRORL_CFG_USE_QUOTING
                if (*str == '"' || *str == '\'') {   /* Quote should not be here... */
                    *str = '\0';                /* ...add NULL termination to end token */
                }
#endif /* MICRORL_CFG_USE_QUOTING */
                ++str;
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	3301      	adds	r3, #1
 8002504:	613b      	str	r3, [r7, #16]
            while ((*str != ' ' && *str != '\0')) {
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b20      	cmp	r3, #32
 800250c:	d003      	beq.n	8002516 <prv_cmdline_buf_split+0x6e>
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1de      	bne.n	80024d4 <prv_cmdline_buf_split+0x2c>
            }
            if (*str == '\0') {
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d013      	beq.n	8002546 <prv_cmdline_buf_split+0x9e>
                break;
            }
            *str = '\0';
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
            ++str;
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	3301      	adds	r3, #1
 8002528:	613b      	str	r3, [r7, #16]
#if MICRORL_CFG_USE_QUOTING
        }
#endif /* MICRORL_CFG_USE_QUOTING */
        if (num == MICRORL_CFG_CMD_TOKEN_NMB && *str != '\0') {     /* Check for number of tokens */
 800252a:	7dfb      	ldrb	r3, [r7, #23]
 800252c:	2b08      	cmp	r3, #8
 800252e:	d105      	bne.n	800253c <prv_cmdline_buf_split+0x94>
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <prv_cmdline_buf_split+0x94>
            return microrlERRTKNNUM;
 8002538:	2303      	movs	r3, #3
 800253a:	e009      	b.n	8002550 <prv_cmdline_buf_split+0xa8>
    while (*str != '\0') {
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1be      	bne.n	80024c2 <prv_cmdline_buf_split+0x1a>
 8002544:	e000      	b.n	8002548 <prv_cmdline_buf_split+0xa0>
                break;
 8002546:	bf00      	nop
        }
    }

    *tkn_cnt_ptr = num;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	7dfa      	ldrb	r2, [r7, #23]
 800254c:	701a      	strb	r2, [r3, #0]
    return microrlOK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	371c      	adds	r7, #28
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <prv_cmdline_buf_insert_text>:
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \param[in]       text_str: Text to store on the command line
 * \param[in]       len: Length of text to store
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
static microrlr_t prv_cmdline_buf_insert_text(microrl_t* mrl, const char* text_str, size_t len) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
    if ((mrl->cmdlen + len) > (MICRORL_ARRAYSIZE(mrl->cmdline_str) - 1)) {
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4413      	add	r3, r2
 8002570:	2b3c      	cmp	r3, #60	; 0x3c
 8002572:	d901      	bls.n	8002578 <prv_cmdline_buf_insert_text+0x1c>
        return microrlERRCLFULL;
 8002574:	2304      	movs	r3, #4
 8002576:	e057      	b.n	8002628 <prv_cmdline_buf_insert_text+0xcc>
    }

#if MICRORL_CFG_USE_ECHO_OFF
    if ((mrl->echo != MICRORL_ECHO_ON) && (mrl->echo_off_pos == -1)) {
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800257e:	2b01      	cmp	r3, #1
 8002580:	d00b      	beq.n	800259a <prv_cmdline_buf_insert_text+0x3e>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258c:	d105      	bne.n	800259a <prv_cmdline_buf_insert_text+0x3e>
        mrl->echo_off_pos = mrl->cmdlen;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002592:	461a      	mov	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }
#endif /* MICRORL_CFG_USE_ECHO_OFF */
    memmove(mrl->cmdline_str + mrl->cursor + len,
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f103 0214 	add.w	r2, r3, #20
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	440b      	add	r3, r1
 80025a8:	18d0      	adds	r0, r2, r3
            mrl->cmdline_str + mrl->cursor,
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f103 0214 	add.w	r2, r3, #20
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    memmove(mrl->cmdline_str + mrl->cursor + len,
 80025b4:	18d1      	adds	r1, r2, r3
            mrl->cmdlen - mrl->cursor);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    memmove(mrl->cmdline_str + mrl->cursor + len,
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	f007 ff31 	bl	800a428 <memmove>
    for (size_t i = 0; i < len; ++i) {
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	e00e      	b.n	80025ea <prv_cmdline_buf_insert_text+0x8e>
        mrl->cmdline_str[mrl->cursor + i] = text_str[i];
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	441a      	add	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	440b      	add	r3, r1
 80025da:	7811      	ldrb	r1, [r2, #0]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4413      	add	r3, r2
 80025e0:	460a      	mov	r2, r1
 80025e2:	751a      	strb	r2, [r3, #20]
    for (size_t i = 0; i < len; ++i) {
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	3301      	adds	r3, #1
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d3ec      	bcc.n	80025cc <prv_cmdline_buf_insert_text+0x70>
    }
    mrl->cursor += len;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	441a      	add	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	659a      	str	r2, [r3, #88]	; 0x58
    mrl->cmdlen += len;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	441a      	add	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	655a      	str	r2, [r3, #84]	; 0x54
    memset(&mrl->cmdline_str[mrl->cmdlen], 0x00, MICRORL_ARRAYSIZE(mrl->cmdline_str) - 1 - mrl->cmdlen);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260e:	3310      	adds	r3, #16
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4413      	add	r3, r2
 8002614:	1d18      	adds	r0, r3, #4
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261a:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 800261e:	461a      	mov	r2, r3
 8002620:	2100      	movs	r1, #0
 8002622:	f007 ff1b 	bl	800a45c <memset>

    return microrlOK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <prv_cmdline_buf_backspace>:
/**
 * \brief           Remove len characters backwards at cursor
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \param[in]       len: Number of chars to remove
 */
static void prv_cmdline_buf_backspace(microrl_t* mrl, size_t len) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
    if (mrl->cursor < len) {
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d82a      	bhi.n	800269a <prv_cmdline_buf_backspace+0x6a>
        return;
    }

    memmove(mrl->cmdline_str + mrl->cursor - len,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f103 0214 	add.w	r2, r3, #20
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	1acb      	subs	r3, r1, r3
 8002652:	18d0      	adds	r0, r2, r3
            mrl->cmdline_str + mrl->cursor,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f103 0214 	add.w	r2, r3, #20
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    memmove(mrl->cmdline_str + mrl->cursor - len,
 800265e:	18d1      	adds	r1, r2, r3
            mrl->cmdlen - mrl->cursor + len);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	1ad2      	subs	r2, r2, r3
    memmove(mrl->cmdline_str + mrl->cursor - len,
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	4413      	add	r3, r2
 800266e:	461a      	mov	r2, r3
 8002670:	f007 feda 	bl	800a428 <memmove>
    mrl->cursor -= len;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	1ad2      	subs	r2, r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	659a      	str	r2, [r3, #88]	; 0x58
    mrl->cmdline_str[mrl->cmdlen] = '\0';
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	4413      	add	r3, r2
 8002688:	2200      	movs	r2, #0
 800268a:	751a      	strb	r2, [r3, #20]
    mrl->cmdlen -= len;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	1ad2      	subs	r2, r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	655a      	str	r2, [r3, #84]	; 0x54
 8002698:	e000      	b.n	800269c <prv_cmdline_buf_backspace+0x6c>
        return;
 800269a:	bf00      	nop
}
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <prv_cmdline_buf_delete>:

/**
 * \brief           Remove one characters forward at cursor
 * \param[in,out]   mrl: \ref microrl_t working instance
 */
static void prv_cmdline_buf_delete(microrl_t* mrl) {
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
    if ((mrl->cmdlen == 0) || (mrl->cursor == mrl->cmdlen)) {
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d027      	beq.n	8002702 <prv_cmdline_buf_delete+0x60>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d021      	beq.n	8002702 <prv_cmdline_buf_delete+0x60>
        return;
    }

    memmove(mrl->cmdline_str + mrl->cursor,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f103 0214 	add.w	r2, r3, #20
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c8:	18d0      	adds	r0, r2, r3
            mrl->cmdline_str + mrl->cursor + 1,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f103 0214 	add.w	r2, r3, #20
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	3301      	adds	r3, #1
    memmove(mrl->cmdline_str + mrl->cursor,
 80026d6:	18d1      	adds	r1, r2, r3
            mrl->cmdlen - mrl->cursor + 1);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	1ad3      	subs	r3, r2, r3
    memmove(mrl->cmdline_str + mrl->cursor,
 80026e2:	3301      	adds	r3, #1
 80026e4:	461a      	mov	r2, r3
 80026e6:	f007 fe9f 	bl	800a428 <memmove>
    mrl->cmdline_str[mrl->cmdlen] = '\0';
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	2200      	movs	r2, #0
 80026f4:	751a      	strb	r2, [r3, #20]
    --mrl->cmdlen;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fa:	1e5a      	subs	r2, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	655a      	str	r2, [r3, #84]	; 0x54
 8002700:	e000      	b.n	8002704 <prv_cmdline_buf_delete+0x62>
        return;
 8002702:	bf00      	nop
}
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <prv_cmdline_buf_reset>:

/**
 * \brief           Reset command line buffer and its position pointers
 * \param[out]      mrl: \ref microrl_t working instance
 */
MICRORL_CFG_STATIC_INLINE void prv_cmdline_buf_reset(microrl_t* mrl) {
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
    memset(mrl->cmdline_str, 0x00, sizeof(mrl->cmdline_str));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3314      	adds	r3, #20
 8002716:	223d      	movs	r2, #61	; 0x3d
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f007 fe9e 	bl	800a45c <memset>
    mrl->cmdlen = 0;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	655a      	str	r2, [r3, #84]	; 0x54
    mrl->cursor = 0;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <prv_terminal_print_prompt>:

/**
 * \brief           Print prompt string in terminal
 * \param[in]       mrl: \ref microrl_t working instance
 */
MICRORL_CFG_STATIC_INLINE void prv_terminal_print_prompt(microrl_t* mrl) {
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
    mrl->out_fn(mrl, MICRORL_CFG_PROMPT_COLOR);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4909      	ldr	r1, [pc, #36]	; (8002768 <prv_terminal_print_prompt+0x34>)
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	4798      	blx	r3
    mrl->out_fn(mrl, mrl->prompt_ptr);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6912      	ldr	r2, [r2, #16]
 800274e:	4611      	mov	r1, r2
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	4798      	blx	r3
    mrl->out_fn(mrl, MICRORL_COLOR_DEFAULT);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4904      	ldr	r1, [pc, #16]	; (800276c <prv_terminal_print_prompt+0x38>)
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	4798      	blx	r3
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	0800d378 	.word	0x0800d378
 800276c:	0800d380 	.word	0x0800d380

08002770 <prv_terminal_backspace>:
/**
 * \brief           Clear the last character in the terminal command line
 *                      and move the cursor to its position
 * \param[in]       mrl: \ref microrl_t working instance
 */
MICRORL_CFG_STATIC_INLINE void prv_terminal_backspace(microrl_t* mrl) {
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
    mrl->out_fn(mrl, "\033[D \033[D");
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4903      	ldr	r1, [pc, #12]	; (800278c <prv_terminal_backspace+0x1c>)
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	0800d388 	.word	0x0800d388

08002790 <prv_terminal_newline>:

/**
 * \brief           Print end line symbol defined in \ref MICRORL_CFG_END_LINE config
 * \param[in]       mrl: \ref microrl_t working instance
 */
MICRORL_CFG_STATIC_INLINE void prv_terminal_newline(microrl_t* mrl) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
    mrl->out_fn(mrl, MICRORL_CFG_END_LINE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4903      	ldr	r1, [pc, #12]	; (80027ac <prv_terminal_newline+0x1c>)
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	4798      	blx	r3
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	0800d390 	.word	0x0800d390

080027b0 <prv_cursor_generate_move>:
 *                      The passed string must be at least 7 bytes long
 * \param[in]       str: The original string before moving the cursor
 * \param[in]       offset: Positive or negative interval to move cursor
 * \return          The original string after moving the cursor
 */
static char* prv_cursor_generate_move(char* str, int32_t offset) {
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
    char c = 'C';
 80027ba:	2343      	movs	r3, #67	; 0x43
 80027bc:	75fb      	strb	r3, [r7, #23]

    if (offset > 999) {
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027c4:	db02      	blt.n	80027cc <prv_cursor_generate_move+0x1c>
        offset = 999;
 80027c6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80027ca:	603b      	str	r3, [r7, #0]
    }
    if (offset < -999) {
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80027d2:	dc01      	bgt.n	80027d8 <prv_cursor_generate_move+0x28>
        offset = -999;
 80027d4:	4b33      	ldr	r3, [pc, #204]	; (80028a4 <prv_cursor_generate_move+0xf4>)
 80027d6:	603b      	str	r3, [r7, #0]
    }
    if (offset < 0) {
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	da05      	bge.n	80027ea <prv_cursor_generate_move+0x3a>
        offset = -offset;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	425b      	negs	r3, r3
 80027e2:	603b      	str	r3, [r7, #0]
        c = 'D';
 80027e4:	2344      	movs	r3, #68	; 0x44
 80027e6:	75fb      	strb	r3, [r7, #23]
 80027e8:	e007      	b.n	80027fa <prv_cursor_generate_move+0x4a>
    } else if (offset == 0) {
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d104      	bne.n	80027fa <prv_cursor_generate_move+0x4a>
        *str = '\0';
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
        return str;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	e04e      	b.n	8002898 <prv_cursor_generate_move+0xe8>
    }

#if MICRORL_CFG_USE_LIBC_STDIO
    str += sprintf(str, "\033[%d%c", offset, c);
#else
    *str++ = '\033';
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	221b      	movs	r2, #27
 8002802:	701a      	strb	r2, [r3, #0]
    *str++ = '[';
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	225b      	movs	r2, #91	; 0x5b
 800280c:	701a      	strb	r2, [r3, #0]

    char tmp_str[4] = {0};
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
    size_t i = 0;
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]

    while (offset > 0) {
 8002816:	e01d      	b.n	8002854 <prv_cursor_generate_move+0xa4>
        tmp_str[i++] = (offset % 10) + '0';
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <prv_cursor_generate_move+0xf8>)
 800281c:	fb83 1302 	smull	r1, r3, r3, r2
 8002820:	1099      	asrs	r1, r3, #2
 8002822:	17d3      	asrs	r3, r2, #31
 8002824:	1ac9      	subs	r1, r1, r3
 8002826:	460b      	mov	r3, r1
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	1ad1      	subs	r1, r2, r3
 8002830:	b2ca      	uxtb	r2, r1
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1c59      	adds	r1, r3, #1
 8002836:	6139      	str	r1, [r7, #16]
 8002838:	3230      	adds	r2, #48	; 0x30
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	3318      	adds	r3, #24
 800283e:	443b      	add	r3, r7
 8002840:	f803 2c10 	strb.w	r2, [r3, #-16]
        offset /= 10;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	4a18      	ldr	r2, [pc, #96]	; (80028a8 <prv_cursor_generate_move+0xf8>)
 8002848:	fb82 1203 	smull	r1, r2, r2, r3
 800284c:	1092      	asrs	r2, r2, #2
 800284e:	17db      	asrs	r3, r3, #31
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	603b      	str	r3, [r7, #0]
    while (offset > 0) {
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	dcde      	bgt.n	8002818 <prv_cursor_generate_move+0x68>
    }

    for (size_t j = 0; j < i; ++j) {            /* Write reversed numerals to result */
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	e00e      	b.n	800287e <prv_cursor_generate_move+0xce>
        *str++ = tmp_str[i - j - 1];
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	1e5a      	subs	r2, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	1c59      	adds	r1, r3, #1
 800286c:	6079      	str	r1, [r7, #4]
 800286e:	3218      	adds	r2, #24
 8002870:	443a      	add	r2, r7
 8002872:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8002876:	701a      	strb	r2, [r3, #0]
    for (size_t j = 0; j < i; ++j) {            /* Write reversed numerals to result */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	3301      	adds	r3, #1
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	429a      	cmp	r2, r3
 8002884:	d3ec      	bcc.n	8002860 <prv_cursor_generate_move+0xb0>
    }

    *str++ = c;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	7dfa      	ldrb	r2, [r7, #23]
 800288e:	701a      	strb	r2, [r3, #0]
    *str = '\0';
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]
#endif /* MICRORL_CFG_USE_LIBC_STDIO */

    return str;
 8002896:	687b      	ldr	r3, [r7, #4]
}
 8002898:	4618      	mov	r0, r3
 800289a:	371c      	adds	r7, #28
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	fffffc19 	.word	0xfffffc19
 80028a8:	66666667 	.word	0x66666667

080028ac <prv_terminal_move_cursor>:
 * \brief           Set cursor at current position + offset (positive or negative)
 *                      in terminal command line
 * \param[in]       mrl: \ref microrl_t working instance
 * \param[in]       offset: Positive or negative interval to move cursor
 */
static void prv_terminal_move_cursor(microrl_t* mrl, int32_t offset) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
    if (offset == 0) {
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d015      	beq.n	80028e8 <prv_terminal_move_cursor+0x3c>
        return;
    }

    char str[16] = {0};
 80028bc:	2300      	movs	r3, #0
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	f107 030c 	add.w	r3, r7, #12
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
    prv_cursor_generate_move(str, offset);
 80028cc:	f107 0308 	add.w	r3, r7, #8
 80028d0:	6839      	ldr	r1, [r7, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff ff6c 	bl	80027b0 <prv_cursor_generate_move>
    mrl->out_fn(mrl, str);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f107 0208 	add.w	r2, r7, #8
 80028e0:	4611      	mov	r1, r2
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	4798      	blx	r3
 80028e6:	e000      	b.n	80028ea <prv_terminal_move_cursor+0x3e>
        return;
 80028e8:	bf00      	nop
}
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <prv_terminal_print_line>:
 * \brief           Print command line buffer to specified position
 * \param[in]       mrl: \ref microrl_t working instance
 * \param[in]       pos: Start position from which the line will be printed
 * \param[in]       reset: Flag to reset the cursor position
 */
static void prv_terminal_print_line(microrl_t* mrl, int32_t pos, uint8_t reset) {
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b091      	sub	sp, #68	; 0x44
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	4613      	mov	r3, r2
 80028fc:	71fb      	strb	r3, [r7, #7]
    char str[MICRORL_CFG_PRINT_BUFFER_LEN] = {0};
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	2224      	movs	r2, #36	; 0x24
 8002908:	2100      	movs	r1, #0
 800290a:	4618      	mov	r0, r3
 800290c:	f007 fda6 	bl	800a45c <memset>
    char* str_ptr = str;
 8002910:	f107 0310 	add.w	r3, r7, #16
 8002914:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (reset) {
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d011      	beq.n	8002940 <prv_terminal_print_line+0x50>
#if MICRORL_CFG_USE_CARRIAGE_RETURN
        *str_ptr++ = '\r';
 800291c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002922:	220d      	movs	r2, #13
 8002924:	701a      	strb	r2, [r3, #0]
        str_ptr = prv_cursor_generate_move(str_ptr, strlen(mrl->prompt_ptr) + pos);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	4618      	mov	r0, r3
 800292c:	f7fd fc6a 	bl	8000204 <strlen>
 8002930:	4602      	mov	r2, r0
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	4413      	add	r3, r2
 8002936:	4619      	mov	r1, r3
 8002938:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800293a:	f7ff ff39 	bl	80027b0 <prv_cursor_generate_move>
 800293e:	63f8      	str	r0, [r7, #60]	; 0x3c
        str_ptr = prv_cursor_generate_move(str_ptr, -(MICRORL_ARRAYSIZE(mrl->cmdline_str) - 1 + strlen(mrl->prompt_ptr) + 2));
        str_ptr = prv_cursor_generate_move(str_ptr, strlen(mrl->prompt_ptr) + pos);
#endif /* MICRORL_CFG_USE_CARRIAGE_RETURN */
    }

    for (size_t i = pos; i < mrl->cmdlen; ++i) {
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	63bb      	str	r3, [r7, #56]	; 0x38
 8002944:	e033      	b.n	80029ae <prv_terminal_print_line+0xbe>
        *str_ptr = mrl->cmdline_str[i];
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294a:	4413      	add	r3, r2
 800294c:	3314      	adds	r3, #20
 800294e:	781a      	ldrb	r2, [r3, #0]
 8002950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002952:	701a      	strb	r2, [r3, #0]

#if MICRORL_CFG_USE_ECHO_OFF
        if (((int32_t)i >= mrl->echo_off_pos) && (mrl->echo != MICRORL_ECHO_ON)) {
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800295a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295c:	429a      	cmp	r2, r3
 800295e:	dc07      	bgt.n	8002970 <prv_terminal_print_line+0x80>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8002966:	2b01      	cmp	r3, #1
 8002968:	d002      	beq.n	8002970 <prv_terminal_print_line+0x80>
            *str_ptr = MICRORL_CFG_ECHO_OFF_MASK;
 800296a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800296c:	222a      	movs	r2, #42	; 0x2a
 800296e:	701a      	strb	r2, [r3, #0]
        }
#endif /* MICRORL_CFG_USE_ECHO_OFF */

        ++str_ptr;
 8002970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002972:	3301      	adds	r3, #1
 8002974:	63fb      	str	r3, [r7, #60]	; 0x3c

        if ((size_t)(str_ptr - str) == strlen(str)) {
 8002976:	f107 0310 	add.w	r3, r7, #16
 800297a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800297c:	1ad4      	subs	r4, r2, r3
 800297e:	f107 0310 	add.w	r3, r7, #16
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fc3e 	bl	8000204 <strlen>
 8002988:	4603      	mov	r3, r0
 800298a:	429c      	cmp	r4, r3
 800298c:	d10c      	bne.n	80029a8 <prv_terminal_print_line+0xb8>
            *str_ptr = '\0';
 800298e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
            mrl->out_fn(mrl, str);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f107 0210 	add.w	r2, r7, #16
 800299c:	4611      	mov	r1, r2
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	4798      	blx	r3
            str_ptr = str;
 80029a2:	f107 0310 	add.w	r3, r7, #16
 80029a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (size_t i = pos; i < mrl->cmdlen; ++i) {
 80029a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029aa:	3301      	adds	r3, #1
 80029ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d3c6      	bcc.n	8002946 <prv_terminal_print_line+0x56>
        }
    }

    if ((size_t)(str_ptr - str + 3 + 6 + 1) > MICRORL_ARRAYSIZE(str)) {
 80029b8:	f107 0310 	add.w	r3, r7, #16
 80029bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	330a      	adds	r3, #10
 80029c2:	2b28      	cmp	r3, #40	; 0x28
 80029c4:	d90c      	bls.n	80029e0 <prv_terminal_print_line+0xf0>
        *str_ptr = '\0';
 80029c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
        mrl->out_fn(mrl, str);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f107 0210 	add.w	r2, r7, #16
 80029d4:	4611      	mov	r1, r2
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	4798      	blx	r3
        str_ptr = str;
 80029da:	f107 0310 	add.w	r3, r7, #16
 80029de:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    *str_ptr++ = '\033';                        /* Delete all past end of text */
 80029e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029e6:	221b      	movs	r2, #27
 80029e8:	701a      	strb	r2, [r3, #0]
    *str_ptr++ = '[';
 80029ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029f0:	225b      	movs	r2, #91	; 0x5b
 80029f2:	701a      	strb	r2, [r3, #0]
    *str_ptr++ = 'K';
 80029f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029fa:	224b      	movs	r2, #75	; 0x4b
 80029fc:	701a      	strb	r2, [r3, #0]
    prv_cursor_generate_move(str_ptr, mrl->cursor - mrl->cmdlen);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	4619      	mov	r1, r3
 8002a0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002a0c:	f7ff fed0 	bl	80027b0 <prv_cursor_generate_move>
    mrl->out_fn(mrl, str);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f107 0210 	add.w	r2, r7, #16
 8002a18:	4611      	mov	r1, r2
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	4798      	blx	r3
}
 8002a1e:	bf00      	nop
 8002a20:	3744      	adds	r7, #68	; 0x44
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd90      	pop	{r4, r7, pc}

08002a26 <prv_hist_next_record>:
/**
 * \brief           Set the next record start position to the passed index
 * \param[in]       rbuf_ptr: Pointer to \ref microrl_hist_rbuf_t structure
 * \param[in,out]   idx_ptr: Pointer to the current record
 */
MICRORL_CFG_STATIC_INLINE void prv_hist_next_record(microrl_hist_rbuf_t* rbuf_ptr, size_t* idx_ptr) {
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6039      	str	r1, [r7, #0]
    while (rbuf_ptr->ring_buf[++(*idx_ptr)] != '\0') {
 8002a30:	e009      	b.n	8002a46 <prv_hist_next_record+0x20>
        if (*idx_ptr >= MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf)) {
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b3f      	cmp	r3, #63	; 0x3f
 8002a38:	d905      	bls.n	8002a46 <prv_hist_next_record+0x20>
            *idx_ptr -= MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	601a      	str	r2, [r3, #0]
    while (rbuf_ptr->ring_buf[++(*idx_ptr)] != '\0') {
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	5cd3      	ldrb	r3, [r2, r3]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1ea      	bne.n	8002a32 <prv_hist_next_record+0xc>
        }
    }
}
 8002a5c:	bf00      	nop
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <prv_hist_erase_older>:

/**
 * \brief           Remove older record from ring buffer
 * \param[in,out]   rbuf_ptr: Pointer to \ref microrl_hist_rbuf_t structure
 */
static void prv_hist_erase_older(microrl_hist_rbuf_t* rbuf_ptr) {
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
    size_t new_pos = rbuf_ptr->head;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	60fb      	str	r3, [r7, #12]
    prv_hist_next_record(rbuf_ptr, &new_pos);
 8002a78:	f107 030c 	add.w	r3, r7, #12
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff ffd1 	bl	8002a26 <prv_hist_next_record>
    rbuf_ptr->head = new_pos;
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <prv_hist_is_space_for_new>:
 * \brief           Check space in history buffer for new record
 * \param[in]       rbuf_ptr: Pointer to \ref microrl_hist_rbuf_t structure
 * \param[in]       len: Length of new record to save in history
 * \return          Member of \ref microrl_hist_status_t enumeration
 */
static microrl_hist_status_t prv_hist_is_space_for_new(microrl_hist_rbuf_t* rbuf_ptr, size_t len) {
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
    if (rbuf_ptr->tail >= rbuf_ptr->head) {
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d30a      	bcc.n	8002abe <prv_hist_is_space_for_new+0x2c>
        if ((MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf) - rbuf_ptr->tail + rbuf_ptr->head - 1) > len) {
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	333f      	adds	r3, #63	; 0x3f
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d20c      	bcs.n	8002ad4 <prv_hist_is_space_for_new+0x42>
            return MICRORL_HIST_NOT_FULL;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e00b      	b.n	8002ad6 <prv_hist_is_space_for_new+0x44>
        }
    } else {
        if ((rbuf_ptr->head - rbuf_ptr->tail - 1) > len) {
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d201      	bcs.n	8002ad4 <prv_hist_is_space_for_new+0x42>
            return MICRORL_HIST_NOT_FULL;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <prv_hist_is_space_for_new+0x44>
        }
    }

    return MICRORL_HIST_FULL;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <prv_hist_restore_line>:
 * \param[in]       rbuf_ptr: Pointer to \ref microrl_hist_rbuf_t structure
 * \param[out]      line_str: Line to restore from history
 * \param[in]       dir: Record search direction, member of \ref microrl_hist_dir_t
 * \return          Size of restored line. `0` is returned, if history is empty
 */
static size_t prv_hist_restore_line(microrl_hist_rbuf_t* rbuf_ptr, char* line_str, microrl_hist_dir_t dir) {
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b08c      	sub	sp, #48	; 0x30
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	4613      	mov	r3, r2
 8002aee:	71fb      	strb	r3, [r7, #7]
    size_t cnt = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t i = rbuf_ptr->head;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	61bb      	str	r3, [r7, #24]
    while (i != rbuf_ptr->tail) {               /* Count history records */
 8002afa:	e008      	b.n	8002b0e <prv_hist_restore_line+0x2c>
        prv_hist_next_record(rbuf_ptr, &i);
 8002afc:	f107 0318 	add.w	r3, r7, #24
 8002b00:	4619      	mov	r1, r3
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f7ff ff8f 	bl	8002a26 <prv_hist_next_record>
        ++cnt;
 8002b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (i != rbuf_ptr->tail) {               /* Count history records */
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d1f1      	bne.n	8002afc <prv_hist_restore_line+0x1a>
    }

    switch (dir) {
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d002      	beq.n	8002b24 <prv_hist_restore_line+0x42>
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d012      	beq.n	8002b48 <prv_hist_restore_line+0x66>
                return 0;                       /* Empty line */
            }
            break;
        }
        default:
            break;
 8002b22:	e025      	b.n	8002b70 <prv_hist_restore_line+0x8e>
            if (cnt < rbuf_ptr->count) {
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d201      	bcs.n	8002b32 <prv_hist_restore_line+0x50>
                return 0;                       /* Impossible state, return empty line */
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e077      	b.n	8002c22 <prv_hist_restore_line+0x140>
            if (cnt != rbuf_ptr->count) {
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d016      	beq.n	8002b6a <prv_hist_restore_line+0x88>
                ++rbuf_ptr->count;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	649a      	str	r2, [r3, #72]	; 0x48
            break;
 8002b46:	e010      	b.n	8002b6a <prv_hist_restore_line+0x88>
            if (rbuf_ptr->count == 0) {
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <prv_hist_restore_line+0x72>
                return 0;                       /* Empty line */
 8002b50:	2300      	movs	r3, #0
 8002b52:	e066      	b.n	8002c22 <prv_hist_restore_line+0x140>
            if (--rbuf_ptr->count == 0) {
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b58:	1e5a      	subs	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	649a      	str	r2, [r3, #72]	; 0x48
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d103      	bne.n	8002b6e <prv_hist_restore_line+0x8c>
                return 0;                       /* Empty line */
 8002b66:	2300      	movs	r3, #0
 8002b68:	e05b      	b.n	8002c22 <prv_hist_restore_line+0x140>
            break;
 8002b6a:	bf00      	nop
 8002b6c:	e000      	b.n	8002b70 <prv_hist_restore_line+0x8e>
            break;
 8002b6e:	bf00      	nop
    }

    size_t idx = rbuf_ptr->head;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	617b      	str	r3, [r7, #20]
    size_t j = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	62bb      	str	r3, [r7, #40]	; 0x28
    while ((cnt - j++) != rbuf_ptr->count) {    /* Find record for 'rbuf_ptr->count' counter */
 8002b7a:	e005      	b.n	8002b88 <prv_hist_restore_line+0xa6>
        prv_hist_next_record(rbuf_ptr, &idx);
 8002b7c:	f107 0314 	add.w	r3, r7, #20
 8002b80:	4619      	mov	r1, r3
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f7ff ff4f 	bl	8002a26 <prv_hist_next_record>
    while ((cnt - j++) != rbuf_ptr->count) {    /* Find record for 'rbuf_ptr->count' counter */
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b90:	1ad2      	subs	r2, r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d1f0      	bne.n	8002b7c <prv_hist_restore_line+0x9a>
    }

    ++idx;                                      /* Move position from `\0` marker */
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	617b      	str	r3, [r7, #20]

    size_t rec_len = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
    size_t k = idx;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	623b      	str	r3, [r7, #32]
    while (rbuf_ptr->ring_buf[k] != '\0') {     /* Calculating the length of the found record */
 8002ba8:	e00b      	b.n	8002bc2 <prv_hist_restore_line+0xe0>
        ++k;
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	3301      	adds	r3, #1
 8002bae:	623b      	str	r3, [r7, #32]
        if (k >= MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf)) {
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	2b3f      	cmp	r3, #63	; 0x3f
 8002bb4:	d902      	bls.n	8002bbc <prv_hist_restore_line+0xda>
            k -= MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf);
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	3b40      	subs	r3, #64	; 0x40
 8002bba:	623b      	str	r3, [r7, #32]
        }
        ++rec_len;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
    while (rbuf_ptr->ring_buf[k] != '\0') {     /* Calculating the length of the found record */
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1ed      	bne.n	8002baa <prv_hist_restore_line+0xc8>
    }

    memset(line_str, 0x00, MICRORL_CFG_CMDLINE_LEN);    /* Placing the found record on the command line */
 8002bce:	223c      	movs	r2, #60	; 0x3c
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	68b8      	ldr	r0, [r7, #8]
 8002bd4:	f007 fc42 	bl	800a45c <memset>
    if ((idx + rec_len) < MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf)) {
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	4413      	add	r3, r2
 8002bde:	2b3f      	cmp	r3, #63	; 0x3f
 8002be0:	d808      	bhi.n	8002bf4 <prv_hist_restore_line+0x112>
        memcpy(line_str, rbuf_ptr->ring_buf + idx, rec_len);
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	4413      	add	r3, r2
 8002be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bea:	4619      	mov	r1, r3
 8002bec:	68b8      	ldr	r0, [r7, #8]
 8002bee:	f007 fc0d 	bl	800a40c <memcpy>
 8002bf2:	e015      	b.n	8002c20 <prv_hist_restore_line+0x13e>
    } else {
        size_t part0 = MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf) - idx;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002bfa:	61fb      	str	r3, [r7, #28]
        memcpy(line_str, rbuf_ptr->ring_buf + idx, part0);
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	4413      	add	r3, r2
 8002c02:	69fa      	ldr	r2, [r7, #28]
 8002c04:	4619      	mov	r1, r3
 8002c06:	68b8      	ldr	r0, [r7, #8]
 8002c08:	f007 fc00 	bl	800a40c <memcpy>
        memcpy(line_str + part0, rbuf_ptr->ring_buf, rec_len - part0);
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	18d0      	adds	r0, r2, r3
 8002c12:	68f9      	ldr	r1, [r7, #12]
 8002c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f007 fbf6 	bl	800a40c <memcpy>
    }

    return rec_len;
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3730      	adds	r7, #48	; 0x30
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <prv_hist_search>:
/**
 * \brief           Restore record to command line from history buffer
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \param[in]       dir: Member of \ref microrl_hist_dir_t enumeration
 */
static void prv_hist_search(microrl_t* mrl, microrl_hist_dir_t dir) {
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	460b      	mov	r3, r1
 8002c34:	70fb      	strb	r3, [r7, #3]
#if MICRORL_CFG_USE_ECHO_OFF
    if (mrl->echo != MICRORL_ECHO_ON) {
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d122      	bne.n	8002c86 <prv_hist_search+0x5c>
        return;
    }
#endif /* MICRORL_CFG_USE_ECHO_OFF */

    size_t len = prv_hist_restore_line(&mrl->ring_hist, mrl->cmdline_str, dir);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3314      	adds	r3, #20
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f7ff ff48 	bl	8002ae2 <prv_hist_restore_line>
 8002c52:	60f8      	str	r0, [r7, #12]
    memset(&mrl->cmdline_str[len], 0x00, MICRORL_ARRAYSIZE(mrl->cmdline_str) - 1 - len);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3310      	adds	r3, #16
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	1d18      	adds	r0, r3, #4
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8002c64:	461a      	mov	r2, r3
 8002c66:	2100      	movs	r1, #0
 8002c68:	f007 fbf8 	bl	800a45c <memset>
    mrl->cursor = mrl->cmdlen = len;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	655a      	str	r2, [r3, #84]	; 0x54
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	659a      	str	r2, [r3, #88]	; 0x58
    prv_terminal_print_line(mrl, 0, 1);
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff fe36 	bl	80028f0 <prv_terminal_print_line>
 8002c84:	e000      	b.n	8002c88 <prv_hist_search+0x5e>
        return;
 8002c86:	bf00      	nop
}
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <prv_hist_save_line>:
 * \brief           Put record to ring buffer
 * \param[in,out]   rbuf_ptr: Pointer to \ref microrl_hist_rbuf_t structure
 * \param[in]       line_str: Record to save in history
 * \param[in]       len: Record length
 */
static void prv_hist_save_line(microrl_hist_rbuf_t* rbuf_ptr, char* line_str, size_t len) {
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b096      	sub	sp, #88	; 0x58
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
    if (len > (MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf) - 1)) {
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b3f      	cmp	r3, #63	; 0x3f
 8002c9e:	d869      	bhi.n	8002d74 <prv_hist_save_line+0xe6>
    }

    /* Don't save the same line as the last record */
    char last_record_str[MICRORL_CFG_CMDLINE_LEN + 1];
    prv_hist_restore_line(rbuf_ptr, last_record_str,
                              rbuf_ptr->count == 1 ? MICRORL_HIST_DIR_NONE : MICRORL_HIST_DIR_UP);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    prv_hist_restore_line(rbuf_ptr, last_record_str,
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	bf14      	ite	ne
 8002ca8:	2301      	movne	r3, #1
 8002caa:	2300      	moveq	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7ff ff13 	bl	8002ae2 <prv_hist_restore_line>
    if (strcmp(line_str, last_record_str) == 0) {
 8002cbc:	f107 0314 	add.w	r3, r7, #20
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	68b8      	ldr	r0, [r7, #8]
 8002cc4:	f7fd fa94 	bl	80001f0 <strcmp>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <prv_hist_save_line+0x4e>
        rbuf_ptr->count = 0;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	649a      	str	r2, [r3, #72]	; 0x48
        return;
 8002cd4:	e04f      	b.n	8002d76 <prv_hist_save_line+0xe8>
    }

    /* Freeing up space for saving in the ring buffer */
    while (prv_hist_is_space_for_new(rbuf_ptr, len) == MICRORL_HIST_FULL) {
        prv_hist_erase_older(rbuf_ptr);
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f7ff fec7 	bl	8002a6a <prv_hist_erase_older>
    while (prv_hist_is_space_for_new(rbuf_ptr, len) == MICRORL_HIST_FULL) {
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f7ff fed7 	bl	8002a92 <prv_hist_is_space_for_new>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f5      	beq.n	8002cd6 <prv_hist_save_line+0x48>
    }

    if (len < (MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf) - rbuf_ptr->tail - 1)) {  /* Store record */
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d20a      	bcs.n	8002d0e <prv_hist_save_line+0x80>
        memcpy(rbuf_ptr->ring_buf + rbuf_ptr->tail + 1, line_str, len);
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	3301      	adds	r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f007 fb80 	bl	800a40c <memcpy>
 8002d0c:	e018      	b.n	8002d40 <prv_hist_save_line+0xb2>
    } else {
        size_t part_len = MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf) - rbuf_ptr->tail - 1;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8002d16:	657b      	str	r3, [r7, #84]	; 0x54
        memcpy(rbuf_ptr->ring_buf + rbuf_ptr->tail + 1, line_str, part_len);
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	3301      	adds	r3, #1
 8002d20:	4413      	add	r3, r2
 8002d22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f007 fb70 	bl	800a40c <memcpy>
        memcpy(rbuf_ptr->ring_buf, line_str + part_len, len - part_len);
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d32:	18d1      	adds	r1, r2, r3
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f007 fb66 	bl	800a40c <memcpy>
    }

    rbuf_ptr->tail = rbuf_ptr->tail + len + 1;  /* Update position pointer and navigation counter */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4413      	add	r3, r2
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	645a      	str	r2, [r3, #68]	; 0x44
    if (rbuf_ptr->tail >= MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf)) {
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	2b3f      	cmp	r3, #63	; 0x3f
 8002d54:	d905      	bls.n	8002d62 <prv_hist_save_line+0xd4>
        rbuf_ptr->tail -= MICRORL_ARRAYSIZE(rbuf_ptr->ring_buf);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
    }
    rbuf_ptr->ring_buf[rbuf_ptr->tail] = 0;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	2100      	movs	r1, #0
 8002d6a:	54d1      	strb	r1, [r2, r3]
    rbuf_ptr->count = 0;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	649a      	str	r2, [r3, #72]	; 0x48
 8002d72:	e000      	b.n	8002d76 <prv_hist_save_line+0xe8>
        return;
 8002d74:	bf00      	nop
}
 8002d76:	3758      	adds	r7, #88	; 0x58
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <prv_escape_process>:
 * \brief           Handle ANSI escape code sequences
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \param[in]       ch: Input character
 * \return          '1' if full escape sequence is processed, '0' otherwise
 */
static uint8_t prv_escape_process(microrl_t* mrl, char ch) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	70fb      	strb	r3, [r7, #3]
    if (ch == '[') {
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	2b5b      	cmp	r3, #91	; 0x5b
 8002d8c:	d105      	bne.n	8002d9a <prv_escape_process+0x1e>
        mrl->esc_code = MICRORL_ESC_BRACKET;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        return 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e0a7      	b.n	8002eea <prv_escape_process+0x16e>
    } else if (ch == MICRORL_ESC_ANSI_DEL) {    /* Alt+BACKSPACE */
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d9e:	d10b      	bne.n	8002db8 <prv_escape_process+0x3c>
        prv_cmdline_buf_delete(mrl);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff fc7e 	bl	80026a2 <prv_cmdline_buf_delete>
        prv_terminal_print_line(mrl, mrl->cursor, 0);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	2200      	movs	r2, #0
 8002dac:	4619      	mov	r1, r3
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff fd9e 	bl	80028f0 <prv_terminal_print_line>
        return 1;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e098      	b.n	8002eea <prv_escape_process+0x16e>
    } else if (mrl->esc_code == MICRORL_ESC_BRACKET) {
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d159      	bne.n	8002e76 <prv_escape_process+0xfa>
        if (ch == 'A') {                        /* UP */
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	2b41      	cmp	r3, #65	; 0x41
 8002dc6:	d105      	bne.n	8002dd4 <prv_escape_process+0x58>
#if MICRORL_CFG_USE_HISTORY
            prv_hist_search(mrl, MICRORL_HIST_DIR_UP);
 8002dc8:	2101      	movs	r1, #1
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff ff2d 	bl	8002c2a <prv_hist_search>
#endif /* MICRORL_CFG_USE_HISTORY */
            return 1;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e08a      	b.n	8002eea <prv_escape_process+0x16e>
        } else if (ch == 'B') {                 /* DOWN */
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	2b42      	cmp	r3, #66	; 0x42
 8002dd8:	d105      	bne.n	8002de6 <prv_escape_process+0x6a>
#if MICRORL_CFG_USE_HISTORY
            prv_hist_search(mrl, MICRORL_HIST_DIR_DOWN);
 8002dda:	2102      	movs	r1, #2
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff ff24 	bl	8002c2a <prv_hist_search>
#endif /* MICRORL_CFG_USE_HISTORY */
            return 1;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e081      	b.n	8002eea <prv_escape_process+0x16e>
        } else if (ch == 'C') {                 /* RIGHT */
 8002de6:	78fb      	ldrb	r3, [r7, #3]
 8002de8:	2b43      	cmp	r3, #67	; 0x43
 8002dea:	d110      	bne.n	8002e0e <prv_escape_process+0x92>
            if (mrl->cursor < mrl->cmdlen) {
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d208      	bcs.n	8002e0a <prv_escape_process+0x8e>
                prv_terminal_move_cursor(mrl, 1);
 8002df8:	2101      	movs	r1, #1
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff fd56 	bl	80028ac <prv_terminal_move_cursor>
                ++mrl->cursor;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	659a      	str	r2, [r3, #88]	; 0x58
            }
            return 1;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e06d      	b.n	8002eea <prv_escape_process+0x16e>
        } else if (ch == 'D') {                 /* LEFT */
 8002e0e:	78fb      	ldrb	r3, [r7, #3]
 8002e10:	2b44      	cmp	r3, #68	; 0x44
 8002e12:	d10f      	bne.n	8002e34 <prv_escape_process+0xb8>
            if (mrl->cursor > 0) {
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d009      	beq.n	8002e30 <prv_escape_process+0xb4>
                prv_terminal_move_cursor(mrl, -1);
 8002e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff fd43 	bl	80028ac <prv_terminal_move_cursor>
                --mrl->cursor;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	1e5a      	subs	r2, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	659a      	str	r2, [r3, #88]	; 0x58
            }
            return 1;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e05a      	b.n	8002eea <prv_escape_process+0x16e>
        } else if (ch == '7' || ch == '1') {
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	2b37      	cmp	r3, #55	; 0x37
 8002e38:	d002      	beq.n	8002e40 <prv_escape_process+0xc4>
 8002e3a:	78fb      	ldrb	r3, [r7, #3]
 8002e3c:	2b31      	cmp	r3, #49	; 0x31
 8002e3e:	d105      	bne.n	8002e4c <prv_escape_process+0xd0>
            mrl->esc_code = MICRORL_ESC_HOME;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            return 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	e04e      	b.n	8002eea <prv_escape_process+0x16e>
        } else if (ch == '8' || ch == '4') {
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	2b38      	cmp	r3, #56	; 0x38
 8002e50:	d002      	beq.n	8002e58 <prv_escape_process+0xdc>
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	2b34      	cmp	r3, #52	; 0x34
 8002e56:	d105      	bne.n	8002e64 <prv_escape_process+0xe8>
            mrl->esc_code = MICRORL_ESC_END;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            return 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	e042      	b.n	8002eea <prv_escape_process+0x16e>
        } else if (ch == '3') {
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	2b33      	cmp	r3, #51	; 0x33
 8002e68:	d13e      	bne.n	8002ee8 <prv_escape_process+0x16c>
            mrl->esc_code = MICRORL_ESC_DEL;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            return 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e039      	b.n	8002eea <prv_escape_process+0x16e>
        }
    } else if (ch == '~') {
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	2b7e      	cmp	r3, #126	; 0x7e
 8002e7a:	d135      	bne.n	8002ee8 <prv_escape_process+0x16c>
        if (mrl->esc_code == MICRORL_ESC_HOME) {/* HOME */
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d10b      	bne.n	8002e9e <prv_escape_process+0x122>
            prv_terminal_move_cursor(mrl, -mrl->cursor);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8a:	425b      	negs	r3, r3
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff fd0c 	bl	80028ac <prv_terminal_move_cursor>
            mrl->cursor = 0;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	659a      	str	r2, [r3, #88]	; 0x58
            return 1;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e025      	b.n	8002eea <prv_escape_process+0x16e>
        } else if (mrl->esc_code == MICRORL_ESC_END) {  /* END */
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d10e      	bne.n	8002ec6 <prv_escape_process+0x14a>
            prv_terminal_move_cursor(mrl, mrl->cmdlen - mrl->cursor);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff fcf9 	bl	80028ac <prv_terminal_move_cursor>
            mrl->cursor = mrl->cmdlen;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	659a      	str	r2, [r3, #88]	; 0x58
            return 1;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e011      	b.n	8002eea <prv_escape_process+0x16e>
        } else if (mrl->esc_code == MICRORL_ESC_DEL) {  /* DELETE */
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d10b      	bne.n	8002ee8 <prv_escape_process+0x16c>
            prv_cmdline_buf_delete(mrl);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff fbe6 	bl	80026a2 <prv_cmdline_buf_delete>
            prv_terminal_print_line(mrl, mrl->cursor, 0);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	2200      	movs	r2, #0
 8002edc:	4619      	mov	r1, r3
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff fd06 	bl	80028f0 <prv_terminal_print_line>
            return 1;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <prv_escape_process+0x16e>
        }
    }

    return 1;                                   /* Unknown escape sequence, stop processing */
 8002ee8:	2301      	movs	r3, #1
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <prv_handle_newline>:
/**
 * \brief           Processing input string from command line and calling execute_fn() callback
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
static microrlr_t prv_handle_newline(microrl_t* mrl) {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08c      	sub	sp, #48	; 0x30
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
    const char* tkn_str_arr[MICRORL_CFG_CMD_TOKEN_NMB] = {0};
 8002efc:	f107 030c 	add.w	r3, r7, #12
 8002f00:	2220      	movs	r2, #32
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f007 faa9 	bl	800a45c <memset>
    uint8_t tkn_cnt = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	72fb      	strb	r3, [r7, #11]
    microrlr_t status = microrlOK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    prv_terminal_newline(mrl);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff fc3b 	bl	8002790 <prv_terminal_newline>

    if (mrl->cmdlen == 0) {
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d047      	beq.n	8002fb2 <prv_handle_newline+0xbe>
        goto exit;
    }

#if MICRORL_CFG_USE_HISTORY
#if MICRORL_CFG_USE_ECHO_OFF
    if (mrl->echo == MICRORL_ECHO_ON) {
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d10a      	bne.n	8002f42 <prv_handle_newline+0x4e>
#endif /* MICRORL_CFG_USE_ECHO_OFF */
        prv_hist_save_line(&mrl->ring_hist, mrl->cmdline_str, mrl->cmdlen);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f103 0114 	add.w	r1, r3, #20
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	f7ff fea6 	bl	8002c8e <prv_hist_save_line>
    }
#endif /* MICRORL_CFG_USE_ECHO_OFF */
#endif /* MICRORL_CFG_USE_HISTORY */

#if MICRORL_CFG_USE_ECHO_OFF
    if (mrl->echo == MICRORL_ECHO_ONCE && mrl->cmdline_str[mrl->echo_off_pos] != '\0') {
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d110      	bne.n	8002f6e <prv_handle_newline+0x7a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	7d1b      	ldrb	r3, [r3, #20]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d008      	beq.n	8002f6e <prv_handle_newline+0x7a>
        microrl_set_echo(mrl, MICRORL_ECHO_ON);
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f9f5 	bl	800334e <microrl_set_echo>
        mrl->echo_off_pos = -1;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f04f 32ff 	mov.w	r2, #4294967295
 8002f6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }
#endif /* MICRORL_CFG_USE_ECHO_OFF */

    status = prv_cmdline_buf_split(mrl, tkn_str_arr, &tkn_cnt, mrl->cmdlen);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f72:	f107 020b 	add.w	r2, r7, #11
 8002f76:	f107 010c 	add.w	r1, r7, #12
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff fa94 	bl	80024a8 <prv_cmdline_buf_split>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == microrlOK) {
 8002f86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d108      	bne.n	8002fa0 <prv_handle_newline+0xac>

        exec_status = mrl->exec_fn(mrl, tkn_cnt, tkn_str_arr);

        MICRORL_POST_COMMAND_HOOK(mrl, exec_status, tkn_cnt, tkn_str_arr);
#else
        mrl->exec_fn(mrl, tkn_cnt, tkn_str_arr);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	7afa      	ldrb	r2, [r7, #11]
 8002f94:	4611      	mov	r1, r2
 8002f96:	f107 020c 	add.w	r2, r7, #12
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	4798      	blx	r3
 8002f9e:	e009      	b.n	8002fb4 <prv_handle_newline+0xc0>
#endif /* MICRORL_CFG_USE_COMMAND_HOOKS */
    } else {
        mrl->out_fn(mrl, "ERROR: too many tokens");
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4909      	ldr	r1, [pc, #36]	; (8002fcc <prv_handle_newline+0xd8>)
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	4798      	blx	r3
        prv_terminal_newline(mrl);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff fbf0 	bl	8002790 <prv_terminal_newline>
 8002fb0:	e000      	b.n	8002fb4 <prv_handle_newline+0xc0>
        goto exit;
 8002fb2:	bf00      	nop
    }

exit:
    prv_terminal_print_prompt(mrl);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff fbbd 	bl	8002734 <prv_terminal_print_prompt>
    prv_cmdline_buf_reset(mrl);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff fba5 	bl	800270a <prv_cmdline_buf_reset>

    return status;
 8002fc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3730      	adds	r7, #48	; 0x30
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	0800d394 	.word	0x0800d394

08002fd0 <prv_complite_total_len>:
/**
 * \brief           Calculate total length of all completion tokens
 * \param[in]       arr: Completion tokens array
 * \return          Total length of all completion tokens
 */
static size_t prv_complite_total_len(const char* const * argv) {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
    size_t i;
    const char* short_str = (const char*)argv[0];
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	613b      	str	r3, [r7, #16]
    size_t shortlen = strlen(short_str);
 8002fde:	6938      	ldr	r0, [r7, #16]
 8002fe0:	f7fd f910 	bl	8000204 <strlen>
 8002fe4:	60f8      	str	r0, [r7, #12]

    for (i = 0; argv[i] != NULL; ++i) {
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	e018      	b.n	800301e <prv_complite_total_len+0x4e>
        if (strlen(argv[i]) < shortlen) {
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fd f904 	bl	8000204 <strlen>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4293      	cmp	r3, r2
 8003002:	d909      	bls.n	8003018 <prv_complite_total_len+0x48>
            short_str = argv[i];
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	613b      	str	r3, [r7, #16]
            shortlen = strlen(short_str);
 8003010:	6938      	ldr	r0, [r7, #16]
 8003012:	f7fd f8f7 	bl	8000204 <strlen>
 8003016:	60f8      	str	r0, [r7, #12]
    for (i = 0; argv[i] != NULL; ++i) {
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	3301      	adds	r3, #1
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	4413      	add	r3, r2
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1df      	bne.n	8002fec <prv_complite_total_len+0x1c>
        }
    }

    for (i = 0; i < shortlen; ++i) {
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	e01f      	b.n	8003072 <prv_complite_total_len+0xa2>
        for (size_t j = 0; argv[j] != NULL; ++j) {
 8003032:	2300      	movs	r3, #0
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	e012      	b.n	800305e <prv_complite_total_len+0x8e>
            if (short_str[i] != argv[j][i]) {
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	4413      	add	r3, r2
 800303e:	781a      	ldrb	r2, [r3, #0]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	440b      	add	r3, r1
 8003048:	6819      	ldr	r1, [r3, #0]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	440b      	add	r3, r1
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d001      	beq.n	8003058 <prv_complite_total_len+0x88>
                return i;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	e011      	b.n	800307c <prv_complite_total_len+0xac>
        for (size_t j = 0; argv[j] != NULL; ++j) {
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	3301      	adds	r3, #1
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e5      	bne.n	8003038 <prv_complite_total_len+0x68>
    for (i = 0; i < shortlen; ++i) {
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	3301      	adds	r3, #1
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	429a      	cmp	r2, r3
 8003078:	d3db      	bcc.n	8003032 <prv_complite_total_len+0x62>
            }
        }
    }

    return i;
 800307a:	697b      	ldr	r3, [r7, #20]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <prv_complite_get_input>:
 * \brief           Auto-complete activities to complete input in
 *                      command line
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
static microrlr_t prv_complite_get_input(microrl_t* mrl) {
 8003084:	b590      	push	{r4, r7, lr}
 8003086:	b091      	sub	sp, #68	; 0x44
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
    /* Skip completion when echo is OFF */
    if (mrl->echo != MICRORL_ECHO_ON) {
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8003092:	2b01      	cmp	r3, #1
 8003094:	d001      	beq.n	800309a <prv_complite_get_input+0x16>
        return microrlOK;
 8003096:	2300      	movs	r3, #0
 8003098:	e0da      	b.n	8003250 <prv_complite_get_input+0x1cc>
    }

    uint8_t tkn_cnt = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    const char* tkn_str_arr[MICRORL_CFG_CMD_TOKEN_NMB] = {0};
 80030a0:	f107 0308 	add.w	r3, r7, #8
 80030a4:	2220      	movs	r2, #32
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f007 f9d7 	bl	800a45c <memset>
    char** cmplt_tkn_arr;

    if (prv_cmdline_buf_split(mrl, tkn_str_arr, &tkn_cnt, mrl->cursor) != microrlOK) {
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b2:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 80030b6:	f107 0108 	add.w	r1, r7, #8
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff f9f4 	bl	80024a8 <prv_cmdline_buf_split>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <prv_complite_get_input+0x46>
        return microrlERRCPLT;
 80030c6:	2305      	movs	r3, #5
 80030c8:	e0c2      	b.n	8003250 <prv_complite_get_input+0x1cc>
    }

    if (mrl->cmdline_str[mrl->cursor - 1] == '\0') {
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ce:	3b01      	subs	r3, #1
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	4413      	add	r3, r2
 80030d4:	7d1b      	ldrb	r3, [r3, #20]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d113      	bne.n	8003102 <prv_complite_get_input+0x7e>
        /* Last char is whitespace */
        tkn_str_arr[tkn_cnt++] = "";
 80030da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	f887 202b 	strb.w	r2, [r7, #43]	; 0x2b
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	3340      	adds	r3, #64	; 0x40
 80030ea:	443b      	add	r3, r7
 80030ec:	4a5a      	ldr	r2, [pc, #360]	; (8003258 <prv_complite_get_input+0x1d4>)
 80030ee:	f843 2c38 	str.w	r2, [r3, #-56]
        tkn_str_arr[tkn_cnt] = NULL;
 80030f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	3340      	adds	r3, #64	; 0x40
 80030fa:	443b      	add	r3, r7
 80030fc:	2200      	movs	r2, #0
 80030fe:	f843 2c38 	str.w	r2, [r3, #-56]
    }

    cmplt_tkn_arr = mrl->get_completion_fn(mrl, tkn_cnt, tkn_str_arr);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800310a:	4611      	mov	r1, r2
 800310c:	f107 0208 	add.w	r2, r7, #8
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	4798      	blx	r3
 8003114:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (cmplt_tkn_arr[0] == NULL) {
 8003116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <prv_complite_get_input+0x9e>
        return microrlERRCPLT;
 800311e:	2305      	movs	r3, #5
 8003120:	e096      	b.n	8003250 <prv_complite_get_input+0x1cc>
    }

    size_t i = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t len;
    size_t pos = mrl->cursor;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312a:	637b      	str	r3, [r7, #52]	; 0x34

    if (cmplt_tkn_arr[1] == NULL) {
 800312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312e:	3304      	adds	r3, #4
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <prv_complite_get_input+0xc0>
        len = strlen(cmplt_tkn_arr[0]);
 8003136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd f862 	bl	8000204 <strlen>
 8003140:	63b8      	str	r0, [r7, #56]	; 0x38
 8003142:	e028      	b.n	8003196 <prv_complite_get_input+0x112>
    } else {
        len = prv_complite_total_len((const char* const *)cmplt_tkn_arr);
 8003144:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003146:	f7ff ff43 	bl	8002fd0 <prv_complite_total_len>
 800314a:	63b8      	str	r0, [r7, #56]	; 0x38
        prv_terminal_newline(mrl);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff fb1f 	bl	8002790 <prv_terminal_newline>
        while (cmplt_tkn_arr[i] != NULL) {
 8003152:	e011      	b.n	8003178 <prv_complite_get_input+0xf4>
            mrl->out_fn(mrl, cmplt_tkn_arr[i]);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800315a:	0092      	lsls	r2, r2, #2
 800315c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800315e:	440a      	add	r2, r1
 8003160:	6812      	ldr	r2, [r2, #0]
 8003162:	4611      	mov	r1, r2
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4798      	blx	r3
            mrl->out_fn(mrl, " ");
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	493b      	ldr	r1, [pc, #236]	; (800325c <prv_complite_get_input+0x1d8>)
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4798      	blx	r3
            ++i;
 8003172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003174:	3301      	adds	r3, #1
 8003176:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (cmplt_tkn_arr[i] != NULL) {
 8003178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800317e:	4413      	add	r3, r2
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1e6      	bne.n	8003154 <prv_complite_get_input+0xd0>
        }
        prv_terminal_newline(mrl);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff fb02 	bl	8002790 <prv_terminal_newline>
        prv_terminal_print_prompt(mrl);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff fad1 	bl	8002734 <prv_terminal_print_prompt>
        pos = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if (len != 0) {
 8003196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003198:	2b00      	cmp	r3, #0
 800319a:	d021      	beq.n	80031e0 <prv_complite_get_input+0x15c>
        prv_cmdline_buf_insert_text(mrl, cmplt_tkn_arr[0] + strlen(tkn_str_arr[tkn_cnt - 1]),
 800319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319e:	681c      	ldr	r4, [r3, #0]
 80031a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031a4:	3b01      	subs	r3, #1
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	3340      	adds	r3, #64	; 0x40
 80031aa:	443b      	add	r3, r7
 80031ac:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd f827 	bl	8000204 <strlen>
 80031b6:	4603      	mov	r3, r0
 80031b8:	441c      	add	r4, r3
                                    len - strlen(tkn_str_arr[tkn_cnt - 1]));
 80031ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031be:	3b01      	subs	r3, #1
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	3340      	adds	r3, #64	; 0x40
 80031c4:	443b      	add	r3, r7
 80031c6:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd f81a 	bl	8000204 <strlen>
 80031d0:	4602      	mov	r2, r0
        prv_cmdline_buf_insert_text(mrl, cmplt_tkn_arr[0] + strlen(tkn_str_arr[tkn_cnt - 1]),
 80031d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	461a      	mov	r2, r3
 80031d8:	4621      	mov	r1, r4
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff f9be 	bl	800255c <prv_cmdline_buf_insert_text>
    }

    /* Insert end space if completion is performed */
    if (cmplt_tkn_arr[1] == NULL) {
 80031e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e2:	3304      	adds	r3, #4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d104      	bne.n	80031f4 <prv_complite_get_input+0x170>
        prv_cmdline_buf_insert_text(mrl, " ", 1);
 80031ea:	2201      	movs	r2, #1
 80031ec:	491b      	ldr	r1, [pc, #108]	; (800325c <prv_complite_get_input+0x1d8>)
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff f9b4 	bl	800255c <prv_cmdline_buf_insert_text>
    }

    /* Restore whitespaces replaced with '0' when command line buffer was split */
    if (tkn_cnt != 0) {
 80031f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d022      	beq.n	8003242 <prv_complite_get_input+0x1be>
        for (size_t i = 0; i < (size_t)(tkn_cnt - 1); ++i) {
 80031fc:	2300      	movs	r3, #0
 80031fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003200:	e018      	b.n	8003234 <prv_complite_get_input+0x1b0>
            memset((char*)tkn_str_arr[i] + strlen(tkn_str_arr[i]), ' ', 1);
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	3340      	adds	r3, #64	; 0x40
 8003208:	443b      	add	r3, r7
 800320a:	f853 4c38 	ldr.w	r4, [r3, #-56]
 800320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	3340      	adds	r3, #64	; 0x40
 8003214:	443b      	add	r3, r7
 8003216:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800321a:	4618      	mov	r0, r3
 800321c:	f7fc fff2 	bl	8000204 <strlen>
 8003220:	4603      	mov	r3, r0
 8003222:	4423      	add	r3, r4
 8003224:	2201      	movs	r2, #1
 8003226:	2120      	movs	r1, #32
 8003228:	4618      	mov	r0, r3
 800322a:	f007 f917 	bl	800a45c <memset>
        for (size_t i = 0; i < (size_t)(tkn_cnt - 1); ++i) {
 800322e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003230:	3301      	adds	r3, #1
 8003232:	633b      	str	r3, [r7, #48]	; 0x30
 8003234:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003238:	3b01      	subs	r3, #1
 800323a:	461a      	mov	r2, r3
 800323c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323e:	4293      	cmp	r3, r2
 8003240:	d3df      	bcc.n	8003202 <prv_complite_get_input+0x17e>
        }
    }

    prv_terminal_print_line(mrl, pos, 0);
 8003242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003244:	2200      	movs	r2, #0
 8003246:	4619      	mov	r1, r3
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff fb51 	bl	80028f0 <prv_terminal_print_line>

    return microrlOK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3744      	adds	r7, #68	; 0x44
 8003254:	46bd      	mov	sp, r7
 8003256:	bd90      	pop	{r4, r7, pc}
 8003258:	0800d3ac 	.word	0x0800d3ac
 800325c:	0800d3b0 	.word	0x0800d3b0

08003260 <microrl_init>:
 * \param[in,out]   mrl: microRL working instance
 * \param[in]       out_fn: Output function used for print operation
 * \brief           exec_fn: Command execute callback function
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
microrlr_t microrl_init(microrl_t* mrl, microrl_output_fn out_fn, microrl_exec_fn exec_fn) {
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
    if (mrl == NULL || out_fn == NULL || exec_fn == NULL) {
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <microrl_init+0x1e>
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <microrl_init+0x1e>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <microrl_init+0x22>
        return microrlERRPAR;
 800327e:	2302      	movs	r3, #2
 8003280:	e01a      	b.n	80032b8 <microrl_init+0x58>
    }

    memset(mrl, 0x00, sizeof(microrl_t));
 8003282:	22b8      	movs	r2, #184	; 0xb8
 8003284:	2100      	movs	r1, #0
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f007 f8e8 	bl	800a45c <memset>
    mrl->out_fn = out_fn;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	601a      	str	r2, [r3, #0]
    mrl->exec_fn = exec_fn;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	605a      	str	r2, [r3, #4]
    mrl->prompt_ptr = MICRORL_CFG_PROMPT_STRING;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <microrl_init+0x60>)
 800329c:	611a      	str	r2, [r3, #16]

#if MICRORL_CFG_PROMPT_ON_INIT
    prv_terminal_print_prompt(mrl);
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f7ff fa48 	bl	8002734 <prv_terminal_print_prompt>
#endif /* MICRORL_CFG_PROMPT_ON_INIT */

#if MICRORL_CFG_USE_ECHO_OFF
    mrl->echo = MICRORL_ECHO_ON;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    mrl->echo_off_pos = -1;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f04f 32ff 	mov.w	r2, #4294967295
 80032b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif /* MICRORL_CFG_USE_ECHO_OFF */

    return microrlOK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	0800d3b4 	.word	0x0800d3b4

080032c4 <microrl_set_execute_callback>:
 * \brief           Set pointer to command execute callback, that called when user press 'Enter'
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \param[in]       exec_fn: Command execute callback
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
microrlr_t microrl_set_execute_callback(microrl_t* mrl, microrl_exec_fn exec_fn) {
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
    if (mrl == NULL || exec_fn == NULL) {
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <microrl_set_execute_callback+0x16>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <microrl_set_execute_callback+0x1a>
        return microrlERRPAR;
 80032da:	2302      	movs	r3, #2
 80032dc:	e003      	b.n	80032e6 <microrl_set_execute_callback+0x22>
    }

    mrl->exec_fn = exec_fn;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	605a      	str	r2, [r3, #4]

    return microrlOK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <microrl_set_complete_callback>:
 * \brief           Set pointer to input complition callback, that called when user press 'Tab'
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \param[in]       get_completion_fn: Auto-complete input string callback
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
microrlr_t microrl_set_complete_callback(microrl_t* mrl, microrl_get_compl_fn get_completion_fn) {
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	6039      	str	r1, [r7, #0]
    if (mrl == NULL || get_completion_fn == NULL) {
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <microrl_set_complete_callback+0x16>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <microrl_set_complete_callback+0x1a>
        return microrlERRPAR;
 8003308:	2302      	movs	r3, #2
 800330a:	e003      	b.n	8003314 <microrl_set_complete_callback+0x22>
    }

    mrl->get_completion_fn = get_completion_fn;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	609a      	str	r2, [r3, #8]

    return microrlOK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <microrl_set_sigint_callback>:
 * \brief           Set callback for Ctrl+C terminal signal
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \param[in]       sigint_fn: Ctrl+C terminal signal callback
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
microrlr_t microrl_set_sigint_callback(microrl_t* mrl, microrl_sigint_fn sigint_fn) {
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
    if (mrl == NULL || sigint_fn == NULL) {
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <microrl_set_sigint_callback+0x16>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <microrl_set_sigint_callback+0x1a>
        return microrlERRPAR;
 8003336:	2302      	movs	r3, #2
 8003338:	e003      	b.n	8003342 <microrl_set_sigint_callback+0x22>
    }

    mrl->sigint_fn = sigint_fn;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	60da      	str	r2, [r3, #12]

    return microrlOK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <microrl_set_echo>:
 *
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \param[in]       echo: Member of \ref microrl_echo_t enumeration
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
microrlr_t microrl_set_echo(microrl_t* mrl, microrl_echo_t echo) {
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	460b      	mov	r3, r1
 8003358:	70fb      	strb	r3, [r7, #3]
    if (mrl == NULL) {
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <microrl_set_echo+0x16>
        return microrlERRPAR;
 8003360:	2302      	movs	r3, #2
 8003362:	e004      	b.n	800336e <microrl_set_echo+0x20>
    }

    mrl->echo = echo;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

    return microrlOK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <prv_control_char_process>:
 * \brief           Process ANSI control key
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \param[in]       ch: Input char to process
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
static microrlr_t prv_control_char_process(microrl_t* mrl, char ch) {
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	70fb      	strb	r3, [r7, #3]
    switch (ch) {
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	2b1b      	cmp	r3, #27
 800338c:	dc40      	bgt.n	8003410 <prv_control_char_process+0x94>
 800338e:	2b00      	cmp	r3, #0
 8003390:	f340 80ed 	ble.w	800356e <prv_control_char_process+0x1f2>
 8003394:	3b01      	subs	r3, #1
 8003396:	2b1a      	cmp	r3, #26
 8003398:	f200 80e9 	bhi.w	800356e <prv_control_char_process+0x1f2>
 800339c:	a201      	add	r2, pc, #4	; (adr r2, 80033a4 <prv_control_char_process+0x28>)
 800339e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a2:	bf00      	nop
 80033a4:	0800348f 	.word	0x0800348f
 80033a8:	080034c5 	.word	0x080034c5
 80033ac:	08003559 	.word	0x08003559
 80033b0:	0800352b 	.word	0x0800352b
 80033b4:	08003473 	.word	0x08003473
 80033b8:	080034a5 	.word	0x080034a5
 80033bc:	0800356f 	.word	0x0800356f
 80033c0:	080034f7 	.word	0x080034f7
 80033c4:	08003417 	.word	0x08003417
 80033c8:	0800356f 	.word	0x0800356f
 80033cc:	0800345f 	.word	0x0800345f
 80033d0:	0800356f 	.word	0x0800356f
 80033d4:	0800356f 	.word	0x0800356f
 80033d8:	080034ed 	.word	0x080034ed
 80033dc:	0800356f 	.word	0x0800356f
 80033e0:	080034e3 	.word	0x080034e3
 80033e4:	0800356f 	.word	0x0800356f
 80033e8:	08003541 	.word	0x08003541
 80033ec:	0800356f 	.word	0x0800356f
 80033f0:	0800356f 	.word	0x0800356f
 80033f4:	0800343f 	.word	0x0800343f
 80033f8:	0800356f 	.word	0x0800356f
 80033fc:	0800356f 	.word	0x0800356f
 8003400:	0800356f 	.word	0x0800356f
 8003404:	0800356f 	.word	0x0800356f
 8003408:	0800356f 	.word	0x0800356f
 800340c:	08003435 	.word	0x08003435
 8003410:	2b7f      	cmp	r3, #127	; 0x7f
 8003412:	d070      	beq.n	80034f6 <prv_control_char_process+0x17a>
            mrl->sigint_fn(mrl);
#endif /* MICRORL_CFG_USE_CTRL_C */
            break;
        }
        default:
            break;
 8003414:	e0ab      	b.n	800356e <prv_control_char_process+0x1f2>
            if (mrl->get_completion_fn == NULL) {
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <prv_control_char_process+0xa6>
                return microrlERRPAR;
 800341e:	2302      	movs	r3, #2
 8003420:	e0af      	b.n	8003582 <prv_control_char_process+0x206>
            if (prv_complite_get_input(mrl) != microrlOK) {
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff fe2e 	bl	8003084 <prv_complite_get_input>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 80a1 	beq.w	8003572 <prv_control_char_process+0x1f6>
                return microrlERRCPLT;
 8003430:	2305      	movs	r3, #5
 8003432:	e0a6      	b.n	8003582 <prv_control_char_process+0x206>
            mrl->escape = 1;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
            break;
 800343c:	e0a0      	b.n	8003580 <prv_control_char_process+0x204>
            if (mrl->cursor > 0) {
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <prv_control_char_process+0xd6>
                prv_cmdline_buf_backspace(mrl, mrl->cursor);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344a:	4619      	mov	r1, r3
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff f8ef 	bl	8002630 <prv_cmdline_buf_backspace>
            prv_terminal_print_line(mrl, 0, 1);
 8003452:	2201      	movs	r2, #1
 8003454:	2100      	movs	r1, #0
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff fa4a 	bl	80028f0 <prv_terminal_print_line>
            break;
 800345c:	e090      	b.n	8003580 <prv_control_char_process+0x204>
            mrl->out_fn(mrl, "\033[K");
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	494a      	ldr	r1, [pc, #296]	; (800358c <prv_control_char_process+0x210>)
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4798      	blx	r3
            mrl->cmdlen = mrl->cursor;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	655a      	str	r2, [r3, #84]	; 0x54
            break;
 8003470:	e086      	b.n	8003580 <prv_control_char_process+0x204>
            prv_terminal_move_cursor(mrl, mrl->cmdlen - mrl->cursor);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	4619      	mov	r1, r3
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7ff fa14 	bl	80028ac <prv_terminal_move_cursor>
            mrl->cursor = mrl->cmdlen;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	659a      	str	r2, [r3, #88]	; 0x58
            break;
 800348c:	e078      	b.n	8003580 <prv_control_char_process+0x204>
            prv_terminal_move_cursor(mrl, -mrl->cursor);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003492:	425b      	negs	r3, r3
 8003494:	4619      	mov	r1, r3
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff fa08 	bl	80028ac <prv_terminal_move_cursor>
            mrl->cursor = 0;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	659a      	str	r2, [r3, #88]	; 0x58
            break;
 80034a2:	e06d      	b.n	8003580 <prv_control_char_process+0x204>
            if (mrl->cursor < mrl->cmdlen) {
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d262      	bcs.n	8003576 <prv_control_char_process+0x1fa>
                prv_terminal_move_cursor(mrl, 1);
 80034b0:	2101      	movs	r1, #1
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff f9fa 	bl	80028ac <prv_terminal_move_cursor>
                ++mrl->cursor;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	659a      	str	r2, [r3, #88]	; 0x58
            break;
 80034c2:	e058      	b.n	8003576 <prv_control_char_process+0x1fa>
            if (mrl->cursor != 0) {
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d056      	beq.n	800357a <prv_control_char_process+0x1fe>
                prv_terminal_move_cursor(mrl, -1);
 80034cc:	f04f 31ff 	mov.w	r1, #4294967295
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff f9eb 	bl	80028ac <prv_terminal_move_cursor>
                --mrl->cursor;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034da:	1e5a      	subs	r2, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	659a      	str	r2, [r3, #88]	; 0x58
            break;
 80034e0:	e04b      	b.n	800357a <prv_control_char_process+0x1fe>
            prv_hist_search(mrl, MICRORL_HIST_DIR_UP);
 80034e2:	2101      	movs	r1, #1
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff fba0 	bl	8002c2a <prv_hist_search>
            break;
 80034ea:	e049      	b.n	8003580 <prv_control_char_process+0x204>
            prv_hist_search(mrl, MICRORL_HIST_DIR_DOWN);
 80034ec:	2102      	movs	r1, #2
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff fb9b 	bl	8002c2a <prv_hist_search>
            break;
 80034f4:	e044      	b.n	8003580 <prv_control_char_process+0x204>
            if (mrl->cursor > 0) {
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d03f      	beq.n	800357e <prv_control_char_process+0x202>
                prv_cmdline_buf_backspace(mrl, 1);
 80034fe:	2101      	movs	r1, #1
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff f895 	bl	8002630 <prv_cmdline_buf_backspace>
                if (mrl->cursor == mrl->cmdlen) {
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	429a      	cmp	r2, r3
 8003510:	d103      	bne.n	800351a <prv_control_char_process+0x19e>
                    prv_terminal_backspace(mrl);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff f92c 	bl	8002770 <prv_terminal_backspace>
            break;
 8003518:	e031      	b.n	800357e <prv_control_char_process+0x202>
                    prv_terminal_print_line(mrl, mrl->cursor, 1);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351e:	2201      	movs	r2, #1
 8003520:	4619      	mov	r1, r3
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff f9e4 	bl	80028f0 <prv_terminal_print_line>
            break;
 8003528:	e029      	b.n	800357e <prv_control_char_process+0x202>
            prv_cmdline_buf_delete(mrl);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff f8b9 	bl	80026a2 <prv_cmdline_buf_delete>
            prv_terminal_print_line(mrl, mrl->cursor, 0);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003534:	2200      	movs	r2, #0
 8003536:	4619      	mov	r1, r3
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff f9d9 	bl	80028f0 <prv_terminal_print_line>
            break;
 800353e:	e01f      	b.n	8003580 <prv_control_char_process+0x204>
            prv_terminal_newline(mrl);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff f925 	bl	8002790 <prv_terminal_newline>
            prv_terminal_print_prompt(mrl);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff f8f4 	bl	8002734 <prv_terminal_print_prompt>
            prv_terminal_print_line(mrl, 0, 0);
 800354c:	2200      	movs	r2, #0
 800354e:	2100      	movs	r1, #0
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff f9cd 	bl	80028f0 <prv_terminal_print_line>
            break;
 8003556:	e013      	b.n	8003580 <prv_control_char_process+0x204>
            if (mrl->sigint_fn == NULL) {
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <prv_control_char_process+0x1e8>
                return microrlERRPAR;
 8003560:	2302      	movs	r3, #2
 8003562:	e00e      	b.n	8003582 <prv_control_char_process+0x206>
            mrl->sigint_fn(mrl);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
            break;
 800356c:	e008      	b.n	8003580 <prv_control_char_process+0x204>
            break;
 800356e:	bf00      	nop
 8003570:	e006      	b.n	8003580 <prv_control_char_process+0x204>
            break;
 8003572:	bf00      	nop
 8003574:	e004      	b.n	8003580 <prv_control_char_process+0x204>
            break;
 8003576:	bf00      	nop
 8003578:	e002      	b.n	8003580 <prv_control_char_process+0x204>
            break;
 800357a:	bf00      	nop
 800357c:	e000      	b.n	8003580 <prv_control_char_process+0x204>
            break;
 800357e:	bf00      	nop
    }

    return microrlOK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	0800d3b8 	.word	0x0800d3b8

08003590 <prv_insert_char>:
 * \brief           Print character in terminal
 * \param[in,out]   mrl: \ref microrl_t working instance
 * \param[in]       ch: Character to print
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
static microrlr_t prv_insert_char(microrl_t* mrl, char ch) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	70fb      	strb	r3, [r7, #3]
    if (prv_cmdline_buf_insert_text(mrl, &ch, 1) != microrlOK) {
 800359c:	1cfb      	adds	r3, r7, #3
 800359e:	2201      	movs	r2, #1
 80035a0:	4619      	mov	r1, r3
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fe ffda 	bl	800255c <prv_cmdline_buf_insert_text>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <prv_insert_char+0x22>
        return microrlERRCLFULL;
 80035ae:	2304      	movs	r3, #4
 80035b0:	e029      	b.n	8003606 <prv_insert_char+0x76>
    }
    if (mrl->cursor == mrl->cmdlen) {
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d11a      	bne.n	80035f4 <prv_insert_char+0x64>
        char nch[] = {0, 0};
 80035be:	2300      	movs	r3, #0
 80035c0:	81bb      	strh	r3, [r7, #12]
        nch[0] = ch;
 80035c2:	78fb      	ldrb	r3, [r7, #3]
 80035c4:	733b      	strb	r3, [r7, #12]
#if MICRORL_CFG_USE_ECHO_OFF
        if (((int32_t)mrl->cursor >= mrl->echo_off_pos) && (mrl->echo != MICRORL_ECHO_ON)) {
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ca:	461a      	mov	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035d2:	429a      	cmp	r2, r3
 80035d4:	db06      	blt.n	80035e4 <prv_insert_char+0x54>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d001      	beq.n	80035e4 <prv_insert_char+0x54>
            nch[0] = MICRORL_CFG_ECHO_OFF_MASK;
 80035e0:	232a      	movs	r3, #42	; 0x2a
 80035e2:	733b      	strb	r3, [r7, #12]
        }
#endif /* MICRORL_CFG_USE_ECHO_OFF */
        mrl->out_fn(mrl, nch);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f107 020c 	add.w	r2, r7, #12
 80035ec:	4611      	mov	r1, r2
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	4798      	blx	r3
 80035f2:	e007      	b.n	8003604 <prv_insert_char+0x74>
    } else {
        prv_terminal_print_line(mrl, mrl->cursor - 1, 0);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f8:	3b01      	subs	r3, #1
 80035fa:	2200      	movs	r2, #0
 80035fc:	4619      	mov	r1, r3
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff f976 	bl	80028f0 <prv_terminal_print_line>
    }

    return microrlOK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <microrl_processing_input>:
 * \param[in]       mrl: \ref microrl_t working instance
 * \param[in]       data_ptr: Input data to process
 * \param[in]       len: Length of data for input
 * \return          \ref microrlOK on success, member of \ref microrlr_t enumeration otherwise
 */
microrlr_t microrl_processing_input(microrl_t* mrl, const void* data_ptr, size_t len) {
 800360e:	b580      	push	{r7, lr}
 8003610:	b086      	sub	sp, #24
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
    if (mrl == NULL || data_ptr == NULL || len == 0) {
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <microrl_processing_input+0x1e>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <microrl_processing_input+0x1e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <microrl_processing_input+0x22>
        return microrlERRPAR;
 800362c:	2302      	movs	r3, #2
 800362e:	e06b      	b.n	8003708 <microrl_processing_input+0xfa>
    }

    char* buf_ptr = (char*)data_ptr;
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	617b      	str	r3, [r7, #20]

    while (len-- != 0) {
 8003634:	e060      	b.n	80036f8 <microrl_processing_input+0xea>
        char ch = *buf_ptr++;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	617a      	str	r2, [r7, #20]
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	74bb      	strb	r3, [r7, #18]

#if MICRORL_CFG_USE_ESC_SEQ
        if (mrl->escape) {
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00c      	beq.n	8003664 <microrl_processing_input+0x56>
            if (prv_escape_process(mrl, ch)) {
 800364a:	7cbb      	ldrb	r3, [r7, #18]
 800364c:	4619      	mov	r1, r3
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f7ff fb94 	bl	8002d7c <prv_escape_process>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d04e      	beq.n	80036f8 <microrl_processing_input+0xea>
                mrl->escape = 0;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
            }
            continue;
 8003662:	e049      	b.n	80036f8 <microrl_processing_input+0xea>
        }
#endif /* MICRORL_CFG_USE_ESC_SEQ */

        if ((ch == MICRORL_ESC_ANSI_CR) || (ch == MICRORL_ESC_ANSI_LF)) {
 8003664:	7cbb      	ldrb	r3, [r7, #18]
 8003666:	2b0d      	cmp	r3, #13
 8003668:	d002      	beq.n	8003670 <microrl_processing_input+0x62>
 800366a:	7cbb      	ldrb	r3, [r7, #18]
 800366c:	2b0a      	cmp	r3, #10
 800366e:	d11c      	bne.n	80036aa <microrl_processing_input+0x9c>
            /*
             * Only trigger a newline if `ch` doen't follow its companion's
             * triggering a newline.
             */
            if (mrl->last_endl == (ch == MICRORL_ESC_ANSI_CR ? MICRORL_ESC_ANSI_LF : MICRORL_ESC_ANSI_CR)) {
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003676:	461a      	mov	r2, r3
 8003678:	7cbb      	ldrb	r3, [r7, #18]
 800367a:	2b0d      	cmp	r3, #13
 800367c:	d101      	bne.n	8003682 <microrl_processing_input+0x74>
 800367e:	230a      	movs	r3, #10
 8003680:	e000      	b.n	8003684 <microrl_processing_input+0x76>
 8003682:	230d      	movs	r3, #13
 8003684:	4293      	cmp	r3, r2
 8003686:	d104      	bne.n	8003692 <microrl_processing_input+0x84>
                mrl->last_endl = 0;             /* Ignore char, but clear newline state */
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8003690:	e032      	b.n	80036f8 <microrl_processing_input+0xea>
            } else {
                mrl->last_endl = ch;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	7cba      	ldrb	r2, [r7, #18]
 8003696:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
                if (prv_handle_newline(mrl) != microrlOK) {
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f7ff fc2a 	bl	8002ef4 <prv_handle_newline>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d028      	beq.n	80036f8 <microrl_processing_input+0xea>
                    return microrlERRTKNNUM;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e02e      	b.n	8003708 <microrl_processing_input+0xfa>
                }
            }
            continue;
        }
        mrl->last_endl = 0;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        microrlr_t res = microrlOK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	74fb      	strb	r3, [r7, #19]
        if (IS_CONTROL_CHAR(ch)) {
 80036b6:	7cbb      	ldrb	r3, [r7, #18]
 80036b8:	2b1f      	cmp	r3, #31
 80036ba:	d902      	bls.n	80036c2 <microrl_processing_input+0xb4>
 80036bc:	7cbb      	ldrb	r3, [r7, #18]
 80036be:	2b7f      	cmp	r3, #127	; 0x7f
 80036c0:	d107      	bne.n	80036d2 <microrl_processing_input+0xc4>
            res = prv_control_char_process(mrl, ch);
 80036c2:	7cbb      	ldrb	r3, [r7, #18]
 80036c4:	4619      	mov	r1, r3
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f7ff fe58 	bl	800337c <prv_control_char_process>
 80036cc:	4603      	mov	r3, r0
 80036ce:	74fb      	strb	r3, [r7, #19]
 80036d0:	e00d      	b.n	80036ee <microrl_processing_input+0xe0>
        } else {
            if ((ch == ' ') && (mrl->cmdlen == 0)) {    /* Skip spaces before first command line symbol */
 80036d2:	7cbb      	ldrb	r3, [r7, #18]
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d103      	bne.n	80036e0 <microrl_processing_input+0xd2>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d011      	beq.n	8003704 <microrl_processing_input+0xf6>
                break;
            }
            res = prv_insert_char(mrl, ch);
 80036e0:	7cbb      	ldrb	r3, [r7, #18]
 80036e2:	4619      	mov	r1, r3
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f7ff ff53 	bl	8003590 <prv_insert_char>
 80036ea:	4603      	mov	r3, r0
 80036ec:	74fb      	strb	r3, [r7, #19]
        }
        if (res != microrlOK) {
 80036ee:	7cfb      	ldrb	r3, [r7, #19]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <microrl_processing_input+0xea>
            return res;
 80036f4:	7cfb      	ldrb	r3, [r7, #19]
 80036f6:	e007      	b.n	8003708 <microrl_processing_input+0xfa>
    while (len-- != 0) {
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	1e5a      	subs	r2, r3, #1
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d199      	bne.n	8003636 <microrl_processing_input+0x28>
 8003702:	e000      	b.n	8003706 <microrl_processing_input+0xf8>
                break;
 8003704:	bf00      	nop
        }
    }

    return microrlOK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <microrl_get_version>:
 * \return          MicroRL library version number combined into an uint32_t:
 *                      - [23:16] Major version
 *                      - [15:8]  Minor version
 *                      - [7:0]   Patch version
 */
uint32_t microrl_get_version(void) {
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
    return ((MICRORL_VERSION_MAJOR << 16) | (MICRORL_VERSION_MINOR << 8) | (MICRORL_VERSION_PATCH));
 8003714:	4b02      	ldr	r3, [pc, #8]	; (8003720 <microrl_get_version+0x10>)
}
 8003716:	4618      	mov	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	00020500 	.word	0x00020500

08003724 <data_uart_init>:

/**
 * @brief          Data uart init function
 */
void data_uart_init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800372a:	f107 030c 	add.w	r3, r7, #12
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	605a      	str	r2, [r3, #4]
 8003734:	609a      	str	r2, [r3, #8]
 8003736:	60da      	str	r2, [r3, #12]
 8003738:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800373a:	2300      	movs	r3, #0
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <data_uart_init+0xd0>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	4a2c      	ldr	r2, [pc, #176]	; (80037f4 <data_uart_init+0xd0>)
 8003744:	f043 0302 	orr.w	r3, r3, #2
 8003748:	6313      	str	r3, [r2, #48]	; 0x30
 800374a:	4b2a      	ldr	r3, [pc, #168]	; (80037f4 <data_uart_init+0xd0>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	68bb      	ldr	r3, [r7, #8]

    GPIO_InitStruct.Pin          = DATA_TX_Pin|DATA_RX_Pin;
 8003756:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800375a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode         = GPIO_MODE_AF_PP;
 800375c:	2302      	movs	r3, #2
 800375e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull         = GPIO_NOPULL;
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed        = GPIO_SPEED_FREQ_VERY_HIGH;
 8003764:	2303      	movs	r3, #3
 8003766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate    = GPIO_AF7_USART3;
 8003768:	2307      	movs	r3, #7
 800376a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800376c:	f107 030c 	add.w	r3, r7, #12
 8003770:	4619      	mov	r1, r3
 8003772:	4821      	ldr	r0, [pc, #132]	; (80037f8 <data_uart_init+0xd4>)
 8003774:	f003 f85c 	bl	8006830 <HAL_GPIO_Init>

    __HAL_RCC_USART3_CLK_ENABLE();
 8003778:	2300      	movs	r3, #0
 800377a:	607b      	str	r3, [r7, #4]
 800377c:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <data_uart_init+0xd0>)
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	4a1c      	ldr	r2, [pc, #112]	; (80037f4 <data_uart_init+0xd0>)
 8003782:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003786:	6413      	str	r3, [r2, #64]	; 0x40
 8003788:	4b1a      	ldr	r3, [pc, #104]	; (80037f4 <data_uart_init+0xd0>)
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	687b      	ldr	r3, [r7, #4]

    HAL_NVIC_SetPriority(USART3_IRQn, 0x01, 0x00);
 8003794:	2200      	movs	r2, #0
 8003796:	2101      	movs	r1, #1
 8003798:	2027      	movs	r0, #39	; 0x27
 800379a:	f002 ff80 	bl	800669e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800379e:	2027      	movs	r0, #39	; 0x27
 80037a0:	f002 ff99 	bl	80066d6 <HAL_NVIC_EnableIRQ>

    huart3.Instance          = USART3;
 80037a4:	4b15      	ldr	r3, [pc, #84]	; (80037fc <data_uart_init+0xd8>)
 80037a6:	4a16      	ldr	r2, [pc, #88]	; (8003800 <data_uart_init+0xdc>)
 80037a8:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate     = 115200;
 80037aa:	4b14      	ldr	r3, [pc, #80]	; (80037fc <data_uart_init+0xd8>)
 80037ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037b0:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength   = UART_WORDLENGTH_8B;
 80037b2:	4b12      	ldr	r3, [pc, #72]	; (80037fc <data_uart_init+0xd8>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits     = UART_STOPBITS_1;
 80037b8:	4b10      	ldr	r3, [pc, #64]	; (80037fc <data_uart_init+0xd8>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity       = UART_PARITY_NONE;
 80037be:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <data_uart_init+0xd8>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode         = UART_MODE_TX_RX;
 80037c4:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <data_uart_init+0xd8>)
 80037c6:	220c      	movs	r2, #12
 80037c8:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80037ca:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <data_uart_init+0xd8>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80037d0:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <data_uart_init+0xd8>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart3) != HAL_OK)
 80037d6:	4809      	ldr	r0, [pc, #36]	; (80037fc <data_uart_init+0xd8>)
 80037d8:	f004 f9b6 	bl	8007b48 <HAL_UART_Init>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <data_uart_init+0xc6>
    {
      indication_led_error();
 80037e2:	f7fd fe93 	bl	800150c <indication_led_error>
      Error_Handler();
 80037e6:	f000 f919 	bl	8003a1c <Error_Handler>
    }
}
 80037ea:	bf00      	nop
 80037ec:	3720      	adds	r7, #32
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40020400 	.word	0x40020400
 80037fc:	20000410 	.word	0x20000410
 8003800:	40004800 	.word	0x40004800

08003804 <uart_all_init>:

/**
 * @brief          Initialization of all uarts
 */
void uart_all_init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
    //debug_uart_init();
    data_uart_init();
 8003808:	f7ff ff8c 	bl	8003724 <data_uart_init>
}
 800380c:	bf00      	nop
 800380e:	bd80      	pop	{r7, pc}

08003810 <uart_setup_receive_char>:
{
    return HAL_UART_Receive_IT(huart, (uint8_t*)byte, sizeof(byte)) == HAL_OK;
}

bool uart_setup_receive_char(UART_HandleTypeDef *huart, uint8_t *byte)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
    return HAL_UART_Receive_IT(huart, (uint8_t*)byte, sizeof(char)) == HAL_OK;
 800381a:	2201      	movs	r2, #1
 800381c:	6839      	ldr	r1, [r7, #0]
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f004 fa7b 	bl	8007d1a <HAL_UART_Receive_IT>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	bf0c      	ite	eq
 800382a:	2301      	moveq	r3, #1
 800382c:	2300      	movne	r3, #0
 800382e:	b2db      	uxtb	r3, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <uart_send_byte>:
{
    return HAL_UART_Transmit(huart, (uint8_t*)msg_ptr, sizeof(msg_ptr), HAL_MAX_DELAY) == HAL_OK;
}

bool uart_send_byte(UART_HandleTypeDef *huart, uint8_t byte)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	70fb      	strb	r3, [r7, #3]
    return HAL_UART_Transmit(huart, &byte, sizeof(byte), HAL_MAX_DELAY) == HAL_OK;
 8003844:	1cf9      	adds	r1, r7, #3
 8003846:	f04f 33ff 	mov.w	r3, #4294967295
 800384a:	2201      	movs	r2, #1
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f004 f9d2 	bl	8007bf6 <HAL_UART_Transmit>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	bf0c      	ite	eq
 8003858:	2301      	moveq	r3, #1
 800385a:	2300      	movne	r3, #0
 800385c:	b2db      	uxtb	r3, r3
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_UART_TxCpltCallback>:
/**
 * @brief          Interrupt callbacks
 *
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]

}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a08      	ldr	r2, [pc, #32]	; (80038ac <HAL_UART_RxCpltCallback+0x30>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d10a      	bne.n	80038a4 <HAL_UART_RxCpltCallback+0x28>
        indication_led();
 800388e:	f7fd fd9d 	bl	80013cc <indication_led>
        lwrb_write(&data_uart.lwrb, &data_uart.keyboard, sizeof(char));
 8003892:	2201      	movs	r2, #1
 8003894:	4906      	ldr	r1, [pc, #24]	; (80038b0 <HAL_UART_RxCpltCallback+0x34>)
 8003896:	4807      	ldr	r0, [pc, #28]	; (80038b4 <HAL_UART_RxCpltCallback+0x38>)
 8003898:	f006 fbdd 	bl	800a056 <lwrb_write>
        uart_setup_receive_char(&huart3, &data_uart.keyboard);
 800389c:	4904      	ldr	r1, [pc, #16]	; (80038b0 <HAL_UART_RxCpltCallback+0x34>)
 800389e:	4806      	ldr	r0, [pc, #24]	; (80038b8 <HAL_UART_RxCpltCallback+0x3c>)
 80038a0:	f7ff ffb6 	bl	8003810 <uart_setup_receive_char>
    }
}
 80038a4:	bf00      	nop
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40004800 	.word	0x40004800
 80038b0:	200004d8 	.word	0x200004d8
 80038b4:	200004bc 	.word	0x200004bc
 80038b8:	20000410 	.word	0x20000410

080038bc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]

}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <main>:

/**
 * @brief          Main endless cycle
 */
int main(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
    initialize_mcu();
 80038d4:	f000 f807 	bl	80038e6 <initialize_mcu>
    initialize_drivers();
 80038d8:	f000 f81a 	bl	8003910 <initialize_drivers>

    log_print_welcome_msg();
 80038dc:	f7fe fdd6 	bl	800248c <log_print_welcome_msg>

    initialize_rtos();
 80038e0:	f000 f80b 	bl	80038fa <initialize_rtos>

    for(;;);
 80038e4:	e7fe      	b.n	80038e4 <main+0x14>

080038e6 <initialize_mcu>:

/**
 * @brief          MCU initialization fns
 */
void initialize_mcu(void)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	af00      	add	r7, sp, #0
    HAL_Init();
 80038ea:	f002 fd8b 	bl	8006404 <HAL_Init>
    system_clock_config();
 80038ee:	f000 f829 	bl	8003944 <system_clock_config>
    MX_TIM1_Init();
 80038f2:	f7fe f981 	bl	8001bf8 <MX_TIM1_Init>
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}

080038fa <initialize_rtos>:

/**
 * @brief          FreeRTOS init fns
 */
void initialize_rtos(void)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	af00      	add	r7, sp, #0
    osKernelInitialize();
 80038fe:	f000 f9ff 	bl	8003d00 <osKernelInitialize>
    MX_FREERTOS_Init();
 8003902:	f7fd fc21 	bl	8001148 <MX_FREERTOS_Init>
    osKernelStart();
 8003906:	f000 fa1f 	bl	8003d48 <osKernelStart>
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <initialize_drivers>:

/**
 * @brief          Drivers init fns
 */
void initialize_drivers(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
    initialize_led_indication();
 8003914:	f7fd fc46 	bl	80011a4 <initialize_led_indication>
    indication_led_loading();
 8003918:	f7fd fd30 	bl	800137c <indication_led_loading>
    initialize_button();
 800391c:	f7fd fae6 	bl	8000eec <initialize_button>

    uart_all_init();
 8003920:	f7ff ff70 	bl	8003804 <uart_all_init>
    ring_buf_init();
 8003924:	f7fe f8d6 	bl	8001ad4 <ring_buf_init>
    uart_setup_receive_char(&huart3, &data_uart.keyboard);
 8003928:	4904      	ldr	r1, [pc, #16]	; (800393c <initialize_drivers+0x2c>)
 800392a:	4805      	ldr	r0, [pc, #20]	; (8003940 <initialize_drivers+0x30>)
 800392c:	f7ff ff70 	bl	8003810 <uart_setup_receive_char>

    log_init();
 8003930:	f7fe fd72 	bl	8002418 <log_init>
    console_init();
 8003934:	f7fe f9f0 	bl	8001d18 <console_init>
}
 8003938:	bf00      	nop
 800393a:	bd80      	pop	{r7, pc}
 800393c:	200004d8 	.word	0x200004d8
 8003940:	20000410 	.word	0x20000410

08003944 <system_clock_config>:

/**
 * @brief          System clock configuration
 */
void system_clock_config(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b094      	sub	sp, #80	; 0x50
 8003948:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800394a:	f107 0320 	add.w	r3, r7, #32
 800394e:	2230      	movs	r2, #48	; 0x30
 8003950:	2100      	movs	r1, #0
 8003952:	4618      	mov	r0, r3
 8003954:	f006 fd82 	bl	800a45c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003958:	f107 030c 	add.w	r3, r7, #12
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8003968:	2300      	movs	r3, #0
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	4b29      	ldr	r3, [pc, #164]	; (8003a14 <system_clock_config+0xd0>)
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	4a28      	ldr	r2, [pc, #160]	; (8003a14 <system_clock_config+0xd0>)
 8003972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003976:	6413      	str	r3, [r2, #64]	; 0x40
 8003978:	4b26      	ldr	r3, [pc, #152]	; (8003a14 <system_clock_config+0xd0>)
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003984:	2300      	movs	r3, #0
 8003986:	607b      	str	r3, [r7, #4]
 8003988:	4b23      	ldr	r3, [pc, #140]	; (8003a18 <system_clock_config+0xd4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a22      	ldr	r2, [pc, #136]	; (8003a18 <system_clock_config+0xd4>)
 800398e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	4b20      	ldr	r3, [pc, #128]	; (8003a18 <system_clock_config+0xd4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800399c:	607b      	str	r3, [r7, #4]
 800399e:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039a0:	2301      	movs	r3, #1
 80039a2:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039aa:	2302      	movs	r3, #2
 80039ac:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 80039b4:	2304      	movs	r3, #4
 80039b6:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 84;
 80039b8:	2354      	movs	r3, #84	; 0x54
 80039ba:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039bc:	2302      	movs	r3, #2
 80039be:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80039c0:	2304      	movs	r3, #4
 80039c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039c4:	f107 0320 	add.w	r3, r7, #32
 80039c8:	4618      	mov	r0, r3
 80039ca:	f003 f931 	bl	8006c30 <HAL_RCC_OscConfig>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <system_clock_config+0x94>
    {
      Error_Handler();
 80039d4:	f000 f822 	bl	8003a1c <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039d8:	230f      	movs	r3, #15
 80039da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039dc:	2302      	movs	r3, #2
 80039de:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80039e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80039e8:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80039ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039ee:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80039f0:	f107 030c 	add.w	r3, r7, #12
 80039f4:	2102      	movs	r1, #2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f003 fb92 	bl	8007120 <HAL_RCC_ClockConfig>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <system_clock_config+0xc2>
    {
      Error_Handler();
 8003a02:	f000 f80b 	bl	8003a1c <Error_Handler>
    }

    HAL_RCC_EnableCSS();
 8003a06:	f003 fc71 	bl	80072ec <HAL_RCC_EnableCSS>
}
 8003a0a:	bf00      	nop
 8003a0c:	3750      	adds	r7, #80	; 0x50
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40023800 	.word	0x40023800
 8003a18:	40007000 	.word	0x40007000

08003a1c <Error_Handler>:

/**
 * @brief          Error handler
 */
void Error_Handler(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a20:	b672      	cpsid	i
}
 8003a22:	bf00      	nop
  __disable_irq();
  while (1)
 8003a24:	e7fe      	b.n	8003a24 <Error_Handler+0x8>
	...

08003a28 <HAL_MspInit>:


#include "main.h"

void HAL_MspInit(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <HAL_MspInit+0x4c>)
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	4a0f      	ldr	r2, [pc, #60]	; (8003a74 <HAL_MspInit+0x4c>)
 8003a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a3e:	4b0d      	ldr	r3, [pc, #52]	; (8003a74 <HAL_MspInit+0x4c>)
 8003a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a46:	607b      	str	r3, [r7, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	603b      	str	r3, [r7, #0]
 8003a4e:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <HAL_MspInit+0x4c>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	4a08      	ldr	r2, [pc, #32]	; (8003a74 <HAL_MspInit+0x4c>)
 8003a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a58:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <HAL_MspInit+0x4c>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	683b      	ldr	r3, [r7, #0]
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40023800 	.word	0x40023800

08003a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
	HAL_RCC_NMI_IRQHandler();
 8003a7c:	f003 fd7c 	bl	8007578 <HAL_RCC_NMI_IRQHandler>

  while (1)
 8003a80:	e7fe      	b.n	8003a80 <NMI_Handler+0x8>

08003a82 <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 8003a82:	b480      	push	{r7}
 8003a84:	af00      	add	r7, sp, #0
  while (1)
 8003a86:	e7fe      	b.n	8003a86 <HardFault_Handler+0x4>

08003a88 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  while (1)
 8003a8c:	e7fe      	b.n	8003a8c <MemManage_Handler+0x4>

08003a8e <BusFault_Handler>:
  {
  }
}

void BusFault_Handler(void)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	af00      	add	r7, sp, #0
  while (1)
 8003a92:	e7fe      	b.n	8003a92 <BusFault_Handler+0x4>

08003a94 <UsageFault_Handler>:
  {
  }
}

void UsageFault_Handler(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  while (1)
 8003a98:	e7fe      	b.n	8003a98 <UsageFault_Handler+0x4>

08003a9a <DebugMon_Handler>:
  {
  }
}

void DebugMon_Handler(void)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	af00      	add	r7, sp, #0
}
 8003a9e:	bf00      	nop
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart2);
 8003aac:	4802      	ldr	r0, [pc, #8]	; (8003ab8 <USART2_IRQHandler+0x10>)
 8003aae:	f004 f965 	bl	8007d7c <HAL_UART_IRQHandler>
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000454 	.word	0x20000454

08003abc <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart3);
 8003ac0:	4802      	ldr	r0, [pc, #8]	; (8003acc <USART3_IRQHandler+0x10>)
 8003ac2:	f004 f95b 	bl	8007d7c <HAL_UART_IRQHandler>
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000410 	.word	0x20000410

08003ad0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8003ad4:	f002 fce8 	bl	80064a8 <HAL_IncTick>

#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003ad8:	f001 fd6c 	bl	80055b4 <xTaskGetSchedulerState>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d001      	beq.n	8003ae6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003ae2:	f002 fa71 	bl	8005fc8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
}
 8003ae6:	bf00      	nop
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003aea:	b480      	push	{r7}
 8003aec:	af00      	add	r7, sp, #0
  return 1;
 8003aee:	2301      	movs	r3, #1
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <_kill>:

int _kill(int pid, int sig)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b04:	f006 fc58 	bl	800a3b8 <__errno>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2216      	movs	r2, #22
 8003b0c:	601a      	str	r2, [r3, #0]
  return -1;
 8003b0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <_exit>:

void _exit (int status)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b22:	f04f 31ff 	mov.w	r1, #4294967295
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7ff ffe7 	bl	8003afa <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b2c:	e7fe      	b.n	8003b2c <_exit+0x12>

08003b2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b086      	sub	sp, #24
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	e00a      	b.n	8003b56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b40:	f3af 8000 	nop.w
 8003b44:	4601      	mov	r1, r0
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	60ba      	str	r2, [r7, #8]
 8003b4c:	b2ca      	uxtb	r2, r1
 8003b4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	3301      	adds	r3, #1
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	dbf0      	blt.n	8003b40 <_read+0x12>
  }

  return len;
 8003b5e:	687b      	ldr	r3, [r7, #4]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	e009      	b.n	8003b8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	60ba      	str	r2, [r7, #8]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	dbf1      	blt.n	8003b7a <_write+0x12>
  }
  return len;
 8003b96:	687b      	ldr	r3, [r7, #4]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <_close>:

int _close(int file)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ba8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bc8:	605a      	str	r2, [r3, #4]
  return 0;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <_isatty>:

int _isatty(int file)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003be0:	2301      	movs	r3, #1
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b085      	sub	sp, #20
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c10:	4a14      	ldr	r2, [pc, #80]	; (8003c64 <_sbrk+0x5c>)
 8003c12:	4b15      	ldr	r3, [pc, #84]	; (8003c68 <_sbrk+0x60>)
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c1c:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <_sbrk+0x64>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d102      	bne.n	8003c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c24:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <_sbrk+0x64>)
 8003c26:	4a12      	ldr	r2, [pc, #72]	; (8003c70 <_sbrk+0x68>)
 8003c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c2a:	4b10      	ldr	r3, [pc, #64]	; (8003c6c <_sbrk+0x64>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4413      	add	r3, r2
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d207      	bcs.n	8003c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c38:	f006 fbbe 	bl	800a3b8 <__errno>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	220c      	movs	r2, #12
 8003c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c42:	f04f 33ff 	mov.w	r3, #4294967295
 8003c46:	e009      	b.n	8003c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c48:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <_sbrk+0x64>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c4e:	4b07      	ldr	r3, [pc, #28]	; (8003c6c <_sbrk+0x64>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4413      	add	r3, r2
 8003c56:	4a05      	ldr	r2, [pc, #20]	; (8003c6c <_sbrk+0x64>)
 8003c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20020000 	.word	0x20020000
 8003c68:	00000400 	.word	0x00000400
 8003c6c:	200004e0 	.word	0x200004e0
 8003c70:	20004e48 	.word	0x20004e48

08003c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <SystemInit+0x20>)
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7e:	4a05      	ldr	r2, [pc, #20]	; (8003c94 <SystemInit+0x20>)
 8003c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c88:	bf00      	nop
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	6039      	str	r1, [r7, #0]
 8003ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	db0a      	blt.n	8003cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	490c      	ldr	r1, [pc, #48]	; (8003ce4 <__NVIC_SetPriority+0x4c>)
 8003cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb6:	0112      	lsls	r2, r2, #4
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	440b      	add	r3, r1
 8003cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cc0:	e00a      	b.n	8003cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	4908      	ldr	r1, [pc, #32]	; (8003ce8 <__NVIC_SetPriority+0x50>)
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	3b04      	subs	r3, #4
 8003cd0:	0112      	lsls	r2, r2, #4
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	761a      	strb	r2, [r3, #24]
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	e000e100 	.word	0xe000e100
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	f06f 0004 	mvn.w	r0, #4
 8003cf6:	f7ff ffcf 	bl	8003c98 <__NVIC_SetPriority>
#endif
}
 8003cfa:	bf00      	nop
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d06:	f3ef 8305 	mrs	r3, IPSR
 8003d0a:	603b      	str	r3, [r7, #0]
  return(result);
 8003d0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003d12:	f06f 0305 	mvn.w	r3, #5
 8003d16:	607b      	str	r3, [r7, #4]
 8003d18:	e00c      	b.n	8003d34 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <osKernelInitialize+0x44>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d105      	bne.n	8003d2e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003d22:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <osKernelInitialize+0x44>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	607b      	str	r3, [r7, #4]
 8003d2c:	e002      	b.n	8003d34 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003d34:	687b      	ldr	r3, [r7, #4]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	200004e4 	.word	0x200004e4

08003d48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d4e:	f3ef 8305 	mrs	r3, IPSR
 8003d52:	603b      	str	r3, [r7, #0]
  return(result);
 8003d54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003d5a:	f06f 0305 	mvn.w	r3, #5
 8003d5e:	607b      	str	r3, [r7, #4]
 8003d60:	e010      	b.n	8003d84 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003d62:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <osKernelStart+0x48>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d109      	bne.n	8003d7e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003d6a:	f7ff ffbf 	bl	8003cec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003d6e:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <osKernelStart+0x48>)
 8003d70:	2202      	movs	r2, #2
 8003d72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003d74:	f000 fe88 	bl	8004a88 <vTaskStartScheduler>
      stat = osOK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	607b      	str	r3, [r7, #4]
 8003d7c:	e002      	b.n	8003d84 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003d84:	687b      	ldr	r3, [r7, #4]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	200004e4 	.word	0x200004e4

08003d94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08e      	sub	sp, #56	; 0x38
 8003d98:	af04      	add	r7, sp, #16
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003da4:	f3ef 8305 	mrs	r3, IPSR
 8003da8:	617b      	str	r3, [r7, #20]
  return(result);
 8003daa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d17e      	bne.n	8003eae <osThreadNew+0x11a>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d07b      	beq.n	8003eae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003db6:	2380      	movs	r3, #128	; 0x80
 8003db8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003dba:	2318      	movs	r3, #24
 8003dbc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d045      	beq.n	8003e5a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <osThreadNew+0x48>
        name = attr->name;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <osThreadNew+0x6e>
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	2b38      	cmp	r3, #56	; 0x38
 8003df4:	d805      	bhi.n	8003e02 <osThreadNew+0x6e>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <osThreadNew+0x72>
        return (NULL);
 8003e02:	2300      	movs	r3, #0
 8003e04:	e054      	b.n	8003eb0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	089b      	lsrs	r3, r3, #2
 8003e14:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00e      	beq.n	8003e3c <osThreadNew+0xa8>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	2b5b      	cmp	r3, #91	; 0x5b
 8003e24:	d90a      	bls.n	8003e3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d006      	beq.n	8003e3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <osThreadNew+0xa8>
        mem = 1;
 8003e36:	2301      	movs	r3, #1
 8003e38:	61bb      	str	r3, [r7, #24]
 8003e3a:	e010      	b.n	8003e5e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10c      	bne.n	8003e5e <osThreadNew+0xca>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d108      	bne.n	8003e5e <osThreadNew+0xca>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d104      	bne.n	8003e5e <osThreadNew+0xca>
          mem = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61bb      	str	r3, [r7, #24]
 8003e58:	e001      	b.n	8003e5e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d110      	bne.n	8003e86 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e6c:	9202      	str	r2, [sp, #8]
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	6a3a      	ldr	r2, [r7, #32]
 8003e78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 fbfe 	bl	800467c <xTaskCreateStatic>
 8003e80:	4603      	mov	r3, r0
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	e013      	b.n	8003eae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d110      	bne.n	8003eae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	f107 0310 	add.w	r3, r7, #16
 8003e94:	9301      	str	r3, [sp, #4]
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 fc4e 	bl	8004740 <xTaskCreate>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d001      	beq.n	8003eae <osThreadNew+0x11a>
            hTask = NULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003eae:	693b      	ldr	r3, [r7, #16]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3728      	adds	r7, #40	; 0x28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ec0:	f3ef 8305 	mrs	r3, IPSR
 8003ec4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ec6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <osDelay+0x1c>
    stat = osErrorISR;
 8003ecc:	f06f 0305 	mvn.w	r3, #5
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	e007      	b.n	8003ee4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fd9e 	bl	8004a20 <vTaskDelay>
    }
  }

  return (stat);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4a07      	ldr	r2, [pc, #28]	; (8003f1c <vApplicationGetIdleTaskMemory+0x2c>)
 8003f00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	4a06      	ldr	r2, [pc, #24]	; (8003f20 <vApplicationGetIdleTaskMemory+0x30>)
 8003f06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2280      	movs	r2, #128	; 0x80
 8003f0c:	601a      	str	r2, [r3, #0]
}
 8003f0e:	bf00      	nop
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	200004e8 	.word	0x200004e8
 8003f20:	20000544 	.word	0x20000544

08003f24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4a07      	ldr	r2, [pc, #28]	; (8003f50 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	4a06      	ldr	r2, [pc, #24]	; (8003f54 <vApplicationGetTimerTaskMemory+0x30>)
 8003f3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f42:	601a      	str	r2, [r3, #0]
}
 8003f44:	bf00      	nop
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	20000744 	.word	0x20000744
 8003f54:	200007a0 	.word	0x200007a0

08003f58 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f103 0208 	add.w	r2, r3, #8
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f70:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f103 0208 	add.w	r2, r3, #8
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f103 0208 	add.w	r2, r3, #8
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b085      	sub	sp, #20
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc8:	d103      	bne.n	8003fd2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	e00c      	b.n	8003fec <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	e002      	b.n	8003fe0 <vListInsert+0x2e>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d2f6      	bcs.n	8003fda <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	1c5a      	adds	r2, r3, #1
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	601a      	str	r2, [r3, #0]
}
 8004018:	bf00      	nop
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6892      	ldr	r2, [r2, #8]
 800403a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6852      	ldr	r2, [r2, #4]
 8004044:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	429a      	cmp	r2, r3
 800404e:	d103      	bne.n	8004058 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	1e5a      	subs	r2, r3, #1
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004082:	2301      	movs	r3, #1
 8004084:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10a      	bne.n	80040a6 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80040a2:	bf00      	nop
 80040a4:	e7fe      	b.n	80040a4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d05d      	beq.n	8004168 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d059      	beq.n	8004168 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040bc:	2100      	movs	r1, #0
 80040be:	fba3 2302 	umull	r2, r3, r3, r2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d000      	beq.n	80040c8 <xQueueGenericReset+0x50>
 80040c6:	2101      	movs	r1, #1
 80040c8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d14c      	bne.n	8004168 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80040ce:	f001 feeb 	bl	8005ea8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040da:	6939      	ldr	r1, [r7, #16]
 80040dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	441a      	add	r2, r3
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	2200      	movs	r2, #0
 80040ec:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fe:	3b01      	subs	r3, #1
 8004100:	6939      	ldr	r1, [r7, #16]
 8004102:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004104:	fb01 f303 	mul.w	r3, r1, r3
 8004108:	441a      	add	r2, r3
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	22ff      	movs	r2, #255	; 0xff
 8004112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	22ff      	movs	r2, #255	; 0xff
 800411a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d114      	bne.n	800414e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01a      	beq.n	8004162 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	3310      	adds	r3, #16
 8004130:	4618      	mov	r0, r3
 8004132:	f001 f80d 	bl	8005150 <xTaskRemoveFromEventList>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d012      	beq.n	8004162 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800413c:	4b15      	ldr	r3, [pc, #84]	; (8004194 <xQueueGenericReset+0x11c>)
 800413e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	e009      	b.n	8004162 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	3310      	adds	r3, #16
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff ff00 	bl	8003f58 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	3324      	adds	r3, #36	; 0x24
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff fefb 	bl	8003f58 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004162:	f001 fed1 	bl	8005f08 <vPortExitCritical>
 8004166:	e001      	b.n	800416c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10a      	bne.n	8004188 <xQueueGenericReset+0x110>
        __asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	60bb      	str	r3, [r7, #8]
    }
 8004184:	bf00      	nop
 8004186:	e7fe      	b.n	8004186 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004188:	697b      	ldr	r3, [r7, #20]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	e000ed04 	.word	0xe000ed04

08004198 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8004198:	b580      	push	{r7, lr}
 800419a:	b08c      	sub	sp, #48	; 0x30
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10a      	bne.n	80041c6 <xQueueGenericCreateStatic+0x2e>
        __asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	623b      	str	r3, [r7, #32]
    }
 80041c2:	bf00      	nop
 80041c4:	e7fe      	b.n	80041c4 <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d030      	beq.n	800422e <xQueueGenericCreateStatic+0x96>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d02d      	beq.n	800422e <xQueueGenericCreateStatic+0x96>
            ( pxStaticQueue != NULL ) &&
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <xQueueGenericCreateStatic+0x46>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d027      	beq.n	800422e <xQueueGenericCreateStatic+0x96>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d102      	bne.n	80041ea <xQueueGenericCreateStatic+0x52>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d121      	bne.n	800422e <xQueueGenericCreateStatic+0x96>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80041ea:	2350      	movs	r3, #80	; 0x50
 80041ec:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2b50      	cmp	r3, #80	; 0x50
 80041f2:	d00a      	beq.n	800420a <xQueueGenericCreateStatic+0x72>
        __asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	61fb      	str	r3, [r7, #28]
    }
 8004206:	bf00      	nop
 8004208:	e7fe      	b.n	8004208 <xQueueGenericCreateStatic+0x70>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800420a:	697b      	ldr	r3, [r7, #20]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004218:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	4613      	mov	r3, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f814 	bl	8004254 <prvInitialiseNewQueue>
 800422c:	e00d      	b.n	800424a <xQueueGenericCreateStatic+0xb2>
        }
        else
        {
            configASSERT( pxNewQueue );
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10a      	bne.n	800424a <xQueueGenericCreateStatic+0xb2>
        __asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	61bb      	str	r3, [r7, #24]
    }
 8004246:	bf00      	nop
 8004248:	e7fe      	b.n	8004248 <xQueueGenericCreateStatic+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800424c:	4618      	mov	r0, r3
 800424e:	3728      	adds	r7, #40	; 0x28
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d103      	bne.n	8004270 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	e002      	b.n	8004276 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004282:	2101      	movs	r1, #1
 8004284:	69b8      	ldr	r0, [r7, #24]
 8004286:	f7ff fef7 	bl	8004078 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08c      	sub	sp, #48	; 0x30
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80042a8:	2300      	movs	r3, #0
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80042b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10a      	bne.n	80042cc <xQueueReceive+0x30>
        __asm volatile
 80042b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	623b      	str	r3, [r7, #32]
    }
 80042c8:	bf00      	nop
 80042ca:	e7fe      	b.n	80042ca <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d103      	bne.n	80042da <xQueueReceive+0x3e>
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <xQueueReceive+0x42>
 80042da:	2301      	movs	r3, #1
 80042dc:	e000      	b.n	80042e0 <xQueueReceive+0x44>
 80042de:	2300      	movs	r3, #0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10a      	bne.n	80042fa <xQueueReceive+0x5e>
        __asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	61fb      	str	r3, [r7, #28]
    }
 80042f6:	bf00      	nop
 80042f8:	e7fe      	b.n	80042f8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042fa:	f001 f95b 	bl	80055b4 <xTaskGetSchedulerState>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d102      	bne.n	800430a <xQueueReceive+0x6e>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <xQueueReceive+0x72>
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <xQueueReceive+0x74>
 800430e:	2300      	movs	r3, #0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10a      	bne.n	800432a <xQueueReceive+0x8e>
        __asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	61bb      	str	r3, [r7, #24]
    }
 8004326:	bf00      	nop
 8004328:	e7fe      	b.n	8004328 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800432a:	f001 fdbd 	bl	8005ea8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004332:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	2b00      	cmp	r3, #0
 8004338:	d01f      	beq.n	800437a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800433a:	68b9      	ldr	r1, [r7, #8]
 800433c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800433e:	f000 f88d 	bl	800445c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	1e5a      	subs	r2, r3, #1
 8004346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004348:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00f      	beq.n	8004372 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004354:	3310      	adds	r3, #16
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fefa 	bl	8005150 <xTaskRemoveFromEventList>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004362:	4b3d      	ldr	r3, [pc, #244]	; (8004458 <xQueueReceive+0x1bc>)
 8004364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004372:	f001 fdc9 	bl	8005f08 <vPortExitCritical>
                return pdPASS;
 8004376:	2301      	movs	r3, #1
 8004378:	e069      	b.n	800444e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d103      	bne.n	8004388 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004380:	f001 fdc2 	bl	8005f08 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004384:	2300      	movs	r3, #0
 8004386:	e062      	b.n	800444e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800438e:	f107 0310 	add.w	r3, r7, #16
 8004392:	4618      	mov	r0, r3
 8004394:	f000 ffb4 	bl	8005300 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004398:	2301      	movs	r3, #1
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800439c:	f001 fdb4 	bl	8005f08 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80043a0:	f000 fbdc 	bl	8004b5c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80043a4:	f001 fd80 	bl	8005ea8 <vPortEnterCritical>
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043ae:	b25b      	sxtb	r3, r3
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b4:	d103      	bne.n	80043be <xQueueReceive+0x122>
 80043b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043c4:	b25b      	sxtb	r3, r3
 80043c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ca:	d103      	bne.n	80043d4 <xQueueReceive+0x138>
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043d4:	f001 fd98 	bl	8005f08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043d8:	1d3a      	adds	r2, r7, #4
 80043da:	f107 0310 	add.w	r3, r7, #16
 80043de:	4611      	mov	r1, r2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 ffa3 	bl	800532c <xTaskCheckForTimeOut>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d123      	bne.n	8004434 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ee:	f000 f8ad 	bl	800454c <prvIsQueueEmpty>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d017      	beq.n	8004428 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fa:	3324      	adds	r3, #36	; 0x24
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	4611      	mov	r1, r2
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fe3b 	bl	800507c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004408:	f000 f84e 	bl	80044a8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800440c:	f000 fbb4 	bl	8004b78 <xTaskResumeAll>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d189      	bne.n	800432a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004416:	4b10      	ldr	r3, [pc, #64]	; (8004458 <xQueueReceive+0x1bc>)
 8004418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	e780      	b.n	800432a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800442a:	f000 f83d 	bl	80044a8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800442e:	f000 fba3 	bl	8004b78 <xTaskResumeAll>
 8004432:	e77a      	b.n	800432a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004436:	f000 f837 	bl	80044a8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800443a:	f000 fb9d 	bl	8004b78 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800443e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004440:	f000 f884 	bl	800454c <prvIsQueueEmpty>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	f43f af6f 	beq.w	800432a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800444c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800444e:	4618      	mov	r0, r3
 8004450:	3730      	adds	r7, #48	; 0x30
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	e000ed04 	.word	0xe000ed04

0800445c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d018      	beq.n	80044a0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	441a      	add	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	429a      	cmp	r2, r3
 8004486:	d303      	bcc.n	8004490 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68d9      	ldr	r1, [r3, #12]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	461a      	mov	r2, r3
 800449a:	6838      	ldr	r0, [r7, #0]
 800449c:	f005 ffb6 	bl	800a40c <memcpy>
    }
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80044b0:	f001 fcfa 	bl	8005ea8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044ba:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80044bc:	e011      	b.n	80044e2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d012      	beq.n	80044ec <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	3324      	adds	r3, #36	; 0x24
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fe40 	bl	8005150 <xTaskRemoveFromEventList>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80044d6:	f000 ff8f 	bl	80053f8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80044da:	7bfb      	ldrb	r3, [r7, #15]
 80044dc:	3b01      	subs	r3, #1
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80044e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	dce9      	bgt.n	80044be <prvUnlockQueue+0x16>
 80044ea:	e000      	b.n	80044ee <prvUnlockQueue+0x46>
                    break;
 80044ec:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	22ff      	movs	r2, #255	; 0xff
 80044f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80044f6:	f001 fd07 	bl	8005f08 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80044fa:	f001 fcd5 	bl	8005ea8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004504:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004506:	e011      	b.n	800452c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d012      	beq.n	8004536 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3310      	adds	r3, #16
 8004514:	4618      	mov	r0, r3
 8004516:	f000 fe1b 	bl	8005150 <xTaskRemoveFromEventList>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004520:	f000 ff6a 	bl	80053f8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004524:	7bbb      	ldrb	r3, [r7, #14]
 8004526:	3b01      	subs	r3, #1
 8004528:	b2db      	uxtb	r3, r3
 800452a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800452c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004530:	2b00      	cmp	r3, #0
 8004532:	dce9      	bgt.n	8004508 <prvUnlockQueue+0x60>
 8004534:	e000      	b.n	8004538 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004536:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	22ff      	movs	r2, #255	; 0xff
 800453c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004540:	f001 fce2 	bl	8005f08 <vPortExitCritical>
}
 8004544:	bf00      	nop
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004554:	f001 fca8 	bl	8005ea8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455c:	2b00      	cmp	r3, #0
 800455e:	d102      	bne.n	8004566 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004560:	2301      	movs	r3, #1
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	e001      	b.n	800456a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800456a:	f001 fccd 	bl	8005f08 <vPortExitCritical>

    return xReturn;
 800456e:	68fb      	ldr	r3, [r7, #12]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8004582:	2300      	movs	r3, #0
 8004584:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <vQueueAddToRegistry+0x2a>
        __asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	60fb      	str	r3, [r7, #12]
    }
 800459e:	bf00      	nop
 80045a0:	e7fe      	b.n	80045a0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d024      	beq.n	80045f2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	e01e      	b.n	80045ec <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80045ae:	4a18      	ldr	r2, [pc, #96]	; (8004610 <vQueueAddToRegistry+0x98>)
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	4413      	add	r3, r2
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d105      	bne.n	80045ca <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	4a13      	ldr	r2, [pc, #76]	; (8004610 <vQueueAddToRegistry+0x98>)
 80045c4:	4413      	add	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
                    break;
 80045c8:	e013      	b.n	80045f2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10a      	bne.n	80045e6 <vQueueAddToRegistry+0x6e>
 80045d0:	4a0f      	ldr	r2, [pc, #60]	; (8004610 <vQueueAddToRegistry+0x98>)
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d104      	bne.n	80045e6 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	4a0b      	ldr	r2, [pc, #44]	; (8004610 <vQueueAddToRegistry+0x98>)
 80045e2:	4413      	add	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	3301      	adds	r3, #1
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2b07      	cmp	r3, #7
 80045f0:	d9dd      	bls.n	80045ae <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8004604:	bf00      	nop
 8004606:	371c      	adds	r7, #28
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	20000ba0 	.word	0x20000ba0

08004614 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004624:	f001 fc40 	bl	8005ea8 <vPortEnterCritical>
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800462e:	b25b      	sxtb	r3, r3
 8004630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004634:	d103      	bne.n	800463e <vQueueWaitForMessageRestricted+0x2a>
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004644:	b25b      	sxtb	r3, r3
 8004646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464a:	d103      	bne.n	8004654 <vQueueWaitForMessageRestricted+0x40>
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004654:	f001 fc58 	bl	8005f08 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	3324      	adds	r3, #36	; 0x24
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	68b9      	ldr	r1, [r7, #8]
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fd2b 	bl	80050c4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800466e:	6978      	ldr	r0, [r7, #20]
 8004670:	f7ff ff1a 	bl	80044a8 <prvUnlockQueue>
    }
 8004674:	bf00      	nop
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800467c:	b580      	push	{r7, lr}
 800467e:	b08e      	sub	sp, #56	; 0x38
 8004680:	af04      	add	r7, sp, #16
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800468a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10a      	bne.n	80046a6 <xTaskCreateStatic+0x2a>
        __asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	623b      	str	r3, [r7, #32]
    }
 80046a2:	bf00      	nop
 80046a4:	e7fe      	b.n	80046a4 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 80046a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <xTaskCreateStatic+0x46>
        __asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	61fb      	str	r3, [r7, #28]
    }
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 80046c2:	235c      	movs	r3, #92	; 0x5c
 80046c4:	613b      	str	r3, [r7, #16]
            configASSERT( xSize == sizeof( TCB_t ) );
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b5c      	cmp	r3, #92	; 0x5c
 80046ca:	d00a      	beq.n	80046e2 <xTaskCreateStatic+0x66>
        __asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	61bb      	str	r3, [r7, #24]
    }
 80046de:	bf00      	nop
 80046e0:	e7fe      	b.n	80046e0 <xTaskCreateStatic+0x64>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80046e2:	693b      	ldr	r3, [r7, #16]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80046e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d023      	beq.n	8004732 <xTaskCreateStatic+0xb6>
 80046ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d020      	beq.n	8004732 <xTaskCreateStatic+0xb6>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80046f4:	225c      	movs	r2, #92	; 0x5c
 80046f6:	2100      	movs	r1, #0
 80046f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046fa:	f005 feaf 	bl	800a45c <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004702:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	2202      	movs	r2, #2
 8004708:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800470c:	2300      	movs	r3, #0
 800470e:	9303      	str	r3, [sp, #12]
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	9302      	str	r3, [sp, #8]
 8004714:	f107 0314 	add.w	r3, r7, #20
 8004718:	9301      	str	r3, [sp, #4]
 800471a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f855 	bl	80047d4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800472a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800472c:	f000 f8e0 	bl	80048f0 <prvAddNewTaskToReadyList>
 8004730:	e001      	b.n	8004736 <xTaskCreateStatic+0xba>
        }
        else
        {
            xReturn = NULL;
 8004732:	2300      	movs	r3, #0
 8004734:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8004736:	697b      	ldr	r3, [r7, #20]
    }
 8004738:	4618      	mov	r0, r3
 800473a:	3728      	adds	r7, #40	; 0x28
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004740:	b580      	push	{r7, lr}
 8004742:	b08c      	sub	sp, #48	; 0x30
 8004744:	af04      	add	r7, sp, #16
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	603b      	str	r3, [r7, #0]
 800474c:	4613      	mov	r3, r2
 800474e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004750:	88fb      	ldrh	r3, [r7, #6]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4618      	mov	r0, r3
 8004756:	f001 fc89 	bl	800606c <pvPortMalloc>
 800475a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d013      	beq.n	800478a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004762:	205c      	movs	r0, #92	; 0x5c
 8004764:	f001 fc82 	bl	800606c <pvPortMalloc>
 8004768:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d008      	beq.n	8004782 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004770:	225c      	movs	r2, #92	; 0x5c
 8004772:	2100      	movs	r1, #0
 8004774:	69f8      	ldr	r0, [r7, #28]
 8004776:	f005 fe71 	bl	800a45c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
 8004780:	e005      	b.n	800478e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004782:	6978      	ldr	r0, [r7, #20]
 8004784:	f001 fd2c 	bl	80061e0 <vPortFree>
 8004788:	e001      	b.n	800478e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800478a:	2300      	movs	r3, #0
 800478c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d017      	beq.n	80047c4 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800479c:	88fa      	ldrh	r2, [r7, #6]
 800479e:	2300      	movs	r3, #0
 80047a0:	9303      	str	r3, [sp, #12]
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	9302      	str	r3, [sp, #8]
 80047a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a8:	9301      	str	r3, [sp, #4]
 80047aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f80e 	bl	80047d4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80047b8:	69f8      	ldr	r0, [r7, #28]
 80047ba:	f000 f899 	bl	80048f0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80047be:	2301      	movs	r3, #1
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	e002      	b.n	80047ca <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047c4:	f04f 33ff 	mov.w	r3, #4294967295
 80047c8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80047ca:	69bb      	ldr	r3, [r7, #24]
    }
 80047cc:	4618      	mov	r0, r3
 80047ce:	3720      	adds	r7, #32
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	461a      	mov	r2, r3
 80047ec:	21a5      	movs	r1, #165	; 0xa5
 80047ee:	f005 fe35 	bl	800a45c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80047fc:	3b01      	subs	r3, #1
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	f023 0307 	bic.w	r3, r3, #7
 800480a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <prvInitialiseNewTask+0x58>
        __asm volatile
 8004816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	617b      	str	r3, [r7, #20]
    }
 8004828:	bf00      	nop
 800482a:	e7fe      	b.n	800482a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d01e      	beq.n	8004870 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004832:	2300      	movs	r3, #0
 8004834:	61fb      	str	r3, [r7, #28]
 8004836:	e012      	b.n	800485e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	4413      	add	r3, r2
 800483e:	7819      	ldrb	r1, [r3, #0]
 8004840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	4413      	add	r3, r2
 8004846:	3334      	adds	r3, #52	; 0x34
 8004848:	460a      	mov	r2, r1
 800484a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	4413      	add	r3, r2
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d006      	beq.n	8004866 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	3301      	adds	r3, #1
 800485c:	61fb      	str	r3, [r7, #28]
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	2b0f      	cmp	r3, #15
 8004862:	d9e9      	bls.n	8004838 <prvInitialiseNewTask+0x64>
 8004864:	e000      	b.n	8004868 <prvInitialiseNewTask+0x94>
            {
                break;
 8004866:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	2b37      	cmp	r3, #55	; 0x37
 8004874:	d90a      	bls.n	800488c <prvInitialiseNewTask+0xb8>
        __asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	613b      	str	r3, [r7, #16]
    }
 8004888:	bf00      	nop
 800488a:	e7fe      	b.n	800488a <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	2b37      	cmp	r3, #55	; 0x37
 8004890:	d901      	bls.n	8004896 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004892:	2337      	movs	r3, #55	; 0x37
 8004894:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800489a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048a0:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	3304      	adds	r3, #4
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fb76 	bl	8003f98 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	3318      	adds	r3, #24
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fb71 	bl	8003f98 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ba:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ca:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	68f9      	ldr	r1, [r7, #12]
 80048d0:	69b8      	ldr	r0, [r7, #24]
 80048d2:	f001 f9bb 	bl	8005c4c <pxPortInitialiseStack>
 80048d6:	4602      	mov	r2, r0
 80048d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048da:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80048dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048e6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80048e8:	bf00      	nop
 80048ea:	3720      	adds	r7, #32
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80048f8:	f001 fad6 	bl	8005ea8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80048fc:	4b41      	ldr	r3, [pc, #260]	; (8004a04 <prvAddNewTaskToReadyList+0x114>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3301      	adds	r3, #1
 8004902:	4a40      	ldr	r2, [pc, #256]	; (8004a04 <prvAddNewTaskToReadyList+0x114>)
 8004904:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004906:	4b40      	ldr	r3, [pc, #256]	; (8004a08 <prvAddNewTaskToReadyList+0x118>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800490e:	4a3e      	ldr	r2, [pc, #248]	; (8004a08 <prvAddNewTaskToReadyList+0x118>)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004914:	4b3b      	ldr	r3, [pc, #236]	; (8004a04 <prvAddNewTaskToReadyList+0x114>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d110      	bne.n	800493e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800491c:	f000 fd90 	bl	8005440 <prvInitialiseTaskLists>
 8004920:	e00d      	b.n	800493e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004922:	4b3a      	ldr	r3, [pc, #232]	; (8004a0c <prvAddNewTaskToReadyList+0x11c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d109      	bne.n	800493e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800492a:	4b37      	ldr	r3, [pc, #220]	; (8004a08 <prvAddNewTaskToReadyList+0x118>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004934:	429a      	cmp	r2, r3
 8004936:	d802      	bhi.n	800493e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004938:	4a33      	ldr	r2, [pc, #204]	; (8004a08 <prvAddNewTaskToReadyList+0x118>)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800493e:	4b34      	ldr	r3, [pc, #208]	; (8004a10 <prvAddNewTaskToReadyList+0x120>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3301      	adds	r3, #1
 8004944:	4a32      	ldr	r2, [pc, #200]	; (8004a10 <prvAddNewTaskToReadyList+0x120>)
 8004946:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004948:	4b31      	ldr	r3, [pc, #196]	; (8004a10 <prvAddNewTaskToReadyList+0x120>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004954:	4b2f      	ldr	r3, [pc, #188]	; (8004a14 <prvAddNewTaskToReadyList+0x124>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d903      	bls.n	8004964 <prvAddNewTaskToReadyList+0x74>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	4a2c      	ldr	r2, [pc, #176]	; (8004a14 <prvAddNewTaskToReadyList+0x124>)
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004968:	492b      	ldr	r1, [pc, #172]	; (8004a18 <prvAddNewTaskToReadyList+0x128>)
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	440b      	add	r3, r1
 8004974:	3304      	adds	r3, #4
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	609a      	str	r2, [r3, #8]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	60da      	str	r2, [r3, #12]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	3204      	adds	r2, #4
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	1d1a      	adds	r2, r3, #4
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	609a      	str	r2, [r3, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4a1c      	ldr	r2, [pc, #112]	; (8004a18 <prvAddNewTaskToReadyList+0x128>)
 80049a8:	441a      	add	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	615a      	str	r2, [r3, #20]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b2:	4919      	ldr	r1, [pc, #100]	; (8004a18 <prvAddNewTaskToReadyList+0x128>)
 80049b4:	4613      	mov	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	1c59      	adds	r1, r3, #1
 80049c2:	4815      	ldr	r0, [pc, #84]	; (8004a18 <prvAddNewTaskToReadyList+0x128>)
 80049c4:	4613      	mov	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4403      	add	r3, r0
 80049ce:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80049d0:	f001 fa9a 	bl	8005f08 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80049d4:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <prvAddNewTaskToReadyList+0x11c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00e      	beq.n	80049fa <prvAddNewTaskToReadyList+0x10a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049dc:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <prvAddNewTaskToReadyList+0x118>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d207      	bcs.n	80049fa <prvAddNewTaskToReadyList+0x10a>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80049ea:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <prvAddNewTaskToReadyList+0x12c>)
 80049ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80049fa:	bf00      	nop
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	200010b4 	.word	0x200010b4
 8004a08:	20000be0 	.word	0x20000be0
 8004a0c:	200010c0 	.word	0x200010c0
 8004a10:	200010d0 	.word	0x200010d0
 8004a14:	200010bc 	.word	0x200010bc
 8004a18:	20000be4 	.word	0x20000be4
 8004a1c:	e000ed04 	.word	0xe000ed04

08004a20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d017      	beq.n	8004a62 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8004a32:	4b13      	ldr	r3, [pc, #76]	; (8004a80 <vTaskDelay+0x60>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <vTaskDelay+0x30>
        __asm volatile
 8004a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	60bb      	str	r3, [r7, #8]
    }
 8004a4c:	bf00      	nop
 8004a4e:	e7fe      	b.n	8004a4e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004a50:	f000 f884 	bl	8004b5c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a54:	2100      	movs	r1, #0
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fdca 	bl	80055f0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004a5c:	f000 f88c 	bl	8004b78 <xTaskResumeAll>
 8004a60:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d107      	bne.n	8004a78 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <vTaskDelay+0x64>)
 8004a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	200010dc 	.word	0x200010dc
 8004a84:	e000ed04 	.word	0xe000ed04

08004a88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	; 0x28
 8004a8c:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a96:	463a      	mov	r2, r7
 8004a98:	1d39      	adds	r1, r7, #4
 8004a9a:	f107 0308 	add.w	r3, r7, #8
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff fa26 	bl	8003ef0 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8004aa4:	6839      	ldr	r1, [r7, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	9202      	str	r2, [sp, #8]
 8004aac:	9301      	str	r3, [sp, #4]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	460a      	mov	r2, r1
 8004ab6:	4922      	ldr	r1, [pc, #136]	; (8004b40 <vTaskStartScheduler+0xb8>)
 8004ab8:	4822      	ldr	r0, [pc, #136]	; (8004b44 <vTaskStartScheduler+0xbc>)
 8004aba:	f7ff fddf 	bl	800467c <xTaskCreateStatic>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	4a21      	ldr	r2, [pc, #132]	; (8004b48 <vTaskStartScheduler+0xc0>)
 8004ac2:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8004ac4:	4b20      	ldr	r3, [pc, #128]	; (8004b48 <vTaskStartScheduler+0xc0>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8004acc:	2301      	movs	r3, #1
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	e001      	b.n	8004ad6 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d102      	bne.n	8004ae2 <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 8004adc:	f000 fdf6 	bl	80056cc <xTimerCreateTimerTask>
 8004ae0:	6178      	str	r0, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d116      	bne.n	8004b16 <vTaskStartScheduler+0x8e>
        __asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	613b      	str	r3, [r7, #16]
    }
 8004afa:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004afc:	4b13      	ldr	r3, [pc, #76]	; (8004b4c <vTaskStartScheduler+0xc4>)
 8004afe:	f04f 32ff 	mov.w	r2, #4294967295
 8004b02:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004b04:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <vTaskStartScheduler+0xc8>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b0a:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <vTaskStartScheduler+0xcc>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8004b10:	f001 f928 	bl	8005d64 <xPortStartScheduler>
 8004b14:	e00e      	b.n	8004b34 <vTaskStartScheduler+0xac>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1c:	d10a      	bne.n	8004b34 <vTaskStartScheduler+0xac>
        __asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	60fb      	str	r3, [r7, #12]
    }
 8004b30:	bf00      	nop
 8004b32:	e7fe      	b.n	8004b32 <vTaskStartScheduler+0xaa>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004b34:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <vTaskStartScheduler+0xd0>)
 8004b36:	681b      	ldr	r3, [r3, #0]
}
 8004b38:	bf00      	nop
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	0800d3bc 	.word	0x0800d3bc
 8004b44:	08005411 	.word	0x08005411
 8004b48:	200010d8 	.word	0x200010d8
 8004b4c:	200010d4 	.word	0x200010d4
 8004b50:	200010c0 	.word	0x200010c0
 8004b54:	200010b8 	.word	0x200010b8
 8004b58:	20000030 	.word	0x20000030

08004b5c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004b60:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <vTaskSuspendAll+0x18>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3301      	adds	r3, #1
 8004b66:	4a03      	ldr	r2, [pc, #12]	; (8004b74 <vTaskSuspendAll+0x18>)
 8004b68:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004b6a:	bf00      	nop
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	200010dc 	.word	0x200010dc

08004b78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b088      	sub	sp, #32
 8004b7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004b82:	2300      	movs	r3, #0
 8004b84:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004b86:	4b71      	ldr	r3, [pc, #452]	; (8004d4c <xTaskResumeAll+0x1d4>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10a      	bne.n	8004ba4 <xTaskResumeAll+0x2c>
        __asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	607b      	str	r3, [r7, #4]
    }
 8004ba0:	bf00      	nop
 8004ba2:	e7fe      	b.n	8004ba2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004ba4:	f001 f980 	bl	8005ea8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004ba8:	4b68      	ldr	r3, [pc, #416]	; (8004d4c <xTaskResumeAll+0x1d4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	4a67      	ldr	r2, [pc, #412]	; (8004d4c <xTaskResumeAll+0x1d4>)
 8004bb0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bb2:	4b66      	ldr	r3, [pc, #408]	; (8004d4c <xTaskResumeAll+0x1d4>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f040 80c1 	bne.w	8004d3e <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004bbc:	4b64      	ldr	r3, [pc, #400]	; (8004d50 <xTaskResumeAll+0x1d8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 80bc 	beq.w	8004d3e <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bc6:	e08b      	b.n	8004ce0 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bc8:	4b62      	ldr	r3, [pc, #392]	; (8004d54 <xTaskResumeAll+0x1dc>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	6a12      	ldr	r2, [r2, #32]
 8004bde:	609a      	str	r2, [r3, #8]
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	69d2      	ldr	r2, [r2, #28]
 8004be8:	605a      	str	r2, [r3, #4]
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	3318      	adds	r3, #24
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d103      	bne.n	8004bfe <xTaskResumeAll+0x86>
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	6a1a      	ldr	r2, [r3, #32]
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	605a      	str	r2, [r3, #4]
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	2200      	movs	r2, #0
 8004c02:	629a      	str	r2, [r3, #40]	; 0x28
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	1e5a      	subs	r2, r3, #1
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	69fa      	ldr	r2, [r7, #28]
 8004c1a:	68d2      	ldr	r2, [r2, #12]
 8004c1c:	609a      	str	r2, [r3, #8]
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	69fa      	ldr	r2, [r7, #28]
 8004c24:	6892      	ldr	r2, [r2, #8]
 8004c26:	605a      	str	r2, [r3, #4]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d103      	bne.n	8004c3c <xTaskResumeAll+0xc4>
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	605a      	str	r2, [r3, #4]
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	615a      	str	r2, [r3, #20]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	1e5a      	subs	r2, r3, #1
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c50:	4b41      	ldr	r3, [pc, #260]	; (8004d58 <xTaskResumeAll+0x1e0>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d903      	bls.n	8004c60 <xTaskResumeAll+0xe8>
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	4a3e      	ldr	r2, [pc, #248]	; (8004d58 <xTaskResumeAll+0x1e0>)
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c64:	493d      	ldr	r1, [pc, #244]	; (8004d5c <xTaskResumeAll+0x1e4>)
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	440b      	add	r3, r1
 8004c70:	3304      	adds	r3, #4
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	60bb      	str	r3, [r7, #8]
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	609a      	str	r2, [r3, #8]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	60da      	str	r2, [r3, #12]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	3204      	adds	r2, #4
 8004c8c:	605a      	str	r2, [r3, #4]
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	1d1a      	adds	r2, r3, #4
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	609a      	str	r2, [r3, #8]
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4a2e      	ldr	r2, [pc, #184]	; (8004d5c <xTaskResumeAll+0x1e4>)
 8004ca4:	441a      	add	r2, r3
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	615a      	str	r2, [r3, #20]
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cae:	492b      	ldr	r1, [pc, #172]	; (8004d5c <xTaskResumeAll+0x1e4>)
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	1c59      	adds	r1, r3, #1
 8004cbe:	4827      	ldr	r0, [pc, #156]	; (8004d5c <xTaskResumeAll+0x1e4>)
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4403      	add	r3, r0
 8004cca:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd0:	4b23      	ldr	r3, [pc, #140]	; (8004d60 <xTaskResumeAll+0x1e8>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d302      	bcc.n	8004ce0 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8004cda:	4b22      	ldr	r3, [pc, #136]	; (8004d64 <xTaskResumeAll+0x1ec>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ce0:	4b1c      	ldr	r3, [pc, #112]	; (8004d54 <xTaskResumeAll+0x1dc>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f47f af6f 	bne.w	8004bc8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004cf0:	f000 fc44 	bl	800557c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004cf4:	4b1c      	ldr	r3, [pc, #112]	; (8004d68 <xTaskResumeAll+0x1f0>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d010      	beq.n	8004d22 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004d00:	f000 f846 	bl	8004d90 <xTaskIncrementTick>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8004d0a:	4b16      	ldr	r3, [pc, #88]	; (8004d64 <xTaskResumeAll+0x1ec>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1f1      	bne.n	8004d00 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8004d1c:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <xTaskResumeAll+0x1f0>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004d22:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <xTaskResumeAll+0x1ec>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d009      	beq.n	8004d3e <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004d2e:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <xTaskResumeAll+0x1f4>)
 8004d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004d3e:	f001 f8e3 	bl	8005f08 <vPortExitCritical>

    return xAlreadyYielded;
 8004d42:	69bb      	ldr	r3, [r7, #24]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3720      	adds	r7, #32
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	200010dc 	.word	0x200010dc
 8004d50:	200010b4 	.word	0x200010b4
 8004d54:	20001074 	.word	0x20001074
 8004d58:	200010bc 	.word	0x200010bc
 8004d5c:	20000be4 	.word	0x20000be4
 8004d60:	20000be0 	.word	0x20000be0
 8004d64:	200010c8 	.word	0x200010c8
 8004d68:	200010c4 	.word	0x200010c4
 8004d6c:	e000ed04 	.word	0xe000ed04

08004d70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004d76:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <xTaskGetTickCount+0x1c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004d7c:	687b      	ldr	r3, [r7, #4]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	200010b8 	.word	0x200010b8

08004d90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08a      	sub	sp, #40	; 0x28
 8004d94:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d9a:	4b7e      	ldr	r3, [pc, #504]	; (8004f94 <xTaskIncrementTick+0x204>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f040 80ed 	bne.w	8004f7e <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004da4:	4b7c      	ldr	r3, [pc, #496]	; (8004f98 <xTaskIncrementTick+0x208>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3301      	adds	r3, #1
 8004daa:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004dac:	4a7a      	ldr	r2, [pc, #488]	; (8004f98 <xTaskIncrementTick+0x208>)
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d120      	bne.n	8004dfa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004db8:	4b78      	ldr	r3, [pc, #480]	; (8004f9c <xTaskIncrementTick+0x20c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <xTaskIncrementTick+0x48>
        __asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	607b      	str	r3, [r7, #4]
    }
 8004dd4:	bf00      	nop
 8004dd6:	e7fe      	b.n	8004dd6 <xTaskIncrementTick+0x46>
 8004dd8:	4b70      	ldr	r3, [pc, #448]	; (8004f9c <xTaskIncrementTick+0x20c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	61fb      	str	r3, [r7, #28]
 8004dde:	4b70      	ldr	r3, [pc, #448]	; (8004fa0 <xTaskIncrementTick+0x210>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a6e      	ldr	r2, [pc, #440]	; (8004f9c <xTaskIncrementTick+0x20c>)
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	4a6e      	ldr	r2, [pc, #440]	; (8004fa0 <xTaskIncrementTick+0x210>)
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	4b6d      	ldr	r3, [pc, #436]	; (8004fa4 <xTaskIncrementTick+0x214>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3301      	adds	r3, #1
 8004df2:	4a6c      	ldr	r2, [pc, #432]	; (8004fa4 <xTaskIncrementTick+0x214>)
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	f000 fbc1 	bl	800557c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004dfa:	4b6b      	ldr	r3, [pc, #428]	; (8004fa8 <xTaskIncrementTick+0x218>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6a3a      	ldr	r2, [r7, #32]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	f0c0 80a7 	bcc.w	8004f54 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e06:	4b65      	ldr	r3, [pc, #404]	; (8004f9c <xTaskIncrementTick+0x20c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d104      	bne.n	8004e1a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e10:	4b65      	ldr	r3, [pc, #404]	; (8004fa8 <xTaskIncrementTick+0x218>)
 8004e12:	f04f 32ff 	mov.w	r2, #4294967295
 8004e16:	601a      	str	r2, [r3, #0]
                    break;
 8004e18:	e09c      	b.n	8004f54 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e1a:	4b60      	ldr	r3, [pc, #384]	; (8004f9c <xTaskIncrementTick+0x20c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004e2a:	6a3a      	ldr	r2, [r7, #32]
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d203      	bcs.n	8004e3a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004e32:	4a5d      	ldr	r2, [pc, #372]	; (8004fa8 <xTaskIncrementTick+0x218>)
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004e38:	e08c      	b.n	8004f54 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	68d2      	ldr	r2, [r2, #12]
 8004e48:	609a      	str	r2, [r3, #8]
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	6892      	ldr	r2, [r2, #8]
 8004e52:	605a      	str	r2, [r3, #4]
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d103      	bne.n	8004e68 <xTaskIncrementTick+0xd8>
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	68da      	ldr	r2, [r3, #12]
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	605a      	str	r2, [r3, #4]
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	615a      	str	r2, [r3, #20]
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	1e5a      	subs	r2, r3, #1
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01e      	beq.n	8004ebe <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	6a12      	ldr	r2, [r2, #32]
 8004e8e:	609a      	str	r2, [r3, #8]
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	69d2      	ldr	r2, [r2, #28]
 8004e98:	605a      	str	r2, [r3, #4]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	3318      	adds	r3, #24
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d103      	bne.n	8004eae <xTaskIncrementTick+0x11e>
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	6a1a      	ldr	r2, [r3, #32]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	605a      	str	r2, [r3, #4]
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	629a      	str	r2, [r3, #40]	; 0x28
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	1e5a      	subs	r2, r3, #1
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec2:	4b3a      	ldr	r3, [pc, #232]	; (8004fac <xTaskIncrementTick+0x21c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d903      	bls.n	8004ed2 <xTaskIncrementTick+0x142>
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ece:	4a37      	ldr	r2, [pc, #220]	; (8004fac <xTaskIncrementTick+0x21c>)
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed6:	4936      	ldr	r1, [pc, #216]	; (8004fb0 <xTaskIncrementTick+0x220>)
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60bb      	str	r3, [r7, #8]
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	609a      	str	r2, [r3, #8]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	689a      	ldr	r2, [r3, #8]
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	60da      	str	r2, [r3, #12]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	3204      	adds	r2, #4
 8004efe:	605a      	str	r2, [r3, #4]
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	1d1a      	adds	r2, r3, #4
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	609a      	str	r2, [r3, #8]
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4a26      	ldr	r2, [pc, #152]	; (8004fb0 <xTaskIncrementTick+0x220>)
 8004f16:	441a      	add	r2, r3
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	615a      	str	r2, [r3, #20]
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f20:	4923      	ldr	r1, [pc, #140]	; (8004fb0 <xTaskIncrementTick+0x220>)
 8004f22:	4613      	mov	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	1c59      	adds	r1, r3, #1
 8004f30:	481f      	ldr	r0, [pc, #124]	; (8004fb0 <xTaskIncrementTick+0x220>)
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4403      	add	r3, r0
 8004f3c:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f42:	4b1c      	ldr	r3, [pc, #112]	; (8004fb4 <xTaskIncrementTick+0x224>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	f67f af5c 	bls.w	8004e06 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f52:	e758      	b.n	8004e06 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f54:	4b17      	ldr	r3, [pc, #92]	; (8004fb4 <xTaskIncrementTick+0x224>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f5a:	4915      	ldr	r1, [pc, #84]	; (8004fb0 <xTaskIncrementTick+0x220>)
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d901      	bls.n	8004f70 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8004f70:	4b11      	ldr	r3, [pc, #68]	; (8004fb8 <xTaskIncrementTick+0x228>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f7c:	e004      	b.n	8004f88 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004f7e:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <xTaskIncrementTick+0x22c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3301      	adds	r3, #1
 8004f84:	4a0d      	ldr	r2, [pc, #52]	; (8004fbc <xTaskIncrementTick+0x22c>)
 8004f86:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3728      	adds	r7, #40	; 0x28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	200010dc 	.word	0x200010dc
 8004f98:	200010b8 	.word	0x200010b8
 8004f9c:	2000106c 	.word	0x2000106c
 8004fa0:	20001070 	.word	0x20001070
 8004fa4:	200010cc 	.word	0x200010cc
 8004fa8:	200010d4 	.word	0x200010d4
 8004fac:	200010bc 	.word	0x200010bc
 8004fb0:	20000be4 	.word	0x20000be4
 8004fb4:	20000be0 	.word	0x20000be0
 8004fb8:	200010c8 	.word	0x200010c8
 8004fbc:	200010c4 	.word	0x200010c4

08004fc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fc6:	4b28      	ldr	r3, [pc, #160]	; (8005068 <vTaskSwitchContext+0xa8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004fce:	4b27      	ldr	r3, [pc, #156]	; (800506c <vTaskSwitchContext+0xac>)
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8004fd4:	e041      	b.n	800505a <vTaskSwitchContext+0x9a>
        xYieldPending = pdFALSE;
 8004fd6:	4b25      	ldr	r3, [pc, #148]	; (800506c <vTaskSwitchContext+0xac>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fdc:	4b24      	ldr	r3, [pc, #144]	; (8005070 <vTaskSwitchContext+0xb0>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	e010      	b.n	8005006 <vTaskSwitchContext+0x46>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10a      	bne.n	8005000 <vTaskSwitchContext+0x40>
        __asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	607b      	str	r3, [r7, #4]
    }
 8004ffc:	bf00      	nop
 8004ffe:	e7fe      	b.n	8004ffe <vTaskSwitchContext+0x3e>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3b01      	subs	r3, #1
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	491b      	ldr	r1, [pc, #108]	; (8005074 <vTaskSwitchContext+0xb4>)
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4613      	mov	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	440b      	add	r3, r1
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0e4      	beq.n	8004fe4 <vTaskSwitchContext+0x24>
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4a13      	ldr	r2, [pc, #76]	; (8005074 <vTaskSwitchContext+0xb4>)
 8005026:	4413      	add	r3, r2
 8005028:	60bb      	str	r3, [r7, #8]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	605a      	str	r2, [r3, #4]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	3308      	adds	r3, #8
 800503c:	429a      	cmp	r2, r3
 800503e:	d104      	bne.n	800504a <vTaskSwitchContext+0x8a>
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	605a      	str	r2, [r3, #4]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	4a09      	ldr	r2, [pc, #36]	; (8005078 <vTaskSwitchContext+0xb8>)
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	4a06      	ldr	r2, [pc, #24]	; (8005070 <vTaskSwitchContext+0xb0>)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6013      	str	r3, [r2, #0]
}
 800505a:	bf00      	nop
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	200010dc 	.word	0x200010dc
 800506c:	200010c8 	.word	0x200010c8
 8005070:	200010bc 	.word	0x200010bc
 8005074:	20000be4 	.word	0x20000be4
 8005078:	20000be0 	.word	0x20000be0

0800507c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10a      	bne.n	80050a2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	60fb      	str	r3, [r7, #12]
    }
 800509e:	bf00      	nop
 80050a0:	e7fe      	b.n	80050a0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050a2:	4b07      	ldr	r3, [pc, #28]	; (80050c0 <vTaskPlaceOnEventList+0x44>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3318      	adds	r3, #24
 80050a8:	4619      	mov	r1, r3
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fe ff81 	bl	8003fb2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050b0:	2101      	movs	r1, #1
 80050b2:	6838      	ldr	r0, [r7, #0]
 80050b4:	f000 fa9c 	bl	80055f0 <prvAddCurrentTaskToDelayedList>
}
 80050b8:	bf00      	nop
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	20000be0 	.word	0x20000be0

080050c4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10a      	bne.n	80050ec <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	613b      	str	r3, [r7, #16]
    }
 80050e8:	bf00      	nop
 80050ea:	e7fe      	b.n	80050ea <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	4b16      	ldr	r3, [pc, #88]	; (800514c <vTaskPlaceOnEventListRestricted+0x88>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	61da      	str	r2, [r3, #28]
 80050fa:	4b14      	ldr	r3, [pc, #80]	; (800514c <vTaskPlaceOnEventListRestricted+0x88>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	6892      	ldr	r2, [r2, #8]
 8005102:	621a      	str	r2, [r3, #32]
 8005104:	4b11      	ldr	r3, [pc, #68]	; (800514c <vTaskPlaceOnEventListRestricted+0x88>)
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	3218      	adds	r2, #24
 800510e:	605a      	str	r2, [r3, #4]
 8005110:	4b0e      	ldr	r3, [pc, #56]	; (800514c <vTaskPlaceOnEventListRestricted+0x88>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f103 0218 	add.w	r2, r3, #24
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	609a      	str	r2, [r3, #8]
 800511c:	4b0b      	ldr	r3, [pc, #44]	; (800514c <vTaskPlaceOnEventListRestricted+0x88>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	629a      	str	r2, [r3, #40]	; 0x28
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8005134:	f04f 33ff 	mov.w	r3, #4294967295
 8005138:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800513a:	6879      	ldr	r1, [r7, #4]
 800513c:	68b8      	ldr	r0, [r7, #8]
 800513e:	f000 fa57 	bl	80055f0 <prvAddCurrentTaskToDelayedList>
    }
 8005142:	bf00      	nop
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	20000be0 	.word	0x20000be0

08005150 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005150:	b480      	push	{r7}
 8005152:	b08b      	sub	sp, #44	; 0x2c
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10a      	bne.n	800517c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	60fb      	str	r3, [r7, #12]
    }
 8005178:	bf00      	nop
 800517a:	e7fe      	b.n	800517a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	61fb      	str	r3, [r7, #28]
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	6a3a      	ldr	r2, [r7, #32]
 8005188:	6a12      	ldr	r2, [r2, #32]
 800518a:	609a      	str	r2, [r3, #8]
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	6a3a      	ldr	r2, [r7, #32]
 8005192:	69d2      	ldr	r2, [r2, #28]
 8005194:	605a      	str	r2, [r3, #4]
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	3318      	adds	r3, #24
 800519e:	429a      	cmp	r2, r3
 80051a0:	d103      	bne.n	80051aa <xTaskRemoveFromEventList+0x5a>
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	6a1a      	ldr	r2, [r3, #32]
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	605a      	str	r2, [r3, #4]
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	2200      	movs	r2, #0
 80051ae:	629a      	str	r2, [r3, #40]	; 0x28
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	1e5a      	subs	r2, r3, #1
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051ba:	4b4b      	ldr	r3, [pc, #300]	; (80052e8 <xTaskRemoveFromEventList+0x198>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d15f      	bne.n	8005282 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	6a3a      	ldr	r2, [r7, #32]
 80051ce:	68d2      	ldr	r2, [r2, #12]
 80051d0:	609a      	str	r2, [r3, #8]
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	6a3a      	ldr	r2, [r7, #32]
 80051d8:	6892      	ldr	r2, [r2, #8]
 80051da:	605a      	str	r2, [r3, #4]
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	3304      	adds	r3, #4
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d103      	bne.n	80051f0 <xTaskRemoveFromEventList+0xa0>
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	605a      	str	r2, [r3, #4]
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	2200      	movs	r2, #0
 80051f4:	615a      	str	r2, [r3, #20]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	1e5a      	subs	r2, r3, #1
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005204:	4b39      	ldr	r3, [pc, #228]	; (80052ec <xTaskRemoveFromEventList+0x19c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	429a      	cmp	r2, r3
 800520a:	d903      	bls.n	8005214 <xTaskRemoveFromEventList+0xc4>
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	4a36      	ldr	r2, [pc, #216]	; (80052ec <xTaskRemoveFromEventList+0x19c>)
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005218:	4935      	ldr	r1, [pc, #212]	; (80052f0 <xTaskRemoveFromEventList+0x1a0>)
 800521a:	4613      	mov	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	440b      	add	r3, r1
 8005224:	3304      	adds	r3, #4
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	613b      	str	r3, [r7, #16]
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	609a      	str	r2, [r3, #8]
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	60da      	str	r2, [r3, #12]
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	6a3a      	ldr	r2, [r7, #32]
 800523e:	3204      	adds	r2, #4
 8005240:	605a      	str	r2, [r3, #4]
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	1d1a      	adds	r2, r3, #4
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	609a      	str	r2, [r3, #8]
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4a26      	ldr	r2, [pc, #152]	; (80052f0 <xTaskRemoveFromEventList+0x1a0>)
 8005258:	441a      	add	r2, r3
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	615a      	str	r2, [r3, #20]
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005262:	4923      	ldr	r1, [pc, #140]	; (80052f0 <xTaskRemoveFromEventList+0x1a0>)
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	1c59      	adds	r1, r3, #1
 8005272:	481f      	ldr	r0, [pc, #124]	; (80052f0 <xTaskRemoveFromEventList+0x1a0>)
 8005274:	4613      	mov	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4403      	add	r3, r0
 800527e:	6019      	str	r1, [r3, #0]
 8005280:	e01b      	b.n	80052ba <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005282:	4b1c      	ldr	r3, [pc, #112]	; (80052f4 <xTaskRemoveFromEventList+0x1a4>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	61bb      	str	r3, [r7, #24]
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	61da      	str	r2, [r3, #28]
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	621a      	str	r2, [r3, #32]
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	6a3a      	ldr	r2, [r7, #32]
 800529c:	3218      	adds	r2, #24
 800529e:	605a      	str	r2, [r3, #4]
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	f103 0218 	add.w	r2, r3, #24
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	609a      	str	r2, [r3, #8]
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	4a11      	ldr	r2, [pc, #68]	; (80052f4 <xTaskRemoveFromEventList+0x1a4>)
 80052ae:	629a      	str	r2, [r3, #40]	; 0x28
 80052b0:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <xTaskRemoveFromEventList+0x1a4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3301      	adds	r3, #1
 80052b6:	4a0f      	ldr	r2, [pc, #60]	; (80052f4 <xTaskRemoveFromEventList+0x1a4>)
 80052b8:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052be:	4b0e      	ldr	r3, [pc, #56]	; (80052f8 <xTaskRemoveFromEventList+0x1a8>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d905      	bls.n	80052d4 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80052c8:	2301      	movs	r3, #1
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80052cc:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <xTaskRemoveFromEventList+0x1ac>)
 80052ce:	2201      	movs	r2, #1
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	e001      	b.n	80052d8 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 80052d4:	2300      	movs	r3, #0
 80052d6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052da:	4618      	mov	r0, r3
 80052dc:	372c      	adds	r7, #44	; 0x2c
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	200010dc 	.word	0x200010dc
 80052ec:	200010bc 	.word	0x200010bc
 80052f0:	20000be4 	.word	0x20000be4
 80052f4:	20001074 	.word	0x20001074
 80052f8:	20000be0 	.word	0x20000be0
 80052fc:	200010c8 	.word	0x200010c8

08005300 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005308:	4b06      	ldr	r3, [pc, #24]	; (8005324 <vTaskInternalSetTimeOutState+0x24>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005310:	4b05      	ldr	r3, [pc, #20]	; (8005328 <vTaskInternalSetTimeOutState+0x28>)
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	605a      	str	r2, [r3, #4]
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	200010cc 	.word	0x200010cc
 8005328:	200010b8 	.word	0x200010b8

0800532c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10a      	bne.n	8005352 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	613b      	str	r3, [r7, #16]
    }
 800534e:	bf00      	nop
 8005350:	e7fe      	b.n	8005350 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	60fb      	str	r3, [r7, #12]
    }
 800536a:	bf00      	nop
 800536c:	e7fe      	b.n	800536c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800536e:	f000 fd9b 	bl	8005ea8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005372:	4b1f      	ldr	r3, [pc, #124]	; (80053f0 <xTaskCheckForTimeOut+0xc4>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538a:	d102      	bne.n	8005392 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800538c:	2300      	movs	r3, #0
 800538e:	61fb      	str	r3, [r7, #28]
 8005390:	e026      	b.n	80053e0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	4b17      	ldr	r3, [pc, #92]	; (80053f4 <xTaskCheckForTimeOut+0xc8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d00a      	beq.n	80053b4 <xTaskCheckForTimeOut+0x88>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d305      	bcc.n	80053b4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80053a8:	2301      	movs	r3, #1
 80053aa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	e015      	b.n	80053e0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d20b      	bcs.n	80053d6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	1ad2      	subs	r2, r2, r3
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff ff98 	bl	8005300 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80053d0:	2300      	movs	r3, #0
 80053d2:	61fb      	str	r3, [r7, #28]
 80053d4:	e004      	b.n	80053e0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80053dc:	2301      	movs	r3, #1
 80053de:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80053e0:	f000 fd92 	bl	8005f08 <vPortExitCritical>

    return xReturn;
 80053e4:	69fb      	ldr	r3, [r7, #28]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3720      	adds	r7, #32
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	200010b8 	.word	0x200010b8
 80053f4:	200010cc 	.word	0x200010cc

080053f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80053fc:	4b03      	ldr	r3, [pc, #12]	; (800540c <vTaskMissedYield+0x14>)
 80053fe:	2201      	movs	r2, #1
 8005400:	601a      	str	r2, [r3, #0]
}
 8005402:	bf00      	nop
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	200010c8 	.word	0x200010c8

08005410 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005418:	f000 f852 	bl	80054c0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800541c:	4b06      	ldr	r3, [pc, #24]	; (8005438 <prvIdleTask+0x28>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d9f9      	bls.n	8005418 <prvIdleTask+0x8>
            {
                taskYIELD();
 8005424:	4b05      	ldr	r3, [pc, #20]	; (800543c <prvIdleTask+0x2c>)
 8005426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005434:	e7f0      	b.n	8005418 <prvIdleTask+0x8>
 8005436:	bf00      	nop
 8005438:	20000be4 	.word	0x20000be4
 800543c:	e000ed04 	.word	0xe000ed04

08005440 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005446:	2300      	movs	r3, #0
 8005448:	607b      	str	r3, [r7, #4]
 800544a:	e00c      	b.n	8005466 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	4613      	mov	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4a12      	ldr	r2, [pc, #72]	; (80054a0 <prvInitialiseTaskLists+0x60>)
 8005458:	4413      	add	r3, r2
 800545a:	4618      	mov	r0, r3
 800545c:	f7fe fd7c 	bl	8003f58 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3301      	adds	r3, #1
 8005464:	607b      	str	r3, [r7, #4]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b37      	cmp	r3, #55	; 0x37
 800546a:	d9ef      	bls.n	800544c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800546c:	480d      	ldr	r0, [pc, #52]	; (80054a4 <prvInitialiseTaskLists+0x64>)
 800546e:	f7fe fd73 	bl	8003f58 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005472:	480d      	ldr	r0, [pc, #52]	; (80054a8 <prvInitialiseTaskLists+0x68>)
 8005474:	f7fe fd70 	bl	8003f58 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005478:	480c      	ldr	r0, [pc, #48]	; (80054ac <prvInitialiseTaskLists+0x6c>)
 800547a:	f7fe fd6d 	bl	8003f58 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800547e:	480c      	ldr	r0, [pc, #48]	; (80054b0 <prvInitialiseTaskLists+0x70>)
 8005480:	f7fe fd6a 	bl	8003f58 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005484:	480b      	ldr	r0, [pc, #44]	; (80054b4 <prvInitialiseTaskLists+0x74>)
 8005486:	f7fe fd67 	bl	8003f58 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800548a:	4b0b      	ldr	r3, [pc, #44]	; (80054b8 <prvInitialiseTaskLists+0x78>)
 800548c:	4a05      	ldr	r2, [pc, #20]	; (80054a4 <prvInitialiseTaskLists+0x64>)
 800548e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005490:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <prvInitialiseTaskLists+0x7c>)
 8005492:	4a05      	ldr	r2, [pc, #20]	; (80054a8 <prvInitialiseTaskLists+0x68>)
 8005494:	601a      	str	r2, [r3, #0]
}
 8005496:	bf00      	nop
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000be4 	.word	0x20000be4
 80054a4:	20001044 	.word	0x20001044
 80054a8:	20001058 	.word	0x20001058
 80054ac:	20001074 	.word	0x20001074
 80054b0:	20001088 	.word	0x20001088
 80054b4:	200010a0 	.word	0x200010a0
 80054b8:	2000106c 	.word	0x2000106c
 80054bc:	20001070 	.word	0x20001070

080054c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054c6:	e019      	b.n	80054fc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80054c8:	f000 fcee 	bl	8005ea8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054cc:	4b10      	ldr	r3, [pc, #64]	; (8005510 <prvCheckTasksWaitingTermination+0x50>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3304      	adds	r3, #4
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fe fda3 	bl	8004024 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80054de:	4b0d      	ldr	r3, [pc, #52]	; (8005514 <prvCheckTasksWaitingTermination+0x54>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	4a0b      	ldr	r2, [pc, #44]	; (8005514 <prvCheckTasksWaitingTermination+0x54>)
 80054e6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80054e8:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <prvCheckTasksWaitingTermination+0x58>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3b01      	subs	r3, #1
 80054ee:	4a0a      	ldr	r2, [pc, #40]	; (8005518 <prvCheckTasksWaitingTermination+0x58>)
 80054f0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80054f2:	f000 fd09 	bl	8005f08 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f810 	bl	800551c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054fc:	4b06      	ldr	r3, [pc, #24]	; (8005518 <prvCheckTasksWaitingTermination+0x58>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e1      	bne.n	80054c8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	20001088 	.word	0x20001088
 8005514:	200010b4 	.word	0x200010b4
 8005518:	2000109c 	.word	0x2000109c

0800551c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800552a:	2b00      	cmp	r3, #0
 800552c:	d108      	bne.n	8005540 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fe54 	bl	80061e0 <vPortFree>
                vPortFree( pxTCB );
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fe51 	bl	80061e0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800553e:	e018      	b.n	8005572 <prvDeleteTCB+0x56>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005546:	2b01      	cmp	r3, #1
 8005548:	d103      	bne.n	8005552 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fe48 	bl	80061e0 <vPortFree>
    }
 8005550:	e00f      	b.n	8005572 <prvDeleteTCB+0x56>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005558:	2b02      	cmp	r3, #2
 800555a:	d00a      	beq.n	8005572 <prvDeleteTCB+0x56>
        __asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	60fb      	str	r3, [r7, #12]
    }
 800556e:	bf00      	nop
 8005570:	e7fe      	b.n	8005570 <prvDeleteTCB+0x54>
    }
 8005572:	bf00      	nop
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005580:	4b0a      	ldr	r3, [pc, #40]	; (80055ac <prvResetNextTaskUnblockTime+0x30>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d104      	bne.n	8005594 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800558a:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <prvResetNextTaskUnblockTime+0x34>)
 800558c:	f04f 32ff 	mov.w	r2, #4294967295
 8005590:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005592:	e005      	b.n	80055a0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005594:	4b05      	ldr	r3, [pc, #20]	; (80055ac <prvResetNextTaskUnblockTime+0x30>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a04      	ldr	r2, [pc, #16]	; (80055b0 <prvResetNextTaskUnblockTime+0x34>)
 800559e:	6013      	str	r3, [r2, #0]
}
 80055a0:	bf00      	nop
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	2000106c 	.word	0x2000106c
 80055b0:	200010d4 	.word	0x200010d4

080055b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80055ba:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <xTaskGetSchedulerState+0x34>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d102      	bne.n	80055c8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80055c2:	2301      	movs	r3, #1
 80055c4:	607b      	str	r3, [r7, #4]
 80055c6:	e008      	b.n	80055da <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055c8:	4b08      	ldr	r3, [pc, #32]	; (80055ec <xTaskGetSchedulerState+0x38>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d102      	bne.n	80055d6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80055d0:	2302      	movs	r3, #2
 80055d2:	607b      	str	r3, [r7, #4]
 80055d4:	e001      	b.n	80055da <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80055d6:	2300      	movs	r3, #0
 80055d8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80055da:	687b      	ldr	r3, [r7, #4]
    }
 80055dc:	4618      	mov	r0, r3
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	200010c0 	.word	0x200010c0
 80055ec:	200010dc 	.word	0x200010dc

080055f0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80055fa:	4b2e      	ldr	r3, [pc, #184]	; (80056b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005600:	4b2d      	ldr	r3, [pc, #180]	; (80056b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3304      	adds	r3, #4
 8005606:	4618      	mov	r0, r3
 8005608:	f7fe fd0c 	bl	8004024 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005612:	d124      	bne.n	800565e <prvAddCurrentTaskToDelayedList+0x6e>
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d021      	beq.n	800565e <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800561a:	4b28      	ldr	r3, [pc, #160]	; (80056bc <prvAddCurrentTaskToDelayedList+0xcc>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	613b      	str	r3, [r7, #16]
 8005620:	4b25      	ldr	r3, [pc, #148]	; (80056b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	609a      	str	r2, [r3, #8]
 8005628:	4b23      	ldr	r3, [pc, #140]	; (80056b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	6892      	ldr	r2, [r2, #8]
 8005630:	60da      	str	r2, [r3, #12]
 8005632:	4b21      	ldr	r3, [pc, #132]	; (80056b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	3204      	adds	r2, #4
 800563c:	605a      	str	r2, [r3, #4]
 800563e:	4b1e      	ldr	r3, [pc, #120]	; (80056b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	1d1a      	adds	r2, r3, #4
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	609a      	str	r2, [r3, #8]
 8005648:	4b1b      	ldr	r3, [pc, #108]	; (80056b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a1b      	ldr	r2, [pc, #108]	; (80056bc <prvAddCurrentTaskToDelayedList+0xcc>)
 800564e:	615a      	str	r2, [r3, #20]
 8005650:	4b1a      	ldr	r3, [pc, #104]	; (80056bc <prvAddCurrentTaskToDelayedList+0xcc>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3301      	adds	r3, #1
 8005656:	4a19      	ldr	r2, [pc, #100]	; (80056bc <prvAddCurrentTaskToDelayedList+0xcc>)
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800565c:	e026      	b.n	80056ac <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4413      	add	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005666:	4b14      	ldr	r3, [pc, #80]	; (80056b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	429a      	cmp	r2, r3
 8005674:	d209      	bcs.n	800568a <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005676:	4b12      	ldr	r3, [pc, #72]	; (80056c0 <prvAddCurrentTaskToDelayedList+0xd0>)
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	4b0f      	ldr	r3, [pc, #60]	; (80056b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3304      	adds	r3, #4
 8005680:	4619      	mov	r1, r3
 8005682:	4610      	mov	r0, r2
 8005684:	f7fe fc95 	bl	8003fb2 <vListInsert>
}
 8005688:	e010      	b.n	80056ac <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800568a:	4b0e      	ldr	r3, [pc, #56]	; (80056c4 <prvAddCurrentTaskToDelayedList+0xd4>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b0a      	ldr	r3, [pc, #40]	; (80056b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3304      	adds	r3, #4
 8005694:	4619      	mov	r1, r3
 8005696:	4610      	mov	r0, r2
 8005698:	f7fe fc8b 	bl	8003fb2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800569c:	4b0a      	ldr	r3, [pc, #40]	; (80056c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d202      	bcs.n	80056ac <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 80056a6:	4a08      	ldr	r2, [pc, #32]	; (80056c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6013      	str	r3, [r2, #0]
}
 80056ac:	bf00      	nop
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	200010b8 	.word	0x200010b8
 80056b8:	20000be0 	.word	0x20000be0
 80056bc:	200010a0 	.word	0x200010a0
 80056c0:	20001070 	.word	0x20001070
 80056c4:	2000106c 	.word	0x2000106c
 80056c8:	200010d4 	.word	0x200010d4

080056cc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08a      	sub	sp, #40	; 0x28
 80056d0:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80056d6:	f000 fa79 	bl	8005bcc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80056da:	4b1c      	ldr	r3, [pc, #112]	; (800574c <xTimerCreateTimerTask+0x80>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d021      	beq.n	8005726 <xTimerCreateTimerTask+0x5a>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60bb      	str	r3, [r7, #8]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80056ea:	1d3a      	adds	r2, r7, #4
 80056ec:	f107 0108 	add.w	r1, r7, #8
 80056f0:	f107 030c 	add.w	r3, r7, #12
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fe fc15 	bl	8003f24 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	9202      	str	r2, [sp, #8]
 8005702:	9301      	str	r3, [sp, #4]
 8005704:	2302      	movs	r3, #2
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	2300      	movs	r3, #0
 800570a:	460a      	mov	r2, r1
 800570c:	4910      	ldr	r1, [pc, #64]	; (8005750 <xTimerCreateTimerTask+0x84>)
 800570e:	4811      	ldr	r0, [pc, #68]	; (8005754 <xTimerCreateTimerTask+0x88>)
 8005710:	f7fe ffb4 	bl	800467c <xTaskCreateStatic>
 8005714:	4603      	mov	r3, r0
 8005716:	4a10      	ldr	r2, [pc, #64]	; (8005758 <xTimerCreateTimerTask+0x8c>)
 8005718:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800571a:	4b0f      	ldr	r3, [pc, #60]	; (8005758 <xTimerCreateTimerTask+0x8c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <xTimerCreateTimerTask+0x5a>
                {
                    xReturn = pdPASS;
 8005722:	2301      	movs	r3, #1
 8005724:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10a      	bne.n	8005742 <xTimerCreateTimerTask+0x76>
        __asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	613b      	str	r3, [r7, #16]
    }
 800573e:	bf00      	nop
 8005740:	e7fe      	b.n	8005740 <xTimerCreateTimerTask+0x74>
        return xReturn;
 8005742:	697b      	ldr	r3, [r7, #20]
    }
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	20001110 	.word	0x20001110
 8005750:	0800d3c4 	.word	0x0800d3c4
 8005754:	08005801 	.word	0x08005801
 8005758:	20001114 	.word	0x20001114

0800575c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005768:	e008      	b.n	800577c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	4413      	add	r3, r2
 8005772:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	699a      	ldr	r2, [r3, #24]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	18d1      	adds	r1, r2, r3
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f8dd 	bl	8005948 <prvInsertTimerInActiveList>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1ea      	bne.n	800576a <prvReloadTimer+0xe>
        }
    }
 8005794:	bf00      	nop
 8005796:	bf00      	nop
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
	...

080057a0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057aa:	4b14      	ldr	r3, [pc, #80]	; (80057fc <prvProcessExpiredTimer+0x5c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3304      	adds	r3, #4
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7fe fc33 	bl	8004024 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f7ff ffc3 	bl	800575c <prvReloadTimer>
 80057d6:	e008      	b.n	80057ea <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057de:	f023 0301 	bic.w	r3, r3, #1
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	4798      	blx	r3
    }
 80057f2:	bf00      	nop
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20001108 	.word	0x20001108

08005800 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005808:	f107 0308 	add.w	r3, r7, #8
 800580c:	4618      	mov	r0, r3
 800580e:	f000 f857 	bl	80058c0 <prvGetNextExpireTime>
 8005812:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4619      	mov	r1, r3
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f803 	bl	8005824 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800581e:	f000 f8d5 	bl	80059cc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005822:	e7f1      	b.n	8005808 <prvTimerTask+0x8>

08005824 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800582e:	f7ff f995 	bl	8004b5c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005832:	f107 0308 	add.w	r3, r7, #8
 8005836:	4618      	mov	r0, r3
 8005838:	f000 f866 	bl	8005908 <prvSampleTimeNow>
 800583c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d130      	bne.n	80058a6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10a      	bne.n	8005860 <prvProcessTimerOrBlockTask+0x3c>
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	429a      	cmp	r2, r3
 8005850:	d806      	bhi.n	8005860 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005852:	f7ff f991 	bl	8004b78 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005856:	68f9      	ldr	r1, [r7, #12]
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff ffa1 	bl	80057a0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800585e:	e024      	b.n	80058aa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d008      	beq.n	8005878 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005866:	4b13      	ldr	r3, [pc, #76]	; (80058b4 <prvProcessTimerOrBlockTask+0x90>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <prvProcessTimerOrBlockTask+0x50>
 8005870:	2301      	movs	r3, #1
 8005872:	e000      	b.n	8005876 <prvProcessTimerOrBlockTask+0x52>
 8005874:	2300      	movs	r3, #0
 8005876:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005878:	4b0f      	ldr	r3, [pc, #60]	; (80058b8 <prvProcessTimerOrBlockTask+0x94>)
 800587a:	6818      	ldr	r0, [r3, #0]
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	4619      	mov	r1, r3
 8005886:	f7fe fec5 	bl	8004614 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800588a:	f7ff f975 	bl	8004b78 <xTaskResumeAll>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005894:	4b09      	ldr	r3, [pc, #36]	; (80058bc <prvProcessTimerOrBlockTask+0x98>)
 8005896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	f3bf 8f6f 	isb	sy
    }
 80058a4:	e001      	b.n	80058aa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80058a6:	f7ff f967 	bl	8004b78 <xTaskResumeAll>
    }
 80058aa:	bf00      	nop
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	2000110c 	.word	0x2000110c
 80058b8:	20001110 	.word	0x20001110
 80058bc:	e000ed04 	.word	0xe000ed04

080058c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80058c8:	4b0e      	ldr	r3, [pc, #56]	; (8005904 <prvGetNextExpireTime+0x44>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <prvGetNextExpireTime+0x16>
 80058d2:	2201      	movs	r2, #1
 80058d4:	e000      	b.n	80058d8 <prvGetNextExpireTime+0x18>
 80058d6:	2200      	movs	r2, #0
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d105      	bne.n	80058f0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058e4:	4b07      	ldr	r3, [pc, #28]	; (8005904 <prvGetNextExpireTime+0x44>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	e001      	b.n	80058f4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80058f4:	68fb      	ldr	r3, [r7, #12]
    }
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	20001108 	.word	0x20001108

08005908 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005910:	f7ff fa2e 	bl	8004d70 <xTaskGetTickCount>
 8005914:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005916:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <prvSampleTimeNow+0x3c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	429a      	cmp	r2, r3
 800591e:	d205      	bcs.n	800592c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005920:	f000 f92e 	bl	8005b80 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	e002      	b.n	8005932 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005932:	4a04      	ldr	r2, [pc, #16]	; (8005944 <prvSampleTimeNow+0x3c>)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005938:	68fb      	ldr	r3, [r7, #12]
    }
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20001118 	.word	0x20001118

08005948 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	429a      	cmp	r2, r3
 800596c:	d812      	bhi.n	8005994 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	1ad2      	subs	r2, r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	429a      	cmp	r2, r3
 800597a:	d302      	bcc.n	8005982 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800597c:	2301      	movs	r3, #1
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	e01b      	b.n	80059ba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005982:	4b10      	ldr	r3, [pc, #64]	; (80059c4 <prvInsertTimerInActiveList+0x7c>)
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3304      	adds	r3, #4
 800598a:	4619      	mov	r1, r3
 800598c:	4610      	mov	r0, r2
 800598e:	f7fe fb10 	bl	8003fb2 <vListInsert>
 8005992:	e012      	b.n	80059ba <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	429a      	cmp	r2, r3
 800599a:	d206      	bcs.n	80059aa <prvInsertTimerInActiveList+0x62>
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d302      	bcc.n	80059aa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80059a4:	2301      	movs	r3, #1
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	e007      	b.n	80059ba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059aa:	4b07      	ldr	r3, [pc, #28]	; (80059c8 <prvInsertTimerInActiveList+0x80>)
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	3304      	adds	r3, #4
 80059b2:	4619      	mov	r1, r3
 80059b4:	4610      	mov	r0, r2
 80059b6:	f7fe fafc 	bl	8003fb2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80059ba:	697b      	ldr	r3, [r7, #20]
    }
 80059bc:	4618      	mov	r0, r3
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	2000110c 	.word	0x2000110c
 80059c8:	20001108 	.word	0x20001108

080059cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08a      	sub	sp, #40	; 0x28
 80059d0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059d2:	e0c2      	b.n	8005b5a <prvProcessReceivedCommands+0x18e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	da18      	bge.n	8005a0c <prvProcessReceivedCommands+0x40>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80059da:	1d3b      	adds	r3, r7, #4
 80059dc:	3304      	adds	r3, #4
 80059de:	627b      	str	r3, [r7, #36]	; 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10a      	bne.n	80059fc <prvProcessReceivedCommands+0x30>
        __asm volatile
 80059e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	61bb      	str	r3, [r7, #24]
    }
 80059f8:	bf00      	nop
 80059fa:	e7fe      	b.n	80059fa <prvProcessReceivedCommands+0x2e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a02:	6850      	ldr	r0, [r2, #4]
 8005a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a06:	6892      	ldr	r2, [r2, #8]
 8005a08:	4611      	mov	r1, r2
 8005a0a:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f2c0 80a2 	blt.w	8005b58 <prvProcessReceivedCommands+0x18c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d004      	beq.n	8005a2a <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	3304      	adds	r3, #4
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fe fafd 	bl	8004024 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a2a:	463b      	mov	r3, r7
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff ff6b 	bl	8005908 <prvSampleTimeNow>
 8005a32:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	f200 808e 	bhi.w	8005b5a <prvProcessReceivedCommands+0x18e>
 8005a3e:	a201      	add	r2, pc, #4	; (adr r2, 8005a44 <prvProcessReceivedCommands+0x78>)
 8005a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a44:	08005a69 	.word	0x08005a69
 8005a48:	08005a69 	.word	0x08005a69
 8005a4c:	08005ad1 	.word	0x08005ad1
 8005a50:	08005ae5 	.word	0x08005ae5
 8005a54:	08005b2f 	.word	0x08005b2f
 8005a58:	08005a69 	.word	0x08005a69
 8005a5c:	08005a69 	.word	0x08005a69
 8005a60:	08005ad1 	.word	0x08005ad1
 8005a64:	08005ae5 	.word	0x08005ae5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a6e:	f043 0301 	orr.w	r3, r3, #1
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	18d1      	adds	r1, r2, r3
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	6a38      	ldr	r0, [r7, #32]
 8005a88:	f7ff ff5e 	bl	8005948 <prvInsertTimerInActiveList>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d063      	beq.n	8005b5a <prvProcessReceivedCommands+0x18e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d009      	beq.n	8005ab4 <prvProcessReceivedCommands+0xe8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	69fa      	ldr	r2, [r7, #28]
 8005aaa:	4619      	mov	r1, r3
 8005aac:	6a38      	ldr	r0, [r7, #32]
 8005aae:	f7ff fe55 	bl	800575c <prvReloadTimer>
 8005ab2:	e008      	b.n	8005ac6 <prvProcessReceivedCommands+0xfa>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005aba:	f023 0301 	bic.w	r3, r3, #1
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	6a38      	ldr	r0, [r7, #32]
 8005acc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005ace:	e044      	b.n	8005b5a <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ad6:	f023 0301 	bic.w	r3, r3, #1
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005ae2:	e03a      	b.n	8005b5a <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005aea:	f043 0301 	orr.w	r3, r3, #1
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <prvProcessReceivedCommands+0x14e>
        __asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	617b      	str	r3, [r7, #20]
    }
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <prvProcessReceivedCommands+0x14c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	699a      	ldr	r2, [r3, #24]
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	18d1      	adds	r1, r2, r3
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	69fa      	ldr	r2, [r7, #28]
 8005b26:	6a38      	ldr	r0, [r7, #32]
 8005b28:	f7ff ff0e 	bl	8005948 <prvInsertTimerInActiveList>
                        break;
 8005b2c:	e015      	b.n	8005b5a <prvProcessReceivedCommands+0x18e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d103      	bne.n	8005b44 <prvProcessReceivedCommands+0x178>
                            {
                                vPortFree( pxTimer );
 8005b3c:	6a38      	ldr	r0, [r7, #32]
 8005b3e:	f000 fb4f 	bl	80061e0 <vPortFree>
 8005b42:	e00a      	b.n	8005b5a <prvProcessReceivedCommands+0x18e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b4a:	f023 0301 	bic.w	r3, r3, #1
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005b56:	e000      	b.n	8005b5a <prvProcessReceivedCommands+0x18e>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005b58:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b5a:	4b08      	ldr	r3, [pc, #32]	; (8005b7c <prvProcessReceivedCommands+0x1b0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	1d39      	adds	r1, r7, #4
 8005b60:	2200      	movs	r2, #0
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe fb9a 	bl	800429c <xQueueReceive>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f47f af32 	bne.w	80059d4 <prvProcessReceivedCommands+0x8>
        }
    }
 8005b70:	bf00      	nop
 8005b72:	bf00      	nop
 8005b74:	3728      	adds	r7, #40	; 0x28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20001110 	.word	0x20001110

08005b80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b86:	e009      	b.n	8005b9c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b88:	4b0e      	ldr	r3, [pc, #56]	; (8005bc4 <prvSwitchTimerLists+0x44>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8005b92:	f04f 31ff 	mov.w	r1, #4294967295
 8005b96:	6838      	ldr	r0, [r7, #0]
 8005b98:	f7ff fe02 	bl	80057a0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b9c:	4b09      	ldr	r3, [pc, #36]	; (8005bc4 <prvSwitchTimerLists+0x44>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f0      	bne.n	8005b88 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005ba6:	4b07      	ldr	r3, [pc, #28]	; (8005bc4 <prvSwitchTimerLists+0x44>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005bac:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <prvSwitchTimerLists+0x48>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a04      	ldr	r2, [pc, #16]	; (8005bc4 <prvSwitchTimerLists+0x44>)
 8005bb2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005bb4:	4a04      	ldr	r2, [pc, #16]	; (8005bc8 <prvSwitchTimerLists+0x48>)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6013      	str	r3, [r2, #0]
    }
 8005bba:	bf00      	nop
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20001108 	.word	0x20001108
 8005bc8:	2000110c 	.word	0x2000110c

08005bcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005bd2:	f000 f969 	bl	8005ea8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005bd6:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <prvCheckForValidListAndQueue+0x60>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d120      	bne.n	8005c20 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8005bde:	4814      	ldr	r0, [pc, #80]	; (8005c30 <prvCheckForValidListAndQueue+0x64>)
 8005be0:	f7fe f9ba 	bl	8003f58 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005be4:	4813      	ldr	r0, [pc, #76]	; (8005c34 <prvCheckForValidListAndQueue+0x68>)
 8005be6:	f7fe f9b7 	bl	8003f58 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005bea:	4b13      	ldr	r3, [pc, #76]	; (8005c38 <prvCheckForValidListAndQueue+0x6c>)
 8005bec:	4a10      	ldr	r2, [pc, #64]	; (8005c30 <prvCheckForValidListAndQueue+0x64>)
 8005bee:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005bf0:	4b12      	ldr	r3, [pc, #72]	; (8005c3c <prvCheckForValidListAndQueue+0x70>)
 8005bf2:	4a10      	ldr	r2, [pc, #64]	; (8005c34 <prvCheckForValidListAndQueue+0x68>)
 8005bf4:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	4b11      	ldr	r3, [pc, #68]	; (8005c40 <prvCheckForValidListAndQueue+0x74>)
 8005bfc:	4a11      	ldr	r2, [pc, #68]	; (8005c44 <prvCheckForValidListAndQueue+0x78>)
 8005bfe:	2110      	movs	r1, #16
 8005c00:	200a      	movs	r0, #10
 8005c02:	f7fe fac9 	bl	8004198 <xQueueGenericCreateStatic>
 8005c06:	4603      	mov	r3, r0
 8005c08:	4a08      	ldr	r2, [pc, #32]	; (8005c2c <prvCheckForValidListAndQueue+0x60>)
 8005c0a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8005c0c:	4b07      	ldr	r3, [pc, #28]	; (8005c2c <prvCheckForValidListAndQueue+0x60>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d005      	beq.n	8005c20 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005c14:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <prvCheckForValidListAndQueue+0x60>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	490b      	ldr	r1, [pc, #44]	; (8005c48 <prvCheckForValidListAndQueue+0x7c>)
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fe fcac 	bl	8004578 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005c20:	f000 f972 	bl	8005f08 <vPortExitCritical>
    }
 8005c24:	bf00      	nop
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20001110 	.word	0x20001110
 8005c30:	200010e0 	.word	0x200010e0
 8005c34:	200010f4 	.word	0x200010f4
 8005c38:	20001108 	.word	0x20001108
 8005c3c:	2000110c 	.word	0x2000110c
 8005c40:	200011bc 	.word	0x200011bc
 8005c44:	2000111c 	.word	0x2000111c
 8005c48:	0800d3cc 	.word	0x0800d3cc

08005c4c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3b04      	subs	r3, #4
 8005c5c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c64:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3b04      	subs	r3, #4
 8005c6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f023 0201 	bic.w	r2, r3, #1
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3b04      	subs	r3, #4
 8005c7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005c7c:	4a0c      	ldr	r2, [pc, #48]	; (8005cb0 <pxPortInitialiseStack+0x64>)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3b14      	subs	r3, #20
 8005c86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	3b04      	subs	r3, #4
 8005c92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f06f 0202 	mvn.w	r2, #2
 8005c9a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	3b20      	subs	r3, #32
 8005ca0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	08005cb5 	.word	0x08005cb5

08005cb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005cbe:	4b12      	ldr	r3, [pc, #72]	; (8005d08 <prvTaskExitError+0x54>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc6:	d00a      	beq.n	8005cde <prvTaskExitError+0x2a>
        __asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	60fb      	str	r3, [r7, #12]
    }
 8005cda:	bf00      	nop
 8005cdc:	e7fe      	b.n	8005cdc <prvTaskExitError+0x28>
        __asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	60bb      	str	r3, [r7, #8]
    }
 8005cf0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005cf2:	bf00      	nop
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0fc      	beq.n	8005cf4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005cfa:	bf00      	nop
 8005cfc:	bf00      	nop
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	20000034 	.word	0x20000034
 8005d0c:	00000000 	.word	0x00000000

08005d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005d10:	4b07      	ldr	r3, [pc, #28]	; (8005d30 <pxCurrentTCBConst2>)
 8005d12:	6819      	ldr	r1, [r3, #0]
 8005d14:	6808      	ldr	r0, [r1, #0]
 8005d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d1a:	f380 8809 	msr	PSP, r0
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f04f 0000 	mov.w	r0, #0
 8005d26:	f380 8811 	msr	BASEPRI, r0
 8005d2a:	4770      	bx	lr
 8005d2c:	f3af 8000 	nop.w

08005d30 <pxCurrentTCBConst2>:
 8005d30:	20000be0 	.word	0x20000be0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop

08005d38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005d38:	4808      	ldr	r0, [pc, #32]	; (8005d5c <prvPortStartFirstTask+0x24>)
 8005d3a:	6800      	ldr	r0, [r0, #0]
 8005d3c:	6800      	ldr	r0, [r0, #0]
 8005d3e:	f380 8808 	msr	MSP, r0
 8005d42:	f04f 0000 	mov.w	r0, #0
 8005d46:	f380 8814 	msr	CONTROL, r0
 8005d4a:	b662      	cpsie	i
 8005d4c:	b661      	cpsie	f
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	df00      	svc	0
 8005d58:	bf00      	nop
 8005d5a:	0000      	.short	0x0000
 8005d5c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005d60:	bf00      	nop
 8005d62:	bf00      	nop

08005d64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d6a:	4b46      	ldr	r3, [pc, #280]	; (8005e84 <xPortStartScheduler+0x120>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a46      	ldr	r2, [pc, #280]	; (8005e88 <xPortStartScheduler+0x124>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d10a      	bne.n	8005d8a <xPortStartScheduler+0x26>
        __asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	613b      	str	r3, [r7, #16]
    }
 8005d86:	bf00      	nop
 8005d88:	e7fe      	b.n	8005d88 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d8a:	4b3e      	ldr	r3, [pc, #248]	; (8005e84 <xPortStartScheduler+0x120>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a3f      	ldr	r2, [pc, #252]	; (8005e8c <xPortStartScheduler+0x128>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d10a      	bne.n	8005daa <xPortStartScheduler+0x46>
        __asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	60fb      	str	r3, [r7, #12]
    }
 8005da6:	bf00      	nop
 8005da8:	e7fe      	b.n	8005da8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005daa:	4b39      	ldr	r3, [pc, #228]	; (8005e90 <xPortStartScheduler+0x12c>)
 8005dac:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	22ff      	movs	r2, #255	; 0xff
 8005dba:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	4b31      	ldr	r3, [pc, #196]	; (8005e94 <xPortStartScheduler+0x130>)
 8005dd0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005dd2:	4b31      	ldr	r3, [pc, #196]	; (8005e98 <xPortStartScheduler+0x134>)
 8005dd4:	2207      	movs	r2, #7
 8005dd6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dd8:	e009      	b.n	8005dee <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8005dda:	4b2f      	ldr	r3, [pc, #188]	; (8005e98 <xPortStartScheduler+0x134>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	4a2d      	ldr	r2, [pc, #180]	; (8005e98 <xPortStartScheduler+0x134>)
 8005de2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005de4:	78fb      	ldrb	r3, [r7, #3]
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df6:	2b80      	cmp	r3, #128	; 0x80
 8005df8:	d0ef      	beq.n	8005dda <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005dfa:	4b27      	ldr	r3, [pc, #156]	; (8005e98 <xPortStartScheduler+0x134>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f1c3 0307 	rsb	r3, r3, #7
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d00a      	beq.n	8005e1c <xPortStartScheduler+0xb8>
        __asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	60bb      	str	r3, [r7, #8]
    }
 8005e18:	bf00      	nop
 8005e1a:	e7fe      	b.n	8005e1a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e1c:	4b1e      	ldr	r3, [pc, #120]	; (8005e98 <xPortStartScheduler+0x134>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	021b      	lsls	r3, r3, #8
 8005e22:	4a1d      	ldr	r2, [pc, #116]	; (8005e98 <xPortStartScheduler+0x134>)
 8005e24:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e26:	4b1c      	ldr	r3, [pc, #112]	; (8005e98 <xPortStartScheduler+0x134>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e2e:	4a1a      	ldr	r2, [pc, #104]	; (8005e98 <xPortStartScheduler+0x134>)
 8005e30:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005e3a:	4b18      	ldr	r3, [pc, #96]	; (8005e9c <xPortStartScheduler+0x138>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a17      	ldr	r2, [pc, #92]	; (8005e9c <xPortStartScheduler+0x138>)
 8005e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e44:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005e46:	4b15      	ldr	r3, [pc, #84]	; (8005e9c <xPortStartScheduler+0x138>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a14      	ldr	r2, [pc, #80]	; (8005e9c <xPortStartScheduler+0x138>)
 8005e4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e50:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005e52:	f000 f8db 	bl	800600c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005e56:	4b12      	ldr	r3, [pc, #72]	; (8005ea0 <xPortStartScheduler+0x13c>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005e5c:	f000 f8fa 	bl	8006054 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e60:	4b10      	ldr	r3, [pc, #64]	; (8005ea4 <xPortStartScheduler+0x140>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a0f      	ldr	r2, [pc, #60]	; (8005ea4 <xPortStartScheduler+0x140>)
 8005e66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005e6a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005e6c:	f7ff ff64 	bl	8005d38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005e70:	f7ff f8a6 	bl	8004fc0 <vTaskSwitchContext>
    prvTaskExitError();
 8005e74:	f7ff ff1e 	bl	8005cb4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	e000ed00 	.word	0xe000ed00
 8005e88:	410fc271 	.word	0x410fc271
 8005e8c:	410fc270 	.word	0x410fc270
 8005e90:	e000e400 	.word	0xe000e400
 8005e94:	2000120c 	.word	0x2000120c
 8005e98:	20001210 	.word	0x20001210
 8005e9c:	e000ed20 	.word	0xe000ed20
 8005ea0:	20000034 	.word	0x20000034
 8005ea4:	e000ef34 	.word	0xe000ef34

08005ea8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
        __asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	607b      	str	r3, [r7, #4]
    }
 8005ec0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005ec2:	4b0f      	ldr	r3, [pc, #60]	; (8005f00 <vPortEnterCritical+0x58>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	4a0d      	ldr	r2, [pc, #52]	; (8005f00 <vPortEnterCritical+0x58>)
 8005eca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005ecc:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <vPortEnterCritical+0x58>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d10f      	bne.n	8005ef4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ed4:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <vPortEnterCritical+0x5c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <vPortEnterCritical+0x4c>
        __asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	603b      	str	r3, [r7, #0]
    }
 8005ef0:	bf00      	nop
 8005ef2:	e7fe      	b.n	8005ef2 <vPortEnterCritical+0x4a>
    }
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	20000034 	.word	0x20000034
 8005f04:	e000ed04 	.word	0xe000ed04

08005f08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005f0e:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <vPortExitCritical+0x50>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10a      	bne.n	8005f2c <vPortExitCritical+0x24>
        __asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	607b      	str	r3, [r7, #4]
    }
 8005f28:	bf00      	nop
 8005f2a:	e7fe      	b.n	8005f2a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005f2c:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <vPortExitCritical+0x50>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	4a09      	ldr	r2, [pc, #36]	; (8005f58 <vPortExitCritical+0x50>)
 8005f34:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005f36:	4b08      	ldr	r3, [pc, #32]	; (8005f58 <vPortExitCritical+0x50>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d105      	bne.n	8005f4a <vPortExitCritical+0x42>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005f48:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	20000034 	.word	0x20000034
 8005f5c:	00000000 	.word	0x00000000

08005f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005f60:	f3ef 8009 	mrs	r0, PSP
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	4b15      	ldr	r3, [pc, #84]	; (8005fc0 <pxCurrentTCBConst>)
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	f01e 0f10 	tst.w	lr, #16
 8005f70:	bf08      	it	eq
 8005f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f7a:	6010      	str	r0, [r2, #0]
 8005f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f84:	f380 8811 	msr	BASEPRI, r0
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f7ff f816 	bl	8004fc0 <vTaskSwitchContext>
 8005f94:	f04f 0000 	mov.w	r0, #0
 8005f98:	f380 8811 	msr	BASEPRI, r0
 8005f9c:	bc09      	pop	{r0, r3}
 8005f9e:	6819      	ldr	r1, [r3, #0]
 8005fa0:	6808      	ldr	r0, [r1, #0]
 8005fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa6:	f01e 0f10 	tst.w	lr, #16
 8005faa:	bf08      	it	eq
 8005fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005fb0:	f380 8809 	msr	PSP, r0
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	f3af 8000 	nop.w

08005fc0 <pxCurrentTCBConst>:
 8005fc0:	20000be0 	.word	0x20000be0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop

08005fc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
        __asm volatile
 8005fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	607b      	str	r3, [r7, #4]
    }
 8005fe0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005fe2:	f7fe fed5 	bl	8004d90 <xTaskIncrementTick>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <xPortSysTickHandler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005fec:	4b06      	ldr	r3, [pc, #24]	; (8006008 <xPortSysTickHandler+0x40>)
 8005fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	f383 8811 	msr	BASEPRI, r3
    }
 8005ffe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8006000:	bf00      	nop
 8006002:	3708      	adds	r7, #8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	e000ed04 	.word	0xe000ed04

0800600c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800600c:	b480      	push	{r7}
 800600e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006010:	4b0b      	ldr	r3, [pc, #44]	; (8006040 <vPortSetupTimerInterrupt+0x34>)
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006016:	4b0b      	ldr	r3, [pc, #44]	; (8006044 <vPortSetupTimerInterrupt+0x38>)
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800601c:	4b0a      	ldr	r3, [pc, #40]	; (8006048 <vPortSetupTimerInterrupt+0x3c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a0a      	ldr	r2, [pc, #40]	; (800604c <vPortSetupTimerInterrupt+0x40>)
 8006022:	fba2 2303 	umull	r2, r3, r2, r3
 8006026:	099b      	lsrs	r3, r3, #6
 8006028:	4a09      	ldr	r2, [pc, #36]	; (8006050 <vPortSetupTimerInterrupt+0x44>)
 800602a:	3b01      	subs	r3, #1
 800602c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800602e:	4b04      	ldr	r3, [pc, #16]	; (8006040 <vPortSetupTimerInterrupt+0x34>)
 8006030:	2207      	movs	r2, #7
 8006032:	601a      	str	r2, [r3, #0]
}
 8006034:	bf00      	nop
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	e000e010 	.word	0xe000e010
 8006044:	e000e018 	.word	0xe000e018
 8006048:	2000002c 	.word	0x2000002c
 800604c:	10624dd3 	.word	0x10624dd3
 8006050:	e000e014 	.word	0xe000e014

08006054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006064 <vPortEnableVFP+0x10>
 8006058:	6801      	ldr	r1, [r0, #0]
 800605a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800605e:	6001      	str	r1, [r0, #0]
 8006060:	4770      	bx	lr
 8006062:	0000      	.short	0x0000
 8006064:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006068:	bf00      	nop
 800606a:	bf00      	nop

0800606c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08a      	sub	sp, #40	; 0x28
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006074:	2300      	movs	r3, #0
 8006076:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8006078:	f7fe fd70 	bl	8004b5c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800607c:	4b53      	ldr	r3, [pc, #332]	; (80061cc <pvPortMalloc+0x160>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006084:	f000 f908 	bl	8006298 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d012      	beq.n	80060b4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800608e:	2208      	movs	r2, #8
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	3308      	adds	r3, #8
 800609a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	43db      	mvns	r3, r3
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d804      	bhi.n	80060b0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	4413      	add	r3, r2
 80060ac:	607b      	str	r3, [r7, #4]
 80060ae:	e001      	b.n	80060b4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80060b0:	2300      	movs	r3, #0
 80060b2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	db70      	blt.n	800619c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d06d      	beq.n	800619c <pvPortMalloc+0x130>
 80060c0:	4b43      	ldr	r3, [pc, #268]	; (80061d0 <pvPortMalloc+0x164>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d868      	bhi.n	800619c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80060ca:	4b42      	ldr	r3, [pc, #264]	; (80061d4 <pvPortMalloc+0x168>)
 80060cc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80060ce:	4b41      	ldr	r3, [pc, #260]	; (80061d4 <pvPortMalloc+0x168>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060d4:	e004      	b.n	80060e0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d903      	bls.n	80060f2 <pvPortMalloc+0x86>
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1f1      	bne.n	80060d6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80060f2:	4b36      	ldr	r3, [pc, #216]	; (80061cc <pvPortMalloc+0x160>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d04f      	beq.n	800619c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2208      	movs	r2, #8
 8006102:	4413      	add	r3, r2
 8006104:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	1ad2      	subs	r2, r2, r3
 8006116:	2308      	movs	r3, #8
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	429a      	cmp	r2, r3
 800611c:	d91f      	bls.n	800615e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800611e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4413      	add	r3, r2
 8006124:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00a      	beq.n	8006146 <pvPortMalloc+0xda>
        __asm volatile
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	613b      	str	r3, [r7, #16]
    }
 8006142:	bf00      	nop
 8006144:	e7fe      	b.n	8006144 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	1ad2      	subs	r2, r2, r3
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006158:	6978      	ldr	r0, [r7, #20]
 800615a:	f000 f8f9 	bl	8006350 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800615e:	4b1c      	ldr	r3, [pc, #112]	; (80061d0 <pvPortMalloc+0x164>)
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	4a19      	ldr	r2, [pc, #100]	; (80061d0 <pvPortMalloc+0x164>)
 800616a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800616c:	4b18      	ldr	r3, [pc, #96]	; (80061d0 <pvPortMalloc+0x164>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4b19      	ldr	r3, [pc, #100]	; (80061d8 <pvPortMalloc+0x16c>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d203      	bcs.n	8006180 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006178:	4b15      	ldr	r3, [pc, #84]	; (80061d0 <pvPortMalloc+0x164>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a16      	ldr	r2, [pc, #88]	; (80061d8 <pvPortMalloc+0x16c>)
 800617e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006192:	4b12      	ldr	r3, [pc, #72]	; (80061dc <pvPortMalloc+0x170>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3301      	adds	r3, #1
 8006198:	4a10      	ldr	r2, [pc, #64]	; (80061dc <pvPortMalloc+0x170>)
 800619a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800619c:	f7fe fcec 	bl	8004b78 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00a      	beq.n	80061c0 <pvPortMalloc+0x154>
        __asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	60fb      	str	r3, [r7, #12]
    }
 80061bc:	bf00      	nop
 80061be:	e7fe      	b.n	80061be <pvPortMalloc+0x152>
    return pvReturn;
 80061c0:	69fb      	ldr	r3, [r7, #28]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3728      	adds	r7, #40	; 0x28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	20004e1c 	.word	0x20004e1c
 80061d0:	20004e20 	.word	0x20004e20
 80061d4:	20004e14 	.word	0x20004e14
 80061d8:	20004e24 	.word	0x20004e24
 80061dc:	20004e28 	.word	0x20004e28

080061e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d049      	beq.n	8006286 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80061f2:	2308      	movs	r3, #8
 80061f4:	425b      	negs	r3, r3
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4413      	add	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	db0a      	blt.n	800621e <vPortFree+0x3e>
        __asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	60fb      	str	r3, [r7, #12]
    }
 800621a:	bf00      	nop
 800621c:	e7fe      	b.n	800621c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00a      	beq.n	800623c <vPortFree+0x5c>
        __asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	60bb      	str	r3, [r7, #8]
    }
 8006238:	bf00      	nop
 800623a:	e7fe      	b.n	800623a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	0fdb      	lsrs	r3, r3, #31
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	d01c      	beq.n	8006286 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d118      	bne.n	8006286 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8006260:	f7fe fc7c 	bl	8004b5c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	4b09      	ldr	r3, [pc, #36]	; (8006290 <vPortFree+0xb0>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4413      	add	r3, r2
 800626e:	4a08      	ldr	r2, [pc, #32]	; (8006290 <vPortFree+0xb0>)
 8006270:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006272:	6938      	ldr	r0, [r7, #16]
 8006274:	f000 f86c 	bl	8006350 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006278:	4b06      	ldr	r3, [pc, #24]	; (8006294 <vPortFree+0xb4>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3301      	adds	r3, #1
 800627e:	4a05      	ldr	r2, [pc, #20]	; (8006294 <vPortFree+0xb4>)
 8006280:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006282:	f7fe fc79 	bl	8004b78 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006286:	bf00      	nop
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20004e20 	.word	0x20004e20
 8006294:	20004e2c 	.word	0x20004e2c

08006298 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800629e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80062a2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80062a4:	4b25      	ldr	r3, [pc, #148]	; (800633c <prvHeapInit+0xa4>)
 80062a6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f003 0307 	and.w	r3, r3, #7
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00c      	beq.n	80062cc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3307      	adds	r3, #7
 80062b6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0307 	bic.w	r3, r3, #7
 80062be:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	4a1d      	ldr	r2, [pc, #116]	; (800633c <prvHeapInit+0xa4>)
 80062c8:	4413      	add	r3, r2
 80062ca:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062d0:	4a1b      	ldr	r2, [pc, #108]	; (8006340 <prvHeapInit+0xa8>)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80062d6:	4b1a      	ldr	r3, [pc, #104]	; (8006340 <prvHeapInit+0xa8>)
 80062d8:	2200      	movs	r2, #0
 80062da:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	4413      	add	r3, r2
 80062e2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80062e4:	2208      	movs	r2, #8
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	1a9b      	subs	r3, r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 0307 	bic.w	r3, r3, #7
 80062f2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4a13      	ldr	r2, [pc, #76]	; (8006344 <prvHeapInit+0xac>)
 80062f8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80062fa:	4b12      	ldr	r3, [pc, #72]	; (8006344 <prvHeapInit+0xac>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2200      	movs	r2, #0
 8006300:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006302:	4b10      	ldr	r3, [pc, #64]	; (8006344 <prvHeapInit+0xac>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	1ad2      	subs	r2, r2, r3
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006318:	4b0a      	ldr	r3, [pc, #40]	; (8006344 <prvHeapInit+0xac>)
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	4a08      	ldr	r2, [pc, #32]	; (8006348 <prvHeapInit+0xb0>)
 8006326:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	4a07      	ldr	r2, [pc, #28]	; (800634c <prvHeapInit+0xb4>)
 800632e:	6013      	str	r3, [r2, #0]
}
 8006330:	bf00      	nop
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	20001214 	.word	0x20001214
 8006340:	20004e14 	.word	0x20004e14
 8006344:	20004e1c 	.word	0x20004e1c
 8006348:	20004e24 	.word	0x20004e24
 800634c:	20004e20 	.word	0x20004e20

08006350 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006358:	4b28      	ldr	r3, [pc, #160]	; (80063fc <prvInsertBlockIntoFreeList+0xac>)
 800635a:	60fb      	str	r3, [r7, #12]
 800635c:	e002      	b.n	8006364 <prvInsertBlockIntoFreeList+0x14>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	429a      	cmp	r2, r3
 800636c:	d8f7      	bhi.n	800635e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	4413      	add	r3, r2
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	429a      	cmp	r2, r3
 800637e:	d108      	bne.n	8006392 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	441a      	add	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	441a      	add	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d118      	bne.n	80063d8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	4b15      	ldr	r3, [pc, #84]	; (8006400 <prvInsertBlockIntoFreeList+0xb0>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d00d      	beq.n	80063ce <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	441a      	add	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	e008      	b.n	80063e0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80063ce:	4b0c      	ldr	r3, [pc, #48]	; (8006400 <prvInsertBlockIntoFreeList+0xb0>)
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	e003      	b.n	80063e0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d002      	beq.n	80063ee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80063ee:	bf00      	nop
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	20004e14 	.word	0x20004e14
 8006400:	20004e1c 	.word	0x20004e1c

08006404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006408:	4b0e      	ldr	r3, [pc, #56]	; (8006444 <HAL_Init+0x40>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a0d      	ldr	r2, [pc, #52]	; (8006444 <HAL_Init+0x40>)
 800640e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006412:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006414:	4b0b      	ldr	r3, [pc, #44]	; (8006444 <HAL_Init+0x40>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a0a      	ldr	r2, [pc, #40]	; (8006444 <HAL_Init+0x40>)
 800641a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800641e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006420:	4b08      	ldr	r3, [pc, #32]	; (8006444 <HAL_Init+0x40>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a07      	ldr	r2, [pc, #28]	; (8006444 <HAL_Init+0x40>)
 8006426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800642a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800642c:	2003      	movs	r0, #3
 800642e:	f000 f92b 	bl	8006688 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006432:	2000      	movs	r0, #0
 8006434:	f000 f808 	bl	8006448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006438:	f7fd faf6 	bl	8003a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	40023c00 	.word	0x40023c00

08006448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006450:	4b12      	ldr	r3, [pc, #72]	; (800649c <HAL_InitTick+0x54>)
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	4b12      	ldr	r3, [pc, #72]	; (80064a0 <HAL_InitTick+0x58>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	4619      	mov	r1, r3
 800645a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800645e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006462:	fbb2 f3f3 	udiv	r3, r2, r3
 8006466:	4618      	mov	r0, r3
 8006468:	f000 f943 	bl	80066f2 <HAL_SYSTICK_Config>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e00e      	b.n	8006494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b0f      	cmp	r3, #15
 800647a:	d80a      	bhi.n	8006492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800647c:	2200      	movs	r2, #0
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	f04f 30ff 	mov.w	r0, #4294967295
 8006484:	f000 f90b 	bl	800669e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006488:	4a06      	ldr	r2, [pc, #24]	; (80064a4 <HAL_InitTick+0x5c>)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	e000      	b.n	8006494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	2000002c 	.word	0x2000002c
 80064a0:	2000003c 	.word	0x2000003c
 80064a4:	20000038 	.word	0x20000038

080064a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80064ac:	4b06      	ldr	r3, [pc, #24]	; (80064c8 <HAL_IncTick+0x20>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	461a      	mov	r2, r3
 80064b2:	4b06      	ldr	r3, [pc, #24]	; (80064cc <HAL_IncTick+0x24>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4413      	add	r3, r2
 80064b8:	4a04      	ldr	r2, [pc, #16]	; (80064cc <HAL_IncTick+0x24>)
 80064ba:	6013      	str	r3, [r2, #0]
}
 80064bc:	bf00      	nop
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	2000003c 	.word	0x2000003c
 80064cc:	20004e30 	.word	0x20004e30

080064d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
  return uwTick;
 80064d4:	4b03      	ldr	r3, [pc, #12]	; (80064e4 <HAL_GetTick+0x14>)
 80064d6:	681b      	ldr	r3, [r3, #0]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	20004e30 	.word	0x20004e30

080064e8 <__NVIC_SetPriorityGrouping>:
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064f8:	4b0c      	ldr	r3, [pc, #48]	; (800652c <__NVIC_SetPriorityGrouping+0x44>)
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006504:	4013      	ands	r3, r2
 8006506:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800651a:	4a04      	ldr	r2, [pc, #16]	; (800652c <__NVIC_SetPriorityGrouping+0x44>)
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	60d3      	str	r3, [r2, #12]
}
 8006520:	bf00      	nop
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	e000ed00 	.word	0xe000ed00

08006530 <__NVIC_GetPriorityGrouping>:
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006534:	4b04      	ldr	r3, [pc, #16]	; (8006548 <__NVIC_GetPriorityGrouping+0x18>)
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	0a1b      	lsrs	r3, r3, #8
 800653a:	f003 0307 	and.w	r3, r3, #7
}
 800653e:	4618      	mov	r0, r3
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr
 8006548:	e000ed00 	.word	0xe000ed00

0800654c <__NVIC_EnableIRQ>:
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	4603      	mov	r3, r0
 8006554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800655a:	2b00      	cmp	r3, #0
 800655c:	db0b      	blt.n	8006576 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800655e:	79fb      	ldrb	r3, [r7, #7]
 8006560:	f003 021f 	and.w	r2, r3, #31
 8006564:	4907      	ldr	r1, [pc, #28]	; (8006584 <__NVIC_EnableIRQ+0x38>)
 8006566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800656a:	095b      	lsrs	r3, r3, #5
 800656c:	2001      	movs	r0, #1
 800656e:	fa00 f202 	lsl.w	r2, r0, r2
 8006572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006576:	bf00      	nop
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	e000e100 	.word	0xe000e100

08006588 <__NVIC_SetPriority>:
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	4603      	mov	r3, r0
 8006590:	6039      	str	r1, [r7, #0]
 8006592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006598:	2b00      	cmp	r3, #0
 800659a:	db0a      	blt.n	80065b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	490c      	ldr	r1, [pc, #48]	; (80065d4 <__NVIC_SetPriority+0x4c>)
 80065a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065a6:	0112      	lsls	r2, r2, #4
 80065a8:	b2d2      	uxtb	r2, r2
 80065aa:	440b      	add	r3, r1
 80065ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80065b0:	e00a      	b.n	80065c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	4908      	ldr	r1, [pc, #32]	; (80065d8 <__NVIC_SetPriority+0x50>)
 80065b8:	79fb      	ldrb	r3, [r7, #7]
 80065ba:	f003 030f 	and.w	r3, r3, #15
 80065be:	3b04      	subs	r3, #4
 80065c0:	0112      	lsls	r2, r2, #4
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	440b      	add	r3, r1
 80065c6:	761a      	strb	r2, [r3, #24]
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	e000e100 	.word	0xe000e100
 80065d8:	e000ed00 	.word	0xe000ed00

080065dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065dc:	b480      	push	{r7}
 80065de:	b089      	sub	sp, #36	; 0x24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f003 0307 	and.w	r3, r3, #7
 80065ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	f1c3 0307 	rsb	r3, r3, #7
 80065f6:	2b04      	cmp	r3, #4
 80065f8:	bf28      	it	cs
 80065fa:	2304      	movcs	r3, #4
 80065fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	3304      	adds	r3, #4
 8006602:	2b06      	cmp	r3, #6
 8006604:	d902      	bls.n	800660c <NVIC_EncodePriority+0x30>
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	3b03      	subs	r3, #3
 800660a:	e000      	b.n	800660e <NVIC_EncodePriority+0x32>
 800660c:	2300      	movs	r3, #0
 800660e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006610:	f04f 32ff 	mov.w	r2, #4294967295
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	fa02 f303 	lsl.w	r3, r2, r3
 800661a:	43da      	mvns	r2, r3
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	401a      	ands	r2, r3
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006624:	f04f 31ff 	mov.w	r1, #4294967295
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	fa01 f303 	lsl.w	r3, r1, r3
 800662e:	43d9      	mvns	r1, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006634:	4313      	orrs	r3, r2
         );
}
 8006636:	4618      	mov	r0, r3
 8006638:	3724      	adds	r7, #36	; 0x24
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
	...

08006644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3b01      	subs	r3, #1
 8006650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006654:	d301      	bcc.n	800665a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006656:	2301      	movs	r3, #1
 8006658:	e00f      	b.n	800667a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800665a:	4a0a      	ldr	r2, [pc, #40]	; (8006684 <SysTick_Config+0x40>)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3b01      	subs	r3, #1
 8006660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006662:	210f      	movs	r1, #15
 8006664:	f04f 30ff 	mov.w	r0, #4294967295
 8006668:	f7ff ff8e 	bl	8006588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800666c:	4b05      	ldr	r3, [pc, #20]	; (8006684 <SysTick_Config+0x40>)
 800666e:	2200      	movs	r2, #0
 8006670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006672:	4b04      	ldr	r3, [pc, #16]	; (8006684 <SysTick_Config+0x40>)
 8006674:	2207      	movs	r2, #7
 8006676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	e000e010 	.word	0xe000e010

08006688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f7ff ff29 	bl	80064e8 <__NVIC_SetPriorityGrouping>
}
 8006696:	bf00      	nop
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800669e:	b580      	push	{r7, lr}
 80066a0:	b086      	sub	sp, #24
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	4603      	mov	r3, r0
 80066a6:	60b9      	str	r1, [r7, #8]
 80066a8:	607a      	str	r2, [r7, #4]
 80066aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80066b0:	f7ff ff3e 	bl	8006530 <__NVIC_GetPriorityGrouping>
 80066b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	6978      	ldr	r0, [r7, #20]
 80066bc:	f7ff ff8e 	bl	80065dc <NVIC_EncodePriority>
 80066c0:	4602      	mov	r2, r0
 80066c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066c6:	4611      	mov	r1, r2
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7ff ff5d 	bl	8006588 <__NVIC_SetPriority>
}
 80066ce:	bf00      	nop
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b082      	sub	sp, #8
 80066da:	af00      	add	r7, sp, #0
 80066dc:	4603      	mov	r3, r0
 80066de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80066e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7ff ff31 	bl	800654c <__NVIC_EnableIRQ>
}
 80066ea:	bf00      	nop
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7ff ffa2 	bl	8006644 <SysTick_Config>
 8006700:	4603      	mov	r3, r0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b084      	sub	sp, #16
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006716:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006718:	f7ff feda 	bl	80064d0 <HAL_GetTick>
 800671c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b02      	cmp	r3, #2
 8006728:	d008      	beq.n	800673c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2280      	movs	r2, #128	; 0x80
 800672e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e052      	b.n	80067e2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 0216 	bic.w	r2, r2, #22
 800674a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	695a      	ldr	r2, [r3, #20]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800675a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006760:	2b00      	cmp	r3, #0
 8006762:	d103      	bne.n	800676c <HAL_DMA_Abort+0x62>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006768:	2b00      	cmp	r3, #0
 800676a:	d007      	beq.n	800677c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 0208 	bic.w	r2, r2, #8
 800677a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0201 	bic.w	r2, r2, #1
 800678a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800678c:	e013      	b.n	80067b6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800678e:	f7ff fe9f 	bl	80064d0 <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	2b05      	cmp	r3, #5
 800679a:	d90c      	bls.n	80067b6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2220      	movs	r2, #32
 80067a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2203      	movs	r2, #3
 80067a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e015      	b.n	80067e2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1e4      	bne.n	800678e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c8:	223f      	movs	r2, #63	; 0x3f
 80067ca:	409a      	lsls	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d004      	beq.n	8006808 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2280      	movs	r2, #128	; 0x80
 8006802:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e00c      	b.n	8006822 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2205      	movs	r2, #5
 800680c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f022 0201 	bic.w	r2, r2, #1
 800681e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
	...

08006830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006830:	b480      	push	{r7}
 8006832:	b089      	sub	sp, #36	; 0x24
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800683a:	2300      	movs	r3, #0
 800683c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800683e:	2300      	movs	r3, #0
 8006840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006842:	2300      	movs	r3, #0
 8006844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006846:	2300      	movs	r3, #0
 8006848:	61fb      	str	r3, [r7, #28]
 800684a:	e16b      	b.n	8006b24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800684c:	2201      	movs	r2, #1
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	fa02 f303 	lsl.w	r3, r2, r3
 8006854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	4013      	ands	r3, r2
 800685e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	429a      	cmp	r2, r3
 8006866:	f040 815a 	bne.w	8006b1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f003 0303 	and.w	r3, r3, #3
 8006872:	2b01      	cmp	r3, #1
 8006874:	d005      	beq.n	8006882 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800687e:	2b02      	cmp	r3, #2
 8006880:	d130      	bne.n	80068e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	005b      	lsls	r3, r3, #1
 800688c:	2203      	movs	r2, #3
 800688e:	fa02 f303 	lsl.w	r3, r2, r3
 8006892:	43db      	mvns	r3, r3
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	4013      	ands	r3, r2
 8006898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	005b      	lsls	r3, r3, #1
 80068a2:	fa02 f303 	lsl.w	r3, r2, r3
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80068b8:	2201      	movs	r2, #1
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	fa02 f303 	lsl.w	r3, r2, r3
 80068c0:	43db      	mvns	r3, r3
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	4013      	ands	r3, r2
 80068c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	091b      	lsrs	r3, r3, #4
 80068ce:	f003 0201 	and.w	r2, r3, #1
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	fa02 f303 	lsl.w	r3, r2, r3
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	4313      	orrs	r3, r2
 80068dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f003 0303 	and.w	r3, r3, #3
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d017      	beq.n	8006920 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	2203      	movs	r2, #3
 80068fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006900:	43db      	mvns	r3, r3
 8006902:	69ba      	ldr	r2, [r7, #24]
 8006904:	4013      	ands	r3, r2
 8006906:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	005b      	lsls	r3, r3, #1
 8006910:	fa02 f303 	lsl.w	r3, r2, r3
 8006914:	69ba      	ldr	r2, [r7, #24]
 8006916:	4313      	orrs	r3, r2
 8006918:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f003 0303 	and.w	r3, r3, #3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d123      	bne.n	8006974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	08da      	lsrs	r2, r3, #3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3208      	adds	r2, #8
 8006934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	f003 0307 	and.w	r3, r3, #7
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	220f      	movs	r2, #15
 8006944:	fa02 f303 	lsl.w	r3, r2, r3
 8006948:	43db      	mvns	r3, r3
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	4013      	ands	r3, r2
 800694e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	691a      	ldr	r2, [r3, #16]
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	f003 0307 	and.w	r3, r3, #7
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	fa02 f303 	lsl.w	r3, r2, r3
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	4313      	orrs	r3, r2
 8006964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	08da      	lsrs	r2, r3, #3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	3208      	adds	r2, #8
 800696e:	69b9      	ldr	r1, [r7, #24]
 8006970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	2203      	movs	r2, #3
 8006980:	fa02 f303 	lsl.w	r3, r2, r3
 8006984:	43db      	mvns	r3, r3
 8006986:	69ba      	ldr	r2, [r7, #24]
 8006988:	4013      	ands	r3, r2
 800698a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f003 0203 	and.w	r2, r3, #3
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	fa02 f303 	lsl.w	r3, r2, r3
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	4313      	orrs	r3, r2
 80069a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 80b4 	beq.w	8006b1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	4b60      	ldr	r3, [pc, #384]	; (8006b3c <HAL_GPIO_Init+0x30c>)
 80069bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069be:	4a5f      	ldr	r2, [pc, #380]	; (8006b3c <HAL_GPIO_Init+0x30c>)
 80069c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069c4:	6453      	str	r3, [r2, #68]	; 0x44
 80069c6:	4b5d      	ldr	r3, [pc, #372]	; (8006b3c <HAL_GPIO_Init+0x30c>)
 80069c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069d2:	4a5b      	ldr	r2, [pc, #364]	; (8006b40 <HAL_GPIO_Init+0x310>)
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	089b      	lsrs	r3, r3, #2
 80069d8:	3302      	adds	r3, #2
 80069da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	220f      	movs	r2, #15
 80069ea:	fa02 f303 	lsl.w	r3, r2, r3
 80069ee:	43db      	mvns	r3, r3
 80069f0:	69ba      	ldr	r2, [r7, #24]
 80069f2:	4013      	ands	r3, r2
 80069f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a52      	ldr	r2, [pc, #328]	; (8006b44 <HAL_GPIO_Init+0x314>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d02b      	beq.n	8006a56 <HAL_GPIO_Init+0x226>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a51      	ldr	r2, [pc, #324]	; (8006b48 <HAL_GPIO_Init+0x318>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d025      	beq.n	8006a52 <HAL_GPIO_Init+0x222>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a50      	ldr	r2, [pc, #320]	; (8006b4c <HAL_GPIO_Init+0x31c>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d01f      	beq.n	8006a4e <HAL_GPIO_Init+0x21e>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a4f      	ldr	r2, [pc, #316]	; (8006b50 <HAL_GPIO_Init+0x320>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d019      	beq.n	8006a4a <HAL_GPIO_Init+0x21a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a4e      	ldr	r2, [pc, #312]	; (8006b54 <HAL_GPIO_Init+0x324>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d013      	beq.n	8006a46 <HAL_GPIO_Init+0x216>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a4d      	ldr	r2, [pc, #308]	; (8006b58 <HAL_GPIO_Init+0x328>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00d      	beq.n	8006a42 <HAL_GPIO_Init+0x212>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a4c      	ldr	r2, [pc, #304]	; (8006b5c <HAL_GPIO_Init+0x32c>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d007      	beq.n	8006a3e <HAL_GPIO_Init+0x20e>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a4b      	ldr	r2, [pc, #300]	; (8006b60 <HAL_GPIO_Init+0x330>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d101      	bne.n	8006a3a <HAL_GPIO_Init+0x20a>
 8006a36:	2307      	movs	r3, #7
 8006a38:	e00e      	b.n	8006a58 <HAL_GPIO_Init+0x228>
 8006a3a:	2308      	movs	r3, #8
 8006a3c:	e00c      	b.n	8006a58 <HAL_GPIO_Init+0x228>
 8006a3e:	2306      	movs	r3, #6
 8006a40:	e00a      	b.n	8006a58 <HAL_GPIO_Init+0x228>
 8006a42:	2305      	movs	r3, #5
 8006a44:	e008      	b.n	8006a58 <HAL_GPIO_Init+0x228>
 8006a46:	2304      	movs	r3, #4
 8006a48:	e006      	b.n	8006a58 <HAL_GPIO_Init+0x228>
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e004      	b.n	8006a58 <HAL_GPIO_Init+0x228>
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e002      	b.n	8006a58 <HAL_GPIO_Init+0x228>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e000      	b.n	8006a58 <HAL_GPIO_Init+0x228>
 8006a56:	2300      	movs	r3, #0
 8006a58:	69fa      	ldr	r2, [r7, #28]
 8006a5a:	f002 0203 	and.w	r2, r2, #3
 8006a5e:	0092      	lsls	r2, r2, #2
 8006a60:	4093      	lsls	r3, r2
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a68:	4935      	ldr	r1, [pc, #212]	; (8006b40 <HAL_GPIO_Init+0x310>)
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	089b      	lsrs	r3, r3, #2
 8006a6e:	3302      	adds	r3, #2
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006a76:	4b3b      	ldr	r3, [pc, #236]	; (8006b64 <HAL_GPIO_Init+0x334>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	43db      	mvns	r3, r3
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	4013      	ands	r3, r2
 8006a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006a9a:	4a32      	ldr	r2, [pc, #200]	; (8006b64 <HAL_GPIO_Init+0x334>)
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006aa0:	4b30      	ldr	r3, [pc, #192]	; (8006b64 <HAL_GPIO_Init+0x334>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	43db      	mvns	r3, r3
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	4013      	ands	r3, r2
 8006aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ac4:	4a27      	ldr	r2, [pc, #156]	; (8006b64 <HAL_GPIO_Init+0x334>)
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006aca:	4b26      	ldr	r3, [pc, #152]	; (8006b64 <HAL_GPIO_Init+0x334>)
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	43db      	mvns	r3, r3
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006aee:	4a1d      	ldr	r2, [pc, #116]	; (8006b64 <HAL_GPIO_Init+0x334>)
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006af4:	4b1b      	ldr	r3, [pc, #108]	; (8006b64 <HAL_GPIO_Init+0x334>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	43db      	mvns	r3, r3
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	4013      	ands	r3, r2
 8006b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d003      	beq.n	8006b18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006b18:	4a12      	ldr	r2, [pc, #72]	; (8006b64 <HAL_GPIO_Init+0x334>)
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	3301      	adds	r3, #1
 8006b22:	61fb      	str	r3, [r7, #28]
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	2b0f      	cmp	r3, #15
 8006b28:	f67f ae90 	bls.w	800684c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006b2c:	bf00      	nop
 8006b2e:	bf00      	nop
 8006b30:	3724      	adds	r7, #36	; 0x24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	40023800 	.word	0x40023800
 8006b40:	40013800 	.word	0x40013800
 8006b44:	40020000 	.word	0x40020000
 8006b48:	40020400 	.word	0x40020400
 8006b4c:	40020800 	.word	0x40020800
 8006b50:	40020c00 	.word	0x40020c00
 8006b54:	40021000 	.word	0x40021000
 8006b58:	40021400 	.word	0x40021400
 8006b5c:	40021800 	.word	0x40021800
 8006b60:	40021c00 	.word	0x40021c00
 8006b64:	40013c00 	.word	0x40013c00

08006b68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691a      	ldr	r2, [r3, #16]
 8006b78:	887b      	ldrh	r3, [r7, #2]
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b80:	2301      	movs	r3, #1
 8006b82:	73fb      	strb	r3, [r7, #15]
 8006b84:	e001      	b.n	8006b8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b86:	2300      	movs	r3, #0
 8006b88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	807b      	strh	r3, [r7, #2]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ba8:	787b      	ldrb	r3, [r7, #1]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006bae:	887a      	ldrh	r2, [r7, #2]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006bb4:	e003      	b.n	8006bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006bb6:	887b      	ldrh	r3, [r7, #2]
 8006bb8:	041a      	lsls	r2, r3, #16
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	619a      	str	r2, [r3, #24]
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006bdc:	887a      	ldrh	r2, [r7, #2]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4013      	ands	r3, r2
 8006be2:	041a      	lsls	r2, r3, #16
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	43d9      	mvns	r1, r3
 8006be8:	887b      	ldrh	r3, [r7, #2]
 8006bea:	400b      	ands	r3, r1
 8006bec:	431a      	orrs	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	619a      	str	r2, [r3, #24]
}
 8006bf2:	bf00      	nop
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
	...

08006c00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	4603      	mov	r3, r0
 8006c08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006c0a:	4b08      	ldr	r3, [pc, #32]	; (8006c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c0c:	695a      	ldr	r2, [r3, #20]
 8006c0e:	88fb      	ldrh	r3, [r7, #6]
 8006c10:	4013      	ands	r3, r2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d006      	beq.n	8006c24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c16:	4a05      	ldr	r2, [pc, #20]	; (8006c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c18:	88fb      	ldrh	r3, [r7, #6]
 8006c1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c1c:	88fb      	ldrh	r3, [r7, #6]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fa fa80 	bl	8001124 <HAL_GPIO_EXTI_Callback>
  }
}
 8006c24:	bf00      	nop
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	40013c00 	.word	0x40013c00

08006c30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e267      	b.n	8007112 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d075      	beq.n	8006d3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c4e:	4b88      	ldr	r3, [pc, #544]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 030c 	and.w	r3, r3, #12
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	d00c      	beq.n	8006c74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c5a:	4b85      	ldr	r3, [pc, #532]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c62:	2b08      	cmp	r3, #8
 8006c64:	d112      	bne.n	8006c8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c66:	4b82      	ldr	r3, [pc, #520]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c72:	d10b      	bne.n	8006c8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c74:	4b7e      	ldr	r3, [pc, #504]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d05b      	beq.n	8006d38 <HAL_RCC_OscConfig+0x108>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d157      	bne.n	8006d38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e242      	b.n	8007112 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c94:	d106      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x74>
 8006c96:	4b76      	ldr	r3, [pc, #472]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a75      	ldr	r2, [pc, #468]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ca0:	6013      	str	r3, [r2, #0]
 8006ca2:	e01d      	b.n	8006ce0 <HAL_RCC_OscConfig+0xb0>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cac:	d10c      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x98>
 8006cae:	4b70      	ldr	r3, [pc, #448]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a6f      	ldr	r2, [pc, #444]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cb8:	6013      	str	r3, [r2, #0]
 8006cba:	4b6d      	ldr	r3, [pc, #436]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a6c      	ldr	r2, [pc, #432]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cc4:	6013      	str	r3, [r2, #0]
 8006cc6:	e00b      	b.n	8006ce0 <HAL_RCC_OscConfig+0xb0>
 8006cc8:	4b69      	ldr	r3, [pc, #420]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a68      	ldr	r2, [pc, #416]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cd2:	6013      	str	r3, [r2, #0]
 8006cd4:	4b66      	ldr	r3, [pc, #408]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a65      	ldr	r2, [pc, #404]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d013      	beq.n	8006d10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ce8:	f7ff fbf2 	bl	80064d0 <HAL_GetTick>
 8006cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cf0:	f7ff fbee 	bl	80064d0 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b64      	cmp	r3, #100	; 0x64
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e207      	b.n	8007112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d02:	4b5b      	ldr	r3, [pc, #364]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0f0      	beq.n	8006cf0 <HAL_RCC_OscConfig+0xc0>
 8006d0e:	e014      	b.n	8006d3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d10:	f7ff fbde 	bl	80064d0 <HAL_GetTick>
 8006d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d16:	e008      	b.n	8006d2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d18:	f7ff fbda 	bl	80064d0 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	2b64      	cmp	r3, #100	; 0x64
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e1f3      	b.n	8007112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d2a:	4b51      	ldr	r3, [pc, #324]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1f0      	bne.n	8006d18 <HAL_RCC_OscConfig+0xe8>
 8006d36:	e000      	b.n	8006d3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d063      	beq.n	8006e0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d46:	4b4a      	ldr	r3, [pc, #296]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 030c 	and.w	r3, r3, #12
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00b      	beq.n	8006d6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d52:	4b47      	ldr	r3, [pc, #284]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d5a:	2b08      	cmp	r3, #8
 8006d5c:	d11c      	bne.n	8006d98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d5e:	4b44      	ldr	r3, [pc, #272]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d116      	bne.n	8006d98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d6a:	4b41      	ldr	r3, [pc, #260]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d005      	beq.n	8006d82 <HAL_RCC_OscConfig+0x152>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d001      	beq.n	8006d82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e1c7      	b.n	8007112 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d82:	4b3b      	ldr	r3, [pc, #236]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	4937      	ldr	r1, [pc, #220]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d96:	e03a      	b.n	8006e0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d020      	beq.n	8006de2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006da0:	4b34      	ldr	r3, [pc, #208]	; (8006e74 <HAL_RCC_OscConfig+0x244>)
 8006da2:	2201      	movs	r2, #1
 8006da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da6:	f7ff fb93 	bl	80064d0 <HAL_GetTick>
 8006daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dac:	e008      	b.n	8006dc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dae:	f7ff fb8f 	bl	80064d0 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e1a8      	b.n	8007112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dc0:	4b2b      	ldr	r3, [pc, #172]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d0f0      	beq.n	8006dae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dcc:	4b28      	ldr	r3, [pc, #160]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	4925      	ldr	r1, [pc, #148]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	600b      	str	r3, [r1, #0]
 8006de0:	e015      	b.n	8006e0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006de2:	4b24      	ldr	r3, [pc, #144]	; (8006e74 <HAL_RCC_OscConfig+0x244>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de8:	f7ff fb72 	bl	80064d0 <HAL_GetTick>
 8006dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dee:	e008      	b.n	8006e02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006df0:	f7ff fb6e 	bl	80064d0 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e187      	b.n	8007112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e02:	4b1b      	ldr	r3, [pc, #108]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1f0      	bne.n	8006df0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0308 	and.w	r3, r3, #8
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d036      	beq.n	8006e88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d016      	beq.n	8006e50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e22:	4b15      	ldr	r3, [pc, #84]	; (8006e78 <HAL_RCC_OscConfig+0x248>)
 8006e24:	2201      	movs	r2, #1
 8006e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e28:	f7ff fb52 	bl	80064d0 <HAL_GetTick>
 8006e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e2e:	e008      	b.n	8006e42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e30:	f7ff fb4e 	bl	80064d0 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e167      	b.n	8007112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e42:	4b0b      	ldr	r3, [pc, #44]	; (8006e70 <HAL_RCC_OscConfig+0x240>)
 8006e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d0f0      	beq.n	8006e30 <HAL_RCC_OscConfig+0x200>
 8006e4e:	e01b      	b.n	8006e88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e50:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <HAL_RCC_OscConfig+0x248>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e56:	f7ff fb3b 	bl	80064d0 <HAL_GetTick>
 8006e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e5c:	e00e      	b.n	8006e7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e5e:	f7ff fb37 	bl	80064d0 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d907      	bls.n	8006e7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e150      	b.n	8007112 <HAL_RCC_OscConfig+0x4e2>
 8006e70:	40023800 	.word	0x40023800
 8006e74:	42470000 	.word	0x42470000
 8006e78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e7c:	4b88      	ldr	r3, [pc, #544]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8006e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e80:	f003 0302 	and.w	r3, r3, #2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1ea      	bne.n	8006e5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 8097 	beq.w	8006fc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e96:	2300      	movs	r3, #0
 8006e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e9a:	4b81      	ldr	r3, [pc, #516]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10f      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60bb      	str	r3, [r7, #8]
 8006eaa:	4b7d      	ldr	r3, [pc, #500]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8006eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eae:	4a7c      	ldr	r2, [pc, #496]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8006eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8006eb6:	4b7a      	ldr	r3, [pc, #488]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ebe:	60bb      	str	r3, [r7, #8]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ec6:	4b77      	ldr	r3, [pc, #476]	; (80070a4 <HAL_RCC_OscConfig+0x474>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d118      	bne.n	8006f04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ed2:	4b74      	ldr	r3, [pc, #464]	; (80070a4 <HAL_RCC_OscConfig+0x474>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a73      	ldr	r2, [pc, #460]	; (80070a4 <HAL_RCC_OscConfig+0x474>)
 8006ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ede:	f7ff faf7 	bl	80064d0 <HAL_GetTick>
 8006ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ee4:	e008      	b.n	8006ef8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ee6:	f7ff faf3 	bl	80064d0 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d901      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e10c      	b.n	8007112 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ef8:	4b6a      	ldr	r3, [pc, #424]	; (80070a4 <HAL_RCC_OscConfig+0x474>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0f0      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d106      	bne.n	8006f1a <HAL_RCC_OscConfig+0x2ea>
 8006f0c:	4b64      	ldr	r3, [pc, #400]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8006f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f10:	4a63      	ldr	r2, [pc, #396]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8006f12:	f043 0301 	orr.w	r3, r3, #1
 8006f16:	6713      	str	r3, [r2, #112]	; 0x70
 8006f18:	e01c      	b.n	8006f54 <HAL_RCC_OscConfig+0x324>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	2b05      	cmp	r3, #5
 8006f20:	d10c      	bne.n	8006f3c <HAL_RCC_OscConfig+0x30c>
 8006f22:	4b5f      	ldr	r3, [pc, #380]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8006f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f26:	4a5e      	ldr	r2, [pc, #376]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8006f28:	f043 0304 	orr.w	r3, r3, #4
 8006f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8006f2e:	4b5c      	ldr	r3, [pc, #368]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8006f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f32:	4a5b      	ldr	r2, [pc, #364]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8006f34:	f043 0301 	orr.w	r3, r3, #1
 8006f38:	6713      	str	r3, [r2, #112]	; 0x70
 8006f3a:	e00b      	b.n	8006f54 <HAL_RCC_OscConfig+0x324>
 8006f3c:	4b58      	ldr	r3, [pc, #352]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8006f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f40:	4a57      	ldr	r2, [pc, #348]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8006f42:	f023 0301 	bic.w	r3, r3, #1
 8006f46:	6713      	str	r3, [r2, #112]	; 0x70
 8006f48:	4b55      	ldr	r3, [pc, #340]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8006f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4c:	4a54      	ldr	r2, [pc, #336]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8006f4e:	f023 0304 	bic.w	r3, r3, #4
 8006f52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d015      	beq.n	8006f88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f5c:	f7ff fab8 	bl	80064d0 <HAL_GetTick>
 8006f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f62:	e00a      	b.n	8006f7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f64:	f7ff fab4 	bl	80064d0 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d901      	bls.n	8006f7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e0cb      	b.n	8007112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f7a:	4b49      	ldr	r3, [pc, #292]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8006f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d0ee      	beq.n	8006f64 <HAL_RCC_OscConfig+0x334>
 8006f86:	e014      	b.n	8006fb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f88:	f7ff faa2 	bl	80064d0 <HAL_GetTick>
 8006f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f8e:	e00a      	b.n	8006fa6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f90:	f7ff fa9e 	bl	80064d0 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e0b5      	b.n	8007112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fa6:	4b3e      	ldr	r3, [pc, #248]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8006fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1ee      	bne.n	8006f90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d105      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fb8:	4b39      	ldr	r3, [pc, #228]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8006fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbc:	4a38      	ldr	r2, [pc, #224]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8006fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 80a1 	beq.w	8007110 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006fce:	4b34      	ldr	r3, [pc, #208]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f003 030c 	and.w	r3, r3, #12
 8006fd6:	2b08      	cmp	r3, #8
 8006fd8:	d05c      	beq.n	8007094 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d141      	bne.n	8007066 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fe2:	4b31      	ldr	r3, [pc, #196]	; (80070a8 <HAL_RCC_OscConfig+0x478>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fe8:	f7ff fa72 	bl	80064d0 <HAL_GetTick>
 8006fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fee:	e008      	b.n	8007002 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ff0:	f7ff fa6e 	bl	80064d0 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d901      	bls.n	8007002 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e087      	b.n	8007112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007002:	4b27      	ldr	r3, [pc, #156]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1f0      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	69da      	ldr	r2, [r3, #28]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	431a      	orrs	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	019b      	lsls	r3, r3, #6
 800701e:	431a      	orrs	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007024:	085b      	lsrs	r3, r3, #1
 8007026:	3b01      	subs	r3, #1
 8007028:	041b      	lsls	r3, r3, #16
 800702a:	431a      	orrs	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	061b      	lsls	r3, r3, #24
 8007032:	491b      	ldr	r1, [pc, #108]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8007034:	4313      	orrs	r3, r2
 8007036:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007038:	4b1b      	ldr	r3, [pc, #108]	; (80070a8 <HAL_RCC_OscConfig+0x478>)
 800703a:	2201      	movs	r2, #1
 800703c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800703e:	f7ff fa47 	bl	80064d0 <HAL_GetTick>
 8007042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007044:	e008      	b.n	8007058 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007046:	f7ff fa43 	bl	80064d0 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2b02      	cmp	r3, #2
 8007052:	d901      	bls.n	8007058 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e05c      	b.n	8007112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007058:	4b11      	ldr	r3, [pc, #68]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0f0      	beq.n	8007046 <HAL_RCC_OscConfig+0x416>
 8007064:	e054      	b.n	8007110 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007066:	4b10      	ldr	r3, [pc, #64]	; (80070a8 <HAL_RCC_OscConfig+0x478>)
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800706c:	f7ff fa30 	bl	80064d0 <HAL_GetTick>
 8007070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007072:	e008      	b.n	8007086 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007074:	f7ff fa2c 	bl	80064d0 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	2b02      	cmp	r3, #2
 8007080:	d901      	bls.n	8007086 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e045      	b.n	8007112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007086:	4b06      	ldr	r3, [pc, #24]	; (80070a0 <HAL_RCC_OscConfig+0x470>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1f0      	bne.n	8007074 <HAL_RCC_OscConfig+0x444>
 8007092:	e03d      	b.n	8007110 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d107      	bne.n	80070ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e038      	b.n	8007112 <HAL_RCC_OscConfig+0x4e2>
 80070a0:	40023800 	.word	0x40023800
 80070a4:	40007000 	.word	0x40007000
 80070a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80070ac:	4b1b      	ldr	r3, [pc, #108]	; (800711c <HAL_RCC_OscConfig+0x4ec>)
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d028      	beq.n	800710c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d121      	bne.n	800710c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d11a      	bne.n	800710c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80070dc:	4013      	ands	r3, r2
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80070e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d111      	bne.n	800710c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f2:	085b      	lsrs	r3, r3, #1
 80070f4:	3b01      	subs	r3, #1
 80070f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d107      	bne.n	800710c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007106:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007108:	429a      	cmp	r2, r3
 800710a:	d001      	beq.n	8007110 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e000      	b.n	8007112 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3718      	adds	r7, #24
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	40023800 	.word	0x40023800

08007120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e0cc      	b.n	80072ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007134:	4b68      	ldr	r3, [pc, #416]	; (80072d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0307 	and.w	r3, r3, #7
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	429a      	cmp	r2, r3
 8007140:	d90c      	bls.n	800715c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007142:	4b65      	ldr	r3, [pc, #404]	; (80072d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	b2d2      	uxtb	r2, r2
 8007148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800714a:	4b63      	ldr	r3, [pc, #396]	; (80072d8 <HAL_RCC_ClockConfig+0x1b8>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0307 	and.w	r3, r3, #7
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	429a      	cmp	r2, r3
 8007156:	d001      	beq.n	800715c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e0b8      	b.n	80072ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0302 	and.w	r3, r3, #2
 8007164:	2b00      	cmp	r3, #0
 8007166:	d020      	beq.n	80071aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007174:	4b59      	ldr	r3, [pc, #356]	; (80072dc <HAL_RCC_ClockConfig+0x1bc>)
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	4a58      	ldr	r2, [pc, #352]	; (80072dc <HAL_RCC_ClockConfig+0x1bc>)
 800717a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800717e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0308 	and.w	r3, r3, #8
 8007188:	2b00      	cmp	r3, #0
 800718a:	d005      	beq.n	8007198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800718c:	4b53      	ldr	r3, [pc, #332]	; (80072dc <HAL_RCC_ClockConfig+0x1bc>)
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	4a52      	ldr	r2, [pc, #328]	; (80072dc <HAL_RCC_ClockConfig+0x1bc>)
 8007192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007198:	4b50      	ldr	r3, [pc, #320]	; (80072dc <HAL_RCC_ClockConfig+0x1bc>)
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	494d      	ldr	r1, [pc, #308]	; (80072dc <HAL_RCC_ClockConfig+0x1bc>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d044      	beq.n	8007240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d107      	bne.n	80071ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071be:	4b47      	ldr	r3, [pc, #284]	; (80072dc <HAL_RCC_ClockConfig+0x1bc>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d119      	bne.n	80071fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e07f      	b.n	80072ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d003      	beq.n	80071de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071da:	2b03      	cmp	r3, #3
 80071dc:	d107      	bne.n	80071ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071de:	4b3f      	ldr	r3, [pc, #252]	; (80072dc <HAL_RCC_ClockConfig+0x1bc>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d109      	bne.n	80071fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e06f      	b.n	80072ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071ee:	4b3b      	ldr	r3, [pc, #236]	; (80072dc <HAL_RCC_ClockConfig+0x1bc>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e067      	b.n	80072ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071fe:	4b37      	ldr	r3, [pc, #220]	; (80072dc <HAL_RCC_ClockConfig+0x1bc>)
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f023 0203 	bic.w	r2, r3, #3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	4934      	ldr	r1, [pc, #208]	; (80072dc <HAL_RCC_ClockConfig+0x1bc>)
 800720c:	4313      	orrs	r3, r2
 800720e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007210:	f7ff f95e 	bl	80064d0 <HAL_GetTick>
 8007214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007216:	e00a      	b.n	800722e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007218:	f7ff f95a 	bl	80064d0 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	f241 3288 	movw	r2, #5000	; 0x1388
 8007226:	4293      	cmp	r3, r2
 8007228:	d901      	bls.n	800722e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e04f      	b.n	80072ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800722e:	4b2b      	ldr	r3, [pc, #172]	; (80072dc <HAL_RCC_ClockConfig+0x1bc>)
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f003 020c 	and.w	r2, r3, #12
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	429a      	cmp	r2, r3
 800723e:	d1eb      	bne.n	8007218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007240:	4b25      	ldr	r3, [pc, #148]	; (80072d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0307 	and.w	r3, r3, #7
 8007248:	683a      	ldr	r2, [r7, #0]
 800724a:	429a      	cmp	r2, r3
 800724c:	d20c      	bcs.n	8007268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800724e:	4b22      	ldr	r3, [pc, #136]	; (80072d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	b2d2      	uxtb	r2, r2
 8007254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007256:	4b20      	ldr	r3, [pc, #128]	; (80072d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 0307 	and.w	r3, r3, #7
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	429a      	cmp	r2, r3
 8007262:	d001      	beq.n	8007268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e032      	b.n	80072ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	2b00      	cmp	r3, #0
 8007272:	d008      	beq.n	8007286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007274:	4b19      	ldr	r3, [pc, #100]	; (80072dc <HAL_RCC_ClockConfig+0x1bc>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	4916      	ldr	r1, [pc, #88]	; (80072dc <HAL_RCC_ClockConfig+0x1bc>)
 8007282:	4313      	orrs	r3, r2
 8007284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0308 	and.w	r3, r3, #8
 800728e:	2b00      	cmp	r3, #0
 8007290:	d009      	beq.n	80072a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007292:	4b12      	ldr	r3, [pc, #72]	; (80072dc <HAL_RCC_ClockConfig+0x1bc>)
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	00db      	lsls	r3, r3, #3
 80072a0:	490e      	ldr	r1, [pc, #56]	; (80072dc <HAL_RCC_ClockConfig+0x1bc>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80072a6:	f000 f82d 	bl	8007304 <HAL_RCC_GetSysClockFreq>
 80072aa:	4602      	mov	r2, r0
 80072ac:	4b0b      	ldr	r3, [pc, #44]	; (80072dc <HAL_RCC_ClockConfig+0x1bc>)
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	091b      	lsrs	r3, r3, #4
 80072b2:	f003 030f 	and.w	r3, r3, #15
 80072b6:	490a      	ldr	r1, [pc, #40]	; (80072e0 <HAL_RCC_ClockConfig+0x1c0>)
 80072b8:	5ccb      	ldrb	r3, [r1, r3]
 80072ba:	fa22 f303 	lsr.w	r3, r2, r3
 80072be:	4a09      	ldr	r2, [pc, #36]	; (80072e4 <HAL_RCC_ClockConfig+0x1c4>)
 80072c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80072c2:	4b09      	ldr	r3, [pc, #36]	; (80072e8 <HAL_RCC_ClockConfig+0x1c8>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7ff f8be 	bl	8006448 <HAL_InitTick>

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	40023c00 	.word	0x40023c00
 80072dc:	40023800 	.word	0x40023800
 80072e0:	0800d444 	.word	0x0800d444
 80072e4:	2000002c 	.word	0x2000002c
 80072e8:	20000038 	.word	0x20000038

080072ec <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80072f0:	4b03      	ldr	r3, [pc, #12]	; (8007300 <HAL_RCC_EnableCSS+0x14>)
 80072f2:	2201      	movs	r2, #1
 80072f4:	601a      	str	r2, [r3, #0]
}
 80072f6:	bf00      	nop
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	4247004c 	.word	0x4247004c

08007304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007308:	b094      	sub	sp, #80	; 0x50
 800730a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	647b      	str	r3, [r7, #68]	; 0x44
 8007310:	2300      	movs	r3, #0
 8007312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007314:	2300      	movs	r3, #0
 8007316:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007318:	2300      	movs	r3, #0
 800731a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800731c:	4b79      	ldr	r3, [pc, #484]	; (8007504 <HAL_RCC_GetSysClockFreq+0x200>)
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f003 030c 	and.w	r3, r3, #12
 8007324:	2b08      	cmp	r3, #8
 8007326:	d00d      	beq.n	8007344 <HAL_RCC_GetSysClockFreq+0x40>
 8007328:	2b08      	cmp	r3, #8
 800732a:	f200 80e1 	bhi.w	80074f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <HAL_RCC_GetSysClockFreq+0x34>
 8007332:	2b04      	cmp	r3, #4
 8007334:	d003      	beq.n	800733e <HAL_RCC_GetSysClockFreq+0x3a>
 8007336:	e0db      	b.n	80074f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007338:	4b73      	ldr	r3, [pc, #460]	; (8007508 <HAL_RCC_GetSysClockFreq+0x204>)
 800733a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800733c:	e0db      	b.n	80074f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800733e:	4b73      	ldr	r3, [pc, #460]	; (800750c <HAL_RCC_GetSysClockFreq+0x208>)
 8007340:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007342:	e0d8      	b.n	80074f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007344:	4b6f      	ldr	r3, [pc, #444]	; (8007504 <HAL_RCC_GetSysClockFreq+0x200>)
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800734c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800734e:	4b6d      	ldr	r3, [pc, #436]	; (8007504 <HAL_RCC_GetSysClockFreq+0x200>)
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d063      	beq.n	8007422 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800735a:	4b6a      	ldr	r3, [pc, #424]	; (8007504 <HAL_RCC_GetSysClockFreq+0x200>)
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	099b      	lsrs	r3, r3, #6
 8007360:	2200      	movs	r2, #0
 8007362:	63bb      	str	r3, [r7, #56]	; 0x38
 8007364:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736c:	633b      	str	r3, [r7, #48]	; 0x30
 800736e:	2300      	movs	r3, #0
 8007370:	637b      	str	r3, [r7, #52]	; 0x34
 8007372:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007376:	4622      	mov	r2, r4
 8007378:	462b      	mov	r3, r5
 800737a:	f04f 0000 	mov.w	r0, #0
 800737e:	f04f 0100 	mov.w	r1, #0
 8007382:	0159      	lsls	r1, r3, #5
 8007384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007388:	0150      	lsls	r0, r2, #5
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	4621      	mov	r1, r4
 8007390:	1a51      	subs	r1, r2, r1
 8007392:	6139      	str	r1, [r7, #16]
 8007394:	4629      	mov	r1, r5
 8007396:	eb63 0301 	sbc.w	r3, r3, r1
 800739a:	617b      	str	r3, [r7, #20]
 800739c:	f04f 0200 	mov.w	r2, #0
 80073a0:	f04f 0300 	mov.w	r3, #0
 80073a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80073a8:	4659      	mov	r1, fp
 80073aa:	018b      	lsls	r3, r1, #6
 80073ac:	4651      	mov	r1, sl
 80073ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80073b2:	4651      	mov	r1, sl
 80073b4:	018a      	lsls	r2, r1, #6
 80073b6:	4651      	mov	r1, sl
 80073b8:	ebb2 0801 	subs.w	r8, r2, r1
 80073bc:	4659      	mov	r1, fp
 80073be:	eb63 0901 	sbc.w	r9, r3, r1
 80073c2:	f04f 0200 	mov.w	r2, #0
 80073c6:	f04f 0300 	mov.w	r3, #0
 80073ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073d6:	4690      	mov	r8, r2
 80073d8:	4699      	mov	r9, r3
 80073da:	4623      	mov	r3, r4
 80073dc:	eb18 0303 	adds.w	r3, r8, r3
 80073e0:	60bb      	str	r3, [r7, #8]
 80073e2:	462b      	mov	r3, r5
 80073e4:	eb49 0303 	adc.w	r3, r9, r3
 80073e8:	60fb      	str	r3, [r7, #12]
 80073ea:	f04f 0200 	mov.w	r2, #0
 80073ee:	f04f 0300 	mov.w	r3, #0
 80073f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80073f6:	4629      	mov	r1, r5
 80073f8:	024b      	lsls	r3, r1, #9
 80073fa:	4621      	mov	r1, r4
 80073fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007400:	4621      	mov	r1, r4
 8007402:	024a      	lsls	r2, r1, #9
 8007404:	4610      	mov	r0, r2
 8007406:	4619      	mov	r1, r3
 8007408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800740a:	2200      	movs	r2, #0
 800740c:	62bb      	str	r3, [r7, #40]	; 0x28
 800740e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007410:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007414:	f7f9 fbe8 	bl	8000be8 <__aeabi_uldivmod>
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	4613      	mov	r3, r2
 800741e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007420:	e058      	b.n	80074d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007422:	4b38      	ldr	r3, [pc, #224]	; (8007504 <HAL_RCC_GetSysClockFreq+0x200>)
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	099b      	lsrs	r3, r3, #6
 8007428:	2200      	movs	r2, #0
 800742a:	4618      	mov	r0, r3
 800742c:	4611      	mov	r1, r2
 800742e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007432:	623b      	str	r3, [r7, #32]
 8007434:	2300      	movs	r3, #0
 8007436:	627b      	str	r3, [r7, #36]	; 0x24
 8007438:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800743c:	4642      	mov	r2, r8
 800743e:	464b      	mov	r3, r9
 8007440:	f04f 0000 	mov.w	r0, #0
 8007444:	f04f 0100 	mov.w	r1, #0
 8007448:	0159      	lsls	r1, r3, #5
 800744a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800744e:	0150      	lsls	r0, r2, #5
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	4641      	mov	r1, r8
 8007456:	ebb2 0a01 	subs.w	sl, r2, r1
 800745a:	4649      	mov	r1, r9
 800745c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007460:	f04f 0200 	mov.w	r2, #0
 8007464:	f04f 0300 	mov.w	r3, #0
 8007468:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800746c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007470:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007474:	ebb2 040a 	subs.w	r4, r2, sl
 8007478:	eb63 050b 	sbc.w	r5, r3, fp
 800747c:	f04f 0200 	mov.w	r2, #0
 8007480:	f04f 0300 	mov.w	r3, #0
 8007484:	00eb      	lsls	r3, r5, #3
 8007486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800748a:	00e2      	lsls	r2, r4, #3
 800748c:	4614      	mov	r4, r2
 800748e:	461d      	mov	r5, r3
 8007490:	4643      	mov	r3, r8
 8007492:	18e3      	adds	r3, r4, r3
 8007494:	603b      	str	r3, [r7, #0]
 8007496:	464b      	mov	r3, r9
 8007498:	eb45 0303 	adc.w	r3, r5, r3
 800749c:	607b      	str	r3, [r7, #4]
 800749e:	f04f 0200 	mov.w	r2, #0
 80074a2:	f04f 0300 	mov.w	r3, #0
 80074a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80074aa:	4629      	mov	r1, r5
 80074ac:	028b      	lsls	r3, r1, #10
 80074ae:	4621      	mov	r1, r4
 80074b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80074b4:	4621      	mov	r1, r4
 80074b6:	028a      	lsls	r2, r1, #10
 80074b8:	4610      	mov	r0, r2
 80074ba:	4619      	mov	r1, r3
 80074bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074be:	2200      	movs	r2, #0
 80074c0:	61bb      	str	r3, [r7, #24]
 80074c2:	61fa      	str	r2, [r7, #28]
 80074c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074c8:	f7f9 fb8e 	bl	8000be8 <__aeabi_uldivmod>
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	4613      	mov	r3, r2
 80074d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80074d4:	4b0b      	ldr	r3, [pc, #44]	; (8007504 <HAL_RCC_GetSysClockFreq+0x200>)
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	0c1b      	lsrs	r3, r3, #16
 80074da:	f003 0303 	and.w	r3, r3, #3
 80074de:	3301      	adds	r3, #1
 80074e0:	005b      	lsls	r3, r3, #1
 80074e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80074e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80074ee:	e002      	b.n	80074f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074f0:	4b05      	ldr	r3, [pc, #20]	; (8007508 <HAL_RCC_GetSysClockFreq+0x204>)
 80074f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80074f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3750      	adds	r7, #80	; 0x50
 80074fc:	46bd      	mov	sp, r7
 80074fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007502:	bf00      	nop
 8007504:	40023800 	.word	0x40023800
 8007508:	00f42400 	.word	0x00f42400
 800750c:	007a1200 	.word	0x007a1200

08007510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007510:	b480      	push	{r7}
 8007512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007514:	4b03      	ldr	r3, [pc, #12]	; (8007524 <HAL_RCC_GetHCLKFreq+0x14>)
 8007516:	681b      	ldr	r3, [r3, #0]
}
 8007518:	4618      	mov	r0, r3
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	2000002c 	.word	0x2000002c

08007528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800752c:	f7ff fff0 	bl	8007510 <HAL_RCC_GetHCLKFreq>
 8007530:	4602      	mov	r2, r0
 8007532:	4b05      	ldr	r3, [pc, #20]	; (8007548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	0a9b      	lsrs	r3, r3, #10
 8007538:	f003 0307 	and.w	r3, r3, #7
 800753c:	4903      	ldr	r1, [pc, #12]	; (800754c <HAL_RCC_GetPCLK1Freq+0x24>)
 800753e:	5ccb      	ldrb	r3, [r1, r3]
 8007540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007544:	4618      	mov	r0, r3
 8007546:	bd80      	pop	{r7, pc}
 8007548:	40023800 	.word	0x40023800
 800754c:	0800d454 	.word	0x0800d454

08007550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007554:	f7ff ffdc 	bl	8007510 <HAL_RCC_GetHCLKFreq>
 8007558:	4602      	mov	r2, r0
 800755a:	4b05      	ldr	r3, [pc, #20]	; (8007570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	0b5b      	lsrs	r3, r3, #13
 8007560:	f003 0307 	and.w	r3, r3, #7
 8007564:	4903      	ldr	r1, [pc, #12]	; (8007574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007566:	5ccb      	ldrb	r3, [r1, r3]
 8007568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800756c:	4618      	mov	r0, r3
 800756e:	bd80      	pop	{r7, pc}
 8007570:	40023800 	.word	0x40023800
 8007574:	0800d454 	.word	0x0800d454

08007578 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800757c:	4b06      	ldr	r3, [pc, #24]	; (8007598 <HAL_RCC_NMI_IRQHandler+0x20>)
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007584:	2b80      	cmp	r3, #128	; 0x80
 8007586:	d104      	bne.n	8007592 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007588:	f000 f80a 	bl	80075a0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800758c:	4b03      	ldr	r3, [pc, #12]	; (800759c <HAL_RCC_NMI_IRQHandler+0x24>)
 800758e:	2280      	movs	r2, #128	; 0x80
 8007590:	701a      	strb	r2, [r3, #0]
  }
}
 8007592:	bf00      	nop
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	40023800 	.word	0x40023800
 800759c:	4002380e 	.word	0x4002380e

080075a0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80075a0:	b480      	push	{r7}
 80075a2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80075a4:	bf00      	nop
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b082      	sub	sp, #8
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e041      	b.n	8007644 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d106      	bne.n	80075da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7fa fb5f 	bl	8001c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2202      	movs	r2, #2
 80075de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3304      	adds	r3, #4
 80075ea:	4619      	mov	r1, r3
 80075ec:	4610      	mov	r0, r2
 80075ee:	f000 f8f5 	bl	80077dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007660:	2b01      	cmp	r3, #1
 8007662:	d101      	bne.n	8007668 <HAL_TIM_ConfigClockSource+0x1c>
 8007664:	2302      	movs	r3, #2
 8007666:	e0b4      	b.n	80077d2 <HAL_TIM_ConfigClockSource+0x186>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800768e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076a0:	d03e      	beq.n	8007720 <HAL_TIM_ConfigClockSource+0xd4>
 80076a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076a6:	f200 8087 	bhi.w	80077b8 <HAL_TIM_ConfigClockSource+0x16c>
 80076aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ae:	f000 8086 	beq.w	80077be <HAL_TIM_ConfigClockSource+0x172>
 80076b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076b6:	d87f      	bhi.n	80077b8 <HAL_TIM_ConfigClockSource+0x16c>
 80076b8:	2b70      	cmp	r3, #112	; 0x70
 80076ba:	d01a      	beq.n	80076f2 <HAL_TIM_ConfigClockSource+0xa6>
 80076bc:	2b70      	cmp	r3, #112	; 0x70
 80076be:	d87b      	bhi.n	80077b8 <HAL_TIM_ConfigClockSource+0x16c>
 80076c0:	2b60      	cmp	r3, #96	; 0x60
 80076c2:	d050      	beq.n	8007766 <HAL_TIM_ConfigClockSource+0x11a>
 80076c4:	2b60      	cmp	r3, #96	; 0x60
 80076c6:	d877      	bhi.n	80077b8 <HAL_TIM_ConfigClockSource+0x16c>
 80076c8:	2b50      	cmp	r3, #80	; 0x50
 80076ca:	d03c      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0xfa>
 80076cc:	2b50      	cmp	r3, #80	; 0x50
 80076ce:	d873      	bhi.n	80077b8 <HAL_TIM_ConfigClockSource+0x16c>
 80076d0:	2b40      	cmp	r3, #64	; 0x40
 80076d2:	d058      	beq.n	8007786 <HAL_TIM_ConfigClockSource+0x13a>
 80076d4:	2b40      	cmp	r3, #64	; 0x40
 80076d6:	d86f      	bhi.n	80077b8 <HAL_TIM_ConfigClockSource+0x16c>
 80076d8:	2b30      	cmp	r3, #48	; 0x30
 80076da:	d064      	beq.n	80077a6 <HAL_TIM_ConfigClockSource+0x15a>
 80076dc:	2b30      	cmp	r3, #48	; 0x30
 80076de:	d86b      	bhi.n	80077b8 <HAL_TIM_ConfigClockSource+0x16c>
 80076e0:	2b20      	cmp	r3, #32
 80076e2:	d060      	beq.n	80077a6 <HAL_TIM_ConfigClockSource+0x15a>
 80076e4:	2b20      	cmp	r3, #32
 80076e6:	d867      	bhi.n	80077b8 <HAL_TIM_ConfigClockSource+0x16c>
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d05c      	beq.n	80077a6 <HAL_TIM_ConfigClockSource+0x15a>
 80076ec:	2b10      	cmp	r3, #16
 80076ee:	d05a      	beq.n	80077a6 <HAL_TIM_ConfigClockSource+0x15a>
 80076f0:	e062      	b.n	80077b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6818      	ldr	r0, [r3, #0]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	6899      	ldr	r1, [r3, #8]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	f000 f985 	bl	8007a10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007714:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	609a      	str	r2, [r3, #8]
      break;
 800771e:	e04f      	b.n	80077c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6818      	ldr	r0, [r3, #0]
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	6899      	ldr	r1, [r3, #8]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	685a      	ldr	r2, [r3, #4]
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f000 f96e 	bl	8007a10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689a      	ldr	r2, [r3, #8]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007742:	609a      	str	r2, [r3, #8]
      break;
 8007744:	e03c      	b.n	80077c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6818      	ldr	r0, [r3, #0]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	6859      	ldr	r1, [r3, #4]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	461a      	mov	r2, r3
 8007754:	f000 f8e2 	bl	800791c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2150      	movs	r1, #80	; 0x50
 800775e:	4618      	mov	r0, r3
 8007760:	f000 f93b 	bl	80079da <TIM_ITRx_SetConfig>
      break;
 8007764:	e02c      	b.n	80077c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	6859      	ldr	r1, [r3, #4]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	461a      	mov	r2, r3
 8007774:	f000 f901 	bl	800797a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2160      	movs	r1, #96	; 0x60
 800777e:	4618      	mov	r0, r3
 8007780:	f000 f92b 	bl	80079da <TIM_ITRx_SetConfig>
      break;
 8007784:	e01c      	b.n	80077c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6818      	ldr	r0, [r3, #0]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	6859      	ldr	r1, [r3, #4]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	461a      	mov	r2, r3
 8007794:	f000 f8c2 	bl	800791c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2140      	movs	r1, #64	; 0x40
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 f91b 	bl	80079da <TIM_ITRx_SetConfig>
      break;
 80077a4:	e00c      	b.n	80077c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4619      	mov	r1, r3
 80077b0:	4610      	mov	r0, r2
 80077b2:	f000 f912 	bl	80079da <TIM_ITRx_SetConfig>
      break;
 80077b6:	e003      	b.n	80077c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	73fb      	strb	r3, [r7, #15]
      break;
 80077bc:	e000      	b.n	80077c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80077be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
	...

080077dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a40      	ldr	r2, [pc, #256]	; (80078f0 <TIM_Base_SetConfig+0x114>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d013      	beq.n	800781c <TIM_Base_SetConfig+0x40>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077fa:	d00f      	beq.n	800781c <TIM_Base_SetConfig+0x40>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a3d      	ldr	r2, [pc, #244]	; (80078f4 <TIM_Base_SetConfig+0x118>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d00b      	beq.n	800781c <TIM_Base_SetConfig+0x40>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a3c      	ldr	r2, [pc, #240]	; (80078f8 <TIM_Base_SetConfig+0x11c>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d007      	beq.n	800781c <TIM_Base_SetConfig+0x40>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a3b      	ldr	r2, [pc, #236]	; (80078fc <TIM_Base_SetConfig+0x120>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d003      	beq.n	800781c <TIM_Base_SetConfig+0x40>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a3a      	ldr	r2, [pc, #232]	; (8007900 <TIM_Base_SetConfig+0x124>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d108      	bne.n	800782e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	4313      	orrs	r3, r2
 800782c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a2f      	ldr	r2, [pc, #188]	; (80078f0 <TIM_Base_SetConfig+0x114>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d02b      	beq.n	800788e <TIM_Base_SetConfig+0xb2>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800783c:	d027      	beq.n	800788e <TIM_Base_SetConfig+0xb2>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a2c      	ldr	r2, [pc, #176]	; (80078f4 <TIM_Base_SetConfig+0x118>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d023      	beq.n	800788e <TIM_Base_SetConfig+0xb2>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a2b      	ldr	r2, [pc, #172]	; (80078f8 <TIM_Base_SetConfig+0x11c>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d01f      	beq.n	800788e <TIM_Base_SetConfig+0xb2>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a2a      	ldr	r2, [pc, #168]	; (80078fc <TIM_Base_SetConfig+0x120>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d01b      	beq.n	800788e <TIM_Base_SetConfig+0xb2>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a29      	ldr	r2, [pc, #164]	; (8007900 <TIM_Base_SetConfig+0x124>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d017      	beq.n	800788e <TIM_Base_SetConfig+0xb2>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a28      	ldr	r2, [pc, #160]	; (8007904 <TIM_Base_SetConfig+0x128>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d013      	beq.n	800788e <TIM_Base_SetConfig+0xb2>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a27      	ldr	r2, [pc, #156]	; (8007908 <TIM_Base_SetConfig+0x12c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d00f      	beq.n	800788e <TIM_Base_SetConfig+0xb2>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a26      	ldr	r2, [pc, #152]	; (800790c <TIM_Base_SetConfig+0x130>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d00b      	beq.n	800788e <TIM_Base_SetConfig+0xb2>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a25      	ldr	r2, [pc, #148]	; (8007910 <TIM_Base_SetConfig+0x134>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d007      	beq.n	800788e <TIM_Base_SetConfig+0xb2>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a24      	ldr	r2, [pc, #144]	; (8007914 <TIM_Base_SetConfig+0x138>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d003      	beq.n	800788e <TIM_Base_SetConfig+0xb2>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a23      	ldr	r2, [pc, #140]	; (8007918 <TIM_Base_SetConfig+0x13c>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d108      	bne.n	80078a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	4313      	orrs	r3, r2
 800789e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	689a      	ldr	r2, [r3, #8]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a0a      	ldr	r2, [pc, #40]	; (80078f0 <TIM_Base_SetConfig+0x114>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d003      	beq.n	80078d4 <TIM_Base_SetConfig+0xf8>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a0c      	ldr	r2, [pc, #48]	; (8007900 <TIM_Base_SetConfig+0x124>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d103      	bne.n	80078dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	691a      	ldr	r2, [r3, #16]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	615a      	str	r2, [r3, #20]
}
 80078e2:	bf00      	nop
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	40010000 	.word	0x40010000
 80078f4:	40000400 	.word	0x40000400
 80078f8:	40000800 	.word	0x40000800
 80078fc:	40000c00 	.word	0x40000c00
 8007900:	40010400 	.word	0x40010400
 8007904:	40014000 	.word	0x40014000
 8007908:	40014400 	.word	0x40014400
 800790c:	40014800 	.word	0x40014800
 8007910:	40001800 	.word	0x40001800
 8007914:	40001c00 	.word	0x40001c00
 8007918:	40002000 	.word	0x40002000

0800791c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800791c:	b480      	push	{r7}
 800791e:	b087      	sub	sp, #28
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6a1b      	ldr	r3, [r3, #32]
 800792c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	f023 0201 	bic.w	r2, r3, #1
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	011b      	lsls	r3, r3, #4
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	4313      	orrs	r3, r2
 8007950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f023 030a 	bic.w	r3, r3, #10
 8007958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	4313      	orrs	r3, r2
 8007960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	621a      	str	r2, [r3, #32]
}
 800796e:	bf00      	nop
 8007970:	371c      	adds	r7, #28
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr

0800797a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800797a:	b480      	push	{r7}
 800797c:	b087      	sub	sp, #28
 800797e:	af00      	add	r7, sp, #0
 8007980:	60f8      	str	r0, [r7, #12]
 8007982:	60b9      	str	r1, [r7, #8]
 8007984:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	f023 0210 	bic.w	r2, r3, #16
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6a1b      	ldr	r3, [r3, #32]
 800799c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	031b      	lsls	r3, r3, #12
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	011b      	lsls	r3, r3, #4
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	4313      	orrs	r3, r2
 80079c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	621a      	str	r2, [r3, #32]
}
 80079ce:	bf00      	nop
 80079d0:	371c      	adds	r7, #28
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079da:	b480      	push	{r7}
 80079dc:	b085      	sub	sp, #20
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	f043 0307 	orr.w	r3, r3, #7
 80079fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	609a      	str	r2, [r3, #8]
}
 8007a04:	bf00      	nop
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b087      	sub	sp, #28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
 8007a1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	021a      	lsls	r2, r3, #8
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	431a      	orrs	r2, r3
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	609a      	str	r2, [r3, #8]
}
 8007a44:	bf00      	nop
 8007a46:	371c      	adds	r7, #28
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a64:	2302      	movs	r3, #2
 8007a66:	e05a      	b.n	8007b1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2202      	movs	r2, #2
 8007a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a21      	ldr	r2, [pc, #132]	; (8007b2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d022      	beq.n	8007af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ab4:	d01d      	beq.n	8007af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a1d      	ldr	r2, [pc, #116]	; (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d018      	beq.n	8007af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a1b      	ldr	r2, [pc, #108]	; (8007b34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d013      	beq.n	8007af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a1a      	ldr	r2, [pc, #104]	; (8007b38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d00e      	beq.n	8007af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a18      	ldr	r2, [pc, #96]	; (8007b3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d009      	beq.n	8007af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a17      	ldr	r2, [pc, #92]	; (8007b40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d004      	beq.n	8007af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a15      	ldr	r2, [pc, #84]	; (8007b44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d10c      	bne.n	8007b0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007af8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	40010000 	.word	0x40010000
 8007b30:	40000400 	.word	0x40000400
 8007b34:	40000800 	.word	0x40000800
 8007b38:	40000c00 	.word	0x40000c00
 8007b3c:	40010400 	.word	0x40010400
 8007b40:	40014000 	.word	0x40014000
 8007b44:	40001800 	.word	0x40001800

08007b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d101      	bne.n	8007b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e03f      	b.n	8007bda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d106      	bne.n	8007b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f837 	bl	8007be2 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2224      	movs	r2, #36	; 0x24
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68da      	ldr	r2, [r3, #12]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fdd5 	bl	800873c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	691a      	ldr	r2, [r3, #16]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	695a      	ldr	r2, [r3, #20]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68da      	ldr	r2, [r3, #12]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b083      	sub	sp, #12
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b08a      	sub	sp, #40	; 0x28
 8007bfa:	af02      	add	r7, sp, #8
 8007bfc:	60f8      	str	r0, [r7, #12]
 8007bfe:	60b9      	str	r1, [r7, #8]
 8007c00:	603b      	str	r3, [r7, #0]
 8007c02:	4613      	mov	r3, r2
 8007c04:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c06:	2300      	movs	r3, #0
 8007c08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b20      	cmp	r3, #32
 8007c14:	d17c      	bne.n	8007d10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <HAL_UART_Transmit+0x2c>
 8007c1c:	88fb      	ldrh	r3, [r7, #6]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e075      	b.n	8007d12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d101      	bne.n	8007c34 <HAL_UART_Transmit+0x3e>
 8007c30:	2302      	movs	r3, #2
 8007c32:	e06e      	b.n	8007d12 <HAL_UART_Transmit+0x11c>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2221      	movs	r2, #33	; 0x21
 8007c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c4a:	f7fe fc41 	bl	80064d0 <HAL_GetTick>
 8007c4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	88fa      	ldrh	r2, [r7, #6]
 8007c54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	88fa      	ldrh	r2, [r7, #6]
 8007c5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c64:	d108      	bne.n	8007c78 <HAL_UART_Transmit+0x82>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d104      	bne.n	8007c78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	61bb      	str	r3, [r7, #24]
 8007c76:	e003      	b.n	8007c80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007c88:	e02a      	b.n	8007ce0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	2200      	movs	r2, #0
 8007c92:	2180      	movs	r1, #128	; 0x80
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f000 fb0b 	bl	80082b0 <UART_WaitOnFlagUntilTimeout>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d001      	beq.n	8007ca4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e036      	b.n	8007d12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10b      	bne.n	8007cc2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	881b      	ldrh	r3, [r3, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	3302      	adds	r3, #2
 8007cbe:	61bb      	str	r3, [r7, #24]
 8007cc0:	e007      	b.n	8007cd2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	781a      	ldrb	r2, [r3, #0]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1cf      	bne.n	8007c8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	2140      	movs	r1, #64	; 0x40
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 fadb 	bl	80082b0 <UART_WaitOnFlagUntilTimeout>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d001      	beq.n	8007d04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e006      	b.n	8007d12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2220      	movs	r2, #32
 8007d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	e000      	b.n	8007d12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007d10:	2302      	movs	r3, #2
  }
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3720      	adds	r7, #32
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	60f8      	str	r0, [r7, #12]
 8007d22:	60b9      	str	r1, [r7, #8]
 8007d24:	4613      	mov	r3, r2
 8007d26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b20      	cmp	r3, #32
 8007d32:	d11d      	bne.n	8007d70 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d002      	beq.n	8007d40 <HAL_UART_Receive_IT+0x26>
 8007d3a:	88fb      	ldrh	r3, [r7, #6]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e016      	b.n	8007d72 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d101      	bne.n	8007d52 <HAL_UART_Receive_IT+0x38>
 8007d4e:	2302      	movs	r3, #2
 8007d50:	e00f      	b.n	8007d72 <HAL_UART_Receive_IT+0x58>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007d60:	88fb      	ldrh	r3, [r7, #6]
 8007d62:	461a      	mov	r2, r3
 8007d64:	68b9      	ldr	r1, [r7, #8]
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f000 fb10 	bl	800838c <UART_Start_Receive_IT>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	e000      	b.n	8007d72 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007d70:	2302      	movs	r3, #2
  }
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
	...

08007d7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b0ba      	sub	sp, #232	; 0xe8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007da8:	2300      	movs	r3, #0
 8007daa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007db2:	f003 030f 	and.w	r3, r3, #15
 8007db6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007dba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10f      	bne.n	8007de2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dc6:	f003 0320 	and.w	r3, r3, #32
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d009      	beq.n	8007de2 <HAL_UART_IRQHandler+0x66>
 8007dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dd2:	f003 0320 	and.w	r3, r3, #32
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d003      	beq.n	8007de2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fbf3 	bl	80085c6 <UART_Receive_IT>
      return;
 8007de0:	e256      	b.n	8008290 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007de2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f000 80de 	beq.w	8007fa8 <HAL_UART_IRQHandler+0x22c>
 8007dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d106      	bne.n	8007e06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dfc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 80d1 	beq.w	8007fa8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00b      	beq.n	8007e2a <HAL_UART_IRQHandler+0xae>
 8007e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d005      	beq.n	8007e2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e22:	f043 0201 	orr.w	r2, r3, #1
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e2e:	f003 0304 	and.w	r3, r3, #4
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00b      	beq.n	8007e4e <HAL_UART_IRQHandler+0xd2>
 8007e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d005      	beq.n	8007e4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e46:	f043 0202 	orr.w	r2, r3, #2
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e52:	f003 0302 	and.w	r3, r3, #2
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00b      	beq.n	8007e72 <HAL_UART_IRQHandler+0xf6>
 8007e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d005      	beq.n	8007e72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6a:	f043 0204 	orr.w	r2, r3, #4
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e76:	f003 0308 	and.w	r3, r3, #8
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d011      	beq.n	8007ea2 <HAL_UART_IRQHandler+0x126>
 8007e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e82:	f003 0320 	and.w	r3, r3, #32
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d105      	bne.n	8007e96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e8e:	f003 0301 	and.w	r3, r3, #1
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d005      	beq.n	8007ea2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9a:	f043 0208 	orr.w	r2, r3, #8
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 81ed 	beq.w	8008286 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb0:	f003 0320 	and.w	r3, r3, #32
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d008      	beq.n	8007eca <HAL_UART_IRQHandler+0x14e>
 8007eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ebc:	f003 0320 	and.w	r3, r3, #32
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d002      	beq.n	8007eca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fb7e 	bl	80085c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed4:	2b40      	cmp	r3, #64	; 0x40
 8007ed6:	bf0c      	ite	eq
 8007ed8:	2301      	moveq	r3, #1
 8007eda:	2300      	movne	r3, #0
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee6:	f003 0308 	and.w	r3, r3, #8
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d103      	bne.n	8007ef6 <HAL_UART_IRQHandler+0x17a>
 8007eee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d04f      	beq.n	8007f96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fa86 	bl	8008408 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f06:	2b40      	cmp	r3, #64	; 0x40
 8007f08:	d141      	bne.n	8007f8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3314      	adds	r3, #20
 8007f10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f18:	e853 3f00 	ldrex	r3, [r3]
 8007f1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007f20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3314      	adds	r3, #20
 8007f32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007f42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f46:	e841 2300 	strex	r3, r2, [r1]
 8007f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007f4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1d9      	bne.n	8007f0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d013      	beq.n	8007f86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f62:	4a7d      	ldr	r2, [pc, #500]	; (8008158 <HAL_UART_IRQHandler+0x3dc>)
 8007f64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fe fc3d 	bl	80067ea <HAL_DMA_Abort_IT>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d016      	beq.n	8007fa4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f80:	4610      	mov	r0, r2
 8007f82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f84:	e00e      	b.n	8007fa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7fb fc98 	bl	80038bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f8c:	e00a      	b.n	8007fa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7fb fc94 	bl	80038bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f94:	e006      	b.n	8007fa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7fb fc90 	bl	80038bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007fa2:	e170      	b.n	8008286 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fa4:	bf00      	nop
    return;
 8007fa6:	e16e      	b.n	8008286 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	f040 814a 	bne.w	8008246 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fb6:	f003 0310 	and.w	r3, r3, #16
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f000 8143 	beq.w	8008246 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fc4:	f003 0310 	and.w	r3, r3, #16
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 813c 	beq.w	8008246 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60bb      	str	r3, [r7, #8]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	60bb      	str	r3, [r7, #8]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	60bb      	str	r3, [r7, #8]
 8007fe2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fee:	2b40      	cmp	r3, #64	; 0x40
 8007ff0:	f040 80b4 	bne.w	800815c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008000:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008004:	2b00      	cmp	r3, #0
 8008006:	f000 8140 	beq.w	800828a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800800e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008012:	429a      	cmp	r2, r3
 8008014:	f080 8139 	bcs.w	800828a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800801e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008024:	69db      	ldr	r3, [r3, #28]
 8008026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800802a:	f000 8088 	beq.w	800813e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	330c      	adds	r3, #12
 8008034:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008038:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008044:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800804c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	330c      	adds	r3, #12
 8008056:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800805a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800805e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008062:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008066:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800806a:	e841 2300 	strex	r3, r2, [r1]
 800806e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008072:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1d9      	bne.n	800802e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3314      	adds	r3, #20
 8008080:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008084:	e853 3f00 	ldrex	r3, [r3]
 8008088:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800808a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800808c:	f023 0301 	bic.w	r3, r3, #1
 8008090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	3314      	adds	r3, #20
 800809a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800809e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80080a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80080a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80080aa:	e841 2300 	strex	r3, r2, [r1]
 80080ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80080b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1e1      	bne.n	800807a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3314      	adds	r3, #20
 80080bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080c0:	e853 3f00 	ldrex	r3, [r3]
 80080c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80080c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3314      	adds	r3, #20
 80080d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80080da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80080dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80080e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80080e2:	e841 2300 	strex	r3, r2, [r1]
 80080e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80080e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1e3      	bne.n	80080b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2220      	movs	r2, #32
 80080f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	330c      	adds	r3, #12
 8008102:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008106:	e853 3f00 	ldrex	r3, [r3]
 800810a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800810c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800810e:	f023 0310 	bic.w	r3, r3, #16
 8008112:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	330c      	adds	r3, #12
 800811c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008120:	65ba      	str	r2, [r7, #88]	; 0x58
 8008122:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008124:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008126:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008128:	e841 2300 	strex	r3, r2, [r1]
 800812c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800812e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1e3      	bne.n	80080fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008138:	4618      	mov	r0, r3
 800813a:	f7fe fae6 	bl	800670a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008146:	b29b      	uxth	r3, r3
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	b29b      	uxth	r3, r3
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f8a2 	bl	8008298 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008154:	e099      	b.n	800828a <HAL_UART_IRQHandler+0x50e>
 8008156:	bf00      	nop
 8008158:	080084cf 	.word	0x080084cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008164:	b29b      	uxth	r3, r3
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008170:	b29b      	uxth	r3, r3
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 808b 	beq.w	800828e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008178:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800817c:	2b00      	cmp	r3, #0
 800817e:	f000 8086 	beq.w	800828e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	330c      	adds	r3, #12
 8008188:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818c:	e853 3f00 	ldrex	r3, [r3]
 8008190:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008194:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008198:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	330c      	adds	r3, #12
 80081a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80081a6:	647a      	str	r2, [r7, #68]	; 0x44
 80081a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081ae:	e841 2300 	strex	r3, r2, [r1]
 80081b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1e3      	bne.n	8008182 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	3314      	adds	r3, #20
 80081c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c4:	e853 3f00 	ldrex	r3, [r3]
 80081c8:	623b      	str	r3, [r7, #32]
   return(result);
 80081ca:	6a3b      	ldr	r3, [r7, #32]
 80081cc:	f023 0301 	bic.w	r3, r3, #1
 80081d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	3314      	adds	r3, #20
 80081da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80081de:	633a      	str	r2, [r7, #48]	; 0x30
 80081e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081e6:	e841 2300 	strex	r3, r2, [r1]
 80081ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1e3      	bne.n	80081ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2220      	movs	r2, #32
 80081f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	330c      	adds	r3, #12
 8008206:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	e853 3f00 	ldrex	r3, [r3]
 800820e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f023 0310 	bic.w	r3, r3, #16
 8008216:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	330c      	adds	r3, #12
 8008220:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008224:	61fa      	str	r2, [r7, #28]
 8008226:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008228:	69b9      	ldr	r1, [r7, #24]
 800822a:	69fa      	ldr	r2, [r7, #28]
 800822c:	e841 2300 	strex	r3, r2, [r1]
 8008230:	617b      	str	r3, [r7, #20]
   return(result);
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1e3      	bne.n	8008200 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008238:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f82a 	bl	8008298 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008244:	e023      	b.n	800828e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800824a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800824e:	2b00      	cmp	r3, #0
 8008250:	d009      	beq.n	8008266 <HAL_UART_IRQHandler+0x4ea>
 8008252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f949 	bl	80084f6 <UART_Transmit_IT>
    return;
 8008264:	e014      	b.n	8008290 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800826a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00e      	beq.n	8008290 <HAL_UART_IRQHandler+0x514>
 8008272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800827a:	2b00      	cmp	r3, #0
 800827c:	d008      	beq.n	8008290 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f989 	bl	8008596 <UART_EndTransmit_IT>
    return;
 8008284:	e004      	b.n	8008290 <HAL_UART_IRQHandler+0x514>
    return;
 8008286:	bf00      	nop
 8008288:	e002      	b.n	8008290 <HAL_UART_IRQHandler+0x514>
      return;
 800828a:	bf00      	nop
 800828c:	e000      	b.n	8008290 <HAL_UART_IRQHandler+0x514>
      return;
 800828e:	bf00      	nop
  }
}
 8008290:	37e8      	adds	r7, #232	; 0xe8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop

08008298 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	460b      	mov	r3, r1
 80082a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b090      	sub	sp, #64	; 0x40
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	603b      	str	r3, [r7, #0]
 80082bc:	4613      	mov	r3, r2
 80082be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082c0:	e050      	b.n	8008364 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c8:	d04c      	beq.n	8008364 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80082ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d007      	beq.n	80082e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80082d0:	f7fe f8fe 	bl	80064d0 <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082dc:	429a      	cmp	r2, r3
 80082de:	d241      	bcs.n	8008364 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	330c      	adds	r3, #12
 80082e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ea:	e853 3f00 	ldrex	r3, [r3]
 80082ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	330c      	adds	r3, #12
 80082fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008300:	637a      	str	r2, [r7, #52]	; 0x34
 8008302:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008304:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008308:	e841 2300 	strex	r3, r2, [r1]
 800830c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800830e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1e5      	bne.n	80082e0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	3314      	adds	r3, #20
 800831a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	e853 3f00 	ldrex	r3, [r3]
 8008322:	613b      	str	r3, [r7, #16]
   return(result);
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	f023 0301 	bic.w	r3, r3, #1
 800832a:	63bb      	str	r3, [r7, #56]	; 0x38
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3314      	adds	r3, #20
 8008332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008334:	623a      	str	r2, [r7, #32]
 8008336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008338:	69f9      	ldr	r1, [r7, #28]
 800833a:	6a3a      	ldr	r2, [r7, #32]
 800833c:	e841 2300 	strex	r3, r2, [r1]
 8008340:	61bb      	str	r3, [r7, #24]
   return(result);
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1e5      	bne.n	8008314 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2220      	movs	r2, #32
 800834c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2220      	movs	r2, #32
 8008354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	e00f      	b.n	8008384 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	4013      	ands	r3, r2
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	429a      	cmp	r2, r3
 8008372:	bf0c      	ite	eq
 8008374:	2301      	moveq	r3, #1
 8008376:	2300      	movne	r3, #0
 8008378:	b2db      	uxtb	r3, r3
 800837a:	461a      	mov	r2, r3
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	429a      	cmp	r2, r3
 8008380:	d09f      	beq.n	80082c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3740      	adds	r7, #64	; 0x40
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	4613      	mov	r3, r2
 8008398:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	88fa      	ldrh	r2, [r7, #6]
 80083a4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	88fa      	ldrh	r2, [r7, #6]
 80083aa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2222      	movs	r2, #34	; 0x22
 80083b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d007      	beq.n	80083da <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	68da      	ldr	r2, [r3, #12]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083d8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	695a      	ldr	r2, [r3, #20]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f042 0201 	orr.w	r2, r2, #1
 80083e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68da      	ldr	r2, [r3, #12]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f042 0220 	orr.w	r2, r2, #32
 80083f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008408:	b480      	push	{r7}
 800840a:	b095      	sub	sp, #84	; 0x54
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	330c      	adds	r3, #12
 8008416:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841a:	e853 3f00 	ldrex	r3, [r3]
 800841e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008422:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	330c      	adds	r3, #12
 800842e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008430:	643a      	str	r2, [r7, #64]	; 0x40
 8008432:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008434:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008436:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008438:	e841 2300 	strex	r3, r2, [r1]
 800843c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800843e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1e5      	bne.n	8008410 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3314      	adds	r3, #20
 800844a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	e853 3f00 	ldrex	r3, [r3]
 8008452:	61fb      	str	r3, [r7, #28]
   return(result);
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	f023 0301 	bic.w	r3, r3, #1
 800845a:	64bb      	str	r3, [r7, #72]	; 0x48
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3314      	adds	r3, #20
 8008462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008464:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008466:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800846a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800846c:	e841 2300 	strex	r3, r2, [r1]
 8008470:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1e5      	bne.n	8008444 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847c:	2b01      	cmp	r3, #1
 800847e:	d119      	bne.n	80084b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	330c      	adds	r3, #12
 8008486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	e853 3f00 	ldrex	r3, [r3]
 800848e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	f023 0310 	bic.w	r3, r3, #16
 8008496:	647b      	str	r3, [r7, #68]	; 0x44
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	330c      	adds	r3, #12
 800849e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084a0:	61ba      	str	r2, [r7, #24]
 80084a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a4:	6979      	ldr	r1, [r7, #20]
 80084a6:	69ba      	ldr	r2, [r7, #24]
 80084a8:	e841 2300 	strex	r3, r2, [r1]
 80084ac:	613b      	str	r3, [r7, #16]
   return(result);
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e5      	bne.n	8008480 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2220      	movs	r2, #32
 80084b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80084c2:	bf00      	nop
 80084c4:	3754      	adds	r7, #84	; 0x54
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b084      	sub	sp, #16
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f7fb f9e7 	bl	80038bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084ee:	bf00      	nop
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b085      	sub	sp, #20
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b21      	cmp	r3, #33	; 0x21
 8008508:	d13e      	bne.n	8008588 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008512:	d114      	bne.n	800853e <UART_Transmit_IT+0x48>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d110      	bne.n	800853e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a1b      	ldr	r3, [r3, #32]
 8008520:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	461a      	mov	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008530:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	1c9a      	adds	r2, r3, #2
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	621a      	str	r2, [r3, #32]
 800853c:	e008      	b.n	8008550 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	1c59      	adds	r1, r3, #1
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	6211      	str	r1, [r2, #32]
 8008548:	781a      	ldrb	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008554:	b29b      	uxth	r3, r3
 8008556:	3b01      	subs	r3, #1
 8008558:	b29b      	uxth	r3, r3
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	4619      	mov	r1, r3
 800855e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10f      	bne.n	8008584 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68da      	ldr	r2, [r3, #12]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008572:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68da      	ldr	r2, [r3, #12]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008582:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008584:	2300      	movs	r3, #0
 8008586:	e000      	b.n	800858a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008588:	2302      	movs	r3, #2
  }
}
 800858a:	4618      	mov	r0, r3
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b082      	sub	sp, #8
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68da      	ldr	r2, [r3, #12]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2220      	movs	r2, #32
 80085b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7fb f955 	bl	8003866 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b08c      	sub	sp, #48	; 0x30
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b22      	cmp	r3, #34	; 0x22
 80085d8:	f040 80ab 	bne.w	8008732 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085e4:	d117      	bne.n	8008616 <UART_Receive_IT+0x50>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d113      	bne.n	8008616 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80085ee:	2300      	movs	r3, #0
 80085f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	b29b      	uxth	r3, r3
 8008600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008604:	b29a      	uxth	r2, r3
 8008606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008608:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800860e:	1c9a      	adds	r2, r3, #2
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	629a      	str	r2, [r3, #40]	; 0x28
 8008614:	e026      	b.n	8008664 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800861c:	2300      	movs	r3, #0
 800861e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008628:	d007      	beq.n	800863a <UART_Receive_IT+0x74>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d10a      	bne.n	8008648 <UART_Receive_IT+0x82>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d106      	bne.n	8008648 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	b2da      	uxtb	r2, r3
 8008642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008644:	701a      	strb	r2, [r3, #0]
 8008646:	e008      	b.n	800865a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008654:	b2da      	uxtb	r2, r3
 8008656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008658:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865e:	1c5a      	adds	r2, r3, #1
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008668:	b29b      	uxth	r3, r3
 800866a:	3b01      	subs	r3, #1
 800866c:	b29b      	uxth	r3, r3
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	4619      	mov	r1, r3
 8008672:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008674:	2b00      	cmp	r3, #0
 8008676:	d15a      	bne.n	800872e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68da      	ldr	r2, [r3, #12]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f022 0220 	bic.w	r2, r2, #32
 8008686:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68da      	ldr	r2, [r3, #12]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008696:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	695a      	ldr	r2, [r3, #20]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f022 0201 	bic.w	r2, r2, #1
 80086a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2220      	movs	r2, #32
 80086ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d135      	bne.n	8008724 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	330c      	adds	r3, #12
 80086c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	613b      	str	r3, [r7, #16]
   return(result);
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	f023 0310 	bic.w	r3, r3, #16
 80086d4:	627b      	str	r3, [r7, #36]	; 0x24
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	330c      	adds	r3, #12
 80086dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086de:	623a      	str	r2, [r7, #32]
 80086e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e2:	69f9      	ldr	r1, [r7, #28]
 80086e4:	6a3a      	ldr	r2, [r7, #32]
 80086e6:	e841 2300 	strex	r3, r2, [r1]
 80086ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1e5      	bne.n	80086be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 0310 	and.w	r3, r3, #16
 80086fc:	2b10      	cmp	r3, #16
 80086fe:	d10a      	bne.n	8008716 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008700:	2300      	movs	r3, #0
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800871a:	4619      	mov	r1, r3
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f7ff fdbb 	bl	8008298 <HAL_UARTEx_RxEventCallback>
 8008722:	e002      	b.n	800872a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7fb f8a9 	bl	800387c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	e002      	b.n	8008734 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	e000      	b.n	8008734 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008732:	2302      	movs	r3, #2
  }
}
 8008734:	4618      	mov	r0, r3
 8008736:	3730      	adds	r7, #48	; 0x30
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800873c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008740:	b0c0      	sub	sp, #256	; 0x100
 8008742:	af00      	add	r7, sp, #0
 8008744:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008758:	68d9      	ldr	r1, [r3, #12]
 800875a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	ea40 0301 	orr.w	r3, r0, r1
 8008764:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800876a:	689a      	ldr	r2, [r3, #8]
 800876c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	431a      	orrs	r2, r3
 8008774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	431a      	orrs	r2, r3
 800877c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008780:	69db      	ldr	r3, [r3, #28]
 8008782:	4313      	orrs	r3, r2
 8008784:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008794:	f021 010c 	bic.w	r1, r1, #12
 8008798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087a2:	430b      	orrs	r3, r1
 80087a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80087b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087b6:	6999      	ldr	r1, [r3, #24]
 80087b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	ea40 0301 	orr.w	r3, r0, r1
 80087c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	4b8f      	ldr	r3, [pc, #572]	; (8008a08 <UART_SetConfig+0x2cc>)
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d005      	beq.n	80087dc <UART_SetConfig+0xa0>
 80087d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	4b8d      	ldr	r3, [pc, #564]	; (8008a0c <UART_SetConfig+0x2d0>)
 80087d8:	429a      	cmp	r2, r3
 80087da:	d104      	bne.n	80087e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80087dc:	f7fe feb8 	bl	8007550 <HAL_RCC_GetPCLK2Freq>
 80087e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80087e4:	e003      	b.n	80087ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80087e6:	f7fe fe9f 	bl	8007528 <HAL_RCC_GetPCLK1Freq>
 80087ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087f2:	69db      	ldr	r3, [r3, #28]
 80087f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087f8:	f040 810c 	bne.w	8008a14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008800:	2200      	movs	r2, #0
 8008802:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008806:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800880a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800880e:	4622      	mov	r2, r4
 8008810:	462b      	mov	r3, r5
 8008812:	1891      	adds	r1, r2, r2
 8008814:	65b9      	str	r1, [r7, #88]	; 0x58
 8008816:	415b      	adcs	r3, r3
 8008818:	65fb      	str	r3, [r7, #92]	; 0x5c
 800881a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800881e:	4621      	mov	r1, r4
 8008820:	eb12 0801 	adds.w	r8, r2, r1
 8008824:	4629      	mov	r1, r5
 8008826:	eb43 0901 	adc.w	r9, r3, r1
 800882a:	f04f 0200 	mov.w	r2, #0
 800882e:	f04f 0300 	mov.w	r3, #0
 8008832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800883a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800883e:	4690      	mov	r8, r2
 8008840:	4699      	mov	r9, r3
 8008842:	4623      	mov	r3, r4
 8008844:	eb18 0303 	adds.w	r3, r8, r3
 8008848:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800884c:	462b      	mov	r3, r5
 800884e:	eb49 0303 	adc.w	r3, r9, r3
 8008852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008862:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008866:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800886a:	460b      	mov	r3, r1
 800886c:	18db      	adds	r3, r3, r3
 800886e:	653b      	str	r3, [r7, #80]	; 0x50
 8008870:	4613      	mov	r3, r2
 8008872:	eb42 0303 	adc.w	r3, r2, r3
 8008876:	657b      	str	r3, [r7, #84]	; 0x54
 8008878:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800887c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008880:	f7f8 f9b2 	bl	8000be8 <__aeabi_uldivmod>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4b61      	ldr	r3, [pc, #388]	; (8008a10 <UART_SetConfig+0x2d4>)
 800888a:	fba3 2302 	umull	r2, r3, r3, r2
 800888e:	095b      	lsrs	r3, r3, #5
 8008890:	011c      	lsls	r4, r3, #4
 8008892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008896:	2200      	movs	r2, #0
 8008898:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800889c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80088a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80088a4:	4642      	mov	r2, r8
 80088a6:	464b      	mov	r3, r9
 80088a8:	1891      	adds	r1, r2, r2
 80088aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80088ac:	415b      	adcs	r3, r3
 80088ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80088b4:	4641      	mov	r1, r8
 80088b6:	eb12 0a01 	adds.w	sl, r2, r1
 80088ba:	4649      	mov	r1, r9
 80088bc:	eb43 0b01 	adc.w	fp, r3, r1
 80088c0:	f04f 0200 	mov.w	r2, #0
 80088c4:	f04f 0300 	mov.w	r3, #0
 80088c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80088cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80088d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088d4:	4692      	mov	sl, r2
 80088d6:	469b      	mov	fp, r3
 80088d8:	4643      	mov	r3, r8
 80088da:	eb1a 0303 	adds.w	r3, sl, r3
 80088de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088e2:	464b      	mov	r3, r9
 80088e4:	eb4b 0303 	adc.w	r3, fp, r3
 80088e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80088ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80088fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008900:	460b      	mov	r3, r1
 8008902:	18db      	adds	r3, r3, r3
 8008904:	643b      	str	r3, [r7, #64]	; 0x40
 8008906:	4613      	mov	r3, r2
 8008908:	eb42 0303 	adc.w	r3, r2, r3
 800890c:	647b      	str	r3, [r7, #68]	; 0x44
 800890e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008912:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008916:	f7f8 f967 	bl	8000be8 <__aeabi_uldivmod>
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	4611      	mov	r1, r2
 8008920:	4b3b      	ldr	r3, [pc, #236]	; (8008a10 <UART_SetConfig+0x2d4>)
 8008922:	fba3 2301 	umull	r2, r3, r3, r1
 8008926:	095b      	lsrs	r3, r3, #5
 8008928:	2264      	movs	r2, #100	; 0x64
 800892a:	fb02 f303 	mul.w	r3, r2, r3
 800892e:	1acb      	subs	r3, r1, r3
 8008930:	00db      	lsls	r3, r3, #3
 8008932:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008936:	4b36      	ldr	r3, [pc, #216]	; (8008a10 <UART_SetConfig+0x2d4>)
 8008938:	fba3 2302 	umull	r2, r3, r3, r2
 800893c:	095b      	lsrs	r3, r3, #5
 800893e:	005b      	lsls	r3, r3, #1
 8008940:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008944:	441c      	add	r4, r3
 8008946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800894a:	2200      	movs	r2, #0
 800894c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008950:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008954:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008958:	4642      	mov	r2, r8
 800895a:	464b      	mov	r3, r9
 800895c:	1891      	adds	r1, r2, r2
 800895e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008960:	415b      	adcs	r3, r3
 8008962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008964:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008968:	4641      	mov	r1, r8
 800896a:	1851      	adds	r1, r2, r1
 800896c:	6339      	str	r1, [r7, #48]	; 0x30
 800896e:	4649      	mov	r1, r9
 8008970:	414b      	adcs	r3, r1
 8008972:	637b      	str	r3, [r7, #52]	; 0x34
 8008974:	f04f 0200 	mov.w	r2, #0
 8008978:	f04f 0300 	mov.w	r3, #0
 800897c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008980:	4659      	mov	r1, fp
 8008982:	00cb      	lsls	r3, r1, #3
 8008984:	4651      	mov	r1, sl
 8008986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800898a:	4651      	mov	r1, sl
 800898c:	00ca      	lsls	r2, r1, #3
 800898e:	4610      	mov	r0, r2
 8008990:	4619      	mov	r1, r3
 8008992:	4603      	mov	r3, r0
 8008994:	4642      	mov	r2, r8
 8008996:	189b      	adds	r3, r3, r2
 8008998:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800899c:	464b      	mov	r3, r9
 800899e:	460a      	mov	r2, r1
 80089a0:	eb42 0303 	adc.w	r3, r2, r3
 80089a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80089a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80089b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80089b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80089bc:	460b      	mov	r3, r1
 80089be:	18db      	adds	r3, r3, r3
 80089c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80089c2:	4613      	mov	r3, r2
 80089c4:	eb42 0303 	adc.w	r3, r2, r3
 80089c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80089d2:	f7f8 f909 	bl	8000be8 <__aeabi_uldivmod>
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	4b0d      	ldr	r3, [pc, #52]	; (8008a10 <UART_SetConfig+0x2d4>)
 80089dc:	fba3 1302 	umull	r1, r3, r3, r2
 80089e0:	095b      	lsrs	r3, r3, #5
 80089e2:	2164      	movs	r1, #100	; 0x64
 80089e4:	fb01 f303 	mul.w	r3, r1, r3
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	00db      	lsls	r3, r3, #3
 80089ec:	3332      	adds	r3, #50	; 0x32
 80089ee:	4a08      	ldr	r2, [pc, #32]	; (8008a10 <UART_SetConfig+0x2d4>)
 80089f0:	fba2 2303 	umull	r2, r3, r2, r3
 80089f4:	095b      	lsrs	r3, r3, #5
 80089f6:	f003 0207 	and.w	r2, r3, #7
 80089fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4422      	add	r2, r4
 8008a02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a04:	e105      	b.n	8008c12 <UART_SetConfig+0x4d6>
 8008a06:	bf00      	nop
 8008a08:	40011000 	.word	0x40011000
 8008a0c:	40011400 	.word	0x40011400
 8008a10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008a1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008a22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008a26:	4642      	mov	r2, r8
 8008a28:	464b      	mov	r3, r9
 8008a2a:	1891      	adds	r1, r2, r2
 8008a2c:	6239      	str	r1, [r7, #32]
 8008a2e:	415b      	adcs	r3, r3
 8008a30:	627b      	str	r3, [r7, #36]	; 0x24
 8008a32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a36:	4641      	mov	r1, r8
 8008a38:	1854      	adds	r4, r2, r1
 8008a3a:	4649      	mov	r1, r9
 8008a3c:	eb43 0501 	adc.w	r5, r3, r1
 8008a40:	f04f 0200 	mov.w	r2, #0
 8008a44:	f04f 0300 	mov.w	r3, #0
 8008a48:	00eb      	lsls	r3, r5, #3
 8008a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a4e:	00e2      	lsls	r2, r4, #3
 8008a50:	4614      	mov	r4, r2
 8008a52:	461d      	mov	r5, r3
 8008a54:	4643      	mov	r3, r8
 8008a56:	18e3      	adds	r3, r4, r3
 8008a58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008a5c:	464b      	mov	r3, r9
 8008a5e:	eb45 0303 	adc.w	r3, r5, r3
 8008a62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a76:	f04f 0200 	mov.w	r2, #0
 8008a7a:	f04f 0300 	mov.w	r3, #0
 8008a7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008a82:	4629      	mov	r1, r5
 8008a84:	008b      	lsls	r3, r1, #2
 8008a86:	4621      	mov	r1, r4
 8008a88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	008a      	lsls	r2, r1, #2
 8008a90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008a94:	f7f8 f8a8 	bl	8000be8 <__aeabi_uldivmod>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	4b60      	ldr	r3, [pc, #384]	; (8008c20 <UART_SetConfig+0x4e4>)
 8008a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8008aa2:	095b      	lsrs	r3, r3, #5
 8008aa4:	011c      	lsls	r4, r3, #4
 8008aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008ab0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008ab4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008ab8:	4642      	mov	r2, r8
 8008aba:	464b      	mov	r3, r9
 8008abc:	1891      	adds	r1, r2, r2
 8008abe:	61b9      	str	r1, [r7, #24]
 8008ac0:	415b      	adcs	r3, r3
 8008ac2:	61fb      	str	r3, [r7, #28]
 8008ac4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ac8:	4641      	mov	r1, r8
 8008aca:	1851      	adds	r1, r2, r1
 8008acc:	6139      	str	r1, [r7, #16]
 8008ace:	4649      	mov	r1, r9
 8008ad0:	414b      	adcs	r3, r1
 8008ad2:	617b      	str	r3, [r7, #20]
 8008ad4:	f04f 0200 	mov.w	r2, #0
 8008ad8:	f04f 0300 	mov.w	r3, #0
 8008adc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ae0:	4659      	mov	r1, fp
 8008ae2:	00cb      	lsls	r3, r1, #3
 8008ae4:	4651      	mov	r1, sl
 8008ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008aea:	4651      	mov	r1, sl
 8008aec:	00ca      	lsls	r2, r1, #3
 8008aee:	4610      	mov	r0, r2
 8008af0:	4619      	mov	r1, r3
 8008af2:	4603      	mov	r3, r0
 8008af4:	4642      	mov	r2, r8
 8008af6:	189b      	adds	r3, r3, r2
 8008af8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008afc:	464b      	mov	r3, r9
 8008afe:	460a      	mov	r2, r1
 8008b00:	eb42 0303 	adc.w	r3, r2, r3
 8008b04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008b14:	f04f 0200 	mov.w	r2, #0
 8008b18:	f04f 0300 	mov.w	r3, #0
 8008b1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008b20:	4649      	mov	r1, r9
 8008b22:	008b      	lsls	r3, r1, #2
 8008b24:	4641      	mov	r1, r8
 8008b26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b2a:	4641      	mov	r1, r8
 8008b2c:	008a      	lsls	r2, r1, #2
 8008b2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008b32:	f7f8 f859 	bl	8000be8 <__aeabi_uldivmod>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4b39      	ldr	r3, [pc, #228]	; (8008c20 <UART_SetConfig+0x4e4>)
 8008b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8008b40:	095b      	lsrs	r3, r3, #5
 8008b42:	2164      	movs	r1, #100	; 0x64
 8008b44:	fb01 f303 	mul.w	r3, r1, r3
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	011b      	lsls	r3, r3, #4
 8008b4c:	3332      	adds	r3, #50	; 0x32
 8008b4e:	4a34      	ldr	r2, [pc, #208]	; (8008c20 <UART_SetConfig+0x4e4>)
 8008b50:	fba2 2303 	umull	r2, r3, r2, r3
 8008b54:	095b      	lsrs	r3, r3, #5
 8008b56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b5a:	441c      	add	r4, r3
 8008b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b60:	2200      	movs	r2, #0
 8008b62:	673b      	str	r3, [r7, #112]	; 0x70
 8008b64:	677a      	str	r2, [r7, #116]	; 0x74
 8008b66:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008b6a:	4642      	mov	r2, r8
 8008b6c:	464b      	mov	r3, r9
 8008b6e:	1891      	adds	r1, r2, r2
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	415b      	adcs	r3, r3
 8008b74:	60fb      	str	r3, [r7, #12]
 8008b76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b7a:	4641      	mov	r1, r8
 8008b7c:	1851      	adds	r1, r2, r1
 8008b7e:	6039      	str	r1, [r7, #0]
 8008b80:	4649      	mov	r1, r9
 8008b82:	414b      	adcs	r3, r1
 8008b84:	607b      	str	r3, [r7, #4]
 8008b86:	f04f 0200 	mov.w	r2, #0
 8008b8a:	f04f 0300 	mov.w	r3, #0
 8008b8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008b92:	4659      	mov	r1, fp
 8008b94:	00cb      	lsls	r3, r1, #3
 8008b96:	4651      	mov	r1, sl
 8008b98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b9c:	4651      	mov	r1, sl
 8008b9e:	00ca      	lsls	r2, r1, #3
 8008ba0:	4610      	mov	r0, r2
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	4642      	mov	r2, r8
 8008ba8:	189b      	adds	r3, r3, r2
 8008baa:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bac:	464b      	mov	r3, r9
 8008bae:	460a      	mov	r2, r1
 8008bb0:	eb42 0303 	adc.w	r3, r2, r3
 8008bb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	663b      	str	r3, [r7, #96]	; 0x60
 8008bc0:	667a      	str	r2, [r7, #100]	; 0x64
 8008bc2:	f04f 0200 	mov.w	r2, #0
 8008bc6:	f04f 0300 	mov.w	r3, #0
 8008bca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008bce:	4649      	mov	r1, r9
 8008bd0:	008b      	lsls	r3, r1, #2
 8008bd2:	4641      	mov	r1, r8
 8008bd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bd8:	4641      	mov	r1, r8
 8008bda:	008a      	lsls	r2, r1, #2
 8008bdc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008be0:	f7f8 f802 	bl	8000be8 <__aeabi_uldivmod>
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	4b0d      	ldr	r3, [pc, #52]	; (8008c20 <UART_SetConfig+0x4e4>)
 8008bea:	fba3 1302 	umull	r1, r3, r3, r2
 8008bee:	095b      	lsrs	r3, r3, #5
 8008bf0:	2164      	movs	r1, #100	; 0x64
 8008bf2:	fb01 f303 	mul.w	r3, r1, r3
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	011b      	lsls	r3, r3, #4
 8008bfa:	3332      	adds	r3, #50	; 0x32
 8008bfc:	4a08      	ldr	r2, [pc, #32]	; (8008c20 <UART_SetConfig+0x4e4>)
 8008bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8008c02:	095b      	lsrs	r3, r3, #5
 8008c04:	f003 020f 	and.w	r2, r3, #15
 8008c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4422      	add	r2, r4
 8008c10:	609a      	str	r2, [r3, #8]
}
 8008c12:	bf00      	nop
 8008c14:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c1e:	bf00      	nop
 8008c20:	51eb851f 	.word	0x51eb851f

08008c24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008c24:	480d      	ldr	r0, [pc, #52]	; (8008c5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008c26:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8008c28:	f7fb f824 	bl	8003c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008c2c:	480c      	ldr	r0, [pc, #48]	; (8008c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8008c2e:	490d      	ldr	r1, [pc, #52]	; (8008c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008c30:	4a0d      	ldr	r2, [pc, #52]	; (8008c68 <LoopForever+0xe>)
  movs r3, #0
 8008c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008c34:	e002      	b.n	8008c3c <LoopCopyDataInit>

08008c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008c3a:	3304      	adds	r3, #4

08008c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008c40:	d3f9      	bcc.n	8008c36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008c42:	4a0a      	ldr	r2, [pc, #40]	; (8008c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8008c44:	4c0a      	ldr	r4, [pc, #40]	; (8008c70 <LoopForever+0x16>)
  movs r3, #0
 8008c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008c48:	e001      	b.n	8008c4e <LoopFillZerobss>

08008c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008c4c:	3204      	adds	r2, #4

08008c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008c50:	d3fb      	bcc.n	8008c4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008c52:	f001 fbb7 	bl	800a3c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008c56:	f7fa fe3b 	bl	80038d0 <main>

08008c5a <LoopForever>:

LoopForever:
  b LoopForever
 8008c5a:	e7fe      	b.n	8008c5a <LoopForever>
  ldr   r0, =_estack
 8008c5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008c64:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8008c68:	0800d844 	.word	0x0800d844
  ldr r2, =_sbss
 8008c6c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8008c70:	20004e48 	.word	0x20004e48

08008c74 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008c74:	e7fe      	b.n	8008c74 <ADC_IRQHandler>

08008c76 <prv_out_fn_print>:
 * \param[in]       p: LwPRINTF internal instance
 * \param[in]       c: Character to print
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_fn_print(lwprintf_int_t* p, const char c) {
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b082      	sub	sp, #8
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
 8008c7e:	460b      	mov	r3, r1
 8008c80:	70fb      	strb	r3, [r7, #3]
    if (p->is_print_cancelled) {
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	7e1b      	ldrb	r3, [r3, #24]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <prv_out_fn_print+0x18>
        return 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	e01a      	b.n	8008cc4 <prv_out_fn_print+0x4e>
    }
    if (!p->lw->out_fn(c, p->lw)) { /*!< Send character to output */
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	78f8      	ldrb	r0, [r7, #3]
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	6812      	ldr	r2, [r2, #0]
 8008c9a:	4611      	mov	r1, r2
 8008c9c:	4798      	blx	r3
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d102      	bne.n	8008caa <prv_out_fn_print+0x34>
        p->is_print_cancelled = 1;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	761a      	strb	r2, [r3, #24]
    }
    if (c != '\0' && !p->is_print_cancelled) {
 8008caa:	78fb      	ldrb	r3, [r7, #3]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d008      	beq.n	8008cc2 <prv_out_fn_print+0x4c>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	7e1b      	ldrb	r3, [r3, #24]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d104      	bne.n	8008cc2 <prv_out_fn_print+0x4c>
        ++p->n;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	1c5a      	adds	r2, r3, #1
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	611a      	str	r2, [r3, #16]
    }
    return 1;
 8008cc2:	2301      	movs	r3, #1
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <prv_parse_num>:
 * \brief           Parse number from input string
 * \param[in,out]   format: Input text to process
 * \return          Parsed number
 */
static int
prv_parse_num(const char** format) {
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
    const char* fmt = *format;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	60fb      	str	r3, [r7, #12]
    int n = 0;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	60bb      	str	r3, [r7, #8]

    for (; CHARISNUM(*fmt); ++fmt) {
 8008cde:	e00d      	b.n	8008cfc <prv_parse_num+0x30>
        n = 10 * n + CHARTONUM(*fmt);
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4413      	add	r3, r2
 8008ce8:	005b      	lsls	r3, r3, #1
 8008cea:	461a      	mov	r2, r3
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	3b30      	subs	r3, #48	; 0x30
 8008cf2:	4413      	add	r3, r2
 8008cf4:	60bb      	str	r3, [r7, #8]
    for (; CHARISNUM(*fmt); ++fmt) {
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	60fb      	str	r3, [r7, #12]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b2f      	cmp	r3, #47	; 0x2f
 8008d02:	d903      	bls.n	8008d0c <prv_parse_num+0x40>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	2b39      	cmp	r3, #57	; 0x39
 8008d0a:	d9e9      	bls.n	8008ce0 <prv_parse_num+0x14>
    }
    *format = fmt;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	601a      	str	r2, [r3, #0]
    return n;
 8008d12:	68bb      	ldr	r3, [r7, #8]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <prv_out_str_before>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       buff_size: Expected buffer size of output string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_before(lwprintf_int_t* p, size_t buff_size) {
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
    /* Check for width */
    if (p->m.width > 0
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	dd12      	ble.n	8008d58 <prv_out_str_before+0x38>
        /* If number is negative, add negative sign or if positive and has plus sign forced */
        && (p->m.flags.is_negative || p->m.flags.plus)) {
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	7f5b      	ldrb	r3, [r3, #29]
 8008d36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d106      	bne.n	8008d4e <prv_out_str_before+0x2e>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	7f1b      	ldrb	r3, [r3, #28]
 8008d44:	f003 0302 	and.w	r3, r3, #2
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d004      	beq.n	8008d58 <prv_out_str_before+0x38>
        --p->m.width;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d52:	1e5a      	subs	r2, r3, #1
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Check for alternate mode */
    if (p->m.flags.alt && !p->m.flags.is_num_zero) {
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	7f1b      	ldrb	r3, [r3, #28]
 8008d5c:	f003 0320 	and.w	r3, r3, #32
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d02c      	beq.n	8008dc0 <prv_out_str_before+0xa0>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	7f9b      	ldrb	r3, [r3, #30]
 8008d6a:	f003 0301 	and.w	r3, r3, #1
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d125      	bne.n	8008dc0 <prv_out_str_before+0xa0>
        if (p->m.base == 8) {
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d7a:	2b08      	cmp	r3, #8
 8008d7c:	d109      	bne.n	8008d92 <prv_out_str_before+0x72>
            if (p->m.width > 0) {
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	dd1c      	ble.n	8008dc0 <prv_out_str_before+0xa0>
                --p->m.width;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8a:	1e5a      	subs	r2, r3, #1
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	625a      	str	r2, [r3, #36]	; 0x24
 8008d90:	e016      	b.n	8008dc0 <prv_out_str_before+0xa0>
            }
        } else if (p->m.base == 16 || p->m.base == 2) {
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d98:	2b10      	cmp	r3, #16
 8008d9a:	d004      	beq.n	8008da6 <prv_out_str_before+0x86>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d10c      	bne.n	8008dc0 <prv_out_str_before+0xa0>
            if (p->m.width >= 2) {
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	dd05      	ble.n	8008dba <prv_out_str_before+0x9a>
                p->m.width -= 2;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db2:	1e9a      	subs	r2, r3, #2
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	625a      	str	r2, [r3, #36]	; 0x24
 8008db8:	e002      	b.n	8008dc0 <prv_out_str_before+0xa0>
            } else {
                p->m.width = 0;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	625a      	str	r2, [r3, #36]	; 0x24
            }
        }
    }

    /* Add negative sign (or positive in case of + flag or space in case of space flag) before when zeros are used to fill width */
    if (p->m.flags.zero) {
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	7f1b      	ldrb	r3, [r3, #28]
 8008dc4:	f003 0308 	and.w	r3, r3, #8
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d025      	beq.n	8008e1a <prv_out_str_before+0xfa>
        if (p->m.flags.is_negative) {
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	7f5b      	ldrb	r3, [r3, #29]
 8008dd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d005      	beq.n	8008de8 <prv_out_str_before+0xc8>
            p->out_fn(p, '-');
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	695b      	ldr	r3, [r3, #20]
 8008de0:	212d      	movs	r1, #45	; 0x2d
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	4798      	blx	r3
 8008de6:	e018      	b.n	8008e1a <prv_out_str_before+0xfa>
        } else if (p->m.flags.plus) {
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	7f1b      	ldrb	r3, [r3, #28]
 8008dec:	f003 0302 	and.w	r3, r3, #2
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d005      	beq.n	8008e02 <prv_out_str_before+0xe2>
            p->out_fn(p, '+');
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	212b      	movs	r1, #43	; 0x2b
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	4798      	blx	r3
 8008e00:	e00b      	b.n	8008e1a <prv_out_str_before+0xfa>
        } else if (p->m.flags.space) {
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	7f1b      	ldrb	r3, [r3, #28]
 8008e06:	f003 0304 	and.w	r3, r3, #4
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d004      	beq.n	8008e1a <prv_out_str_before+0xfa>
            p->out_fn(p, ' ');
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	695b      	ldr	r3, [r3, #20]
 8008e14:	2120      	movs	r1, #32
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	4798      	blx	r3
        }
    }

    /* Check for flags output */
    if (p->m.flags.alt && !p->m.flags.is_num_zero) {
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	7f1b      	ldrb	r3, [r3, #28]
 8008e1e:	f003 0320 	and.w	r3, r3, #32
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d044      	beq.n	8008eb2 <prv_out_str_before+0x192>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	7f9b      	ldrb	r3, [r3, #30]
 8008e2c:	f003 0301 	and.w	r3, r3, #1
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d13d      	bne.n	8008eb2 <prv_out_str_before+0x192>
        if (p->m.base == 8) {
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e3c:	2b08      	cmp	r3, #8
 8008e3e:	d105      	bne.n	8008e4c <prv_out_str_before+0x12c>
            p->out_fn(p, '0');
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	695b      	ldr	r3, [r3, #20]
 8008e44:	2130      	movs	r1, #48	; 0x30
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	4798      	blx	r3
 8008e4a:	e032      	b.n	8008eb2 <prv_out_str_before+0x192>
        } else if (p->m.base == 16) {
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e52:	2b10      	cmp	r3, #16
 8008e54:	d114      	bne.n	8008e80 <prv_out_str_before+0x160>
            p->out_fn(p, '0');
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	2130      	movs	r1, #48	; 0x30
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	4798      	blx	r3
            p->out_fn(p, p->m.flags.uc ? 'X' : 'x');
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	695b      	ldr	r3, [r3, #20]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	7f52      	ldrb	r2, [r2, #29]
 8008e68:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8008e6c:	b2d2      	uxtb	r2, r2
 8008e6e:	2a00      	cmp	r2, #0
 8008e70:	d001      	beq.n	8008e76 <prv_out_str_before+0x156>
 8008e72:	2258      	movs	r2, #88	; 0x58
 8008e74:	e000      	b.n	8008e78 <prv_out_str_before+0x158>
 8008e76:	2278      	movs	r2, #120	; 0x78
 8008e78:	4611      	mov	r1, r2
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	4798      	blx	r3
 8008e7e:	e018      	b.n	8008eb2 <prv_out_str_before+0x192>
        } else if (p->m.base == 2) {
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d113      	bne.n	8008eb2 <prv_out_str_before+0x192>
            p->out_fn(p, '0');
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	695b      	ldr	r3, [r3, #20]
 8008e8e:	2130      	movs	r1, #48	; 0x30
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	4798      	blx	r3
            p->out_fn(p, p->m.flags.uc ? 'B' : 'b');
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	695b      	ldr	r3, [r3, #20]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	7f52      	ldrb	r2, [r2, #29]
 8008e9c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8008ea0:	b2d2      	uxtb	r2, r2
 8008ea2:	2a00      	cmp	r2, #0
 8008ea4:	d001      	beq.n	8008eaa <prv_out_str_before+0x18a>
 8008ea6:	2242      	movs	r2, #66	; 0x42
 8008ea8:	e000      	b.n	8008eac <prv_out_str_before+0x18c>
 8008eaa:	2262      	movs	r2, #98	; 0x62
 8008eac:	4611      	mov	r1, r2
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	4798      	blx	r3
        }
    }

    /* Right alignment, spaces or zeros */
    if (!p->m.flags.left_align && p->m.width > 0) {
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	7f1b      	ldrb	r3, [r3, #28]
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d125      	bne.n	8008f0c <prv_out_str_before+0x1ec>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	dd21      	ble.n	8008f0c <prv_out_str_before+0x1ec>
        for (size_t i = buff_size; !p->m.flags.left_align && i < (size_t)p->m.width; ++i) {
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	e011      	b.n	8008ef2 <prv_out_str_before+0x1d2>
            p->out_fn(p, p->m.flags.zero ? '0' : ' ');
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	7f12      	ldrb	r2, [r2, #28]
 8008ed6:	f002 0208 	and.w	r2, r2, #8
 8008eda:	b2d2      	uxtb	r2, r2
 8008edc:	2a00      	cmp	r2, #0
 8008ede:	d001      	beq.n	8008ee4 <prv_out_str_before+0x1c4>
 8008ee0:	2230      	movs	r2, #48	; 0x30
 8008ee2:	e000      	b.n	8008ee6 <prv_out_str_before+0x1c6>
 8008ee4:	2220      	movs	r2, #32
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	4798      	blx	r3
        for (size_t i = buff_size; !p->m.flags.left_align && i < (size_t)p->m.width; ++i) {
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	60fb      	str	r3, [r7, #12]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	7f1b      	ldrb	r3, [r3, #28]
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d105      	bne.n	8008f0c <prv_out_str_before+0x1ec>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f04:	461a      	mov	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d3e0      	bcc.n	8008ece <prv_out_str_before+0x1ae>
        }
    }

    /* Add negative sign here when spaces are used for width */
    if (!p->m.flags.zero) {
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	7f1b      	ldrb	r3, [r3, #28]
 8008f10:	f003 0308 	and.w	r3, r3, #8
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d12b      	bne.n	8008f72 <prv_out_str_before+0x252>
        if (p->m.flags.is_negative) {
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	7f5b      	ldrb	r3, [r3, #29]
 8008f1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d005      	beq.n	8008f34 <prv_out_str_before+0x214>
            p->out_fn(p, '-');
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	695b      	ldr	r3, [r3, #20]
 8008f2c:	212d      	movs	r1, #45	; 0x2d
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	4798      	blx	r3
 8008f32:	e01e      	b.n	8008f72 <prv_out_str_before+0x252>
        } else if (p->m.flags.plus) {
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	7f1b      	ldrb	r3, [r3, #28]
 8008f38:	f003 0302 	and.w	r3, r3, #2
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d005      	beq.n	8008f4e <prv_out_str_before+0x22e>
            p->out_fn(p, '+');
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	212b      	movs	r1, #43	; 0x2b
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	4798      	blx	r3
 8008f4c:	e011      	b.n	8008f72 <prv_out_str_before+0x252>
        } else if (p->m.flags.space && buff_size >= (size_t)p->m.width) {
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	7f1b      	ldrb	r3, [r3, #28]
 8008f52:	f003 0304 	and.w	r3, r3, #4
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00a      	beq.n	8008f72 <prv_out_str_before+0x252>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f60:	461a      	mov	r2, r3
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d304      	bcc.n	8008f72 <prv_out_str_before+0x252>
            p->out_fn(p, ' ');
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	2120      	movs	r1, #32
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	4798      	blx	r3
        }
    }

    return 1;
 8008f72:	2301      	movs	r3, #1
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <prv_out_str_after>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       buff_size: Expected buffer size of output string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_after(lwprintf_int_t* p, size_t buff_size) {
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
    /* Left alignment, but only with spaces */
    if (p->m.flags.left_align) {
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	7f1b      	ldrb	r3, [r3, #28]
 8008f8a:	f003 0301 	and.w	r3, r3, #1
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d010      	beq.n	8008fb6 <prv_out_str_after+0x3a>
        for (size_t i = buff_size; i < (size_t)p->m.width; ++i) {
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	60fb      	str	r3, [r7, #12]
 8008f98:	e007      	b.n	8008faa <prv_out_str_after+0x2e>
            p->out_fn(p, ' ');
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	2120      	movs	r1, #32
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	4798      	blx	r3
        for (size_t i = buff_size; i < (size_t)p->m.width; ++i) {
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	60fb      	str	r3, [r7, #12]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fae:	461a      	mov	r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d3f1      	bcc.n	8008f9a <prv_out_str_after+0x1e>
        }
    }
    return 1;
 8008fb6:	2301      	movs	r3, #1
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <prv_out_str_raw>:
 * \param[in]       buff: Buffer string
 * \param[in]       buff_size: Length of buffer to output
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_raw(lwprintf_int_t* p, const char* buff, size_t buff_size) {
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < buff_size; ++i) {
 8008fcc:	2300      	movs	r3, #0
 8008fce:	617b      	str	r3, [r7, #20]
 8008fd0:	e00b      	b.n	8008fea <prv_out_str_raw+0x2a>
        p->out_fn(p, buff[i]);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	68b9      	ldr	r1, [r7, #8]
 8008fd8:	697a      	ldr	r2, [r7, #20]
 8008fda:	440a      	add	r2, r1
 8008fdc:	7812      	ldrb	r2, [r2, #0]
 8008fde:	4611      	mov	r1, r2
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	4798      	blx	r3
    for (size_t i = 0; i < buff_size; ++i) {
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	617b      	str	r3, [r7, #20]
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d3ef      	bcc.n	8008fd2 <prv_out_str_raw+0x12>
    }
    return 1;
 8008ff2:	2301      	movs	r3, #1
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3718      	adds	r7, #24
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <prv_out_str>:
 * \param[in]       buff: Buffer string
 * \param[in]       buff_size: Length of buffer to output
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str(lwprintf_int_t* p, const char* buff, size_t buff_size) {
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
    prv_out_str_before(p, buff_size);    /* Implement pre-format */
 8009008:	6879      	ldr	r1, [r7, #4]
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f7ff fe88 	bl	8008d20 <prv_out_str_before>
    prv_out_str_raw(p, buff, buff_size); /* Print actual string */
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	68b9      	ldr	r1, [r7, #8]
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f7ff ffd3 	bl	8008fc0 <prv_out_str_raw>
    prv_out_str_after(p, buff_size);     /* Implement post-format */
 800901a:	6879      	ldr	r1, [r7, #4]
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f7ff ffad 	bl	8008f7c <prv_out_str_after>

    return 1;
 8009022:	2301      	movs	r3, #1
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <prv_unsigned_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_unsigned_int_to_str(lwprintf_int_t* p, unsigned int num) {
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
    OUTPUT_ANY_INT_TYPE(unsigned int, num);
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	bf0c      	ite	eq
 800903c:	2301      	moveq	r3, #1
 800903e:	2300      	movne	r3, #0
 8009040:	b2d9      	uxtb	r1, r3
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	7f93      	ldrb	r3, [r2, #30]
 8009046:	f361 0300 	bfi	r3, r1, #0, #1
 800904a:	7793      	strb	r3, [r2, #30]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10d      	bne.n	800906e <prv_unsigned_int_to_str+0x42>
 8009052:	2101      	movs	r1, #1
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7ff fe63 	bl	8008d20 <prv_out_str_before>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	2130      	movs	r1, #48	; 0x30
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	4798      	blx	r3
 8009064:	2101      	movs	r1, #1
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7ff ff88 	bl	8008f7c <prv_out_str_after>
 800906c:	e063      	b.n	8009136 <prv_unsigned_int_to_str+0x10a>
 800906e:	2300      	movs	r3, #0
 8009070:	74fb      	strb	r3, [r7, #19]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	617b      	str	r3, [r7, #20]
 8009076:	e00a      	b.n	800908e <prv_unsigned_int_to_str+0x62>
 8009078:	7cfb      	ldrb	r3, [r7, #19]
 800907a:	3301      	adds	r3, #1
 800907c:	74fb      	strb	r3, [r7, #19]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009084:	461a      	mov	r2, r3
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	fbb3 f3f2 	udiv	r3, r3, r2
 800908c:	617b      	str	r3, [r7, #20]
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1f1      	bne.n	8009078 <prv_unsigned_int_to_str+0x4c>
 8009094:	2301      	movs	r3, #1
 8009096:	617b      	str	r3, [r7, #20]
 8009098:	e007      	b.n	80090aa <prv_unsigned_int_to_str+0x7e>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090a0:	461a      	mov	r2, r3
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	fb02 f303 	mul.w	r3, r2, r3
 80090a8:	617b      	str	r3, [r7, #20]
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d2ee      	bcs.n	800909a <prv_unsigned_int_to_str+0x6e>
 80090bc:	7cfb      	ldrb	r3, [r7, #19]
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7ff fe2d 	bl	8008d20 <prv_out_str_before>
 80090c6:	e02e      	b.n	8009126 <prv_unsigned_int_to_str+0xfa>
 80090c8:	683a      	ldr	r2, [r7, #0]
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80090d0:	60fb      	str	r3, [r7, #12]
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	697a      	ldr	r2, [r7, #20]
 80090d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80090da:	6979      	ldr	r1, [r7, #20]
 80090dc:	fb01 f202 	mul.w	r2, r1, r2
 80090e0:	1a9b      	subs	r3, r3, r2
 80090e2:	603b      	str	r3, [r7, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090ea:	461a      	mov	r2, r3
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80090f2:	617b      	str	r3, [r7, #20]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	b2da      	uxtb	r2, r3
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2b09      	cmp	r3, #9
 80090fc:	d90a      	bls.n	8009114 <prv_unsigned_int_to_str+0xe8>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	7f5b      	ldrb	r3, [r3, #29]
 8009102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009106:	b2db      	uxtb	r3, r3
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <prv_unsigned_int_to_str+0xe4>
 800910c:	2337      	movs	r3, #55	; 0x37
 800910e:	e002      	b.n	8009116 <prv_unsigned_int_to_str+0xea>
 8009110:	2357      	movs	r3, #87	; 0x57
 8009112:	e000      	b.n	8009116 <prv_unsigned_int_to_str+0xea>
 8009114:	2330      	movs	r3, #48	; 0x30
 8009116:	4413      	add	r3, r2
 8009118:	72fb      	strb	r3, [r7, #11]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	7afa      	ldrb	r2, [r7, #11]
 8009120:	4611      	mov	r1, r2
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	4798      	blx	r3
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1cd      	bne.n	80090c8 <prv_unsigned_int_to_str+0x9c>
 800912c:	7cfb      	ldrb	r3, [r7, #19]
 800912e:	4619      	mov	r1, r3
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7ff ff23 	bl	8008f7c <prv_out_str_after>
    return 1;
 8009136:	2301      	movs	r3, #1
}
 8009138:	4618      	mov	r0, r3
 800913a:	3718      	adds	r7, #24
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <prv_unsigned_long_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_unsigned_long_int_to_str(lwprintf_int_t* p, unsigned long int num) {
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
    OUTPUT_ANY_INT_TYPE(unsigned long int, num);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	bf0c      	ite	eq
 8009150:	2301      	moveq	r3, #1
 8009152:	2300      	movne	r3, #0
 8009154:	b2d9      	uxtb	r1, r3
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	7f93      	ldrb	r3, [r2, #30]
 800915a:	f361 0300 	bfi	r3, r1, #0, #1
 800915e:	7793      	strb	r3, [r2, #30]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d10d      	bne.n	8009182 <prv_unsigned_long_int_to_str+0x42>
 8009166:	2101      	movs	r1, #1
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f7ff fdd9 	bl	8008d20 <prv_out_str_before>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	695b      	ldr	r3, [r3, #20]
 8009172:	2130      	movs	r1, #48	; 0x30
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	4798      	blx	r3
 8009178:	2101      	movs	r1, #1
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7ff fefe 	bl	8008f7c <prv_out_str_after>
 8009180:	e063      	b.n	800924a <prv_unsigned_long_int_to_str+0x10a>
 8009182:	2300      	movs	r3, #0
 8009184:	74fb      	strb	r3, [r7, #19]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	617b      	str	r3, [r7, #20]
 800918a:	e00a      	b.n	80091a2 <prv_unsigned_long_int_to_str+0x62>
 800918c:	7cfb      	ldrb	r3, [r7, #19]
 800918e:	3301      	adds	r3, #1
 8009190:	74fb      	strb	r3, [r7, #19]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009198:	461a      	mov	r2, r3
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	fbb3 f3f2 	udiv	r3, r3, r2
 80091a0:	617b      	str	r3, [r7, #20]
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1f1      	bne.n	800918c <prv_unsigned_long_int_to_str+0x4c>
 80091a8:	2301      	movs	r3, #1
 80091aa:	617b      	str	r3, [r7, #20]
 80091ac:	e007      	b.n	80091be <prv_unsigned_long_int_to_str+0x7e>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091b4:	461a      	mov	r2, r3
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	fb02 f303 	mul.w	r3, r2, r3
 80091bc:	617b      	str	r3, [r7, #20]
 80091be:	683a      	ldr	r2, [r7, #0]
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d2ee      	bcs.n	80091ae <prv_unsigned_long_int_to_str+0x6e>
 80091d0:	7cfb      	ldrb	r3, [r7, #19]
 80091d2:	4619      	mov	r1, r3
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f7ff fda3 	bl	8008d20 <prv_out_str_before>
 80091da:	e02e      	b.n	800923a <prv_unsigned_long_int_to_str+0xfa>
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e4:	60fb      	str	r3, [r7, #12]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80091ee:	6979      	ldr	r1, [r7, #20]
 80091f0:	fb01 f202 	mul.w	r2, r1, r2
 80091f4:	1a9b      	subs	r3, r3, r2
 80091f6:	603b      	str	r3, [r7, #0]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091fe:	461a      	mov	r2, r3
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	fbb3 f3f2 	udiv	r3, r3, r2
 8009206:	617b      	str	r3, [r7, #20]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	b2da      	uxtb	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2b09      	cmp	r3, #9
 8009210:	d90a      	bls.n	8009228 <prv_unsigned_long_int_to_str+0xe8>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	7f5b      	ldrb	r3, [r3, #29]
 8009216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800921a:	b2db      	uxtb	r3, r3
 800921c:	2b00      	cmp	r3, #0
 800921e:	d001      	beq.n	8009224 <prv_unsigned_long_int_to_str+0xe4>
 8009220:	2337      	movs	r3, #55	; 0x37
 8009222:	e002      	b.n	800922a <prv_unsigned_long_int_to_str+0xea>
 8009224:	2357      	movs	r3, #87	; 0x57
 8009226:	e000      	b.n	800922a <prv_unsigned_long_int_to_str+0xea>
 8009228:	2330      	movs	r3, #48	; 0x30
 800922a:	4413      	add	r3, r2
 800922c:	72fb      	strb	r3, [r7, #11]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	7afa      	ldrb	r2, [r7, #11]
 8009234:	4611      	mov	r1, r2
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	4798      	blx	r3
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1cd      	bne.n	80091dc <prv_unsigned_long_int_to_str+0x9c>
 8009240:	7cfb      	ldrb	r3, [r7, #19]
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7ff fe99 	bl	8008f7c <prv_out_str_after>
    return 1;
 800924a:	2301      	movs	r3, #1
}
 800924c:	4618      	mov	r0, r3
 800924e:	3718      	adds	r7, #24
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <prv_unsigned_longlong_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_unsigned_longlong_int_to_str(lwprintf_int_t* p, unsigned long long int num) {
 8009254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009258:	b090      	sub	sp, #64	; 0x40
 800925a:	af00      	add	r7, sp, #0
 800925c:	61f8      	str	r0, [r7, #28]
 800925e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    OUTPUT_ANY_INT_TYPE(unsigned long long int, num);
 8009262:	693a      	ldr	r2, [r7, #16]
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	4313      	orrs	r3, r2
 8009268:	2b00      	cmp	r3, #0
 800926a:	bf0c      	ite	eq
 800926c:	2301      	moveq	r3, #1
 800926e:	2300      	movne	r3, #0
 8009270:	b2d9      	uxtb	r1, r3
 8009272:	69fa      	ldr	r2, [r7, #28]
 8009274:	7f93      	ldrb	r3, [r2, #30]
 8009276:	f361 0300 	bfi	r3, r1, #0, #1
 800927a:	7793      	strb	r3, [r2, #30]
 800927c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009280:	4313      	orrs	r3, r2
 8009282:	d10d      	bne.n	80092a0 <prv_unsigned_longlong_int_to_str+0x4c>
 8009284:	2101      	movs	r1, #1
 8009286:	69f8      	ldr	r0, [r7, #28]
 8009288:	f7ff fd4a 	bl	8008d20 <prv_out_str_before>
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	695b      	ldr	r3, [r3, #20]
 8009290:	2130      	movs	r1, #48	; 0x30
 8009292:	69f8      	ldr	r0, [r7, #28]
 8009294:	4798      	blx	r3
 8009296:	2101      	movs	r1, #1
 8009298:	69f8      	ldr	r0, [r7, #28]
 800929a:	f7ff fe6f 	bl	8008f7c <prv_out_str_after>
 800929e:	e0a4      	b.n	80093ea <prv_unsigned_longlong_int_to_str+0x196>
 80092a0:	2300      	movs	r3, #0
 80092a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80092a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80092aa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80092ae:	e015      	b.n	80092dc <prv_unsigned_longlong_int_to_str+0x88>
 80092b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80092b4:	3301      	adds	r3, #1
 80092b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2200      	movs	r2, #0
 80092c4:	60bb      	str	r3, [r7, #8]
 80092c6:	60fa      	str	r2, [r7, #12]
 80092c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092cc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80092d0:	f7f7 fc8a 	bl	8000be8 <__aeabi_uldivmod>
 80092d4:	4602      	mov	r2, r0
 80092d6:	460b      	mov	r3, r1
 80092d8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80092dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80092e0:	4313      	orrs	r3, r2
 80092e2:	d1e5      	bne.n	80092b0 <prv_unsigned_longlong_int_to_str+0x5c>
 80092e4:	f04f 0201 	mov.w	r2, #1
 80092e8:	f04f 0300 	mov.w	r3, #0
 80092ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80092f0:	e016      	b.n	8009320 <prv_unsigned_longlong_int_to_str+0xcc>
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	2200      	movs	r2, #0
 80092fc:	4698      	mov	r8, r3
 80092fe:	4691      	mov	r9, r2
 8009300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009302:	fb08 f203 	mul.w	r2, r8, r3
 8009306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009308:	fb09 f303 	mul.w	r3, r9, r3
 800930c:	4413      	add	r3, r2
 800930e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009310:	fba2 4508 	umull	r4, r5, r2, r8
 8009314:	442b      	add	r3, r5
 8009316:	461d      	mov	r5, r3
 8009318:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800931c:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 8009320:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009324:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009328:	f7f7 fc5e 	bl	8000be8 <__aeabi_uldivmod>
 800932c:	4602      	mov	r2, r0
 800932e:	460b      	mov	r3, r1
 8009330:	69f9      	ldr	r1, [r7, #28]
 8009332:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8009336:	b2c9      	uxtb	r1, r1
 8009338:	2000      	movs	r0, #0
 800933a:	468a      	mov	sl, r1
 800933c:	4683      	mov	fp, r0
 800933e:	4552      	cmp	r2, sl
 8009340:	eb73 030b 	sbcs.w	r3, r3, fp
 8009344:	d2d5      	bcs.n	80092f2 <prv_unsigned_longlong_int_to_str+0x9e>
 8009346:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800934a:	4619      	mov	r1, r3
 800934c:	69f8      	ldr	r0, [r7, #28]
 800934e:	f7ff fce7 	bl	8008d20 <prv_out_str_before>
 8009352:	e040      	b.n	80093d6 <prv_unsigned_longlong_int_to_str+0x182>
 8009354:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009358:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800935c:	f7f7 fc44 	bl	8000be8 <__aeabi_uldivmod>
 8009360:	4602      	mov	r2, r0
 8009362:	460b      	mov	r3, r1
 8009364:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8009368:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800936c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009370:	f7f7 fc3a 	bl	8000be8 <__aeabi_uldivmod>
 8009374:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2200      	movs	r2, #0
 8009382:	603b      	str	r3, [r7, #0]
 8009384:	607a      	str	r2, [r7, #4]
 8009386:	e9d7 2300 	ldrd	r2, r3, [r7]
 800938a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800938e:	f7f7 fc2b 	bl	8000be8 <__aeabi_uldivmod>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800939a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800939e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093a2:	2a0a      	cmp	r2, #10
 80093a4:	f173 0300 	sbcs.w	r3, r3, #0
 80093a8:	d30a      	bcc.n	80093c0 <prv_unsigned_longlong_int_to_str+0x16c>
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	7f5b      	ldrb	r3, [r3, #29]
 80093ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <prv_unsigned_longlong_int_to_str+0x168>
 80093b8:	2337      	movs	r3, #55	; 0x37
 80093ba:	e002      	b.n	80093c2 <prv_unsigned_longlong_int_to_str+0x16e>
 80093bc:	2357      	movs	r3, #87	; 0x57
 80093be:	e000      	b.n	80093c2 <prv_unsigned_longlong_int_to_str+0x16e>
 80093c0:	2330      	movs	r3, #48	; 0x30
 80093c2:	440b      	add	r3, r1
 80093c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	695b      	ldr	r3, [r3, #20]
 80093cc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80093d0:	4611      	mov	r1, r2
 80093d2:	69f8      	ldr	r0, [r7, #28]
 80093d4:	4798      	blx	r3
 80093d6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80093da:	4313      	orrs	r3, r2
 80093dc:	d1ba      	bne.n	8009354 <prv_unsigned_longlong_int_to_str+0x100>
 80093de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093e2:	4619      	mov	r1, r3
 80093e4:	69f8      	ldr	r0, [r7, #28]
 80093e6:	f7ff fdc9 	bl	8008f7c <prv_out_str_after>
    return 1;
 80093ea:	2301      	movs	r3, #1
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3740      	adds	r7, #64	; 0x40
 80093f0:	46bd      	mov	sp, r7
 80093f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080093f6 <prv_sizet_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_sizet_to_str(lwprintf_int_t* p, size_t num) {
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b086      	sub	sp, #24
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	6039      	str	r1, [r7, #0]
    OUTPUT_ANY_INT_TYPE(size_t, num);
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	bf0c      	ite	eq
 8009406:	2301      	moveq	r3, #1
 8009408:	2300      	movne	r3, #0
 800940a:	b2d9      	uxtb	r1, r3
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	7f93      	ldrb	r3, [r2, #30]
 8009410:	f361 0300 	bfi	r3, r1, #0, #1
 8009414:	7793      	strb	r3, [r2, #30]
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d10d      	bne.n	8009438 <prv_sizet_to_str+0x42>
 800941c:	2101      	movs	r1, #1
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7ff fc7e 	bl	8008d20 <prv_out_str_before>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	695b      	ldr	r3, [r3, #20]
 8009428:	2130      	movs	r1, #48	; 0x30
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	4798      	blx	r3
 800942e:	2101      	movs	r1, #1
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7ff fda3 	bl	8008f7c <prv_out_str_after>
 8009436:	e063      	b.n	8009500 <prv_sizet_to_str+0x10a>
 8009438:	2300      	movs	r3, #0
 800943a:	74fb      	strb	r3, [r7, #19]
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	617b      	str	r3, [r7, #20]
 8009440:	e00a      	b.n	8009458 <prv_sizet_to_str+0x62>
 8009442:	7cfb      	ldrb	r3, [r7, #19]
 8009444:	3301      	adds	r3, #1
 8009446:	74fb      	strb	r3, [r7, #19]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800944e:	461a      	mov	r2, r3
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	fbb3 f3f2 	udiv	r3, r3, r2
 8009456:	617b      	str	r3, [r7, #20]
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1f1      	bne.n	8009442 <prv_sizet_to_str+0x4c>
 800945e:	2301      	movs	r3, #1
 8009460:	617b      	str	r3, [r7, #20]
 8009462:	e007      	b.n	8009474 <prv_sizet_to_str+0x7e>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800946a:	461a      	mov	r2, r3
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	fb02 f303 	mul.w	r3, r2, r3
 8009472:	617b      	str	r3, [r7, #20]
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	fbb2 f3f3 	udiv	r3, r2, r3
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8009482:	4293      	cmp	r3, r2
 8009484:	d2ee      	bcs.n	8009464 <prv_sizet_to_str+0x6e>
 8009486:	7cfb      	ldrb	r3, [r7, #19]
 8009488:	4619      	mov	r1, r3
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7ff fc48 	bl	8008d20 <prv_out_str_before>
 8009490:	e02e      	b.n	80094f0 <prv_sizet_to_str+0xfa>
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	fbb2 f3f3 	udiv	r3, r2, r3
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80094a4:	6979      	ldr	r1, [r7, #20]
 80094a6:	fb01 f202 	mul.w	r2, r1, r2
 80094aa:	1a9b      	subs	r3, r3, r2
 80094ac:	603b      	str	r3, [r7, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094b4:	461a      	mov	r2, r3
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80094bc:	617b      	str	r3, [r7, #20]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2b09      	cmp	r3, #9
 80094c6:	d90a      	bls.n	80094de <prv_sizet_to_str+0xe8>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	7f5b      	ldrb	r3, [r3, #29]
 80094cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d001      	beq.n	80094da <prv_sizet_to_str+0xe4>
 80094d6:	2337      	movs	r3, #55	; 0x37
 80094d8:	e002      	b.n	80094e0 <prv_sizet_to_str+0xea>
 80094da:	2357      	movs	r3, #87	; 0x57
 80094dc:	e000      	b.n	80094e0 <prv_sizet_to_str+0xea>
 80094de:	2330      	movs	r3, #48	; 0x30
 80094e0:	4413      	add	r3, r2
 80094e2:	72fb      	strb	r3, [r7, #11]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	695b      	ldr	r3, [r3, #20]
 80094e8:	7afa      	ldrb	r2, [r7, #11]
 80094ea:	4611      	mov	r1, r2
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	4798      	blx	r3
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1cd      	bne.n	8009492 <prv_sizet_to_str+0x9c>
 80094f6:	7cfb      	ldrb	r3, [r7, #19]
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7ff fd3e 	bl	8008f7c <prv_out_str_after>
    return 1;
 8009500:	2301      	movs	r3, #1
}
 8009502:	4618      	mov	r0, r3
 8009504:	3718      	adds	r7, #24
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <prv_umaxt_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_umaxt_to_str(lwprintf_int_t* p, uintmax_t num) {
 800950a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800950e:	b090      	sub	sp, #64	; 0x40
 8009510:	af00      	add	r7, sp, #0
 8009512:	61f8      	str	r0, [r7, #28]
 8009514:	e9c7 2304 	strd	r2, r3, [r7, #16]
    OUTPUT_ANY_INT_TYPE(uintmax_t, num);
 8009518:	693a      	ldr	r2, [r7, #16]
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	4313      	orrs	r3, r2
 800951e:	2b00      	cmp	r3, #0
 8009520:	bf0c      	ite	eq
 8009522:	2301      	moveq	r3, #1
 8009524:	2300      	movne	r3, #0
 8009526:	b2d9      	uxtb	r1, r3
 8009528:	69fa      	ldr	r2, [r7, #28]
 800952a:	7f93      	ldrb	r3, [r2, #30]
 800952c:	f361 0300 	bfi	r3, r1, #0, #1
 8009530:	7793      	strb	r3, [r2, #30]
 8009532:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009536:	4313      	orrs	r3, r2
 8009538:	d10d      	bne.n	8009556 <prv_umaxt_to_str+0x4c>
 800953a:	2101      	movs	r1, #1
 800953c:	69f8      	ldr	r0, [r7, #28]
 800953e:	f7ff fbef 	bl	8008d20 <prv_out_str_before>
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	2130      	movs	r1, #48	; 0x30
 8009548:	69f8      	ldr	r0, [r7, #28]
 800954a:	4798      	blx	r3
 800954c:	2101      	movs	r1, #1
 800954e:	69f8      	ldr	r0, [r7, #28]
 8009550:	f7ff fd14 	bl	8008f7c <prv_out_str_after>
 8009554:	e0a4      	b.n	80096a0 <prv_umaxt_to_str+0x196>
 8009556:	2300      	movs	r3, #0
 8009558:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800955c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009560:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8009564:	e015      	b.n	8009592 <prv_umaxt_to_str+0x88>
 8009566:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800956a:	3301      	adds	r3, #1
 800956c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009576:	b2db      	uxtb	r3, r3
 8009578:	2200      	movs	r2, #0
 800957a:	60bb      	str	r3, [r7, #8]
 800957c:	60fa      	str	r2, [r7, #12]
 800957e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009582:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009586:	f7f7 fb2f 	bl	8000be8 <__aeabi_uldivmod>
 800958a:	4602      	mov	r2, r0
 800958c:	460b      	mov	r3, r1
 800958e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8009592:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009596:	4313      	orrs	r3, r2
 8009598:	d1e5      	bne.n	8009566 <prv_umaxt_to_str+0x5c>
 800959a:	f04f 0201 	mov.w	r2, #1
 800959e:	f04f 0300 	mov.w	r3, #0
 80095a2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80095a6:	e016      	b.n	80095d6 <prv_umaxt_to_str+0xcc>
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	2200      	movs	r2, #0
 80095b2:	4698      	mov	r8, r3
 80095b4:	4691      	mov	r9, r2
 80095b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095b8:	fb08 f203 	mul.w	r2, r8, r3
 80095bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095be:	fb09 f303 	mul.w	r3, r9, r3
 80095c2:	4413      	add	r3, r2
 80095c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095c6:	fba2 4508 	umull	r4, r5, r2, r8
 80095ca:	442b      	add	r3, r5
 80095cc:	461d      	mov	r5, r3
 80095ce:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 80095d2:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 80095d6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80095da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80095de:	f7f7 fb03 	bl	8000be8 <__aeabi_uldivmod>
 80095e2:	4602      	mov	r2, r0
 80095e4:	460b      	mov	r3, r1
 80095e6:	69f9      	ldr	r1, [r7, #28]
 80095e8:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 80095ec:	b2c9      	uxtb	r1, r1
 80095ee:	2000      	movs	r0, #0
 80095f0:	468a      	mov	sl, r1
 80095f2:	4683      	mov	fp, r0
 80095f4:	4552      	cmp	r2, sl
 80095f6:	eb73 030b 	sbcs.w	r3, r3, fp
 80095fa:	d2d5      	bcs.n	80095a8 <prv_umaxt_to_str+0x9e>
 80095fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009600:	4619      	mov	r1, r3
 8009602:	69f8      	ldr	r0, [r7, #28]
 8009604:	f7ff fb8c 	bl	8008d20 <prv_out_str_before>
 8009608:	e040      	b.n	800968c <prv_umaxt_to_str+0x182>
 800960a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800960e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009612:	f7f7 fae9 	bl	8000be8 <__aeabi_uldivmod>
 8009616:	4602      	mov	r2, r0
 8009618:	460b      	mov	r3, r1
 800961a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800961e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009622:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009626:	f7f7 fadf 	bl	8000be8 <__aeabi_uldivmod>
 800962a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009634:	b2db      	uxtb	r3, r3
 8009636:	2200      	movs	r2, #0
 8009638:	603b      	str	r3, [r7, #0]
 800963a:	607a      	str	r2, [r7, #4]
 800963c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009640:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009644:	f7f7 fad0 	bl	8000be8 <__aeabi_uldivmod>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8009650:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8009654:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009658:	2a0a      	cmp	r2, #10
 800965a:	f173 0300 	sbcs.w	r3, r3, #0
 800965e:	d30a      	bcc.n	8009676 <prv_umaxt_to_str+0x16c>
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	7f5b      	ldrb	r3, [r3, #29]
 8009664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009668:	b2db      	uxtb	r3, r3
 800966a:	2b00      	cmp	r3, #0
 800966c:	d001      	beq.n	8009672 <prv_umaxt_to_str+0x168>
 800966e:	2337      	movs	r3, #55	; 0x37
 8009670:	e002      	b.n	8009678 <prv_umaxt_to_str+0x16e>
 8009672:	2357      	movs	r3, #87	; 0x57
 8009674:	e000      	b.n	8009678 <prv_umaxt_to_str+0x16e>
 8009676:	2330      	movs	r3, #48	; 0x30
 8009678:	440b      	add	r3, r1
 800967a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009686:	4611      	mov	r1, r2
 8009688:	69f8      	ldr	r0, [r7, #28]
 800968a:	4798      	blx	r3
 800968c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009690:	4313      	orrs	r3, r2
 8009692:	d1ba      	bne.n	800960a <prv_umaxt_to_str+0x100>
 8009694:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009698:	4619      	mov	r1, r3
 800969a:	69f8      	ldr	r0, [r7, #28]
 800969c:	f7ff fc6e 	bl	8008f7c <prv_out_str_after>
    return 1;
 80096a0:	2301      	movs	r3, #1
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3740      	adds	r7, #64	; 0x40
 80096a6:	46bd      	mov	sp, r7
 80096a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080096ac <prv_signed_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_signed_int_to_str(lwprintf_int_t* p, signed int num) {
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
    SIGNED_CHECK_NEGATIVE(p, num);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	da07      	bge.n	80096cc <prv_signed_int_to_str+0x20>
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	7f53      	ldrb	r3, [r2, #29]
 80096c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c4:	7753      	strb	r3, [r2, #29]
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	425b      	negs	r3, r3
 80096ca:	603b      	str	r3, [r7, #0]
    return prv_unsigned_int_to_str(p, num);
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	4619      	mov	r1, r3
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f7ff fcab 	bl	800902c <prv_unsigned_int_to_str>
 80096d6:	4603      	mov	r3, r0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3708      	adds	r7, #8
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <prv_signed_long_int_to_str>:
 * \param[in,out]   p: LwPRINTF instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_signed_long_int_to_str(lwprintf_int_t* p, signed long int num) {
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
    SIGNED_CHECK_NEGATIVE(p, num);
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	da07      	bge.n	8009700 <prv_signed_long_int_to_str+0x20>
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	7f53      	ldrb	r3, [r2, #29]
 80096f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096f8:	7753      	strb	r3, [r2, #29]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	425b      	negs	r3, r3
 80096fe:	603b      	str	r3, [r7, #0]
    return prv_unsigned_long_int_to_str(p, num);
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	4619      	mov	r1, r3
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f7ff fd1b 	bl	8009140 <prv_unsigned_long_int_to_str>
 800970a:	4603      	mov	r3, r0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <prv_signed_longlong_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_signed_longlong_int_to_str(lwprintf_int_t* p, signed long long int num) {
 8009714:	b5b0      	push	{r4, r5, r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	e9c7 2300 	strd	r2, r3, [r7]
    SIGNED_CHECK_NEGATIVE(p, num);
 8009720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009724:	2b00      	cmp	r3, #0
 8009726:	da0c      	bge.n	8009742 <prv_signed_longlong_int_to_str+0x2e>
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	7f53      	ldrb	r3, [r2, #29]
 800972c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009730:	7753      	strb	r3, [r2, #29]
 8009732:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009736:	2100      	movs	r1, #0
 8009738:	4254      	negs	r4, r2
 800973a:	eb61 0503 	sbc.w	r5, r1, r3
 800973e:	e9c7 4500 	strd	r4, r5, [r7]
    return prv_unsigned_longlong_int_to_str(p, num);
 8009742:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f7ff fd84 	bl	8009254 <prv_unsigned_longlong_int_to_str>
 800974c:	4603      	mov	r3, r0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009758 <prv_format>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       arg: Variable parameters list
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_format(lwprintf_int_t* p, va_list arg) {
 8009758:	b580      	push	{r7, lr}
 800975a:	b08a      	sub	sp, #40	; 0x28
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
    uint8_t detected = 0;
 8009762:	2300      	movs	r3, #0
 8009764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    const char* fmt = p->fmt;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	60fb      	str	r3, [r7, #12]
         || !lwprintf_sys_mutex_wait(&p->lw->mutex))) { /* Cannot acquire mutex */
        return 0;
    }
#endif /* LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT */

    while (fmt != NULL && *fmt != '\0') {
 800976e:	e39f      	b.n	8009eb0 <prv_format+0x758>
        /* Check if we should stop processing */
        if (p->is_print_cancelled) {
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	7e1b      	ldrb	r3, [r3, #24]
 8009774:	2b00      	cmp	r3, #0
 8009776:	f040 83a4 	bne.w	8009ec2 <prv_format+0x76a>
            break;
        }

        /* Detect beginning */
        if (*fmt != '%') {
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	2b25      	cmp	r3, #37	; 0x25
 8009780:	d00a      	beq.n	8009798 <prv_format+0x40>
            p->out_fn(p, *fmt); /* Output character */
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	695b      	ldr	r3, [r3, #20]
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	7812      	ldrb	r2, [r2, #0]
 800978a:	4611      	mov	r1, r2
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	4798      	blx	r3
            ++fmt;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	3301      	adds	r3, #1
 8009794:	60fb      	str	r3, [r7, #12]
            continue;
 8009796:	e38b      	b.n	8009eb0 <prv_format+0x758>
        }
        ++fmt;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	3301      	adds	r3, #1
 800979c:	60fb      	str	r3, [r7, #12]
        memset(&p->m, 0x00, sizeof(p->m)); /* Reset structure */
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	331c      	adds	r3, #28
 80097a2:	2210      	movs	r2, #16
 80097a4:	2100      	movs	r1, #0
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 fe58 	bl	800a45c <memset>
        /* %[flags][width][.precision][length]type */
        /* Go to https://docs.majerle.eu for more info about supported features */

        /* Check [flags] */
        /* It can have multiple flags in any order */
        detected = 1;
 80097ac:	2301      	movs	r3, #1
 80097ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        do {
            switch (*fmt) {
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	3b20      	subs	r3, #32
 80097b8:	2b10      	cmp	r3, #16
 80097ba:	d849      	bhi.n	8009850 <prv_format+0xf8>
 80097bc:	a201      	add	r2, pc, #4	; (adr r2, 80097c4 <prv_format+0x6c>)
 80097be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c2:	bf00      	nop
 80097c4:	08009821 	.word	0x08009821
 80097c8:	08009851 	.word	0x08009851
 80097cc:	08009851 	.word	0x08009851
 80097d0:	08009845 	.word	0x08009845
 80097d4:	08009851 	.word	0x08009851
 80097d8:	08009851 	.word	0x08009851
 80097dc:	08009851 	.word	0x08009851
 80097e0:	08009839 	.word	0x08009839
 80097e4:	08009851 	.word	0x08009851
 80097e8:	08009851 	.word	0x08009851
 80097ec:	08009851 	.word	0x08009851
 80097f0:	08009815 	.word	0x08009815
 80097f4:	08009851 	.word	0x08009851
 80097f8:	08009809 	.word	0x08009809
 80097fc:	08009851 	.word	0x08009851
 8009800:	08009851 	.word	0x08009851
 8009804:	0800982d 	.word	0x0800982d
                case '-':
                    p->m.flags.left_align = 1;
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	7f13      	ldrb	r3, [r2, #28]
 800980c:	f043 0301 	orr.w	r3, r3, #1
 8009810:	7713      	strb	r3, [r2, #28]
                    break;
 8009812:	e021      	b.n	8009858 <prv_format+0x100>
                case '+':
                    p->m.flags.plus = 1;
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	7f13      	ldrb	r3, [r2, #28]
 8009818:	f043 0302 	orr.w	r3, r3, #2
 800981c:	7713      	strb	r3, [r2, #28]
                    break;
 800981e:	e01b      	b.n	8009858 <prv_format+0x100>
                case ' ':
                    p->m.flags.space = 1;
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	7f13      	ldrb	r3, [r2, #28]
 8009824:	f043 0304 	orr.w	r3, r3, #4
 8009828:	7713      	strb	r3, [r2, #28]
                    break;
 800982a:	e015      	b.n	8009858 <prv_format+0x100>
                case '0':
                    p->m.flags.zero = 1;
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	7f13      	ldrb	r3, [r2, #28]
 8009830:	f043 0308 	orr.w	r3, r3, #8
 8009834:	7713      	strb	r3, [r2, #28]
                    break;
 8009836:	e00f      	b.n	8009858 <prv_format+0x100>
                case '\'':
                    p->m.flags.thousands = 1;
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	7f13      	ldrb	r3, [r2, #28]
 800983c:	f043 0310 	orr.w	r3, r3, #16
 8009840:	7713      	strb	r3, [r2, #28]
                    break;
 8009842:	e009      	b.n	8009858 <prv_format+0x100>
                case '#':
                    p->m.flags.alt = 1;
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	7f13      	ldrb	r3, [r2, #28]
 8009848:	f043 0320 	orr.w	r3, r3, #32
 800984c:	7713      	strb	r3, [r2, #28]
                    break;
 800984e:	e003      	b.n	8009858 <prv_format+0x100>
                default:
                    detected = 0;
 8009850:	2300      	movs	r3, #0
 8009852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    break;
 8009856:	bf00      	nop
            }
            if (detected) {
 8009858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800985c:	2b00      	cmp	r3, #0
 800985e:	d002      	beq.n	8009866 <prv_format+0x10e>
                ++fmt;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	3301      	adds	r3, #1
 8009864:	60fb      	str	r3, [r7, #12]
            }
        } while (detected);
 8009866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1a1      	bne.n	80097b2 <prv_format+0x5a>

        /* Check [width] */
        p->m.width = 0;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	625a      	str	r2, [r3, #36]	; 0x24
        if (CHARISNUM(*fmt)) { /* Fixed width check */
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	2b2f      	cmp	r3, #47	; 0x2f
 800987a:	d90c      	bls.n	8009896 <prv_format+0x13e>
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	2b39      	cmp	r3, #57	; 0x39
 8009882:	d808      	bhi.n	8009896 <prv_format+0x13e>
            /* If number is negative, it has been captured from previous step (left align) */
            p->m.width = prv_parse_num(&fmt); /* Number from string directly */
 8009884:	f107 030c 	add.w	r3, r7, #12
 8009888:	4618      	mov	r0, r3
 800988a:	f7ff fa1f 	bl	8008ccc <prv_parse_num>
 800988e:	4602      	mov	r2, r0
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	625a      	str	r2, [r3, #36]	; 0x24
 8009894:	e01b      	b.n	80098ce <prv_format+0x176>
        } else if (*fmt == '*') {             /* Or variable check */
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	2b2a      	cmp	r3, #42	; 0x2a
 800989c:	d117      	bne.n	80098ce <prv_format+0x176>
            const int w = (int)va_arg(arg, int);
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	1d1a      	adds	r2, r3, #4
 80098a2:	603a      	str	r2, [r7, #0]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	61fb      	str	r3, [r7, #28]
            if (w < 0) {
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	da09      	bge.n	80098c2 <prv_format+0x16a>
                p->m.flags.left_align = 1; /* Negative width means left aligned */
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	7f13      	ldrb	r3, [r2, #28]
 80098b2:	f043 0301 	orr.w	r3, r3, #1
 80098b6:	7713      	strb	r3, [r2, #28]
                p->m.width = -w;
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	425a      	negs	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	625a      	str	r2, [r3, #36]	; 0x24
 80098c0:	e002      	b.n	80098c8 <prv_format+0x170>
            } else {
                p->m.width = w;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	69fa      	ldr	r2, [r7, #28]
 80098c6:	625a      	str	r2, [r3, #36]	; 0x24
            }
            ++fmt;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	3301      	adds	r3, #1
 80098cc:	60fb      	str	r3, [r7, #12]
        }

        /* Check [.precision] */
        p->m.precision = 0;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	621a      	str	r2, [r3, #32]
        if (*fmt == '.') { /* Precision flag is detected */
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	2b2e      	cmp	r3, #46	; 0x2e
 80098da:	d129      	bne.n	8009930 <prv_format+0x1d8>
            p->m.flags.precision = 1;
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	7f13      	ldrb	r3, [r2, #28]
 80098e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098e4:	7713      	strb	r3, [r2, #28]
            if (*++fmt == '*') { /* Variable check */
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	3301      	adds	r3, #1
 80098ea:	60fb      	str	r3, [r7, #12]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	2b2a      	cmp	r3, #42	; 0x2a
 80098f2:	d10d      	bne.n	8009910 <prv_format+0x1b8>
                const int pr = (int)va_arg(arg, int);
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	1d1a      	adds	r2, r3, #4
 80098f8:	603a      	str	r2, [r7, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	61bb      	str	r3, [r7, #24]
                p->m.precision = pr > 0 ? pr : 0;
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	621a      	str	r2, [r3, #32]
                ++fmt;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	3301      	adds	r3, #1
 800990c:	60fb      	str	r3, [r7, #12]
 800990e:	e00f      	b.n	8009930 <prv_format+0x1d8>
            } else if (CHARISNUM(*fmt)) { /* Directly in the string */
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	2b2f      	cmp	r3, #47	; 0x2f
 8009916:	d90b      	bls.n	8009930 <prv_format+0x1d8>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	2b39      	cmp	r3, #57	; 0x39
 800991e:	d807      	bhi.n	8009930 <prv_format+0x1d8>
                p->m.precision = prv_parse_num(&fmt);
 8009920:	f107 030c 	add.w	r3, r7, #12
 8009924:	4618      	mov	r0, r3
 8009926:	f7ff f9d1 	bl	8008ccc <prv_parse_num>
 800992a:	4602      	mov	r2, r0
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	621a      	str	r2, [r3, #32]
            }
        }

        /* Check [length] */
        detected = 1;
 8009930:	2301      	movs	r3, #1
 8009932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        switch (*fmt) {
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	3b4c      	subs	r3, #76	; 0x4c
 800993c:	2b2e      	cmp	r3, #46	; 0x2e
 800993e:	f200 80a1 	bhi.w	8009a84 <prv_format+0x32c>
 8009942:	a201      	add	r2, pc, #4	; (adr r2, 8009948 <prv_format+0x1f0>)
 8009944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009948:	08009a8d 	.word	0x08009a8d
 800994c:	08009a85 	.word	0x08009a85
 8009950:	08009a85 	.word	0x08009a85
 8009954:	08009a85 	.word	0x08009a85
 8009958:	08009a85 	.word	0x08009a85
 800995c:	08009a85 	.word	0x08009a85
 8009960:	08009a85 	.word	0x08009a85
 8009964:	08009a85 	.word	0x08009a85
 8009968:	08009a85 	.word	0x08009a85
 800996c:	08009a85 	.word	0x08009a85
 8009970:	08009a85 	.word	0x08009a85
 8009974:	08009a85 	.word	0x08009a85
 8009978:	08009a85 	.word	0x08009a85
 800997c:	08009a85 	.word	0x08009a85
 8009980:	08009a85 	.word	0x08009a85
 8009984:	08009a85 	.word	0x08009a85
 8009988:	08009a85 	.word	0x08009a85
 800998c:	08009a85 	.word	0x08009a85
 8009990:	08009a85 	.word	0x08009a85
 8009994:	08009a85 	.word	0x08009a85
 8009998:	08009a85 	.word	0x08009a85
 800999c:	08009a85 	.word	0x08009a85
 80099a0:	08009a85 	.word	0x08009a85
 80099a4:	08009a85 	.word	0x08009a85
 80099a8:	08009a85 	.word	0x08009a85
 80099ac:	08009a85 	.word	0x08009a85
 80099b0:	08009a85 	.word	0x08009a85
 80099b4:	08009a85 	.word	0x08009a85
 80099b8:	08009a05 	.word	0x08009a05
 80099bc:	08009a85 	.word	0x08009a85
 80099c0:	08009a73 	.word	0x08009a73
 80099c4:	08009a85 	.word	0x08009a85
 80099c8:	08009a33 	.word	0x08009a33
 80099cc:	08009a85 	.word	0x08009a85
 80099d0:	08009a85 	.word	0x08009a85
 80099d4:	08009a85 	.word	0x08009a85
 80099d8:	08009a85 	.word	0x08009a85
 80099dc:	08009a85 	.word	0x08009a85
 80099e0:	08009a85 	.word	0x08009a85
 80099e4:	08009a85 	.word	0x08009a85
 80099e8:	08009a8d 	.word	0x08009a8d
 80099ec:	08009a85 	.word	0x08009a85
 80099f0:	08009a85 	.word	0x08009a85
 80099f4:	08009a85 	.word	0x08009a85
 80099f8:	08009a85 	.word	0x08009a85
 80099fc:	08009a85 	.word	0x08009a85
 8009a00:	08009a61 	.word	0x08009a61
            case 'h':
                p->m.flags.char_short = 1;     /* Single h detected */
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	7f53      	ldrb	r3, [r2, #29]
 8009a08:	2101      	movs	r1, #1
 8009a0a:	f361 0383 	bfi	r3, r1, #2, #2
 8009a0e:	7753      	strb	r3, [r2, #29]
                if (*++fmt == 'h') {           /* Does it follow by another h? */
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	3301      	adds	r3, #1
 8009a14:	60fb      	str	r3, [r7, #12]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	2b68      	cmp	r3, #104	; 0x68
 8009a1c:	d138      	bne.n	8009a90 <prv_format+0x338>
                    p->m.flags.char_short = 2; /* Second h detected */
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	7f53      	ldrb	r3, [r2, #29]
 8009a22:	2102      	movs	r1, #2
 8009a24:	f361 0383 	bfi	r3, r1, #2, #2
 8009a28:	7753      	strb	r3, [r2, #29]
                    ++fmt;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	60fb      	str	r3, [r7, #12]
                }
                break;
 8009a30:	e02e      	b.n	8009a90 <prv_format+0x338>
            case 'l':
                p->m.flags.longlong = 1;     /* Single l detected */
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	7f53      	ldrb	r3, [r2, #29]
 8009a36:	2101      	movs	r1, #1
 8009a38:	f361 0301 	bfi	r3, r1, #0, #2
 8009a3c:	7753      	strb	r3, [r2, #29]
                if (*++fmt == 'l') {         /* Does it follow by another l? */
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	3301      	adds	r3, #1
 8009a42:	60fb      	str	r3, [r7, #12]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	2b6c      	cmp	r3, #108	; 0x6c
 8009a4a:	d123      	bne.n	8009a94 <prv_format+0x33c>
                    p->m.flags.longlong = 2; /* Second l detected */
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	7f53      	ldrb	r3, [r2, #29]
 8009a50:	2102      	movs	r1, #2
 8009a52:	f361 0301 	bfi	r3, r1, #0, #2
 8009a56:	7753      	strb	r3, [r2, #29]
                    ++fmt;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	60fb      	str	r3, [r7, #12]
                }
                break;
 8009a5e:	e019      	b.n	8009a94 <prv_format+0x33c>
            case 'L':
                break;
            case 'z':
                p->m.flags.sz_t = 1; /* Size T flag */
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	7f53      	ldrb	r3, [r2, #29]
 8009a64:	f043 0310 	orr.w	r3, r3, #16
 8009a68:	7753      	strb	r3, [r2, #29]
                ++fmt;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	60fb      	str	r3, [r7, #12]
                break;
 8009a70:	e011      	b.n	8009a96 <prv_format+0x33e>
            case 'j':
                p->m.flags.umax_t = 1; /* uintmax_t flag */
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	7f53      	ldrb	r3, [r2, #29]
 8009a76:	f043 0320 	orr.w	r3, r3, #32
 8009a7a:	7753      	strb	r3, [r2, #29]
                ++fmt;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	60fb      	str	r3, [r7, #12]
                break;
 8009a82:	e008      	b.n	8009a96 <prv_format+0x33e>
            case 't':
                break;
            default:
                detected = 0;
 8009a84:	2300      	movs	r3, #0
 8009a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a8a:	e004      	b.n	8009a96 <prv_format+0x33e>
                break;
 8009a8c:	bf00      	nop
 8009a8e:	e002      	b.n	8009a96 <prv_format+0x33e>
                break;
 8009a90:	bf00      	nop
 8009a92:	e000      	b.n	8009a96 <prv_format+0x33e>
                break;
 8009a94:	bf00      	nop
        }

        /* Check type */
        p->m.type = *fmt + ((*fmt >= 'A' && *fmt <= 'Z') ? 0x20 : 0x00);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	7812      	ldrb	r2, [r2, #0]
 8009a9e:	2a40      	cmp	r2, #64	; 0x40
 8009aa0:	d905      	bls.n	8009aae <prv_format+0x356>
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	7812      	ldrb	r2, [r2, #0]
 8009aa6:	2a5a      	cmp	r2, #90	; 0x5a
 8009aa8:	d801      	bhi.n	8009aae <prv_format+0x356>
 8009aaa:	2220      	movs	r2, #32
 8009aac:	e000      	b.n	8009ab0 <prv_format+0x358>
 8009aae:	2200      	movs	r2, #0
 8009ab0:	4413      	add	r3, r2
 8009ab2:	b2da      	uxtb	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        if (*fmt >= 'A' && *fmt <= 'Z') {
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	2b40      	cmp	r3, #64	; 0x40
 8009ac0:	d908      	bls.n	8009ad4 <prv_format+0x37c>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	2b5a      	cmp	r3, #90	; 0x5a
 8009ac8:	d804      	bhi.n	8009ad4 <prv_format+0x37c>
            p->m.flags.uc = 1;
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	7f53      	ldrb	r3, [r2, #29]
 8009ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ad2:	7753      	strb	r3, [r2, #29]
        }
        switch (*fmt) {
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	3b25      	subs	r3, #37	; 0x25
 8009ada:	2b53      	cmp	r3, #83	; 0x53
 8009adc:	f200 81d7 	bhi.w	8009e8e <prv_format+0x736>
 8009ae0:	a201      	add	r2, pc, #4	; (adr r2, 8009ae8 <prv_format+0x390>)
 8009ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae6:	bf00      	nop
 8009ae8:	08009e83 	.word	0x08009e83
 8009aec:	08009e8f 	.word	0x08009e8f
 8009af0:	08009e8f 	.word	0x08009e8f
 8009af4:	08009e8f 	.word	0x08009e8f
 8009af8:	08009e8f 	.word	0x08009e8f
 8009afc:	08009e8f 	.word	0x08009e8f
 8009b00:	08009e8f 	.word	0x08009e8f
 8009b04:	08009e8f 	.word	0x08009e8f
 8009b08:	08009e8f 	.word	0x08009e8f
 8009b0c:	08009e8f 	.word	0x08009e8f
 8009b10:	08009e8f 	.word	0x08009e8f
 8009b14:	08009e8f 	.word	0x08009e8f
 8009b18:	08009e8f 	.word	0x08009e8f
 8009b1c:	08009e8f 	.word	0x08009e8f
 8009b20:	08009e8f 	.word	0x08009e8f
 8009b24:	08009e8f 	.word	0x08009e8f
 8009b28:	08009e8f 	.word	0x08009e8f
 8009b2c:	08009e8f 	.word	0x08009e8f
 8009b30:	08009e8f 	.word	0x08009e8f
 8009b34:	08009e8f 	.word	0x08009e8f
 8009b38:	08009e8f 	.word	0x08009e8f
 8009b3c:	08009e8f 	.word	0x08009e8f
 8009b40:	08009e8f 	.word	0x08009e8f
 8009b44:	08009e8f 	.word	0x08009e8f
 8009b48:	08009e8f 	.word	0x08009e8f
 8009b4c:	08009e8f 	.word	0x08009e8f
 8009b50:	08009e8f 	.word	0x08009e8f
 8009b54:	08009e8f 	.word	0x08009e8f
 8009b58:	08009c39 	.word	0x08009c39
 8009b5c:	08009cd9 	.word	0x08009cd9
 8009b60:	08009e8f 	.word	0x08009e8f
 8009b64:	08009e8f 	.word	0x08009e8f
 8009b68:	08009e8f 	.word	0x08009e8f
 8009b6c:	08009e8f 	.word	0x08009e8f
 8009b70:	08009e8f 	.word	0x08009e8f
 8009b74:	08009e8f 	.word	0x08009e8f
 8009b78:	08009e8f 	.word	0x08009e8f
 8009b7c:	08009e8f 	.word	0x08009e8f
 8009b80:	08009e8f 	.word	0x08009e8f
 8009b84:	08009e8f 	.word	0x08009e8f
 8009b88:	08009e8f 	.word	0x08009e8f
 8009b8c:	08009e8f 	.word	0x08009e8f
 8009b90:	08009e8f 	.word	0x08009e8f
 8009b94:	08009e8f 	.word	0x08009e8f
 8009b98:	08009e8f 	.word	0x08009e8f
 8009b9c:	08009e8f 	.word	0x08009e8f
 8009ba0:	08009e8f 	.word	0x08009e8f
 8009ba4:	08009e8f 	.word	0x08009e8f
 8009ba8:	08009e8f 	.word	0x08009e8f
 8009bac:	08009e8f 	.word	0x08009e8f
 8009bb0:	08009e8f 	.word	0x08009e8f
 8009bb4:	08009cd9 	.word	0x08009cd9
 8009bb8:	08009e8f 	.word	0x08009e8f
 8009bbc:	08009e8f 	.word	0x08009e8f
 8009bc0:	08009e8f 	.word	0x08009e8f
 8009bc4:	08009e8f 	.word	0x08009e8f
 8009bc8:	08009e8f 	.word	0x08009e8f
 8009bcc:	08009e8f 	.word	0x08009e8f
 8009bd0:	08009e8f 	.word	0x08009e8f
 8009bd4:	08009e8f 	.word	0x08009e8f
 8009bd8:	08009c39 	.word	0x08009c39
 8009bdc:	08009cd9 	.word	0x08009cd9
 8009be0:	08009c51 	.word	0x08009c51
 8009be4:	08009c67 	.word	0x08009c67
 8009be8:	08009e8f 	.word	0x08009e8f
 8009bec:	08009e8f 	.word	0x08009e8f
 8009bf0:	08009e8f 	.word	0x08009e8f
 8009bf4:	08009e8f 	.word	0x08009e8f
 8009bf8:	08009c67 	.word	0x08009c67
 8009bfc:	08009e8f 	.word	0x08009e8f
 8009c00:	08009e8f 	.word	0x08009e8f
 8009c04:	08009e8f 	.word	0x08009e8f
 8009c08:	08009e8f 	.word	0x08009e8f
 8009c0c:	08009e6d 	.word	0x08009e6d
 8009c10:	08009cd9 	.word	0x08009cd9
 8009c14:	08009e8f 	.word	0x08009e8f
 8009c18:	08009e8f 	.word	0x08009e8f
 8009c1c:	08009e8f 	.word	0x08009e8f
 8009c20:	08009e27 	.word	0x08009e27
 8009c24:	08009e8f 	.word	0x08009e8f
 8009c28:	08009cd9 	.word	0x08009cd9
 8009c2c:	08009e8f 	.word	0x08009e8f
 8009c30:	08009e8f 	.word	0x08009e8f
 8009c34:	08009cd9 	.word	0x08009cd9
            case 'a':
            case 'A':
                /* Double in hexadecimal notation */
                (void)va_arg(arg, double);    /* Read argument to ignore it and move to next one */
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	3307      	adds	r3, #7
 8009c3c:	f023 0307 	bic.w	r3, r3, #7
 8009c40:	3308      	adds	r3, #8
 8009c42:	603b      	str	r3, [r7, #0]
                prv_out_str_raw(p, "NaN", 3); /* Print string */
 8009c44:	2203      	movs	r2, #3
 8009c46:	4997      	ldr	r1, [pc, #604]	; (8009ea4 <prv_format+0x74c>)
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7ff f9b9 	bl	8008fc0 <prv_out_str_raw>
                break;
 8009c4e:	e12c      	b.n	8009eaa <prv_format+0x752>
            case 'c':
                p->out_fn(p, (char)va_arg(arg, int));
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	695a      	ldr	r2, [r3, #20]
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	1d19      	adds	r1, r3, #4
 8009c58:	6039      	str	r1, [r7, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	4619      	mov	r1, r3
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	4790      	blx	r2
                break;
 8009c64:	e121      	b.n	8009eaa <prv_format+0x752>
#if LWPRINTF_CFG_SUPPORT_TYPE_INT
            case 'd':
            case 'i': {
                /* Check for different length parameters */
                p->m.base = 10;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	220a      	movs	r2, #10
 8009c6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                if (p->m.flags.longlong == 0) {
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	7f5b      	ldrb	r3, [r3, #29]
 8009c72:	f003 0303 	and.w	r3, r3, #3
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d108      	bne.n	8009c8e <prv_format+0x536>
                    prv_signed_int_to_str(p, (signed int)va_arg(arg, signed int));
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	1d1a      	adds	r2, r3, #4
 8009c80:	603a      	str	r2, [r7, #0]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4619      	mov	r1, r3
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f7ff fd10 	bl	80096ac <prv_signed_int_to_str>
#if LWPRINTF_CFG_SUPPORT_LONG_LONG
                } else if (p->m.flags.longlong == 2) {
                    prv_signed_longlong_int_to_str(p, (signed long long int)va_arg(arg, signed long long int));
#endif /* LWPRINTF_CFG_SUPPORT_LONG_LONG */
                }
                break;
 8009c8c:	e107      	b.n	8009e9e <prv_format+0x746>
                } else if (p->m.flags.longlong == 1) {
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	7f5b      	ldrb	r3, [r3, #29]
 8009c92:	f003 0303 	and.w	r3, r3, #3
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d108      	bne.n	8009cae <prv_format+0x556>
                    prv_signed_long_int_to_str(p, (signed long int)va_arg(arg, signed long int));
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	1d1a      	adds	r2, r3, #4
 8009ca0:	603a      	str	r2, [r7, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7ff fd1a 	bl	80096e0 <prv_signed_long_int_to_str>
                break;
 8009cac:	e0f7      	b.n	8009e9e <prv_format+0x746>
                } else if (p->m.flags.longlong == 2) {
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	7f5b      	ldrb	r3, [r3, #29]
 8009cb2:	f003 0303 	and.w	r3, r3, #3
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	f040 80f0 	bne.w	8009e9e <prv_format+0x746>
                    prv_signed_longlong_int_to_str(p, (signed long long int)va_arg(arg, signed long long int));
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	3307      	adds	r3, #7
 8009cc2:	f023 0307 	bic.w	r3, r3, #7
 8009cc6:	f103 0208 	add.w	r2, r3, #8
 8009cca:	603a      	str	r2, [r7, #0]
 8009ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f7ff fd1f 	bl	8009714 <prv_signed_longlong_int_to_str>
                break;
 8009cd6:	e0e2      	b.n	8009e9e <prv_format+0x746>
            case 'B':
            case 'o':
            case 'u':
            case 'x':
            case 'X':
                if (*fmt == 'b' || *fmt == 'B') {
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	2b62      	cmp	r3, #98	; 0x62
 8009cde:	d003      	beq.n	8009ce8 <prv_format+0x590>
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	2b42      	cmp	r3, #66	; 0x42
 8009ce6:	d104      	bne.n	8009cf2 <prv_format+0x59a>
                    p->m.base = 2;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2202      	movs	r2, #2
 8009cec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009cf0:	e01d      	b.n	8009d2e <prv_format+0x5d6>
                } else if (*fmt == 'o') {
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	2b6f      	cmp	r3, #111	; 0x6f
 8009cf8:	d104      	bne.n	8009d04 <prv_format+0x5ac>
                    p->m.base = 8;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2208      	movs	r2, #8
 8009cfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009d02:	e014      	b.n	8009d2e <prv_format+0x5d6>
                } else if (*fmt == 'u') {
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	2b75      	cmp	r3, #117	; 0x75
 8009d0a:	d104      	bne.n	8009d16 <prv_format+0x5be>
                    p->m.base = 10;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	220a      	movs	r2, #10
 8009d10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009d14:	e00b      	b.n	8009d2e <prv_format+0x5d6>
                } else if (*fmt == 'x' || *fmt == 'X') {
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	2b78      	cmp	r3, #120	; 0x78
 8009d1c:	d003      	beq.n	8009d26 <prv_format+0x5ce>
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	2b58      	cmp	r3, #88	; 0x58
 8009d24:	d103      	bne.n	8009d2e <prv_format+0x5d6>
                    p->m.base = 16;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2210      	movs	r2, #16
 8009d2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                }
                p->m.flags.space = 0; /* Space flag has no meaning here */
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	7f13      	ldrb	r3, [r2, #28]
 8009d32:	f36f 0382 	bfc	r3, #2, #1
 8009d36:	7713      	strb	r3, [r2, #28]

                /* Check for different length parameters */
                if (0) {

                } else if (p->m.flags.sz_t) {
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	7f5b      	ldrb	r3, [r3, #29]
 8009d3c:	f003 0310 	and.w	r3, r3, #16
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d008      	beq.n	8009d58 <prv_format+0x600>
                    prv_sizet_to_str(p, (size_t)va_arg(arg, size_t));
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	1d1a      	adds	r2, r3, #4
 8009d4a:	603a      	str	r2, [r7, #0]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4619      	mov	r1, r3
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f7ff fb50 	bl	80093f6 <prv_sizet_to_str>
#if LWPRINTF_CFG_SUPPORT_LONG_LONG
                } else if (p->m.flags.longlong == 2) {
                    prv_unsigned_longlong_int_to_str(p, (unsigned long long int)va_arg(arg, unsigned long long int));
#endif /* LWPRINTF_CFG_SUPPORT_LONG_LONG */
                }
                break;
 8009d56:	e0a7      	b.n	8009ea8 <prv_format+0x750>
                } else if (p->m.flags.umax_t) {
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	7f5b      	ldrb	r3, [r3, #29]
 8009d5c:	f003 0320 	and.w	r3, r3, #32
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00c      	beq.n	8009d80 <prv_format+0x628>
                    prv_umaxt_to_str(p, (uintmax_t)va_arg(arg, uintmax_t));
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	3307      	adds	r3, #7
 8009d6a:	f023 0307 	bic.w	r3, r3, #7
 8009d6e:	f103 0208 	add.w	r2, r3, #8
 8009d72:	603a      	str	r2, [r7, #0]
 8009d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f7ff fbc6 	bl	800950a <prv_umaxt_to_str>
                break;
 8009d7e:	e093      	b.n	8009ea8 <prv_format+0x750>
                } else if (p->m.flags.longlong == 0 || p->m.base == 2) {
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	7f5b      	ldrb	r3, [r3, #29]
 8009d84:	f003 0303 	and.w	r3, r3, #3
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d004      	beq.n	8009d98 <prv_format+0x640>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d122      	bne.n	8009dde <prv_format+0x686>
                    switch (p->m.flags.char_short) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	7f5b      	ldrb	r3, [r3, #29]
 8009d9c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d008      	beq.n	8009db8 <prv_format+0x660>
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d10d      	bne.n	8009dc6 <prv_format+0x66e>
                            v = (unsigned int)((unsigned char)va_arg(arg, unsigned int));
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	1d1a      	adds	r2, r3, #4
 8009dae:	603a      	str	r2, [r7, #0]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	623b      	str	r3, [r7, #32]
                            break;
 8009db6:	e00c      	b.n	8009dd2 <prv_format+0x67a>
                            v = (unsigned int)((unsigned short int)va_arg(arg, unsigned int));
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	1d1a      	adds	r2, r3, #4
 8009dbc:	603a      	str	r2, [r7, #0]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	623b      	str	r3, [r7, #32]
                            break;
 8009dc4:	e005      	b.n	8009dd2 <prv_format+0x67a>
                            v = (unsigned int)((unsigned int)va_arg(arg, unsigned int));
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	1d1a      	adds	r2, r3, #4
 8009dca:	603a      	str	r2, [r7, #0]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	623b      	str	r3, [r7, #32]
                            break;
 8009dd0:	bf00      	nop
                    prv_unsigned_int_to_str(p, v);
 8009dd2:	6a39      	ldr	r1, [r7, #32]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f7ff f929 	bl	800902c <prv_unsigned_int_to_str>
                } else if (p->m.flags.longlong == 0 || p->m.base == 2) {
 8009dda:	bf00      	nop
                break;
 8009ddc:	e064      	b.n	8009ea8 <prv_format+0x750>
                } else if (p->m.flags.longlong == 1) {
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	7f5b      	ldrb	r3, [r3, #29]
 8009de2:	f003 0303 	and.w	r3, r3, #3
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d108      	bne.n	8009dfe <prv_format+0x6a6>
                    prv_unsigned_long_int_to_str(p, (unsigned long int)va_arg(arg, unsigned long int));
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	1d1a      	adds	r2, r3, #4
 8009df0:	603a      	str	r2, [r7, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4619      	mov	r1, r3
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f7ff f9a2 	bl	8009140 <prv_unsigned_long_int_to_str>
                break;
 8009dfc:	e054      	b.n	8009ea8 <prv_format+0x750>
                } else if (p->m.flags.longlong == 2) {
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	7f5b      	ldrb	r3, [r3, #29]
 8009e02:	f003 0303 	and.w	r3, r3, #3
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	d14d      	bne.n	8009ea8 <prv_format+0x750>
                    prv_unsigned_longlong_int_to_str(p, (unsigned long long int)va_arg(arg, unsigned long long int));
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	3307      	adds	r3, #7
 8009e10:	f023 0307 	bic.w	r3, r3, #7
 8009e14:	f103 0208 	add.w	r2, r3, #8
 8009e18:	603a      	str	r2, [r7, #0]
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7ff fa18 	bl	8009254 <prv_unsigned_longlong_int_to_str>
                break;
 8009e24:	e040      	b.n	8009ea8 <prv_format+0x750>
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_INT */
#if LWPRINTF_CFG_SUPPORT_TYPE_STRING
            case 's': {
                const char* b = va_arg(arg, const char*);
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	1d1a      	adds	r2, r3, #4
 8009e2a:	603a      	str	r2, [r7, #0]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	617b      	str	r3, [r7, #20]
                 * - If precision is given, max len is up to precision value
                 * - if user selects write to buffer, go up to buffer size (-1 actually, but handled by write function)
                 * - Otherwise use max available system length
                 */
                prv_out_str(p, b,
                            strnlen(b, p->m.flags.precision ? (size_t)p->m.precision
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	7f1b      	ldrb	r3, [r3, #28]
 8009e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e38:	b2db      	uxtb	r3, r3
                prv_out_str(p, b,
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d002      	beq.n	8009e44 <prv_format+0x6ec>
                            strnlen(b, p->m.flags.precision ? (size_t)p->m.precision
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a1b      	ldr	r3, [r3, #32]
 8009e42:	e008      	b.n	8009e56 <prv_format+0x6fe>
                                                            : (p->buff != NULL ? p->buff_size : SIZE_MAX)));
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d002      	beq.n	8009e52 <prv_format+0x6fa>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	e001      	b.n	8009e56 <prv_format+0x6fe>
 8009e52:	f04f 33ff 	mov.w	r3, #4294967295
                prv_out_str(p, b,
 8009e56:	4619      	mov	r1, r3
 8009e58:	6978      	ldr	r0, [r7, #20]
 8009e5a:	f000 ff71 	bl	800ad40 <strnlen>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	461a      	mov	r2, r3
 8009e62:	6979      	ldr	r1, [r7, #20]
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7ff f8c9 	bl	8008ffc <prv_out_str>
                break;
 8009e6a:	e01e      	b.n	8009eaa <prv_format+0x752>
                /* Double number in different format. Final output depends on type of format */
                prv_double_to_str(p, (double)va_arg(arg, double));
                break;
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_FLOAT */
            case 'n': {
                int* ptr = (void*)va_arg(arg, int*);
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	1d1a      	adds	r2, r3, #4
 8009e70:	603a      	str	r2, [r7, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	613b      	str	r3, [r7, #16]
                *ptr = p->n; /* Write current length */
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	601a      	str	r2, [r3, #0]

                break;
 8009e80:	e013      	b.n	8009eaa <prv_format+0x752>
            }
            case '%':
                p->out_fn(p, '%');
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	2125      	movs	r1, #37	; 0x25
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	4798      	blx	r3
                break;
 8009e8c:	e00d      	b.n	8009eaa <prv_format+0x752>
                prv_out_str_after(p, full_width);
                break;
            }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_BYTE_ARRAY */
            default:
                p->out_fn(p, *fmt);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	695b      	ldr	r3, [r3, #20]
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	7812      	ldrb	r2, [r2, #0]
 8009e96:	4611      	mov	r1, r2
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	4798      	blx	r3
 8009e9c:	e005      	b.n	8009eaa <prv_format+0x752>
                break;
 8009e9e:	bf00      	nop
 8009ea0:	e003      	b.n	8009eaa <prv_format+0x752>
 8009ea2:	bf00      	nop
 8009ea4:	0800d3d4 	.word	0x0800d3d4
                break;
 8009ea8:	bf00      	nop
        }
        ++fmt;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	3301      	adds	r3, #1
 8009eae:	60fb      	str	r3, [r7, #12]
    while (fmt != NULL && *fmt != '\0') {
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d006      	beq.n	8009ec4 <prv_format+0x76c>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f47f ac58 	bne.w	8009770 <prv_format+0x18>
 8009ec0:	e000      	b.n	8009ec4 <prv_format+0x76c>
            break;
 8009ec2:	bf00      	nop
    }
    p->out_fn(p, '\0'); /* Output last zero number */
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	695b      	ldr	r3, [r3, #20]
 8009ec8:	2100      	movs	r1, #0
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	4798      	blx	r3
#if LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT
    if (IS_PRINT_MODE(p)) { /* Mutex only for print operation */
        lwprintf_sys_mutex_release(&p->lw->mutex);
    }
#endif /* LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT */
    return 1;
 8009ece:	2301      	movs	r3, #1
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3728      	adds	r7, #40	; 0x28
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <lwprintf_init_ex>:
 * \param[in,out]   lw: LwPRINTF working instance
 * \param[in]       out_fn: Output function used for print operation
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwprintf_init_ex(lwprintf_t* lw, lwprintf_output_fn out_fn) {
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
    LWPRINTF_GET_LW(lw)->out_fn = out_fn;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <lwprintf_init_ex+0x14>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	e000      	b.n	8009eee <lwprintf_init_ex+0x16>
 8009eec:	4b04      	ldr	r3, [pc, #16]	; (8009f00 <lwprintf_init_ex+0x28>)
 8009eee:	683a      	ldr	r2, [r7, #0]
 8009ef0:	601a      	str	r2, [r3, #0]
    if (lwprintf_sys_mutex_isvalid(&LWPRINTF_GET_LW(lw)->mutex)
        || !lwprintf_sys_mutex_create(&LWPRINTF_GET_LW(lw)->mutex)) {
        return 0;
    }
#endif /* LWPRINTF_CFG_OS */
    return 1;
 8009ef2:	2301      	movs	r3, #1
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr
 8009f00:	20004e34 	.word	0x20004e34

08009f04 <lwprintf_vprintf_ex>:
 *                      `va_list` is a special type defined in `<cstdarg>`.
 * \return          The number of characters that would have been written if `n` had been sufficiently large,
 *                      not counting the terminating null character.
 */
int
lwprintf_vprintf_ex(lwprintf_t* const lw, const char* format, va_list arg) {
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b090      	sub	sp, #64	; 0x40
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
    lwprintf_int_t f = {
 8009f10:	f107 0314 	add.w	r3, r7, #20
 8009f14:	222c      	movs	r2, #44	; 0x2c
 8009f16:	2100      	movs	r1, #0
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f000 fa9f 	bl	800a45c <memset>
        .lw = LWPRINTF_GET_LW(lw), .out_fn = prv_out_fn_print, .fmt = format, .buff = NULL, .buff_size = 0};
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d001      	beq.n	8009f28 <lwprintf_vprintf_ex+0x24>
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	e000      	b.n	8009f2a <lwprintf_vprintf_ex+0x26>
 8009f28:	4b0b      	ldr	r3, [pc, #44]	; (8009f58 <lwprintf_vprintf_ex+0x54>)
    lwprintf_int_t f = {
 8009f2a:	617b      	str	r3, [r7, #20]
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	61bb      	str	r3, [r7, #24]
 8009f30:	4b0a      	ldr	r3, [pc, #40]	; (8009f5c <lwprintf_vprintf_ex+0x58>)
 8009f32:	62bb      	str	r3, [r7, #40]	; 0x28
    /* For direct print, output function must be set by user */
    if (f.lw->out_fn == NULL) {
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d101      	bne.n	8009f40 <lwprintf_vprintf_ex+0x3c>
        return 0;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	e006      	b.n	8009f4e <lwprintf_vprintf_ex+0x4a>
    }
    prv_format(&f, arg);
 8009f40:	f107 0314 	add.w	r3, r7, #20
 8009f44:	6879      	ldr	r1, [r7, #4]
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7ff fc06 	bl	8009758 <prv_format>
    return f.n;
 8009f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3740      	adds	r7, #64	; 0x40
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	20004e34 	.word	0x20004e34
 8009f5c:	08008c77 	.word	0x08008c77

08009f60 <lwrb_init>:
 * \param[in]       buffdata: Pointer to memory to use as buffer data
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t lwrb_init(lwrb_t* buff, void* buffdata, size_t size) {
 8009f60:	b480      	push	{r7}
 8009f62:	b089      	sub	sp, #36	; 0x24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d005      	beq.n	8009f7e <lwrb_init+0x1e>
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <lwrb_init+0x1e>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <lwrb_init+0x22>
        return 0;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	e019      	b.n	8009fb6 <lwrb_init+0x56>
    }

    buff->evt_fn = NULL;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2200      	movs	r2, #0
 8009f86:	611a      	str	r2, [r3, #16]
    buff->size = size;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->w, 0);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	330c      	adds	r3, #12
 8009f98:	61fb      	str	r3, [r7, #28]
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	617b      	str	r3, [r7, #20]
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->r, 0);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	3308      	adds	r3, #8
 8009fa8:	61bb      	str	r3, [r7, #24]
 8009faa:	2300      	movs	r3, #0
 8009fac:	613b      	str	r3, [r7, #16]
 8009fae:	693a      	ldr	r2, [r7, #16]
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	601a      	str	r2, [r3, #0]
    return 1;
 8009fb4:	2301      	movs	r3, #1
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3724      	adds	r7, #36	; 0x24
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <lwrb_is_ready>:
/**
 * \brief           Check if buff is initialized and ready to use
 * \param[in]       buff: Buffer handle
 * \return          `1` if ready, `0` otherwise
 */
uint8_t lwrb_is_ready(lwrb_t* buff) {
 8009fc2:	b480      	push	{r7}
 8009fc4:	b083      	sub	sp, #12
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
    return BUF_IS_VALID(buff);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d009      	beq.n	8009fe4 <lwrb_is_ready+0x22>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d005      	beq.n	8009fe4 <lwrb_is_ready+0x22>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d001      	beq.n	8009fe4 <lwrb_is_ready+0x22>
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e000      	b.n	8009fe6 <lwrb_is_ready+0x24>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	b2db      	uxtb	r3, r3
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <lwrb_free>:
 * \brief           Free buffer memory
 * \note            Since implementation does not use dynamic allocation,
 *                  it just sets buffer handle to `NULL`
 * \param[in]       buff: Buffer handle
 */
void lwrb_free(lwrb_t* buff) {
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
    if (BUF_IS_VALID(buff)) {
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00a      	beq.n	800a018 <lwrb_free+0x24>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d006      	beq.n	800a018 <lwrb_free+0x24>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d002      	beq.n	800a018 <lwrb_free+0x24>
        buff->buff = NULL;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	601a      	str	r2, [r3, #0]
    }
}
 800a018:	bf00      	nop
 800a01a:	370c      	adds	r7, #12
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <lwrb_set_evt_fn>:
/**
 * \brief           Set event function callback for different buffer operations
 * \param[in]       buff: Buffer handle
 * \param[in]       evt_fn: Callback function
 */
void lwrb_set_evt_fn(lwrb_t* buff, lwrb_evt_fn evt_fn) {
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
    if (BUF_IS_VALID(buff)) {
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00a      	beq.n	800a04a <lwrb_set_evt_fn+0x26>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d006      	beq.n	800a04a <lwrb_set_evt_fn+0x26>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d002      	beq.n	800a04a <lwrb_set_evt_fn+0x26>
        buff->evt_fn = evt_fn;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	683a      	ldr	r2, [r7, #0]
 800a048:	611a      	str	r2, [r3, #16]
    }
}
 800a04a:	bf00      	nop
 800a04c:	370c      	adds	r7, #12
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr

0800a056 <lwrb_write>:
 * \param[in]       btw: Number of bytes to write
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t lwrb_write(lwrb_t* buff, const void* data, size_t btw) {
 800a056:	b580      	push	{r7, lr}
 800a058:	b08c      	sub	sp, #48	; 0x30
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	60f8      	str	r0, [r7, #12]
 800a05e:	60b9      	str	r1, [r7, #8]
 800a060:	607a      	str	r2, [r7, #4]
    size_t tocopy, free, buff_w_ptr;
    const uint8_t* d = data;
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	62bb      	str	r3, [r7, #40]	; 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00d      	beq.n	800a088 <lwrb_write+0x32>
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d009      	beq.n	800a088 <lwrb_write+0x32>
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d005      	beq.n	800a088 <lwrb_write+0x32>
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d002      	beq.n	800a088 <lwrb_write+0x32>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d101      	bne.n	800a08c <lwrb_write+0x36>
        return 0;
 800a088:	2300      	movs	r3, #0
 800a08a:	e060      	b.n	800a14e <lwrb_write+0xf8>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f000 f8e2 	bl	800a256 <lwrb_get_free>
 800a092:	6278      	str	r0, [r7, #36]	; 0x24
    btw = BUF_MIN(free, btw);
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a098:	4293      	cmp	r3, r2
 800a09a:	bf28      	it	cs
 800a09c:	4613      	movcs	r3, r2
 800a09e:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d101      	bne.n	800a0aa <lwrb_write+0x54>
        return 0;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	e051      	b.n	800a14e <lwrb_write+0xf8>
    }
    buff_w_ptr = LWRB_LOAD(buff->w, memory_order_acquire);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	330c      	adds	r3, #12
 800a0ae:	623b      	str	r3, [r7, #32]
 800a0b0:	6a3b      	ldr	r3, [r7, #32]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f3bf 8f5b 	dmb	ish
 800a0b8:	617b      	str	r3, [r7, #20]
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_w_ptr, btw);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	685a      	ldr	r2, [r3, #4]
 800a0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c4:	1ad3      	subs	r3, r2, r3
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	bf28      	it	cs
 800a0cc:	4613      	movcs	r3, r2
 800a0ce:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(&buff->buff[buff_w_ptr], d, tocopy);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d6:	4413      	add	r3, r2
 800a0d8:	69fa      	ldr	r2, [r7, #28]
 800a0da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f000 f995 	bl	800a40c <memcpy>
    buff_w_ptr += tocopy;
 800a0e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    btw -= tocopy;
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00a      	beq.n	800a10e <lwrb_write+0xb8>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6818      	ldr	r0, [r3, #0]
 800a0fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	4413      	add	r3, r2
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	4619      	mov	r1, r3
 800a106:	f000 f981 	bl	800a40c <memcpy>
        buff_w_ptr = btw;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_w_ptr >= buff->size) {
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a114:	429a      	cmp	r2, r3
 800a116:	d301      	bcc.n	800a11c <lwrb_write+0xc6>
        buff_w_ptr = 0;
 800a118:	2300      	movs	r3, #0
 800a11a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no read operation can access intermediate data
     */
    LWRB_STORE(buff->w, buff_w_ptr, memory_order_release);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	330c      	adds	r3, #12
 800a120:	61bb      	str	r3, [r7, #24]
 800a122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a124:	613b      	str	r3, [r7, #16]
 800a126:	693a      	ldr	r2, [r7, #16]
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	f3bf 8f5b 	dmb	ish
 800a12e:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d007      	beq.n	800a148 <lwrb_write+0xf2>
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	69f9      	ldr	r1, [r7, #28]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	440a      	add	r2, r1
 800a142:	2101      	movs	r1, #1
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	4798      	blx	r3
    return tocopy + btw;
 800a148:	69fa      	ldr	r2, [r7, #28]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4413      	add	r3, r2
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3730      	adds	r7, #48	; 0x30
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <lwrb_read>:
 * \param[in]       buff: Buffer handle
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
size_t lwrb_read(lwrb_t* buff, void* data, size_t btr) {
 800a156:	b580      	push	{r7, lr}
 800a158:	b08c      	sub	sp, #48	; 0x30
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	60f8      	str	r0, [r7, #12]
 800a15e:	60b9      	str	r1, [r7, #8]
 800a160:	607a      	str	r2, [r7, #4]
    size_t tocopy, full, buff_r_ptr;
    uint8_t* d = data;
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	62bb      	str	r3, [r7, #40]	; 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btr == 0) {
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d00d      	beq.n	800a188 <lwrb_read+0x32>
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d009      	beq.n	800a188 <lwrb_read+0x32>
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d005      	beq.n	800a188 <lwrb_read+0x32>
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d002      	beq.n	800a188 <lwrb_read+0x32>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d101      	bne.n	800a18c <lwrb_read+0x36>
        return 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	e060      	b.n	800a24e <lwrb_read+0xf8>
    }

    /* Calculate maximum number of bytes available to read */
    full = lwrb_get_full(buff);
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f000 f8a3 	bl	800a2d8 <lwrb_get_full>
 800a192:	6278      	str	r0, [r7, #36]	; 0x24
    btr = BUF_MIN(full, btr);
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a198:	4293      	cmp	r3, r2
 800a19a:	bf28      	it	cs
 800a19c:	4613      	movcs	r3, r2
 800a19e:	607b      	str	r3, [r7, #4]
    if (btr == 0) {
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d101      	bne.n	800a1aa <lwrb_read+0x54>
        return 0;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	e051      	b.n	800a24e <lwrb_read+0xf8>
    }
    buff_r_ptr = LWRB_LOAD(buff->r, memory_order_acquire);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	3308      	adds	r3, #8
 800a1ae:	623b      	str	r3, [r7, #32]
 800a1b0:	6a3b      	ldr	r3, [r7, #32]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f3bf 8f5b 	dmb	ish
 800a1b8:	617b      	str	r3, [r7, #20]
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Step 1: Read data from linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_r_ptr, btr);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	685a      	ldr	r2, [r3, #4]
 800a1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	bf28      	it	cs
 800a1cc:	4613      	movcs	r3, r2
 800a1ce:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(d, &buff->buff[buff_r_ptr], tocopy);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d6:	4413      	add	r3, r2
 800a1d8:	69fa      	ldr	r2, [r7, #28]
 800a1da:	4619      	mov	r1, r3
 800a1dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1de:	f000 f915 	bl	800a40c <memcpy>
    buff_r_ptr += tocopy;
 800a1e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    btr -= tocopy;
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	1ad3      	subs	r3, r2, r3
 800a1f0:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0) {
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00a      	beq.n	800a20e <lwrb_read+0xb8>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 800a1f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	18d0      	adds	r0, r2, r3
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	4619      	mov	r1, r3
 800a206:	f000 f901 	bl	800a40c <memcpy>
        buff_r_ptr = btr;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_r_ptr >= buff->size) {
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a214:	429a      	cmp	r2, r3
 800a216:	d301      	bcc.n	800a21c <lwrb_read+0xc6>
        buff_r_ptr = 0;
 800a218:	2300      	movs	r3, #0
 800a21a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no write operation can access intermediate data
     */
    LWRB_STORE(buff->r, buff_r_ptr, memory_order_release);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	3308      	adds	r3, #8
 800a220:	61bb      	str	r3, [r7, #24]
 800a222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a224:	613b      	str	r3, [r7, #16]
 800a226:	693a      	ldr	r2, [r7, #16]
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	f3bf 8f5b 	dmb	ish
 800a22e:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_READ, tocopy + btr);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d007      	beq.n	800a248 <lwrb_read+0xf2>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	69f9      	ldr	r1, [r7, #28]
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	440a      	add	r2, r1
 800a242:	2100      	movs	r1, #0
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	4798      	blx	r3
    return tocopy + btr;
 800a248:	69fa      	ldr	r2, [r7, #28]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4413      	add	r3, r2
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3730      	adds	r7, #48	; 0x30
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <lwrb_get_free>:
/**
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t lwrb_get_free(const lwrb_t* buff) {
 800a256:	b480      	push	{r7}
 800a258:	b08b      	sub	sp, #44	; 0x2c
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d007      	beq.n	800a274 <lwrb_get_free+0x1e>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d003      	beq.n	800a274 <lwrb_get_free+0x1e>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d101      	bne.n	800a278 <lwrb_get_free+0x22>
        return 0;
 800a274:	2300      	movs	r3, #0
 800a276:	e029      	b.n	800a2cc <lwrb_get_free+0x76>
     * - buff->w pointer will not change by another process/interrupt because we are in write mode just now
     * - buff->r pointer may change by another process. If it gets changed after buff->r has been loaded to local variable,
     *    buffer will see "free size" less than it actually is. This is not a problem, application can
     *    always try again to write more data to remaining free memory that was read just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	330c      	adds	r3, #12
 800a27c:	623b      	str	r3, [r7, #32]
 800a27e:	6a3b      	ldr	r3, [r7, #32]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	613b      	str	r3, [r7, #16]
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	3308      	adds	r3, #8
 800a28c:	61bb      	str	r3, [r7, #24]
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	60fb      	str	r3, [r7, #12]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	617b      	str	r3, [r7, #20]

    if (w == r) {
 800a298:	69fa      	ldr	r2, [r7, #28]
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d103      	bne.n	800a2a8 <lwrb_get_free+0x52>
        size = buff->size;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2a6:	e00f      	b.n	800a2c8 <lwrb_get_free+0x72>
    } else if (r > w) {
 800a2a8:	697a      	ldr	r2, [r7, #20]
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d904      	bls.n	800a2ba <lwrb_get_free+0x64>
        size = r - w;
 800a2b0:	697a      	ldr	r2, [r7, #20]
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	627b      	str	r3, [r7, #36]	; 0x24
 800a2b8:	e006      	b.n	800a2c8 <lwrb_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	685a      	ldr	r2, [r3, #4]
 800a2be:	6979      	ldr	r1, [r7, #20]
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	1acb      	subs	r3, r1, r3
 800a2c4:	4413      	add	r3, r2
 800a2c6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ca:	3b01      	subs	r3, #1
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	372c      	adds	r7, #44	; 0x2c
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <lwrb_get_full>:
/**
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t lwrb_get_full(const lwrb_t* buff) {
 800a2d8:	b480      	push	{r7}
 800a2da:	b08b      	sub	sp, #44	; 0x2c
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d007      	beq.n	800a2f6 <lwrb_get_full+0x1e>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d003      	beq.n	800a2f6 <lwrb_get_full+0x1e>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d101      	bne.n	800a2fa <lwrb_get_full+0x22>
        return 0;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	e027      	b.n	800a34a <lwrb_get_full+0x72>
     * - buff->r pointer will not change by another process/interrupt because we are in read mode just now
     * - buff->w pointer may change by another process. If it gets changed after buff->w has been loaded to local variable,
     *    buffer will see "full size" less than it really is. This is not a problem, application can
     *    always try again to read more data from remaining full memory that was written just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	330c      	adds	r3, #12
 800a2fe:	623b      	str	r3, [r7, #32]
 800a300:	6a3b      	ldr	r3, [r7, #32]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	613b      	str	r3, [r7, #16]
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	3308      	adds	r3, #8
 800a30e:	61bb      	str	r3, [r7, #24]
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	60fb      	str	r3, [r7, #12]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	617b      	str	r3, [r7, #20]

    if (w == r) {
 800a31a:	69fa      	ldr	r2, [r7, #28]
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d102      	bne.n	800a328 <lwrb_get_full+0x50>
        size = 0;
 800a322:	2300      	movs	r3, #0
 800a324:	627b      	str	r3, [r7, #36]	; 0x24
 800a326:	e00f      	b.n	800a348 <lwrb_get_full+0x70>
    } else if (w > r) {
 800a328:	69fa      	ldr	r2, [r7, #28]
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d904      	bls.n	800a33a <lwrb_get_full+0x62>
        size = w - r;
 800a330:	69fa      	ldr	r2, [r7, #28]
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	1ad3      	subs	r3, r2, r3
 800a336:	627b      	str	r3, [r7, #36]	; 0x24
 800a338:	e006      	b.n	800a348 <lwrb_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685a      	ldr	r2, [r3, #4]
 800a33e:	69f9      	ldr	r1, [r7, #28]
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	1acb      	subs	r3, r1, r3
 800a344:	4413      	add	r3, r2
 800a346:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return size;
 800a348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	372c      	adds	r7, #44	; 0x2c
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <lwrb_reset>:
 * \brief           Resets buffer to default values. Buffer size is not modified
 * \note            This function is not thread safe.
 *                      When used, application must ensure there is no active read/write operation
 * \param[in]       buff: Buffer handle
 */
void lwrb_reset(lwrb_t* buff) {
 800a356:	b580      	push	{r7, lr}
 800a358:	b086      	sub	sp, #24
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
    if (BUF_IS_VALID(buff)) {
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d025      	beq.n	800a3b0 <lwrb_reset+0x5a>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d021      	beq.n	800a3b0 <lwrb_reset+0x5a>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d01d      	beq.n	800a3b0 <lwrb_reset+0x5a>
        LWRB_STORE(buff->w, 0, memory_order_release);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	330c      	adds	r3, #12
 800a378:	617b      	str	r3, [r7, #20]
 800a37a:	2300      	movs	r3, #0
 800a37c:	60fb      	str	r3, [r7, #12]
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	f3bf 8f5b 	dmb	ish
 800a386:	601a      	str	r2, [r3, #0]
        LWRB_STORE(buff->r, 0, memory_order_release);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	3308      	adds	r3, #8
 800a38c:	613b      	str	r3, [r7, #16]
 800a38e:	2300      	movs	r3, #0
 800a390:	60bb      	str	r3, [r7, #8]
 800a392:	68ba      	ldr	r2, [r7, #8]
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	f3bf 8f5b 	dmb	ish
 800a39a:	601a      	str	r2, [r3, #0]
        BUF_SEND_EVT(buff, LWRB_EVT_RESET, 0);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d005      	beq.n	800a3b0 <lwrb_reset+0x5a>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	691b      	ldr	r3, [r3, #16]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	2102      	movs	r1, #2
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	4798      	blx	r3
    }
}
 800a3b0:	bf00      	nop
 800a3b2:	3718      	adds	r7, #24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <__errno>:
 800a3b8:	4b01      	ldr	r3, [pc, #4]	; (800a3c0 <__errno+0x8>)
 800a3ba:	6818      	ldr	r0, [r3, #0]
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	20000040 	.word	0x20000040

0800a3c4 <__libc_init_array>:
 800a3c4:	b570      	push	{r4, r5, r6, lr}
 800a3c6:	4d0d      	ldr	r5, [pc, #52]	; (800a3fc <__libc_init_array+0x38>)
 800a3c8:	4c0d      	ldr	r4, [pc, #52]	; (800a400 <__libc_init_array+0x3c>)
 800a3ca:	1b64      	subs	r4, r4, r5
 800a3cc:	10a4      	asrs	r4, r4, #2
 800a3ce:	2600      	movs	r6, #0
 800a3d0:	42a6      	cmp	r6, r4
 800a3d2:	d109      	bne.n	800a3e8 <__libc_init_array+0x24>
 800a3d4:	4d0b      	ldr	r5, [pc, #44]	; (800a404 <__libc_init_array+0x40>)
 800a3d6:	4c0c      	ldr	r4, [pc, #48]	; (800a408 <__libc_init_array+0x44>)
 800a3d8:	f002 fd74 	bl	800cec4 <_init>
 800a3dc:	1b64      	subs	r4, r4, r5
 800a3de:	10a4      	asrs	r4, r4, #2
 800a3e0:	2600      	movs	r6, #0
 800a3e2:	42a6      	cmp	r6, r4
 800a3e4:	d105      	bne.n	800a3f2 <__libc_init_array+0x2e>
 800a3e6:	bd70      	pop	{r4, r5, r6, pc}
 800a3e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3ec:	4798      	blx	r3
 800a3ee:	3601      	adds	r6, #1
 800a3f0:	e7ee      	b.n	800a3d0 <__libc_init_array+0xc>
 800a3f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3f6:	4798      	blx	r3
 800a3f8:	3601      	adds	r6, #1
 800a3fa:	e7f2      	b.n	800a3e2 <__libc_init_array+0x1e>
 800a3fc:	0800d83c 	.word	0x0800d83c
 800a400:	0800d83c 	.word	0x0800d83c
 800a404:	0800d83c 	.word	0x0800d83c
 800a408:	0800d840 	.word	0x0800d840

0800a40c <memcpy>:
 800a40c:	440a      	add	r2, r1
 800a40e:	4291      	cmp	r1, r2
 800a410:	f100 33ff 	add.w	r3, r0, #4294967295
 800a414:	d100      	bne.n	800a418 <memcpy+0xc>
 800a416:	4770      	bx	lr
 800a418:	b510      	push	{r4, lr}
 800a41a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a41e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a422:	4291      	cmp	r1, r2
 800a424:	d1f9      	bne.n	800a41a <memcpy+0xe>
 800a426:	bd10      	pop	{r4, pc}

0800a428 <memmove>:
 800a428:	4288      	cmp	r0, r1
 800a42a:	b510      	push	{r4, lr}
 800a42c:	eb01 0402 	add.w	r4, r1, r2
 800a430:	d902      	bls.n	800a438 <memmove+0x10>
 800a432:	4284      	cmp	r4, r0
 800a434:	4623      	mov	r3, r4
 800a436:	d807      	bhi.n	800a448 <memmove+0x20>
 800a438:	1e43      	subs	r3, r0, #1
 800a43a:	42a1      	cmp	r1, r4
 800a43c:	d008      	beq.n	800a450 <memmove+0x28>
 800a43e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a442:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a446:	e7f8      	b.n	800a43a <memmove+0x12>
 800a448:	4402      	add	r2, r0
 800a44a:	4601      	mov	r1, r0
 800a44c:	428a      	cmp	r2, r1
 800a44e:	d100      	bne.n	800a452 <memmove+0x2a>
 800a450:	bd10      	pop	{r4, pc}
 800a452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a45a:	e7f7      	b.n	800a44c <memmove+0x24>

0800a45c <memset>:
 800a45c:	4402      	add	r2, r0
 800a45e:	4603      	mov	r3, r0
 800a460:	4293      	cmp	r3, r2
 800a462:	d100      	bne.n	800a466 <memset+0xa>
 800a464:	4770      	bx	lr
 800a466:	f803 1b01 	strb.w	r1, [r3], #1
 800a46a:	e7f9      	b.n	800a460 <memset+0x4>

0800a46c <__cvt>:
 800a46c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a470:	ec55 4b10 	vmov	r4, r5, d0
 800a474:	2d00      	cmp	r5, #0
 800a476:	460e      	mov	r6, r1
 800a478:	4619      	mov	r1, r3
 800a47a:	462b      	mov	r3, r5
 800a47c:	bfbb      	ittet	lt
 800a47e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a482:	461d      	movlt	r5, r3
 800a484:	2300      	movge	r3, #0
 800a486:	232d      	movlt	r3, #45	; 0x2d
 800a488:	700b      	strb	r3, [r1, #0]
 800a48a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a48c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a490:	4691      	mov	r9, r2
 800a492:	f023 0820 	bic.w	r8, r3, #32
 800a496:	bfbc      	itt	lt
 800a498:	4622      	movlt	r2, r4
 800a49a:	4614      	movlt	r4, r2
 800a49c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4a0:	d005      	beq.n	800a4ae <__cvt+0x42>
 800a4a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a4a6:	d100      	bne.n	800a4aa <__cvt+0x3e>
 800a4a8:	3601      	adds	r6, #1
 800a4aa:	2102      	movs	r1, #2
 800a4ac:	e000      	b.n	800a4b0 <__cvt+0x44>
 800a4ae:	2103      	movs	r1, #3
 800a4b0:	ab03      	add	r3, sp, #12
 800a4b2:	9301      	str	r3, [sp, #4]
 800a4b4:	ab02      	add	r3, sp, #8
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	ec45 4b10 	vmov	d0, r4, r5
 800a4bc:	4653      	mov	r3, sl
 800a4be:	4632      	mov	r2, r6
 800a4c0:	f000 fcee 	bl	800aea0 <_dtoa_r>
 800a4c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a4c8:	4607      	mov	r7, r0
 800a4ca:	d102      	bne.n	800a4d2 <__cvt+0x66>
 800a4cc:	f019 0f01 	tst.w	r9, #1
 800a4d0:	d022      	beq.n	800a518 <__cvt+0xac>
 800a4d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4d6:	eb07 0906 	add.w	r9, r7, r6
 800a4da:	d110      	bne.n	800a4fe <__cvt+0x92>
 800a4dc:	783b      	ldrb	r3, [r7, #0]
 800a4de:	2b30      	cmp	r3, #48	; 0x30
 800a4e0:	d10a      	bne.n	800a4f8 <__cvt+0x8c>
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	4629      	mov	r1, r5
 800a4ea:	f7f6 fb0d 	bl	8000b08 <__aeabi_dcmpeq>
 800a4ee:	b918      	cbnz	r0, 800a4f8 <__cvt+0x8c>
 800a4f0:	f1c6 0601 	rsb	r6, r6, #1
 800a4f4:	f8ca 6000 	str.w	r6, [sl]
 800a4f8:	f8da 3000 	ldr.w	r3, [sl]
 800a4fc:	4499      	add	r9, r3
 800a4fe:	2200      	movs	r2, #0
 800a500:	2300      	movs	r3, #0
 800a502:	4620      	mov	r0, r4
 800a504:	4629      	mov	r1, r5
 800a506:	f7f6 faff 	bl	8000b08 <__aeabi_dcmpeq>
 800a50a:	b108      	cbz	r0, 800a510 <__cvt+0xa4>
 800a50c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a510:	2230      	movs	r2, #48	; 0x30
 800a512:	9b03      	ldr	r3, [sp, #12]
 800a514:	454b      	cmp	r3, r9
 800a516:	d307      	bcc.n	800a528 <__cvt+0xbc>
 800a518:	9b03      	ldr	r3, [sp, #12]
 800a51a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a51c:	1bdb      	subs	r3, r3, r7
 800a51e:	4638      	mov	r0, r7
 800a520:	6013      	str	r3, [r2, #0]
 800a522:	b004      	add	sp, #16
 800a524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a528:	1c59      	adds	r1, r3, #1
 800a52a:	9103      	str	r1, [sp, #12]
 800a52c:	701a      	strb	r2, [r3, #0]
 800a52e:	e7f0      	b.n	800a512 <__cvt+0xa6>

0800a530 <__exponent>:
 800a530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a532:	4603      	mov	r3, r0
 800a534:	2900      	cmp	r1, #0
 800a536:	bfb8      	it	lt
 800a538:	4249      	neglt	r1, r1
 800a53a:	f803 2b02 	strb.w	r2, [r3], #2
 800a53e:	bfb4      	ite	lt
 800a540:	222d      	movlt	r2, #45	; 0x2d
 800a542:	222b      	movge	r2, #43	; 0x2b
 800a544:	2909      	cmp	r1, #9
 800a546:	7042      	strb	r2, [r0, #1]
 800a548:	dd2a      	ble.n	800a5a0 <__exponent+0x70>
 800a54a:	f10d 0407 	add.w	r4, sp, #7
 800a54e:	46a4      	mov	ip, r4
 800a550:	270a      	movs	r7, #10
 800a552:	46a6      	mov	lr, r4
 800a554:	460a      	mov	r2, r1
 800a556:	fb91 f6f7 	sdiv	r6, r1, r7
 800a55a:	fb07 1516 	mls	r5, r7, r6, r1
 800a55e:	3530      	adds	r5, #48	; 0x30
 800a560:	2a63      	cmp	r2, #99	; 0x63
 800a562:	f104 34ff 	add.w	r4, r4, #4294967295
 800a566:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a56a:	4631      	mov	r1, r6
 800a56c:	dcf1      	bgt.n	800a552 <__exponent+0x22>
 800a56e:	3130      	adds	r1, #48	; 0x30
 800a570:	f1ae 0502 	sub.w	r5, lr, #2
 800a574:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a578:	1c44      	adds	r4, r0, #1
 800a57a:	4629      	mov	r1, r5
 800a57c:	4561      	cmp	r1, ip
 800a57e:	d30a      	bcc.n	800a596 <__exponent+0x66>
 800a580:	f10d 0209 	add.w	r2, sp, #9
 800a584:	eba2 020e 	sub.w	r2, r2, lr
 800a588:	4565      	cmp	r5, ip
 800a58a:	bf88      	it	hi
 800a58c:	2200      	movhi	r2, #0
 800a58e:	4413      	add	r3, r2
 800a590:	1a18      	subs	r0, r3, r0
 800a592:	b003      	add	sp, #12
 800a594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a596:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a59a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a59e:	e7ed      	b.n	800a57c <__exponent+0x4c>
 800a5a0:	2330      	movs	r3, #48	; 0x30
 800a5a2:	3130      	adds	r1, #48	; 0x30
 800a5a4:	7083      	strb	r3, [r0, #2]
 800a5a6:	70c1      	strb	r1, [r0, #3]
 800a5a8:	1d03      	adds	r3, r0, #4
 800a5aa:	e7f1      	b.n	800a590 <__exponent+0x60>

0800a5ac <_printf_float>:
 800a5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b0:	ed2d 8b02 	vpush	{d8}
 800a5b4:	b08d      	sub	sp, #52	; 0x34
 800a5b6:	460c      	mov	r4, r1
 800a5b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a5bc:	4616      	mov	r6, r2
 800a5be:	461f      	mov	r7, r3
 800a5c0:	4605      	mov	r5, r0
 800a5c2:	f001 fb51 	bl	800bc68 <_localeconv_r>
 800a5c6:	f8d0 a000 	ldr.w	sl, [r0]
 800a5ca:	4650      	mov	r0, sl
 800a5cc:	f7f5 fe1a 	bl	8000204 <strlen>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	930a      	str	r3, [sp, #40]	; 0x28
 800a5d4:	6823      	ldr	r3, [r4, #0]
 800a5d6:	9305      	str	r3, [sp, #20]
 800a5d8:	f8d8 3000 	ldr.w	r3, [r8]
 800a5dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a5e0:	3307      	adds	r3, #7
 800a5e2:	f023 0307 	bic.w	r3, r3, #7
 800a5e6:	f103 0208 	add.w	r2, r3, #8
 800a5ea:	f8c8 2000 	str.w	r2, [r8]
 800a5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a5f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a5fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a5fe:	9307      	str	r3, [sp, #28]
 800a600:	f8cd 8018 	str.w	r8, [sp, #24]
 800a604:	ee08 0a10 	vmov	s16, r0
 800a608:	4b9f      	ldr	r3, [pc, #636]	; (800a888 <_printf_float+0x2dc>)
 800a60a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a60e:	f04f 32ff 	mov.w	r2, #4294967295
 800a612:	f7f6 faab 	bl	8000b6c <__aeabi_dcmpun>
 800a616:	bb88      	cbnz	r0, 800a67c <_printf_float+0xd0>
 800a618:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a61c:	4b9a      	ldr	r3, [pc, #616]	; (800a888 <_printf_float+0x2dc>)
 800a61e:	f04f 32ff 	mov.w	r2, #4294967295
 800a622:	f7f6 fa85 	bl	8000b30 <__aeabi_dcmple>
 800a626:	bb48      	cbnz	r0, 800a67c <_printf_float+0xd0>
 800a628:	2200      	movs	r2, #0
 800a62a:	2300      	movs	r3, #0
 800a62c:	4640      	mov	r0, r8
 800a62e:	4649      	mov	r1, r9
 800a630:	f7f6 fa74 	bl	8000b1c <__aeabi_dcmplt>
 800a634:	b110      	cbz	r0, 800a63c <_printf_float+0x90>
 800a636:	232d      	movs	r3, #45	; 0x2d
 800a638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a63c:	4b93      	ldr	r3, [pc, #588]	; (800a88c <_printf_float+0x2e0>)
 800a63e:	4894      	ldr	r0, [pc, #592]	; (800a890 <_printf_float+0x2e4>)
 800a640:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a644:	bf94      	ite	ls
 800a646:	4698      	movls	r8, r3
 800a648:	4680      	movhi	r8, r0
 800a64a:	2303      	movs	r3, #3
 800a64c:	6123      	str	r3, [r4, #16]
 800a64e:	9b05      	ldr	r3, [sp, #20]
 800a650:	f023 0204 	bic.w	r2, r3, #4
 800a654:	6022      	str	r2, [r4, #0]
 800a656:	f04f 0900 	mov.w	r9, #0
 800a65a:	9700      	str	r7, [sp, #0]
 800a65c:	4633      	mov	r3, r6
 800a65e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a660:	4621      	mov	r1, r4
 800a662:	4628      	mov	r0, r5
 800a664:	f000 f9d8 	bl	800aa18 <_printf_common>
 800a668:	3001      	adds	r0, #1
 800a66a:	f040 8090 	bne.w	800a78e <_printf_float+0x1e2>
 800a66e:	f04f 30ff 	mov.w	r0, #4294967295
 800a672:	b00d      	add	sp, #52	; 0x34
 800a674:	ecbd 8b02 	vpop	{d8}
 800a678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a67c:	4642      	mov	r2, r8
 800a67e:	464b      	mov	r3, r9
 800a680:	4640      	mov	r0, r8
 800a682:	4649      	mov	r1, r9
 800a684:	f7f6 fa72 	bl	8000b6c <__aeabi_dcmpun>
 800a688:	b140      	cbz	r0, 800a69c <_printf_float+0xf0>
 800a68a:	464b      	mov	r3, r9
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	bfbc      	itt	lt
 800a690:	232d      	movlt	r3, #45	; 0x2d
 800a692:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a696:	487f      	ldr	r0, [pc, #508]	; (800a894 <_printf_float+0x2e8>)
 800a698:	4b7f      	ldr	r3, [pc, #508]	; (800a898 <_printf_float+0x2ec>)
 800a69a:	e7d1      	b.n	800a640 <_printf_float+0x94>
 800a69c:	6863      	ldr	r3, [r4, #4]
 800a69e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a6a2:	9206      	str	r2, [sp, #24]
 800a6a4:	1c5a      	adds	r2, r3, #1
 800a6a6:	d13f      	bne.n	800a728 <_printf_float+0x17c>
 800a6a8:	2306      	movs	r3, #6
 800a6aa:	6063      	str	r3, [r4, #4]
 800a6ac:	9b05      	ldr	r3, [sp, #20]
 800a6ae:	6861      	ldr	r1, [r4, #4]
 800a6b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	9303      	str	r3, [sp, #12]
 800a6b8:	ab0a      	add	r3, sp, #40	; 0x28
 800a6ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a6be:	ab09      	add	r3, sp, #36	; 0x24
 800a6c0:	ec49 8b10 	vmov	d0, r8, r9
 800a6c4:	9300      	str	r3, [sp, #0]
 800a6c6:	6022      	str	r2, [r4, #0]
 800a6c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	f7ff fecd 	bl	800a46c <__cvt>
 800a6d2:	9b06      	ldr	r3, [sp, #24]
 800a6d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6d6:	2b47      	cmp	r3, #71	; 0x47
 800a6d8:	4680      	mov	r8, r0
 800a6da:	d108      	bne.n	800a6ee <_printf_float+0x142>
 800a6dc:	1cc8      	adds	r0, r1, #3
 800a6de:	db02      	blt.n	800a6e6 <_printf_float+0x13a>
 800a6e0:	6863      	ldr	r3, [r4, #4]
 800a6e2:	4299      	cmp	r1, r3
 800a6e4:	dd41      	ble.n	800a76a <_printf_float+0x1be>
 800a6e6:	f1ab 0b02 	sub.w	fp, fp, #2
 800a6ea:	fa5f fb8b 	uxtb.w	fp, fp
 800a6ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a6f2:	d820      	bhi.n	800a736 <_printf_float+0x18a>
 800a6f4:	3901      	subs	r1, #1
 800a6f6:	465a      	mov	r2, fp
 800a6f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a6fc:	9109      	str	r1, [sp, #36]	; 0x24
 800a6fe:	f7ff ff17 	bl	800a530 <__exponent>
 800a702:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a704:	1813      	adds	r3, r2, r0
 800a706:	2a01      	cmp	r2, #1
 800a708:	4681      	mov	r9, r0
 800a70a:	6123      	str	r3, [r4, #16]
 800a70c:	dc02      	bgt.n	800a714 <_printf_float+0x168>
 800a70e:	6822      	ldr	r2, [r4, #0]
 800a710:	07d2      	lsls	r2, r2, #31
 800a712:	d501      	bpl.n	800a718 <_printf_float+0x16c>
 800a714:	3301      	adds	r3, #1
 800a716:	6123      	str	r3, [r4, #16]
 800a718:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d09c      	beq.n	800a65a <_printf_float+0xae>
 800a720:	232d      	movs	r3, #45	; 0x2d
 800a722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a726:	e798      	b.n	800a65a <_printf_float+0xae>
 800a728:	9a06      	ldr	r2, [sp, #24]
 800a72a:	2a47      	cmp	r2, #71	; 0x47
 800a72c:	d1be      	bne.n	800a6ac <_printf_float+0x100>
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1bc      	bne.n	800a6ac <_printf_float+0x100>
 800a732:	2301      	movs	r3, #1
 800a734:	e7b9      	b.n	800a6aa <_printf_float+0xfe>
 800a736:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a73a:	d118      	bne.n	800a76e <_printf_float+0x1c2>
 800a73c:	2900      	cmp	r1, #0
 800a73e:	6863      	ldr	r3, [r4, #4]
 800a740:	dd0b      	ble.n	800a75a <_printf_float+0x1ae>
 800a742:	6121      	str	r1, [r4, #16]
 800a744:	b913      	cbnz	r3, 800a74c <_printf_float+0x1a0>
 800a746:	6822      	ldr	r2, [r4, #0]
 800a748:	07d0      	lsls	r0, r2, #31
 800a74a:	d502      	bpl.n	800a752 <_printf_float+0x1a6>
 800a74c:	3301      	adds	r3, #1
 800a74e:	440b      	add	r3, r1
 800a750:	6123      	str	r3, [r4, #16]
 800a752:	65a1      	str	r1, [r4, #88]	; 0x58
 800a754:	f04f 0900 	mov.w	r9, #0
 800a758:	e7de      	b.n	800a718 <_printf_float+0x16c>
 800a75a:	b913      	cbnz	r3, 800a762 <_printf_float+0x1b6>
 800a75c:	6822      	ldr	r2, [r4, #0]
 800a75e:	07d2      	lsls	r2, r2, #31
 800a760:	d501      	bpl.n	800a766 <_printf_float+0x1ba>
 800a762:	3302      	adds	r3, #2
 800a764:	e7f4      	b.n	800a750 <_printf_float+0x1a4>
 800a766:	2301      	movs	r3, #1
 800a768:	e7f2      	b.n	800a750 <_printf_float+0x1a4>
 800a76a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a76e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a770:	4299      	cmp	r1, r3
 800a772:	db05      	blt.n	800a780 <_printf_float+0x1d4>
 800a774:	6823      	ldr	r3, [r4, #0]
 800a776:	6121      	str	r1, [r4, #16]
 800a778:	07d8      	lsls	r0, r3, #31
 800a77a:	d5ea      	bpl.n	800a752 <_printf_float+0x1a6>
 800a77c:	1c4b      	adds	r3, r1, #1
 800a77e:	e7e7      	b.n	800a750 <_printf_float+0x1a4>
 800a780:	2900      	cmp	r1, #0
 800a782:	bfd4      	ite	le
 800a784:	f1c1 0202 	rsble	r2, r1, #2
 800a788:	2201      	movgt	r2, #1
 800a78a:	4413      	add	r3, r2
 800a78c:	e7e0      	b.n	800a750 <_printf_float+0x1a4>
 800a78e:	6823      	ldr	r3, [r4, #0]
 800a790:	055a      	lsls	r2, r3, #21
 800a792:	d407      	bmi.n	800a7a4 <_printf_float+0x1f8>
 800a794:	6923      	ldr	r3, [r4, #16]
 800a796:	4642      	mov	r2, r8
 800a798:	4631      	mov	r1, r6
 800a79a:	4628      	mov	r0, r5
 800a79c:	47b8      	blx	r7
 800a79e:	3001      	adds	r0, #1
 800a7a0:	d12c      	bne.n	800a7fc <_printf_float+0x250>
 800a7a2:	e764      	b.n	800a66e <_printf_float+0xc2>
 800a7a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a7a8:	f240 80e0 	bls.w	800a96c <_printf_float+0x3c0>
 800a7ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	f7f6 f9a8 	bl	8000b08 <__aeabi_dcmpeq>
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	d034      	beq.n	800a826 <_printf_float+0x27a>
 800a7bc:	4a37      	ldr	r2, [pc, #220]	; (800a89c <_printf_float+0x2f0>)
 800a7be:	2301      	movs	r3, #1
 800a7c0:	4631      	mov	r1, r6
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	47b8      	blx	r7
 800a7c6:	3001      	adds	r0, #1
 800a7c8:	f43f af51 	beq.w	800a66e <_printf_float+0xc2>
 800a7cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	db02      	blt.n	800a7da <_printf_float+0x22e>
 800a7d4:	6823      	ldr	r3, [r4, #0]
 800a7d6:	07d8      	lsls	r0, r3, #31
 800a7d8:	d510      	bpl.n	800a7fc <_printf_float+0x250>
 800a7da:	ee18 3a10 	vmov	r3, s16
 800a7de:	4652      	mov	r2, sl
 800a7e0:	4631      	mov	r1, r6
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	47b8      	blx	r7
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	f43f af41 	beq.w	800a66e <_printf_float+0xc2>
 800a7ec:	f04f 0800 	mov.w	r8, #0
 800a7f0:	f104 091a 	add.w	r9, r4, #26
 800a7f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	4543      	cmp	r3, r8
 800a7fa:	dc09      	bgt.n	800a810 <_printf_float+0x264>
 800a7fc:	6823      	ldr	r3, [r4, #0]
 800a7fe:	079b      	lsls	r3, r3, #30
 800a800:	f100 8105 	bmi.w	800aa0e <_printf_float+0x462>
 800a804:	68e0      	ldr	r0, [r4, #12]
 800a806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a808:	4298      	cmp	r0, r3
 800a80a:	bfb8      	it	lt
 800a80c:	4618      	movlt	r0, r3
 800a80e:	e730      	b.n	800a672 <_printf_float+0xc6>
 800a810:	2301      	movs	r3, #1
 800a812:	464a      	mov	r2, r9
 800a814:	4631      	mov	r1, r6
 800a816:	4628      	mov	r0, r5
 800a818:	47b8      	blx	r7
 800a81a:	3001      	adds	r0, #1
 800a81c:	f43f af27 	beq.w	800a66e <_printf_float+0xc2>
 800a820:	f108 0801 	add.w	r8, r8, #1
 800a824:	e7e6      	b.n	800a7f4 <_printf_float+0x248>
 800a826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a828:	2b00      	cmp	r3, #0
 800a82a:	dc39      	bgt.n	800a8a0 <_printf_float+0x2f4>
 800a82c:	4a1b      	ldr	r2, [pc, #108]	; (800a89c <_printf_float+0x2f0>)
 800a82e:	2301      	movs	r3, #1
 800a830:	4631      	mov	r1, r6
 800a832:	4628      	mov	r0, r5
 800a834:	47b8      	blx	r7
 800a836:	3001      	adds	r0, #1
 800a838:	f43f af19 	beq.w	800a66e <_printf_float+0xc2>
 800a83c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a840:	4313      	orrs	r3, r2
 800a842:	d102      	bne.n	800a84a <_printf_float+0x29e>
 800a844:	6823      	ldr	r3, [r4, #0]
 800a846:	07d9      	lsls	r1, r3, #31
 800a848:	d5d8      	bpl.n	800a7fc <_printf_float+0x250>
 800a84a:	ee18 3a10 	vmov	r3, s16
 800a84e:	4652      	mov	r2, sl
 800a850:	4631      	mov	r1, r6
 800a852:	4628      	mov	r0, r5
 800a854:	47b8      	blx	r7
 800a856:	3001      	adds	r0, #1
 800a858:	f43f af09 	beq.w	800a66e <_printf_float+0xc2>
 800a85c:	f04f 0900 	mov.w	r9, #0
 800a860:	f104 0a1a 	add.w	sl, r4, #26
 800a864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a866:	425b      	negs	r3, r3
 800a868:	454b      	cmp	r3, r9
 800a86a:	dc01      	bgt.n	800a870 <_printf_float+0x2c4>
 800a86c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a86e:	e792      	b.n	800a796 <_printf_float+0x1ea>
 800a870:	2301      	movs	r3, #1
 800a872:	4652      	mov	r2, sl
 800a874:	4631      	mov	r1, r6
 800a876:	4628      	mov	r0, r5
 800a878:	47b8      	blx	r7
 800a87a:	3001      	adds	r0, #1
 800a87c:	f43f aef7 	beq.w	800a66e <_printf_float+0xc2>
 800a880:	f109 0901 	add.w	r9, r9, #1
 800a884:	e7ee      	b.n	800a864 <_printf_float+0x2b8>
 800a886:	bf00      	nop
 800a888:	7fefffff 	.word	0x7fefffff
 800a88c:	0800d460 	.word	0x0800d460
 800a890:	0800d464 	.word	0x0800d464
 800a894:	0800d46c 	.word	0x0800d46c
 800a898:	0800d468 	.word	0x0800d468
 800a89c:	0800d470 	.word	0x0800d470
 800a8a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	bfa8      	it	ge
 800a8a8:	461a      	movge	r2, r3
 800a8aa:	2a00      	cmp	r2, #0
 800a8ac:	4691      	mov	r9, r2
 800a8ae:	dc37      	bgt.n	800a920 <_printf_float+0x374>
 800a8b0:	f04f 0b00 	mov.w	fp, #0
 800a8b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8b8:	f104 021a 	add.w	r2, r4, #26
 800a8bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8be:	9305      	str	r3, [sp, #20]
 800a8c0:	eba3 0309 	sub.w	r3, r3, r9
 800a8c4:	455b      	cmp	r3, fp
 800a8c6:	dc33      	bgt.n	800a930 <_printf_float+0x384>
 800a8c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	db3b      	blt.n	800a948 <_printf_float+0x39c>
 800a8d0:	6823      	ldr	r3, [r4, #0]
 800a8d2:	07da      	lsls	r2, r3, #31
 800a8d4:	d438      	bmi.n	800a948 <_printf_float+0x39c>
 800a8d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8d8:	9a05      	ldr	r2, [sp, #20]
 800a8da:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8dc:	1a9a      	subs	r2, r3, r2
 800a8de:	eba3 0901 	sub.w	r9, r3, r1
 800a8e2:	4591      	cmp	r9, r2
 800a8e4:	bfa8      	it	ge
 800a8e6:	4691      	movge	r9, r2
 800a8e8:	f1b9 0f00 	cmp.w	r9, #0
 800a8ec:	dc35      	bgt.n	800a95a <_printf_float+0x3ae>
 800a8ee:	f04f 0800 	mov.w	r8, #0
 800a8f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8f6:	f104 0a1a 	add.w	sl, r4, #26
 800a8fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8fe:	1a9b      	subs	r3, r3, r2
 800a900:	eba3 0309 	sub.w	r3, r3, r9
 800a904:	4543      	cmp	r3, r8
 800a906:	f77f af79 	ble.w	800a7fc <_printf_float+0x250>
 800a90a:	2301      	movs	r3, #1
 800a90c:	4652      	mov	r2, sl
 800a90e:	4631      	mov	r1, r6
 800a910:	4628      	mov	r0, r5
 800a912:	47b8      	blx	r7
 800a914:	3001      	adds	r0, #1
 800a916:	f43f aeaa 	beq.w	800a66e <_printf_float+0xc2>
 800a91a:	f108 0801 	add.w	r8, r8, #1
 800a91e:	e7ec      	b.n	800a8fa <_printf_float+0x34e>
 800a920:	4613      	mov	r3, r2
 800a922:	4631      	mov	r1, r6
 800a924:	4642      	mov	r2, r8
 800a926:	4628      	mov	r0, r5
 800a928:	47b8      	blx	r7
 800a92a:	3001      	adds	r0, #1
 800a92c:	d1c0      	bne.n	800a8b0 <_printf_float+0x304>
 800a92e:	e69e      	b.n	800a66e <_printf_float+0xc2>
 800a930:	2301      	movs	r3, #1
 800a932:	4631      	mov	r1, r6
 800a934:	4628      	mov	r0, r5
 800a936:	9205      	str	r2, [sp, #20]
 800a938:	47b8      	blx	r7
 800a93a:	3001      	adds	r0, #1
 800a93c:	f43f ae97 	beq.w	800a66e <_printf_float+0xc2>
 800a940:	9a05      	ldr	r2, [sp, #20]
 800a942:	f10b 0b01 	add.w	fp, fp, #1
 800a946:	e7b9      	b.n	800a8bc <_printf_float+0x310>
 800a948:	ee18 3a10 	vmov	r3, s16
 800a94c:	4652      	mov	r2, sl
 800a94e:	4631      	mov	r1, r6
 800a950:	4628      	mov	r0, r5
 800a952:	47b8      	blx	r7
 800a954:	3001      	adds	r0, #1
 800a956:	d1be      	bne.n	800a8d6 <_printf_float+0x32a>
 800a958:	e689      	b.n	800a66e <_printf_float+0xc2>
 800a95a:	9a05      	ldr	r2, [sp, #20]
 800a95c:	464b      	mov	r3, r9
 800a95e:	4442      	add	r2, r8
 800a960:	4631      	mov	r1, r6
 800a962:	4628      	mov	r0, r5
 800a964:	47b8      	blx	r7
 800a966:	3001      	adds	r0, #1
 800a968:	d1c1      	bne.n	800a8ee <_printf_float+0x342>
 800a96a:	e680      	b.n	800a66e <_printf_float+0xc2>
 800a96c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a96e:	2a01      	cmp	r2, #1
 800a970:	dc01      	bgt.n	800a976 <_printf_float+0x3ca>
 800a972:	07db      	lsls	r3, r3, #31
 800a974:	d538      	bpl.n	800a9e8 <_printf_float+0x43c>
 800a976:	2301      	movs	r3, #1
 800a978:	4642      	mov	r2, r8
 800a97a:	4631      	mov	r1, r6
 800a97c:	4628      	mov	r0, r5
 800a97e:	47b8      	blx	r7
 800a980:	3001      	adds	r0, #1
 800a982:	f43f ae74 	beq.w	800a66e <_printf_float+0xc2>
 800a986:	ee18 3a10 	vmov	r3, s16
 800a98a:	4652      	mov	r2, sl
 800a98c:	4631      	mov	r1, r6
 800a98e:	4628      	mov	r0, r5
 800a990:	47b8      	blx	r7
 800a992:	3001      	adds	r0, #1
 800a994:	f43f ae6b 	beq.w	800a66e <_printf_float+0xc2>
 800a998:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a99c:	2200      	movs	r2, #0
 800a99e:	2300      	movs	r3, #0
 800a9a0:	f7f6 f8b2 	bl	8000b08 <__aeabi_dcmpeq>
 800a9a4:	b9d8      	cbnz	r0, 800a9de <_printf_float+0x432>
 800a9a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9a8:	f108 0201 	add.w	r2, r8, #1
 800a9ac:	3b01      	subs	r3, #1
 800a9ae:	4631      	mov	r1, r6
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	47b8      	blx	r7
 800a9b4:	3001      	adds	r0, #1
 800a9b6:	d10e      	bne.n	800a9d6 <_printf_float+0x42a>
 800a9b8:	e659      	b.n	800a66e <_printf_float+0xc2>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	4652      	mov	r2, sl
 800a9be:	4631      	mov	r1, r6
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	47b8      	blx	r7
 800a9c4:	3001      	adds	r0, #1
 800a9c6:	f43f ae52 	beq.w	800a66e <_printf_float+0xc2>
 800a9ca:	f108 0801 	add.w	r8, r8, #1
 800a9ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	4543      	cmp	r3, r8
 800a9d4:	dcf1      	bgt.n	800a9ba <_printf_float+0x40e>
 800a9d6:	464b      	mov	r3, r9
 800a9d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a9dc:	e6dc      	b.n	800a798 <_printf_float+0x1ec>
 800a9de:	f04f 0800 	mov.w	r8, #0
 800a9e2:	f104 0a1a 	add.w	sl, r4, #26
 800a9e6:	e7f2      	b.n	800a9ce <_printf_float+0x422>
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	4642      	mov	r2, r8
 800a9ec:	e7df      	b.n	800a9ae <_printf_float+0x402>
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	464a      	mov	r2, r9
 800a9f2:	4631      	mov	r1, r6
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	47b8      	blx	r7
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	f43f ae38 	beq.w	800a66e <_printf_float+0xc2>
 800a9fe:	f108 0801 	add.w	r8, r8, #1
 800aa02:	68e3      	ldr	r3, [r4, #12]
 800aa04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa06:	1a5b      	subs	r3, r3, r1
 800aa08:	4543      	cmp	r3, r8
 800aa0a:	dcf0      	bgt.n	800a9ee <_printf_float+0x442>
 800aa0c:	e6fa      	b.n	800a804 <_printf_float+0x258>
 800aa0e:	f04f 0800 	mov.w	r8, #0
 800aa12:	f104 0919 	add.w	r9, r4, #25
 800aa16:	e7f4      	b.n	800aa02 <_printf_float+0x456>

0800aa18 <_printf_common>:
 800aa18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa1c:	4616      	mov	r6, r2
 800aa1e:	4699      	mov	r9, r3
 800aa20:	688a      	ldr	r2, [r1, #8]
 800aa22:	690b      	ldr	r3, [r1, #16]
 800aa24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	bfb8      	it	lt
 800aa2c:	4613      	movlt	r3, r2
 800aa2e:	6033      	str	r3, [r6, #0]
 800aa30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa34:	4607      	mov	r7, r0
 800aa36:	460c      	mov	r4, r1
 800aa38:	b10a      	cbz	r2, 800aa3e <_printf_common+0x26>
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	6033      	str	r3, [r6, #0]
 800aa3e:	6823      	ldr	r3, [r4, #0]
 800aa40:	0699      	lsls	r1, r3, #26
 800aa42:	bf42      	ittt	mi
 800aa44:	6833      	ldrmi	r3, [r6, #0]
 800aa46:	3302      	addmi	r3, #2
 800aa48:	6033      	strmi	r3, [r6, #0]
 800aa4a:	6825      	ldr	r5, [r4, #0]
 800aa4c:	f015 0506 	ands.w	r5, r5, #6
 800aa50:	d106      	bne.n	800aa60 <_printf_common+0x48>
 800aa52:	f104 0a19 	add.w	sl, r4, #25
 800aa56:	68e3      	ldr	r3, [r4, #12]
 800aa58:	6832      	ldr	r2, [r6, #0]
 800aa5a:	1a9b      	subs	r3, r3, r2
 800aa5c:	42ab      	cmp	r3, r5
 800aa5e:	dc26      	bgt.n	800aaae <_printf_common+0x96>
 800aa60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa64:	1e13      	subs	r3, r2, #0
 800aa66:	6822      	ldr	r2, [r4, #0]
 800aa68:	bf18      	it	ne
 800aa6a:	2301      	movne	r3, #1
 800aa6c:	0692      	lsls	r2, r2, #26
 800aa6e:	d42b      	bmi.n	800aac8 <_printf_common+0xb0>
 800aa70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa74:	4649      	mov	r1, r9
 800aa76:	4638      	mov	r0, r7
 800aa78:	47c0      	blx	r8
 800aa7a:	3001      	adds	r0, #1
 800aa7c:	d01e      	beq.n	800aabc <_printf_common+0xa4>
 800aa7e:	6823      	ldr	r3, [r4, #0]
 800aa80:	68e5      	ldr	r5, [r4, #12]
 800aa82:	6832      	ldr	r2, [r6, #0]
 800aa84:	f003 0306 	and.w	r3, r3, #6
 800aa88:	2b04      	cmp	r3, #4
 800aa8a:	bf08      	it	eq
 800aa8c:	1aad      	subeq	r5, r5, r2
 800aa8e:	68a3      	ldr	r3, [r4, #8]
 800aa90:	6922      	ldr	r2, [r4, #16]
 800aa92:	bf0c      	ite	eq
 800aa94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa98:	2500      	movne	r5, #0
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	bfc4      	itt	gt
 800aa9e:	1a9b      	subgt	r3, r3, r2
 800aaa0:	18ed      	addgt	r5, r5, r3
 800aaa2:	2600      	movs	r6, #0
 800aaa4:	341a      	adds	r4, #26
 800aaa6:	42b5      	cmp	r5, r6
 800aaa8:	d11a      	bne.n	800aae0 <_printf_common+0xc8>
 800aaaa:	2000      	movs	r0, #0
 800aaac:	e008      	b.n	800aac0 <_printf_common+0xa8>
 800aaae:	2301      	movs	r3, #1
 800aab0:	4652      	mov	r2, sl
 800aab2:	4649      	mov	r1, r9
 800aab4:	4638      	mov	r0, r7
 800aab6:	47c0      	blx	r8
 800aab8:	3001      	adds	r0, #1
 800aaba:	d103      	bne.n	800aac4 <_printf_common+0xac>
 800aabc:	f04f 30ff 	mov.w	r0, #4294967295
 800aac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aac4:	3501      	adds	r5, #1
 800aac6:	e7c6      	b.n	800aa56 <_printf_common+0x3e>
 800aac8:	18e1      	adds	r1, r4, r3
 800aaca:	1c5a      	adds	r2, r3, #1
 800aacc:	2030      	movs	r0, #48	; 0x30
 800aace:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aad2:	4422      	add	r2, r4
 800aad4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aad8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aadc:	3302      	adds	r3, #2
 800aade:	e7c7      	b.n	800aa70 <_printf_common+0x58>
 800aae0:	2301      	movs	r3, #1
 800aae2:	4622      	mov	r2, r4
 800aae4:	4649      	mov	r1, r9
 800aae6:	4638      	mov	r0, r7
 800aae8:	47c0      	blx	r8
 800aaea:	3001      	adds	r0, #1
 800aaec:	d0e6      	beq.n	800aabc <_printf_common+0xa4>
 800aaee:	3601      	adds	r6, #1
 800aaf0:	e7d9      	b.n	800aaa6 <_printf_common+0x8e>
	...

0800aaf4 <_printf_i>:
 800aaf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aaf8:	7e0f      	ldrb	r7, [r1, #24]
 800aafa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aafc:	2f78      	cmp	r7, #120	; 0x78
 800aafe:	4691      	mov	r9, r2
 800ab00:	4680      	mov	r8, r0
 800ab02:	460c      	mov	r4, r1
 800ab04:	469a      	mov	sl, r3
 800ab06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab0a:	d807      	bhi.n	800ab1c <_printf_i+0x28>
 800ab0c:	2f62      	cmp	r7, #98	; 0x62
 800ab0e:	d80a      	bhi.n	800ab26 <_printf_i+0x32>
 800ab10:	2f00      	cmp	r7, #0
 800ab12:	f000 80d8 	beq.w	800acc6 <_printf_i+0x1d2>
 800ab16:	2f58      	cmp	r7, #88	; 0x58
 800ab18:	f000 80a3 	beq.w	800ac62 <_printf_i+0x16e>
 800ab1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab24:	e03a      	b.n	800ab9c <_printf_i+0xa8>
 800ab26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab2a:	2b15      	cmp	r3, #21
 800ab2c:	d8f6      	bhi.n	800ab1c <_printf_i+0x28>
 800ab2e:	a101      	add	r1, pc, #4	; (adr r1, 800ab34 <_printf_i+0x40>)
 800ab30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab34:	0800ab8d 	.word	0x0800ab8d
 800ab38:	0800aba1 	.word	0x0800aba1
 800ab3c:	0800ab1d 	.word	0x0800ab1d
 800ab40:	0800ab1d 	.word	0x0800ab1d
 800ab44:	0800ab1d 	.word	0x0800ab1d
 800ab48:	0800ab1d 	.word	0x0800ab1d
 800ab4c:	0800aba1 	.word	0x0800aba1
 800ab50:	0800ab1d 	.word	0x0800ab1d
 800ab54:	0800ab1d 	.word	0x0800ab1d
 800ab58:	0800ab1d 	.word	0x0800ab1d
 800ab5c:	0800ab1d 	.word	0x0800ab1d
 800ab60:	0800acad 	.word	0x0800acad
 800ab64:	0800abd1 	.word	0x0800abd1
 800ab68:	0800ac8f 	.word	0x0800ac8f
 800ab6c:	0800ab1d 	.word	0x0800ab1d
 800ab70:	0800ab1d 	.word	0x0800ab1d
 800ab74:	0800accf 	.word	0x0800accf
 800ab78:	0800ab1d 	.word	0x0800ab1d
 800ab7c:	0800abd1 	.word	0x0800abd1
 800ab80:	0800ab1d 	.word	0x0800ab1d
 800ab84:	0800ab1d 	.word	0x0800ab1d
 800ab88:	0800ac97 	.word	0x0800ac97
 800ab8c:	682b      	ldr	r3, [r5, #0]
 800ab8e:	1d1a      	adds	r2, r3, #4
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	602a      	str	r2, [r5, #0]
 800ab94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	e0a3      	b.n	800ace8 <_printf_i+0x1f4>
 800aba0:	6820      	ldr	r0, [r4, #0]
 800aba2:	6829      	ldr	r1, [r5, #0]
 800aba4:	0606      	lsls	r6, r0, #24
 800aba6:	f101 0304 	add.w	r3, r1, #4
 800abaa:	d50a      	bpl.n	800abc2 <_printf_i+0xce>
 800abac:	680e      	ldr	r6, [r1, #0]
 800abae:	602b      	str	r3, [r5, #0]
 800abb0:	2e00      	cmp	r6, #0
 800abb2:	da03      	bge.n	800abbc <_printf_i+0xc8>
 800abb4:	232d      	movs	r3, #45	; 0x2d
 800abb6:	4276      	negs	r6, r6
 800abb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abbc:	485e      	ldr	r0, [pc, #376]	; (800ad38 <_printf_i+0x244>)
 800abbe:	230a      	movs	r3, #10
 800abc0:	e019      	b.n	800abf6 <_printf_i+0x102>
 800abc2:	680e      	ldr	r6, [r1, #0]
 800abc4:	602b      	str	r3, [r5, #0]
 800abc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800abca:	bf18      	it	ne
 800abcc:	b236      	sxthne	r6, r6
 800abce:	e7ef      	b.n	800abb0 <_printf_i+0xbc>
 800abd0:	682b      	ldr	r3, [r5, #0]
 800abd2:	6820      	ldr	r0, [r4, #0]
 800abd4:	1d19      	adds	r1, r3, #4
 800abd6:	6029      	str	r1, [r5, #0]
 800abd8:	0601      	lsls	r1, r0, #24
 800abda:	d501      	bpl.n	800abe0 <_printf_i+0xec>
 800abdc:	681e      	ldr	r6, [r3, #0]
 800abde:	e002      	b.n	800abe6 <_printf_i+0xf2>
 800abe0:	0646      	lsls	r6, r0, #25
 800abe2:	d5fb      	bpl.n	800abdc <_printf_i+0xe8>
 800abe4:	881e      	ldrh	r6, [r3, #0]
 800abe6:	4854      	ldr	r0, [pc, #336]	; (800ad38 <_printf_i+0x244>)
 800abe8:	2f6f      	cmp	r7, #111	; 0x6f
 800abea:	bf0c      	ite	eq
 800abec:	2308      	moveq	r3, #8
 800abee:	230a      	movne	r3, #10
 800abf0:	2100      	movs	r1, #0
 800abf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abf6:	6865      	ldr	r5, [r4, #4]
 800abf8:	60a5      	str	r5, [r4, #8]
 800abfa:	2d00      	cmp	r5, #0
 800abfc:	bfa2      	ittt	ge
 800abfe:	6821      	ldrge	r1, [r4, #0]
 800ac00:	f021 0104 	bicge.w	r1, r1, #4
 800ac04:	6021      	strge	r1, [r4, #0]
 800ac06:	b90e      	cbnz	r6, 800ac0c <_printf_i+0x118>
 800ac08:	2d00      	cmp	r5, #0
 800ac0a:	d04d      	beq.n	800aca8 <_printf_i+0x1b4>
 800ac0c:	4615      	mov	r5, r2
 800ac0e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac12:	fb03 6711 	mls	r7, r3, r1, r6
 800ac16:	5dc7      	ldrb	r7, [r0, r7]
 800ac18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac1c:	4637      	mov	r7, r6
 800ac1e:	42bb      	cmp	r3, r7
 800ac20:	460e      	mov	r6, r1
 800ac22:	d9f4      	bls.n	800ac0e <_printf_i+0x11a>
 800ac24:	2b08      	cmp	r3, #8
 800ac26:	d10b      	bne.n	800ac40 <_printf_i+0x14c>
 800ac28:	6823      	ldr	r3, [r4, #0]
 800ac2a:	07de      	lsls	r6, r3, #31
 800ac2c:	d508      	bpl.n	800ac40 <_printf_i+0x14c>
 800ac2e:	6923      	ldr	r3, [r4, #16]
 800ac30:	6861      	ldr	r1, [r4, #4]
 800ac32:	4299      	cmp	r1, r3
 800ac34:	bfde      	ittt	le
 800ac36:	2330      	movle	r3, #48	; 0x30
 800ac38:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac40:	1b52      	subs	r2, r2, r5
 800ac42:	6122      	str	r2, [r4, #16]
 800ac44:	f8cd a000 	str.w	sl, [sp]
 800ac48:	464b      	mov	r3, r9
 800ac4a:	aa03      	add	r2, sp, #12
 800ac4c:	4621      	mov	r1, r4
 800ac4e:	4640      	mov	r0, r8
 800ac50:	f7ff fee2 	bl	800aa18 <_printf_common>
 800ac54:	3001      	adds	r0, #1
 800ac56:	d14c      	bne.n	800acf2 <_printf_i+0x1fe>
 800ac58:	f04f 30ff 	mov.w	r0, #4294967295
 800ac5c:	b004      	add	sp, #16
 800ac5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac62:	4835      	ldr	r0, [pc, #212]	; (800ad38 <_printf_i+0x244>)
 800ac64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac68:	6829      	ldr	r1, [r5, #0]
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac70:	6029      	str	r1, [r5, #0]
 800ac72:	061d      	lsls	r5, r3, #24
 800ac74:	d514      	bpl.n	800aca0 <_printf_i+0x1ac>
 800ac76:	07df      	lsls	r7, r3, #31
 800ac78:	bf44      	itt	mi
 800ac7a:	f043 0320 	orrmi.w	r3, r3, #32
 800ac7e:	6023      	strmi	r3, [r4, #0]
 800ac80:	b91e      	cbnz	r6, 800ac8a <_printf_i+0x196>
 800ac82:	6823      	ldr	r3, [r4, #0]
 800ac84:	f023 0320 	bic.w	r3, r3, #32
 800ac88:	6023      	str	r3, [r4, #0]
 800ac8a:	2310      	movs	r3, #16
 800ac8c:	e7b0      	b.n	800abf0 <_printf_i+0xfc>
 800ac8e:	6823      	ldr	r3, [r4, #0]
 800ac90:	f043 0320 	orr.w	r3, r3, #32
 800ac94:	6023      	str	r3, [r4, #0]
 800ac96:	2378      	movs	r3, #120	; 0x78
 800ac98:	4828      	ldr	r0, [pc, #160]	; (800ad3c <_printf_i+0x248>)
 800ac9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac9e:	e7e3      	b.n	800ac68 <_printf_i+0x174>
 800aca0:	0659      	lsls	r1, r3, #25
 800aca2:	bf48      	it	mi
 800aca4:	b2b6      	uxthmi	r6, r6
 800aca6:	e7e6      	b.n	800ac76 <_printf_i+0x182>
 800aca8:	4615      	mov	r5, r2
 800acaa:	e7bb      	b.n	800ac24 <_printf_i+0x130>
 800acac:	682b      	ldr	r3, [r5, #0]
 800acae:	6826      	ldr	r6, [r4, #0]
 800acb0:	6961      	ldr	r1, [r4, #20]
 800acb2:	1d18      	adds	r0, r3, #4
 800acb4:	6028      	str	r0, [r5, #0]
 800acb6:	0635      	lsls	r5, r6, #24
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	d501      	bpl.n	800acc0 <_printf_i+0x1cc>
 800acbc:	6019      	str	r1, [r3, #0]
 800acbe:	e002      	b.n	800acc6 <_printf_i+0x1d2>
 800acc0:	0670      	lsls	r0, r6, #25
 800acc2:	d5fb      	bpl.n	800acbc <_printf_i+0x1c8>
 800acc4:	8019      	strh	r1, [r3, #0]
 800acc6:	2300      	movs	r3, #0
 800acc8:	6123      	str	r3, [r4, #16]
 800acca:	4615      	mov	r5, r2
 800accc:	e7ba      	b.n	800ac44 <_printf_i+0x150>
 800acce:	682b      	ldr	r3, [r5, #0]
 800acd0:	1d1a      	adds	r2, r3, #4
 800acd2:	602a      	str	r2, [r5, #0]
 800acd4:	681d      	ldr	r5, [r3, #0]
 800acd6:	6862      	ldr	r2, [r4, #4]
 800acd8:	2100      	movs	r1, #0
 800acda:	4628      	mov	r0, r5
 800acdc:	f7f5 faa0 	bl	8000220 <memchr>
 800ace0:	b108      	cbz	r0, 800ace6 <_printf_i+0x1f2>
 800ace2:	1b40      	subs	r0, r0, r5
 800ace4:	6060      	str	r0, [r4, #4]
 800ace6:	6863      	ldr	r3, [r4, #4]
 800ace8:	6123      	str	r3, [r4, #16]
 800acea:	2300      	movs	r3, #0
 800acec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acf0:	e7a8      	b.n	800ac44 <_printf_i+0x150>
 800acf2:	6923      	ldr	r3, [r4, #16]
 800acf4:	462a      	mov	r2, r5
 800acf6:	4649      	mov	r1, r9
 800acf8:	4640      	mov	r0, r8
 800acfa:	47d0      	blx	sl
 800acfc:	3001      	adds	r0, #1
 800acfe:	d0ab      	beq.n	800ac58 <_printf_i+0x164>
 800ad00:	6823      	ldr	r3, [r4, #0]
 800ad02:	079b      	lsls	r3, r3, #30
 800ad04:	d413      	bmi.n	800ad2e <_printf_i+0x23a>
 800ad06:	68e0      	ldr	r0, [r4, #12]
 800ad08:	9b03      	ldr	r3, [sp, #12]
 800ad0a:	4298      	cmp	r0, r3
 800ad0c:	bfb8      	it	lt
 800ad0e:	4618      	movlt	r0, r3
 800ad10:	e7a4      	b.n	800ac5c <_printf_i+0x168>
 800ad12:	2301      	movs	r3, #1
 800ad14:	4632      	mov	r2, r6
 800ad16:	4649      	mov	r1, r9
 800ad18:	4640      	mov	r0, r8
 800ad1a:	47d0      	blx	sl
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	d09b      	beq.n	800ac58 <_printf_i+0x164>
 800ad20:	3501      	adds	r5, #1
 800ad22:	68e3      	ldr	r3, [r4, #12]
 800ad24:	9903      	ldr	r1, [sp, #12]
 800ad26:	1a5b      	subs	r3, r3, r1
 800ad28:	42ab      	cmp	r3, r5
 800ad2a:	dcf2      	bgt.n	800ad12 <_printf_i+0x21e>
 800ad2c:	e7eb      	b.n	800ad06 <_printf_i+0x212>
 800ad2e:	2500      	movs	r5, #0
 800ad30:	f104 0619 	add.w	r6, r4, #25
 800ad34:	e7f5      	b.n	800ad22 <_printf_i+0x22e>
 800ad36:	bf00      	nop
 800ad38:	0800d472 	.word	0x0800d472
 800ad3c:	0800d483 	.word	0x0800d483

0800ad40 <strnlen>:
 800ad40:	b510      	push	{r4, lr}
 800ad42:	4602      	mov	r2, r0
 800ad44:	4401      	add	r1, r0
 800ad46:	428a      	cmp	r2, r1
 800ad48:	4613      	mov	r3, r2
 800ad4a:	d003      	beq.n	800ad54 <strnlen+0x14>
 800ad4c:	781c      	ldrb	r4, [r3, #0]
 800ad4e:	3201      	adds	r2, #1
 800ad50:	2c00      	cmp	r4, #0
 800ad52:	d1f8      	bne.n	800ad46 <strnlen+0x6>
 800ad54:	1a18      	subs	r0, r3, r0
 800ad56:	bd10      	pop	{r4, pc}

0800ad58 <strstr>:
 800ad58:	780a      	ldrb	r2, [r1, #0]
 800ad5a:	b570      	push	{r4, r5, r6, lr}
 800ad5c:	b96a      	cbnz	r2, 800ad7a <strstr+0x22>
 800ad5e:	bd70      	pop	{r4, r5, r6, pc}
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d109      	bne.n	800ad78 <strstr+0x20>
 800ad64:	460c      	mov	r4, r1
 800ad66:	4605      	mov	r5, r0
 800ad68:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d0f6      	beq.n	800ad5e <strstr+0x6>
 800ad70:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ad74:	429e      	cmp	r6, r3
 800ad76:	d0f7      	beq.n	800ad68 <strstr+0x10>
 800ad78:	3001      	adds	r0, #1
 800ad7a:	7803      	ldrb	r3, [r0, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d1ef      	bne.n	800ad60 <strstr+0x8>
 800ad80:	4618      	mov	r0, r3
 800ad82:	e7ec      	b.n	800ad5e <strstr+0x6>

0800ad84 <quorem>:
 800ad84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad88:	6903      	ldr	r3, [r0, #16]
 800ad8a:	690c      	ldr	r4, [r1, #16]
 800ad8c:	42a3      	cmp	r3, r4
 800ad8e:	4607      	mov	r7, r0
 800ad90:	f2c0 8081 	blt.w	800ae96 <quorem+0x112>
 800ad94:	3c01      	subs	r4, #1
 800ad96:	f101 0814 	add.w	r8, r1, #20
 800ad9a:	f100 0514 	add.w	r5, r0, #20
 800ad9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ada2:	9301      	str	r3, [sp, #4]
 800ada4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ada8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800adac:	3301      	adds	r3, #1
 800adae:	429a      	cmp	r2, r3
 800adb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800adb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800adb8:	fbb2 f6f3 	udiv	r6, r2, r3
 800adbc:	d331      	bcc.n	800ae22 <quorem+0x9e>
 800adbe:	f04f 0e00 	mov.w	lr, #0
 800adc2:	4640      	mov	r0, r8
 800adc4:	46ac      	mov	ip, r5
 800adc6:	46f2      	mov	sl, lr
 800adc8:	f850 2b04 	ldr.w	r2, [r0], #4
 800adcc:	b293      	uxth	r3, r2
 800adce:	fb06 e303 	mla	r3, r6, r3, lr
 800add2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800add6:	b29b      	uxth	r3, r3
 800add8:	ebaa 0303 	sub.w	r3, sl, r3
 800addc:	f8dc a000 	ldr.w	sl, [ip]
 800ade0:	0c12      	lsrs	r2, r2, #16
 800ade2:	fa13 f38a 	uxtah	r3, r3, sl
 800ade6:	fb06 e202 	mla	r2, r6, r2, lr
 800adea:	9300      	str	r3, [sp, #0]
 800adec:	9b00      	ldr	r3, [sp, #0]
 800adee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800adf2:	b292      	uxth	r2, r2
 800adf4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800adf8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800adfc:	f8bd 3000 	ldrh.w	r3, [sp]
 800ae00:	4581      	cmp	r9, r0
 800ae02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae06:	f84c 3b04 	str.w	r3, [ip], #4
 800ae0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae0e:	d2db      	bcs.n	800adc8 <quorem+0x44>
 800ae10:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae14:	b92b      	cbnz	r3, 800ae22 <quorem+0x9e>
 800ae16:	9b01      	ldr	r3, [sp, #4]
 800ae18:	3b04      	subs	r3, #4
 800ae1a:	429d      	cmp	r5, r3
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	d32e      	bcc.n	800ae7e <quorem+0xfa>
 800ae20:	613c      	str	r4, [r7, #16]
 800ae22:	4638      	mov	r0, r7
 800ae24:	f001 f9b2 	bl	800c18c <__mcmp>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	db24      	blt.n	800ae76 <quorem+0xf2>
 800ae2c:	3601      	adds	r6, #1
 800ae2e:	4628      	mov	r0, r5
 800ae30:	f04f 0c00 	mov.w	ip, #0
 800ae34:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae38:	f8d0 e000 	ldr.w	lr, [r0]
 800ae3c:	b293      	uxth	r3, r2
 800ae3e:	ebac 0303 	sub.w	r3, ip, r3
 800ae42:	0c12      	lsrs	r2, r2, #16
 800ae44:	fa13 f38e 	uxtah	r3, r3, lr
 800ae48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ae4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae56:	45c1      	cmp	r9, r8
 800ae58:	f840 3b04 	str.w	r3, [r0], #4
 800ae5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ae60:	d2e8      	bcs.n	800ae34 <quorem+0xb0>
 800ae62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae6a:	b922      	cbnz	r2, 800ae76 <quorem+0xf2>
 800ae6c:	3b04      	subs	r3, #4
 800ae6e:	429d      	cmp	r5, r3
 800ae70:	461a      	mov	r2, r3
 800ae72:	d30a      	bcc.n	800ae8a <quorem+0x106>
 800ae74:	613c      	str	r4, [r7, #16]
 800ae76:	4630      	mov	r0, r6
 800ae78:	b003      	add	sp, #12
 800ae7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae7e:	6812      	ldr	r2, [r2, #0]
 800ae80:	3b04      	subs	r3, #4
 800ae82:	2a00      	cmp	r2, #0
 800ae84:	d1cc      	bne.n	800ae20 <quorem+0x9c>
 800ae86:	3c01      	subs	r4, #1
 800ae88:	e7c7      	b.n	800ae1a <quorem+0x96>
 800ae8a:	6812      	ldr	r2, [r2, #0]
 800ae8c:	3b04      	subs	r3, #4
 800ae8e:	2a00      	cmp	r2, #0
 800ae90:	d1f0      	bne.n	800ae74 <quorem+0xf0>
 800ae92:	3c01      	subs	r4, #1
 800ae94:	e7eb      	b.n	800ae6e <quorem+0xea>
 800ae96:	2000      	movs	r0, #0
 800ae98:	e7ee      	b.n	800ae78 <quorem+0xf4>
 800ae9a:	0000      	movs	r0, r0
 800ae9c:	0000      	movs	r0, r0
	...

0800aea0 <_dtoa_r>:
 800aea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea4:	ed2d 8b04 	vpush	{d8-d9}
 800aea8:	ec57 6b10 	vmov	r6, r7, d0
 800aeac:	b093      	sub	sp, #76	; 0x4c
 800aeae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aeb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aeb4:	9106      	str	r1, [sp, #24]
 800aeb6:	ee10 aa10 	vmov	sl, s0
 800aeba:	4604      	mov	r4, r0
 800aebc:	9209      	str	r2, [sp, #36]	; 0x24
 800aebe:	930c      	str	r3, [sp, #48]	; 0x30
 800aec0:	46bb      	mov	fp, r7
 800aec2:	b975      	cbnz	r5, 800aee2 <_dtoa_r+0x42>
 800aec4:	2010      	movs	r0, #16
 800aec6:	f000 fed7 	bl	800bc78 <malloc>
 800aeca:	4602      	mov	r2, r0
 800aecc:	6260      	str	r0, [r4, #36]	; 0x24
 800aece:	b920      	cbnz	r0, 800aeda <_dtoa_r+0x3a>
 800aed0:	4ba7      	ldr	r3, [pc, #668]	; (800b170 <_dtoa_r+0x2d0>)
 800aed2:	21ea      	movs	r1, #234	; 0xea
 800aed4:	48a7      	ldr	r0, [pc, #668]	; (800b174 <_dtoa_r+0x2d4>)
 800aed6:	f001 fdd1 	bl	800ca7c <__assert_func>
 800aeda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aede:	6005      	str	r5, [r0, #0]
 800aee0:	60c5      	str	r5, [r0, #12]
 800aee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aee4:	6819      	ldr	r1, [r3, #0]
 800aee6:	b151      	cbz	r1, 800aefe <_dtoa_r+0x5e>
 800aee8:	685a      	ldr	r2, [r3, #4]
 800aeea:	604a      	str	r2, [r1, #4]
 800aeec:	2301      	movs	r3, #1
 800aeee:	4093      	lsls	r3, r2
 800aef0:	608b      	str	r3, [r1, #8]
 800aef2:	4620      	mov	r0, r4
 800aef4:	f000 ff08 	bl	800bd08 <_Bfree>
 800aef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aefa:	2200      	movs	r2, #0
 800aefc:	601a      	str	r2, [r3, #0]
 800aefe:	1e3b      	subs	r3, r7, #0
 800af00:	bfaa      	itet	ge
 800af02:	2300      	movge	r3, #0
 800af04:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800af08:	f8c8 3000 	strge.w	r3, [r8]
 800af0c:	4b9a      	ldr	r3, [pc, #616]	; (800b178 <_dtoa_r+0x2d8>)
 800af0e:	bfbc      	itt	lt
 800af10:	2201      	movlt	r2, #1
 800af12:	f8c8 2000 	strlt.w	r2, [r8]
 800af16:	ea33 030b 	bics.w	r3, r3, fp
 800af1a:	d11b      	bne.n	800af54 <_dtoa_r+0xb4>
 800af1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af1e:	f242 730f 	movw	r3, #9999	; 0x270f
 800af22:	6013      	str	r3, [r2, #0]
 800af24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af28:	4333      	orrs	r3, r6
 800af2a:	f000 8592 	beq.w	800ba52 <_dtoa_r+0xbb2>
 800af2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af30:	b963      	cbnz	r3, 800af4c <_dtoa_r+0xac>
 800af32:	4b92      	ldr	r3, [pc, #584]	; (800b17c <_dtoa_r+0x2dc>)
 800af34:	e022      	b.n	800af7c <_dtoa_r+0xdc>
 800af36:	4b92      	ldr	r3, [pc, #584]	; (800b180 <_dtoa_r+0x2e0>)
 800af38:	9301      	str	r3, [sp, #4]
 800af3a:	3308      	adds	r3, #8
 800af3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af3e:	6013      	str	r3, [r2, #0]
 800af40:	9801      	ldr	r0, [sp, #4]
 800af42:	b013      	add	sp, #76	; 0x4c
 800af44:	ecbd 8b04 	vpop	{d8-d9}
 800af48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af4c:	4b8b      	ldr	r3, [pc, #556]	; (800b17c <_dtoa_r+0x2dc>)
 800af4e:	9301      	str	r3, [sp, #4]
 800af50:	3303      	adds	r3, #3
 800af52:	e7f3      	b.n	800af3c <_dtoa_r+0x9c>
 800af54:	2200      	movs	r2, #0
 800af56:	2300      	movs	r3, #0
 800af58:	4650      	mov	r0, sl
 800af5a:	4659      	mov	r1, fp
 800af5c:	f7f5 fdd4 	bl	8000b08 <__aeabi_dcmpeq>
 800af60:	ec4b ab19 	vmov	d9, sl, fp
 800af64:	4680      	mov	r8, r0
 800af66:	b158      	cbz	r0, 800af80 <_dtoa_r+0xe0>
 800af68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af6a:	2301      	movs	r3, #1
 800af6c:	6013      	str	r3, [r2, #0]
 800af6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af70:	2b00      	cmp	r3, #0
 800af72:	f000 856b 	beq.w	800ba4c <_dtoa_r+0xbac>
 800af76:	4883      	ldr	r0, [pc, #524]	; (800b184 <_dtoa_r+0x2e4>)
 800af78:	6018      	str	r0, [r3, #0]
 800af7a:	1e43      	subs	r3, r0, #1
 800af7c:	9301      	str	r3, [sp, #4]
 800af7e:	e7df      	b.n	800af40 <_dtoa_r+0xa0>
 800af80:	ec4b ab10 	vmov	d0, sl, fp
 800af84:	aa10      	add	r2, sp, #64	; 0x40
 800af86:	a911      	add	r1, sp, #68	; 0x44
 800af88:	4620      	mov	r0, r4
 800af8a:	f001 f9a5 	bl	800c2d8 <__d2b>
 800af8e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800af92:	ee08 0a10 	vmov	s16, r0
 800af96:	2d00      	cmp	r5, #0
 800af98:	f000 8084 	beq.w	800b0a4 <_dtoa_r+0x204>
 800af9c:	ee19 3a90 	vmov	r3, s19
 800afa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afa4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800afa8:	4656      	mov	r6, sl
 800afaa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800afae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800afb2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800afb6:	4b74      	ldr	r3, [pc, #464]	; (800b188 <_dtoa_r+0x2e8>)
 800afb8:	2200      	movs	r2, #0
 800afba:	4630      	mov	r0, r6
 800afbc:	4639      	mov	r1, r7
 800afbe:	f7f5 f983 	bl	80002c8 <__aeabi_dsub>
 800afc2:	a365      	add	r3, pc, #404	; (adr r3, 800b158 <_dtoa_r+0x2b8>)
 800afc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc8:	f7f5 fb36 	bl	8000638 <__aeabi_dmul>
 800afcc:	a364      	add	r3, pc, #400	; (adr r3, 800b160 <_dtoa_r+0x2c0>)
 800afce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd2:	f7f5 f97b 	bl	80002cc <__adddf3>
 800afd6:	4606      	mov	r6, r0
 800afd8:	4628      	mov	r0, r5
 800afda:	460f      	mov	r7, r1
 800afdc:	f7f5 fac2 	bl	8000564 <__aeabi_i2d>
 800afe0:	a361      	add	r3, pc, #388	; (adr r3, 800b168 <_dtoa_r+0x2c8>)
 800afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe6:	f7f5 fb27 	bl	8000638 <__aeabi_dmul>
 800afea:	4602      	mov	r2, r0
 800afec:	460b      	mov	r3, r1
 800afee:	4630      	mov	r0, r6
 800aff0:	4639      	mov	r1, r7
 800aff2:	f7f5 f96b 	bl	80002cc <__adddf3>
 800aff6:	4606      	mov	r6, r0
 800aff8:	460f      	mov	r7, r1
 800affa:	f7f5 fdcd 	bl	8000b98 <__aeabi_d2iz>
 800affe:	2200      	movs	r2, #0
 800b000:	9000      	str	r0, [sp, #0]
 800b002:	2300      	movs	r3, #0
 800b004:	4630      	mov	r0, r6
 800b006:	4639      	mov	r1, r7
 800b008:	f7f5 fd88 	bl	8000b1c <__aeabi_dcmplt>
 800b00c:	b150      	cbz	r0, 800b024 <_dtoa_r+0x184>
 800b00e:	9800      	ldr	r0, [sp, #0]
 800b010:	f7f5 faa8 	bl	8000564 <__aeabi_i2d>
 800b014:	4632      	mov	r2, r6
 800b016:	463b      	mov	r3, r7
 800b018:	f7f5 fd76 	bl	8000b08 <__aeabi_dcmpeq>
 800b01c:	b910      	cbnz	r0, 800b024 <_dtoa_r+0x184>
 800b01e:	9b00      	ldr	r3, [sp, #0]
 800b020:	3b01      	subs	r3, #1
 800b022:	9300      	str	r3, [sp, #0]
 800b024:	9b00      	ldr	r3, [sp, #0]
 800b026:	2b16      	cmp	r3, #22
 800b028:	d85a      	bhi.n	800b0e0 <_dtoa_r+0x240>
 800b02a:	9a00      	ldr	r2, [sp, #0]
 800b02c:	4b57      	ldr	r3, [pc, #348]	; (800b18c <_dtoa_r+0x2ec>)
 800b02e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b036:	ec51 0b19 	vmov	r0, r1, d9
 800b03a:	f7f5 fd6f 	bl	8000b1c <__aeabi_dcmplt>
 800b03e:	2800      	cmp	r0, #0
 800b040:	d050      	beq.n	800b0e4 <_dtoa_r+0x244>
 800b042:	9b00      	ldr	r3, [sp, #0]
 800b044:	3b01      	subs	r3, #1
 800b046:	9300      	str	r3, [sp, #0]
 800b048:	2300      	movs	r3, #0
 800b04a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b04c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b04e:	1b5d      	subs	r5, r3, r5
 800b050:	1e6b      	subs	r3, r5, #1
 800b052:	9305      	str	r3, [sp, #20]
 800b054:	bf45      	ittet	mi
 800b056:	f1c5 0301 	rsbmi	r3, r5, #1
 800b05a:	9304      	strmi	r3, [sp, #16]
 800b05c:	2300      	movpl	r3, #0
 800b05e:	2300      	movmi	r3, #0
 800b060:	bf4c      	ite	mi
 800b062:	9305      	strmi	r3, [sp, #20]
 800b064:	9304      	strpl	r3, [sp, #16]
 800b066:	9b00      	ldr	r3, [sp, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	db3d      	blt.n	800b0e8 <_dtoa_r+0x248>
 800b06c:	9b05      	ldr	r3, [sp, #20]
 800b06e:	9a00      	ldr	r2, [sp, #0]
 800b070:	920a      	str	r2, [sp, #40]	; 0x28
 800b072:	4413      	add	r3, r2
 800b074:	9305      	str	r3, [sp, #20]
 800b076:	2300      	movs	r3, #0
 800b078:	9307      	str	r3, [sp, #28]
 800b07a:	9b06      	ldr	r3, [sp, #24]
 800b07c:	2b09      	cmp	r3, #9
 800b07e:	f200 8089 	bhi.w	800b194 <_dtoa_r+0x2f4>
 800b082:	2b05      	cmp	r3, #5
 800b084:	bfc4      	itt	gt
 800b086:	3b04      	subgt	r3, #4
 800b088:	9306      	strgt	r3, [sp, #24]
 800b08a:	9b06      	ldr	r3, [sp, #24]
 800b08c:	f1a3 0302 	sub.w	r3, r3, #2
 800b090:	bfcc      	ite	gt
 800b092:	2500      	movgt	r5, #0
 800b094:	2501      	movle	r5, #1
 800b096:	2b03      	cmp	r3, #3
 800b098:	f200 8087 	bhi.w	800b1aa <_dtoa_r+0x30a>
 800b09c:	e8df f003 	tbb	[pc, r3]
 800b0a0:	59383a2d 	.word	0x59383a2d
 800b0a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b0a8:	441d      	add	r5, r3
 800b0aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b0ae:	2b20      	cmp	r3, #32
 800b0b0:	bfc1      	itttt	gt
 800b0b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b0b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b0ba:	fa0b f303 	lslgt.w	r3, fp, r3
 800b0be:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b0c2:	bfda      	itte	le
 800b0c4:	f1c3 0320 	rsble	r3, r3, #32
 800b0c8:	fa06 f003 	lslle.w	r0, r6, r3
 800b0cc:	4318      	orrgt	r0, r3
 800b0ce:	f7f5 fa39 	bl	8000544 <__aeabi_ui2d>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	4606      	mov	r6, r0
 800b0d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b0da:	3d01      	subs	r5, #1
 800b0dc:	930e      	str	r3, [sp, #56]	; 0x38
 800b0de:	e76a      	b.n	800afb6 <_dtoa_r+0x116>
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e7b2      	b.n	800b04a <_dtoa_r+0x1aa>
 800b0e4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b0e6:	e7b1      	b.n	800b04c <_dtoa_r+0x1ac>
 800b0e8:	9b04      	ldr	r3, [sp, #16]
 800b0ea:	9a00      	ldr	r2, [sp, #0]
 800b0ec:	1a9b      	subs	r3, r3, r2
 800b0ee:	9304      	str	r3, [sp, #16]
 800b0f0:	4253      	negs	r3, r2
 800b0f2:	9307      	str	r3, [sp, #28]
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	930a      	str	r3, [sp, #40]	; 0x28
 800b0f8:	e7bf      	b.n	800b07a <_dtoa_r+0x1da>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	9308      	str	r3, [sp, #32]
 800b0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b100:	2b00      	cmp	r3, #0
 800b102:	dc55      	bgt.n	800b1b0 <_dtoa_r+0x310>
 800b104:	2301      	movs	r3, #1
 800b106:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b10a:	461a      	mov	r2, r3
 800b10c:	9209      	str	r2, [sp, #36]	; 0x24
 800b10e:	e00c      	b.n	800b12a <_dtoa_r+0x28a>
 800b110:	2301      	movs	r3, #1
 800b112:	e7f3      	b.n	800b0fc <_dtoa_r+0x25c>
 800b114:	2300      	movs	r3, #0
 800b116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b118:	9308      	str	r3, [sp, #32]
 800b11a:	9b00      	ldr	r3, [sp, #0]
 800b11c:	4413      	add	r3, r2
 800b11e:	9302      	str	r3, [sp, #8]
 800b120:	3301      	adds	r3, #1
 800b122:	2b01      	cmp	r3, #1
 800b124:	9303      	str	r3, [sp, #12]
 800b126:	bfb8      	it	lt
 800b128:	2301      	movlt	r3, #1
 800b12a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b12c:	2200      	movs	r2, #0
 800b12e:	6042      	str	r2, [r0, #4]
 800b130:	2204      	movs	r2, #4
 800b132:	f102 0614 	add.w	r6, r2, #20
 800b136:	429e      	cmp	r6, r3
 800b138:	6841      	ldr	r1, [r0, #4]
 800b13a:	d93d      	bls.n	800b1b8 <_dtoa_r+0x318>
 800b13c:	4620      	mov	r0, r4
 800b13e:	f000 fda3 	bl	800bc88 <_Balloc>
 800b142:	9001      	str	r0, [sp, #4]
 800b144:	2800      	cmp	r0, #0
 800b146:	d13b      	bne.n	800b1c0 <_dtoa_r+0x320>
 800b148:	4b11      	ldr	r3, [pc, #68]	; (800b190 <_dtoa_r+0x2f0>)
 800b14a:	4602      	mov	r2, r0
 800b14c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b150:	e6c0      	b.n	800aed4 <_dtoa_r+0x34>
 800b152:	2301      	movs	r3, #1
 800b154:	e7df      	b.n	800b116 <_dtoa_r+0x276>
 800b156:	bf00      	nop
 800b158:	636f4361 	.word	0x636f4361
 800b15c:	3fd287a7 	.word	0x3fd287a7
 800b160:	8b60c8b3 	.word	0x8b60c8b3
 800b164:	3fc68a28 	.word	0x3fc68a28
 800b168:	509f79fb 	.word	0x509f79fb
 800b16c:	3fd34413 	.word	0x3fd34413
 800b170:	0800d4a1 	.word	0x0800d4a1
 800b174:	0800d4b8 	.word	0x0800d4b8
 800b178:	7ff00000 	.word	0x7ff00000
 800b17c:	0800d49d 	.word	0x0800d49d
 800b180:	0800d494 	.word	0x0800d494
 800b184:	0800d471 	.word	0x0800d471
 800b188:	3ff80000 	.word	0x3ff80000
 800b18c:	0800d608 	.word	0x0800d608
 800b190:	0800d513 	.word	0x0800d513
 800b194:	2501      	movs	r5, #1
 800b196:	2300      	movs	r3, #0
 800b198:	9306      	str	r3, [sp, #24]
 800b19a:	9508      	str	r5, [sp, #32]
 800b19c:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	2312      	movs	r3, #18
 800b1a8:	e7b0      	b.n	800b10c <_dtoa_r+0x26c>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	9308      	str	r3, [sp, #32]
 800b1ae:	e7f5      	b.n	800b19c <_dtoa_r+0x2fc>
 800b1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b1b6:	e7b8      	b.n	800b12a <_dtoa_r+0x28a>
 800b1b8:	3101      	adds	r1, #1
 800b1ba:	6041      	str	r1, [r0, #4]
 800b1bc:	0052      	lsls	r2, r2, #1
 800b1be:	e7b8      	b.n	800b132 <_dtoa_r+0x292>
 800b1c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1c2:	9a01      	ldr	r2, [sp, #4]
 800b1c4:	601a      	str	r2, [r3, #0]
 800b1c6:	9b03      	ldr	r3, [sp, #12]
 800b1c8:	2b0e      	cmp	r3, #14
 800b1ca:	f200 809d 	bhi.w	800b308 <_dtoa_r+0x468>
 800b1ce:	2d00      	cmp	r5, #0
 800b1d0:	f000 809a 	beq.w	800b308 <_dtoa_r+0x468>
 800b1d4:	9b00      	ldr	r3, [sp, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	dd32      	ble.n	800b240 <_dtoa_r+0x3a0>
 800b1da:	4ab7      	ldr	r2, [pc, #732]	; (800b4b8 <_dtoa_r+0x618>)
 800b1dc:	f003 030f 	and.w	r3, r3, #15
 800b1e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b1e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1e8:	9b00      	ldr	r3, [sp, #0]
 800b1ea:	05d8      	lsls	r0, r3, #23
 800b1ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b1f0:	d516      	bpl.n	800b220 <_dtoa_r+0x380>
 800b1f2:	4bb2      	ldr	r3, [pc, #712]	; (800b4bc <_dtoa_r+0x61c>)
 800b1f4:	ec51 0b19 	vmov	r0, r1, d9
 800b1f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b1fc:	f7f5 fb46 	bl	800088c <__aeabi_ddiv>
 800b200:	f007 070f 	and.w	r7, r7, #15
 800b204:	4682      	mov	sl, r0
 800b206:	468b      	mov	fp, r1
 800b208:	2503      	movs	r5, #3
 800b20a:	4eac      	ldr	r6, [pc, #688]	; (800b4bc <_dtoa_r+0x61c>)
 800b20c:	b957      	cbnz	r7, 800b224 <_dtoa_r+0x384>
 800b20e:	4642      	mov	r2, r8
 800b210:	464b      	mov	r3, r9
 800b212:	4650      	mov	r0, sl
 800b214:	4659      	mov	r1, fp
 800b216:	f7f5 fb39 	bl	800088c <__aeabi_ddiv>
 800b21a:	4682      	mov	sl, r0
 800b21c:	468b      	mov	fp, r1
 800b21e:	e028      	b.n	800b272 <_dtoa_r+0x3d2>
 800b220:	2502      	movs	r5, #2
 800b222:	e7f2      	b.n	800b20a <_dtoa_r+0x36a>
 800b224:	07f9      	lsls	r1, r7, #31
 800b226:	d508      	bpl.n	800b23a <_dtoa_r+0x39a>
 800b228:	4640      	mov	r0, r8
 800b22a:	4649      	mov	r1, r9
 800b22c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b230:	f7f5 fa02 	bl	8000638 <__aeabi_dmul>
 800b234:	3501      	adds	r5, #1
 800b236:	4680      	mov	r8, r0
 800b238:	4689      	mov	r9, r1
 800b23a:	107f      	asrs	r7, r7, #1
 800b23c:	3608      	adds	r6, #8
 800b23e:	e7e5      	b.n	800b20c <_dtoa_r+0x36c>
 800b240:	f000 809b 	beq.w	800b37a <_dtoa_r+0x4da>
 800b244:	9b00      	ldr	r3, [sp, #0]
 800b246:	4f9d      	ldr	r7, [pc, #628]	; (800b4bc <_dtoa_r+0x61c>)
 800b248:	425e      	negs	r6, r3
 800b24a:	4b9b      	ldr	r3, [pc, #620]	; (800b4b8 <_dtoa_r+0x618>)
 800b24c:	f006 020f 	and.w	r2, r6, #15
 800b250:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b258:	ec51 0b19 	vmov	r0, r1, d9
 800b25c:	f7f5 f9ec 	bl	8000638 <__aeabi_dmul>
 800b260:	1136      	asrs	r6, r6, #4
 800b262:	4682      	mov	sl, r0
 800b264:	468b      	mov	fp, r1
 800b266:	2300      	movs	r3, #0
 800b268:	2502      	movs	r5, #2
 800b26a:	2e00      	cmp	r6, #0
 800b26c:	d17a      	bne.n	800b364 <_dtoa_r+0x4c4>
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d1d3      	bne.n	800b21a <_dtoa_r+0x37a>
 800b272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b274:	2b00      	cmp	r3, #0
 800b276:	f000 8082 	beq.w	800b37e <_dtoa_r+0x4de>
 800b27a:	4b91      	ldr	r3, [pc, #580]	; (800b4c0 <_dtoa_r+0x620>)
 800b27c:	2200      	movs	r2, #0
 800b27e:	4650      	mov	r0, sl
 800b280:	4659      	mov	r1, fp
 800b282:	f7f5 fc4b 	bl	8000b1c <__aeabi_dcmplt>
 800b286:	2800      	cmp	r0, #0
 800b288:	d079      	beq.n	800b37e <_dtoa_r+0x4de>
 800b28a:	9b03      	ldr	r3, [sp, #12]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d076      	beq.n	800b37e <_dtoa_r+0x4de>
 800b290:	9b02      	ldr	r3, [sp, #8]
 800b292:	2b00      	cmp	r3, #0
 800b294:	dd36      	ble.n	800b304 <_dtoa_r+0x464>
 800b296:	9b00      	ldr	r3, [sp, #0]
 800b298:	4650      	mov	r0, sl
 800b29a:	4659      	mov	r1, fp
 800b29c:	1e5f      	subs	r7, r3, #1
 800b29e:	2200      	movs	r2, #0
 800b2a0:	4b88      	ldr	r3, [pc, #544]	; (800b4c4 <_dtoa_r+0x624>)
 800b2a2:	f7f5 f9c9 	bl	8000638 <__aeabi_dmul>
 800b2a6:	9e02      	ldr	r6, [sp, #8]
 800b2a8:	4682      	mov	sl, r0
 800b2aa:	468b      	mov	fp, r1
 800b2ac:	3501      	adds	r5, #1
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	f7f5 f958 	bl	8000564 <__aeabi_i2d>
 800b2b4:	4652      	mov	r2, sl
 800b2b6:	465b      	mov	r3, fp
 800b2b8:	f7f5 f9be 	bl	8000638 <__aeabi_dmul>
 800b2bc:	4b82      	ldr	r3, [pc, #520]	; (800b4c8 <_dtoa_r+0x628>)
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f7f5 f804 	bl	80002cc <__adddf3>
 800b2c4:	46d0      	mov	r8, sl
 800b2c6:	46d9      	mov	r9, fp
 800b2c8:	4682      	mov	sl, r0
 800b2ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b2ce:	2e00      	cmp	r6, #0
 800b2d0:	d158      	bne.n	800b384 <_dtoa_r+0x4e4>
 800b2d2:	4b7e      	ldr	r3, [pc, #504]	; (800b4cc <_dtoa_r+0x62c>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	4640      	mov	r0, r8
 800b2d8:	4649      	mov	r1, r9
 800b2da:	f7f4 fff5 	bl	80002c8 <__aeabi_dsub>
 800b2de:	4652      	mov	r2, sl
 800b2e0:	465b      	mov	r3, fp
 800b2e2:	4680      	mov	r8, r0
 800b2e4:	4689      	mov	r9, r1
 800b2e6:	f7f5 fc37 	bl	8000b58 <__aeabi_dcmpgt>
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	f040 8295 	bne.w	800b81a <_dtoa_r+0x97a>
 800b2f0:	4652      	mov	r2, sl
 800b2f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b2f6:	4640      	mov	r0, r8
 800b2f8:	4649      	mov	r1, r9
 800b2fa:	f7f5 fc0f 	bl	8000b1c <__aeabi_dcmplt>
 800b2fe:	2800      	cmp	r0, #0
 800b300:	f040 8289 	bne.w	800b816 <_dtoa_r+0x976>
 800b304:	ec5b ab19 	vmov	sl, fp, d9
 800b308:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f2c0 8148 	blt.w	800b5a0 <_dtoa_r+0x700>
 800b310:	9a00      	ldr	r2, [sp, #0]
 800b312:	2a0e      	cmp	r2, #14
 800b314:	f300 8144 	bgt.w	800b5a0 <_dtoa_r+0x700>
 800b318:	4b67      	ldr	r3, [pc, #412]	; (800b4b8 <_dtoa_r+0x618>)
 800b31a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b31e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b324:	2b00      	cmp	r3, #0
 800b326:	f280 80d5 	bge.w	800b4d4 <_dtoa_r+0x634>
 800b32a:	9b03      	ldr	r3, [sp, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	f300 80d1 	bgt.w	800b4d4 <_dtoa_r+0x634>
 800b332:	f040 826f 	bne.w	800b814 <_dtoa_r+0x974>
 800b336:	4b65      	ldr	r3, [pc, #404]	; (800b4cc <_dtoa_r+0x62c>)
 800b338:	2200      	movs	r2, #0
 800b33a:	4640      	mov	r0, r8
 800b33c:	4649      	mov	r1, r9
 800b33e:	f7f5 f97b 	bl	8000638 <__aeabi_dmul>
 800b342:	4652      	mov	r2, sl
 800b344:	465b      	mov	r3, fp
 800b346:	f7f5 fbfd 	bl	8000b44 <__aeabi_dcmpge>
 800b34a:	9e03      	ldr	r6, [sp, #12]
 800b34c:	4637      	mov	r7, r6
 800b34e:	2800      	cmp	r0, #0
 800b350:	f040 8245 	bne.w	800b7de <_dtoa_r+0x93e>
 800b354:	9d01      	ldr	r5, [sp, #4]
 800b356:	2331      	movs	r3, #49	; 0x31
 800b358:	f805 3b01 	strb.w	r3, [r5], #1
 800b35c:	9b00      	ldr	r3, [sp, #0]
 800b35e:	3301      	adds	r3, #1
 800b360:	9300      	str	r3, [sp, #0]
 800b362:	e240      	b.n	800b7e6 <_dtoa_r+0x946>
 800b364:	07f2      	lsls	r2, r6, #31
 800b366:	d505      	bpl.n	800b374 <_dtoa_r+0x4d4>
 800b368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b36c:	f7f5 f964 	bl	8000638 <__aeabi_dmul>
 800b370:	3501      	adds	r5, #1
 800b372:	2301      	movs	r3, #1
 800b374:	1076      	asrs	r6, r6, #1
 800b376:	3708      	adds	r7, #8
 800b378:	e777      	b.n	800b26a <_dtoa_r+0x3ca>
 800b37a:	2502      	movs	r5, #2
 800b37c:	e779      	b.n	800b272 <_dtoa_r+0x3d2>
 800b37e:	9f00      	ldr	r7, [sp, #0]
 800b380:	9e03      	ldr	r6, [sp, #12]
 800b382:	e794      	b.n	800b2ae <_dtoa_r+0x40e>
 800b384:	9901      	ldr	r1, [sp, #4]
 800b386:	4b4c      	ldr	r3, [pc, #304]	; (800b4b8 <_dtoa_r+0x618>)
 800b388:	4431      	add	r1, r6
 800b38a:	910d      	str	r1, [sp, #52]	; 0x34
 800b38c:	9908      	ldr	r1, [sp, #32]
 800b38e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b392:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b396:	2900      	cmp	r1, #0
 800b398:	d043      	beq.n	800b422 <_dtoa_r+0x582>
 800b39a:	494d      	ldr	r1, [pc, #308]	; (800b4d0 <_dtoa_r+0x630>)
 800b39c:	2000      	movs	r0, #0
 800b39e:	f7f5 fa75 	bl	800088c <__aeabi_ddiv>
 800b3a2:	4652      	mov	r2, sl
 800b3a4:	465b      	mov	r3, fp
 800b3a6:	f7f4 ff8f 	bl	80002c8 <__aeabi_dsub>
 800b3aa:	9d01      	ldr	r5, [sp, #4]
 800b3ac:	4682      	mov	sl, r0
 800b3ae:	468b      	mov	fp, r1
 800b3b0:	4649      	mov	r1, r9
 800b3b2:	4640      	mov	r0, r8
 800b3b4:	f7f5 fbf0 	bl	8000b98 <__aeabi_d2iz>
 800b3b8:	4606      	mov	r6, r0
 800b3ba:	f7f5 f8d3 	bl	8000564 <__aeabi_i2d>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	4640      	mov	r0, r8
 800b3c4:	4649      	mov	r1, r9
 800b3c6:	f7f4 ff7f 	bl	80002c8 <__aeabi_dsub>
 800b3ca:	3630      	adds	r6, #48	; 0x30
 800b3cc:	f805 6b01 	strb.w	r6, [r5], #1
 800b3d0:	4652      	mov	r2, sl
 800b3d2:	465b      	mov	r3, fp
 800b3d4:	4680      	mov	r8, r0
 800b3d6:	4689      	mov	r9, r1
 800b3d8:	f7f5 fba0 	bl	8000b1c <__aeabi_dcmplt>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d163      	bne.n	800b4a8 <_dtoa_r+0x608>
 800b3e0:	4642      	mov	r2, r8
 800b3e2:	464b      	mov	r3, r9
 800b3e4:	4936      	ldr	r1, [pc, #216]	; (800b4c0 <_dtoa_r+0x620>)
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	f7f4 ff6e 	bl	80002c8 <__aeabi_dsub>
 800b3ec:	4652      	mov	r2, sl
 800b3ee:	465b      	mov	r3, fp
 800b3f0:	f7f5 fb94 	bl	8000b1c <__aeabi_dcmplt>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	f040 80b5 	bne.w	800b564 <_dtoa_r+0x6c4>
 800b3fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3fc:	429d      	cmp	r5, r3
 800b3fe:	d081      	beq.n	800b304 <_dtoa_r+0x464>
 800b400:	4b30      	ldr	r3, [pc, #192]	; (800b4c4 <_dtoa_r+0x624>)
 800b402:	2200      	movs	r2, #0
 800b404:	4650      	mov	r0, sl
 800b406:	4659      	mov	r1, fp
 800b408:	f7f5 f916 	bl	8000638 <__aeabi_dmul>
 800b40c:	4b2d      	ldr	r3, [pc, #180]	; (800b4c4 <_dtoa_r+0x624>)
 800b40e:	4682      	mov	sl, r0
 800b410:	468b      	mov	fp, r1
 800b412:	4640      	mov	r0, r8
 800b414:	4649      	mov	r1, r9
 800b416:	2200      	movs	r2, #0
 800b418:	f7f5 f90e 	bl	8000638 <__aeabi_dmul>
 800b41c:	4680      	mov	r8, r0
 800b41e:	4689      	mov	r9, r1
 800b420:	e7c6      	b.n	800b3b0 <_dtoa_r+0x510>
 800b422:	4650      	mov	r0, sl
 800b424:	4659      	mov	r1, fp
 800b426:	f7f5 f907 	bl	8000638 <__aeabi_dmul>
 800b42a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b42c:	9d01      	ldr	r5, [sp, #4]
 800b42e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b430:	4682      	mov	sl, r0
 800b432:	468b      	mov	fp, r1
 800b434:	4649      	mov	r1, r9
 800b436:	4640      	mov	r0, r8
 800b438:	f7f5 fbae 	bl	8000b98 <__aeabi_d2iz>
 800b43c:	4606      	mov	r6, r0
 800b43e:	f7f5 f891 	bl	8000564 <__aeabi_i2d>
 800b442:	3630      	adds	r6, #48	; 0x30
 800b444:	4602      	mov	r2, r0
 800b446:	460b      	mov	r3, r1
 800b448:	4640      	mov	r0, r8
 800b44a:	4649      	mov	r1, r9
 800b44c:	f7f4 ff3c 	bl	80002c8 <__aeabi_dsub>
 800b450:	f805 6b01 	strb.w	r6, [r5], #1
 800b454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b456:	429d      	cmp	r5, r3
 800b458:	4680      	mov	r8, r0
 800b45a:	4689      	mov	r9, r1
 800b45c:	f04f 0200 	mov.w	r2, #0
 800b460:	d124      	bne.n	800b4ac <_dtoa_r+0x60c>
 800b462:	4b1b      	ldr	r3, [pc, #108]	; (800b4d0 <_dtoa_r+0x630>)
 800b464:	4650      	mov	r0, sl
 800b466:	4659      	mov	r1, fp
 800b468:	f7f4 ff30 	bl	80002cc <__adddf3>
 800b46c:	4602      	mov	r2, r0
 800b46e:	460b      	mov	r3, r1
 800b470:	4640      	mov	r0, r8
 800b472:	4649      	mov	r1, r9
 800b474:	f7f5 fb70 	bl	8000b58 <__aeabi_dcmpgt>
 800b478:	2800      	cmp	r0, #0
 800b47a:	d173      	bne.n	800b564 <_dtoa_r+0x6c4>
 800b47c:	4652      	mov	r2, sl
 800b47e:	465b      	mov	r3, fp
 800b480:	4913      	ldr	r1, [pc, #76]	; (800b4d0 <_dtoa_r+0x630>)
 800b482:	2000      	movs	r0, #0
 800b484:	f7f4 ff20 	bl	80002c8 <__aeabi_dsub>
 800b488:	4602      	mov	r2, r0
 800b48a:	460b      	mov	r3, r1
 800b48c:	4640      	mov	r0, r8
 800b48e:	4649      	mov	r1, r9
 800b490:	f7f5 fb44 	bl	8000b1c <__aeabi_dcmplt>
 800b494:	2800      	cmp	r0, #0
 800b496:	f43f af35 	beq.w	800b304 <_dtoa_r+0x464>
 800b49a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b49c:	1e6b      	subs	r3, r5, #1
 800b49e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b4a4:	2b30      	cmp	r3, #48	; 0x30
 800b4a6:	d0f8      	beq.n	800b49a <_dtoa_r+0x5fa>
 800b4a8:	9700      	str	r7, [sp, #0]
 800b4aa:	e049      	b.n	800b540 <_dtoa_r+0x6a0>
 800b4ac:	4b05      	ldr	r3, [pc, #20]	; (800b4c4 <_dtoa_r+0x624>)
 800b4ae:	f7f5 f8c3 	bl	8000638 <__aeabi_dmul>
 800b4b2:	4680      	mov	r8, r0
 800b4b4:	4689      	mov	r9, r1
 800b4b6:	e7bd      	b.n	800b434 <_dtoa_r+0x594>
 800b4b8:	0800d608 	.word	0x0800d608
 800b4bc:	0800d5e0 	.word	0x0800d5e0
 800b4c0:	3ff00000 	.word	0x3ff00000
 800b4c4:	40240000 	.word	0x40240000
 800b4c8:	401c0000 	.word	0x401c0000
 800b4cc:	40140000 	.word	0x40140000
 800b4d0:	3fe00000 	.word	0x3fe00000
 800b4d4:	9d01      	ldr	r5, [sp, #4]
 800b4d6:	4656      	mov	r6, sl
 800b4d8:	465f      	mov	r7, fp
 800b4da:	4642      	mov	r2, r8
 800b4dc:	464b      	mov	r3, r9
 800b4de:	4630      	mov	r0, r6
 800b4e0:	4639      	mov	r1, r7
 800b4e2:	f7f5 f9d3 	bl	800088c <__aeabi_ddiv>
 800b4e6:	f7f5 fb57 	bl	8000b98 <__aeabi_d2iz>
 800b4ea:	4682      	mov	sl, r0
 800b4ec:	f7f5 f83a 	bl	8000564 <__aeabi_i2d>
 800b4f0:	4642      	mov	r2, r8
 800b4f2:	464b      	mov	r3, r9
 800b4f4:	f7f5 f8a0 	bl	8000638 <__aeabi_dmul>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	4639      	mov	r1, r7
 800b500:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b504:	f7f4 fee0 	bl	80002c8 <__aeabi_dsub>
 800b508:	f805 6b01 	strb.w	r6, [r5], #1
 800b50c:	9e01      	ldr	r6, [sp, #4]
 800b50e:	9f03      	ldr	r7, [sp, #12]
 800b510:	1bae      	subs	r6, r5, r6
 800b512:	42b7      	cmp	r7, r6
 800b514:	4602      	mov	r2, r0
 800b516:	460b      	mov	r3, r1
 800b518:	d135      	bne.n	800b586 <_dtoa_r+0x6e6>
 800b51a:	f7f4 fed7 	bl	80002cc <__adddf3>
 800b51e:	4642      	mov	r2, r8
 800b520:	464b      	mov	r3, r9
 800b522:	4606      	mov	r6, r0
 800b524:	460f      	mov	r7, r1
 800b526:	f7f5 fb17 	bl	8000b58 <__aeabi_dcmpgt>
 800b52a:	b9d0      	cbnz	r0, 800b562 <_dtoa_r+0x6c2>
 800b52c:	4642      	mov	r2, r8
 800b52e:	464b      	mov	r3, r9
 800b530:	4630      	mov	r0, r6
 800b532:	4639      	mov	r1, r7
 800b534:	f7f5 fae8 	bl	8000b08 <__aeabi_dcmpeq>
 800b538:	b110      	cbz	r0, 800b540 <_dtoa_r+0x6a0>
 800b53a:	f01a 0f01 	tst.w	sl, #1
 800b53e:	d110      	bne.n	800b562 <_dtoa_r+0x6c2>
 800b540:	4620      	mov	r0, r4
 800b542:	ee18 1a10 	vmov	r1, s16
 800b546:	f000 fbdf 	bl	800bd08 <_Bfree>
 800b54a:	2300      	movs	r3, #0
 800b54c:	9800      	ldr	r0, [sp, #0]
 800b54e:	702b      	strb	r3, [r5, #0]
 800b550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b552:	3001      	adds	r0, #1
 800b554:	6018      	str	r0, [r3, #0]
 800b556:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b558:	2b00      	cmp	r3, #0
 800b55a:	f43f acf1 	beq.w	800af40 <_dtoa_r+0xa0>
 800b55e:	601d      	str	r5, [r3, #0]
 800b560:	e4ee      	b.n	800af40 <_dtoa_r+0xa0>
 800b562:	9f00      	ldr	r7, [sp, #0]
 800b564:	462b      	mov	r3, r5
 800b566:	461d      	mov	r5, r3
 800b568:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b56c:	2a39      	cmp	r2, #57	; 0x39
 800b56e:	d106      	bne.n	800b57e <_dtoa_r+0x6de>
 800b570:	9a01      	ldr	r2, [sp, #4]
 800b572:	429a      	cmp	r2, r3
 800b574:	d1f7      	bne.n	800b566 <_dtoa_r+0x6c6>
 800b576:	9901      	ldr	r1, [sp, #4]
 800b578:	2230      	movs	r2, #48	; 0x30
 800b57a:	3701      	adds	r7, #1
 800b57c:	700a      	strb	r2, [r1, #0]
 800b57e:	781a      	ldrb	r2, [r3, #0]
 800b580:	3201      	adds	r2, #1
 800b582:	701a      	strb	r2, [r3, #0]
 800b584:	e790      	b.n	800b4a8 <_dtoa_r+0x608>
 800b586:	4ba6      	ldr	r3, [pc, #664]	; (800b820 <_dtoa_r+0x980>)
 800b588:	2200      	movs	r2, #0
 800b58a:	f7f5 f855 	bl	8000638 <__aeabi_dmul>
 800b58e:	2200      	movs	r2, #0
 800b590:	2300      	movs	r3, #0
 800b592:	4606      	mov	r6, r0
 800b594:	460f      	mov	r7, r1
 800b596:	f7f5 fab7 	bl	8000b08 <__aeabi_dcmpeq>
 800b59a:	2800      	cmp	r0, #0
 800b59c:	d09d      	beq.n	800b4da <_dtoa_r+0x63a>
 800b59e:	e7cf      	b.n	800b540 <_dtoa_r+0x6a0>
 800b5a0:	9a08      	ldr	r2, [sp, #32]
 800b5a2:	2a00      	cmp	r2, #0
 800b5a4:	f000 80d7 	beq.w	800b756 <_dtoa_r+0x8b6>
 800b5a8:	9a06      	ldr	r2, [sp, #24]
 800b5aa:	2a01      	cmp	r2, #1
 800b5ac:	f300 80ba 	bgt.w	800b724 <_dtoa_r+0x884>
 800b5b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5b2:	2a00      	cmp	r2, #0
 800b5b4:	f000 80b2 	beq.w	800b71c <_dtoa_r+0x87c>
 800b5b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b5bc:	9e07      	ldr	r6, [sp, #28]
 800b5be:	9d04      	ldr	r5, [sp, #16]
 800b5c0:	9a04      	ldr	r2, [sp, #16]
 800b5c2:	441a      	add	r2, r3
 800b5c4:	9204      	str	r2, [sp, #16]
 800b5c6:	9a05      	ldr	r2, [sp, #20]
 800b5c8:	2101      	movs	r1, #1
 800b5ca:	441a      	add	r2, r3
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	9205      	str	r2, [sp, #20]
 800b5d0:	f000 fc52 	bl	800be78 <__i2b>
 800b5d4:	4607      	mov	r7, r0
 800b5d6:	2d00      	cmp	r5, #0
 800b5d8:	dd0c      	ble.n	800b5f4 <_dtoa_r+0x754>
 800b5da:	9b05      	ldr	r3, [sp, #20]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	dd09      	ble.n	800b5f4 <_dtoa_r+0x754>
 800b5e0:	42ab      	cmp	r3, r5
 800b5e2:	9a04      	ldr	r2, [sp, #16]
 800b5e4:	bfa8      	it	ge
 800b5e6:	462b      	movge	r3, r5
 800b5e8:	1ad2      	subs	r2, r2, r3
 800b5ea:	9204      	str	r2, [sp, #16]
 800b5ec:	9a05      	ldr	r2, [sp, #20]
 800b5ee:	1aed      	subs	r5, r5, r3
 800b5f0:	1ad3      	subs	r3, r2, r3
 800b5f2:	9305      	str	r3, [sp, #20]
 800b5f4:	9b07      	ldr	r3, [sp, #28]
 800b5f6:	b31b      	cbz	r3, 800b640 <_dtoa_r+0x7a0>
 800b5f8:	9b08      	ldr	r3, [sp, #32]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	f000 80af 	beq.w	800b75e <_dtoa_r+0x8be>
 800b600:	2e00      	cmp	r6, #0
 800b602:	dd13      	ble.n	800b62c <_dtoa_r+0x78c>
 800b604:	4639      	mov	r1, r7
 800b606:	4632      	mov	r2, r6
 800b608:	4620      	mov	r0, r4
 800b60a:	f000 fcf5 	bl	800bff8 <__pow5mult>
 800b60e:	ee18 2a10 	vmov	r2, s16
 800b612:	4601      	mov	r1, r0
 800b614:	4607      	mov	r7, r0
 800b616:	4620      	mov	r0, r4
 800b618:	f000 fc44 	bl	800bea4 <__multiply>
 800b61c:	ee18 1a10 	vmov	r1, s16
 800b620:	4680      	mov	r8, r0
 800b622:	4620      	mov	r0, r4
 800b624:	f000 fb70 	bl	800bd08 <_Bfree>
 800b628:	ee08 8a10 	vmov	s16, r8
 800b62c:	9b07      	ldr	r3, [sp, #28]
 800b62e:	1b9a      	subs	r2, r3, r6
 800b630:	d006      	beq.n	800b640 <_dtoa_r+0x7a0>
 800b632:	ee18 1a10 	vmov	r1, s16
 800b636:	4620      	mov	r0, r4
 800b638:	f000 fcde 	bl	800bff8 <__pow5mult>
 800b63c:	ee08 0a10 	vmov	s16, r0
 800b640:	2101      	movs	r1, #1
 800b642:	4620      	mov	r0, r4
 800b644:	f000 fc18 	bl	800be78 <__i2b>
 800b648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	4606      	mov	r6, r0
 800b64e:	f340 8088 	ble.w	800b762 <_dtoa_r+0x8c2>
 800b652:	461a      	mov	r2, r3
 800b654:	4601      	mov	r1, r0
 800b656:	4620      	mov	r0, r4
 800b658:	f000 fcce 	bl	800bff8 <__pow5mult>
 800b65c:	9b06      	ldr	r3, [sp, #24]
 800b65e:	2b01      	cmp	r3, #1
 800b660:	4606      	mov	r6, r0
 800b662:	f340 8081 	ble.w	800b768 <_dtoa_r+0x8c8>
 800b666:	f04f 0800 	mov.w	r8, #0
 800b66a:	6933      	ldr	r3, [r6, #16]
 800b66c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b670:	6918      	ldr	r0, [r3, #16]
 800b672:	f000 fbb1 	bl	800bdd8 <__hi0bits>
 800b676:	f1c0 0020 	rsb	r0, r0, #32
 800b67a:	9b05      	ldr	r3, [sp, #20]
 800b67c:	4418      	add	r0, r3
 800b67e:	f010 001f 	ands.w	r0, r0, #31
 800b682:	f000 8092 	beq.w	800b7aa <_dtoa_r+0x90a>
 800b686:	f1c0 0320 	rsb	r3, r0, #32
 800b68a:	2b04      	cmp	r3, #4
 800b68c:	f340 808a 	ble.w	800b7a4 <_dtoa_r+0x904>
 800b690:	f1c0 001c 	rsb	r0, r0, #28
 800b694:	9b04      	ldr	r3, [sp, #16]
 800b696:	4403      	add	r3, r0
 800b698:	9304      	str	r3, [sp, #16]
 800b69a:	9b05      	ldr	r3, [sp, #20]
 800b69c:	4403      	add	r3, r0
 800b69e:	4405      	add	r5, r0
 800b6a0:	9305      	str	r3, [sp, #20]
 800b6a2:	9b04      	ldr	r3, [sp, #16]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	dd07      	ble.n	800b6b8 <_dtoa_r+0x818>
 800b6a8:	ee18 1a10 	vmov	r1, s16
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f000 fcfc 	bl	800c0ac <__lshift>
 800b6b4:	ee08 0a10 	vmov	s16, r0
 800b6b8:	9b05      	ldr	r3, [sp, #20]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	dd05      	ble.n	800b6ca <_dtoa_r+0x82a>
 800b6be:	4631      	mov	r1, r6
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f000 fcf2 	bl	800c0ac <__lshift>
 800b6c8:	4606      	mov	r6, r0
 800b6ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d06e      	beq.n	800b7ae <_dtoa_r+0x90e>
 800b6d0:	ee18 0a10 	vmov	r0, s16
 800b6d4:	4631      	mov	r1, r6
 800b6d6:	f000 fd59 	bl	800c18c <__mcmp>
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	da67      	bge.n	800b7ae <_dtoa_r+0x90e>
 800b6de:	9b00      	ldr	r3, [sp, #0]
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	ee18 1a10 	vmov	r1, s16
 800b6e6:	9300      	str	r3, [sp, #0]
 800b6e8:	220a      	movs	r2, #10
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	f000 fb2d 	bl	800bd4c <__multadd>
 800b6f2:	9b08      	ldr	r3, [sp, #32]
 800b6f4:	ee08 0a10 	vmov	s16, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	f000 81b1 	beq.w	800ba60 <_dtoa_r+0xbc0>
 800b6fe:	2300      	movs	r3, #0
 800b700:	4639      	mov	r1, r7
 800b702:	220a      	movs	r2, #10
 800b704:	4620      	mov	r0, r4
 800b706:	f000 fb21 	bl	800bd4c <__multadd>
 800b70a:	9b02      	ldr	r3, [sp, #8]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	4607      	mov	r7, r0
 800b710:	f300 808e 	bgt.w	800b830 <_dtoa_r+0x990>
 800b714:	9b06      	ldr	r3, [sp, #24]
 800b716:	2b02      	cmp	r3, #2
 800b718:	dc51      	bgt.n	800b7be <_dtoa_r+0x91e>
 800b71a:	e089      	b.n	800b830 <_dtoa_r+0x990>
 800b71c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b71e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b722:	e74b      	b.n	800b5bc <_dtoa_r+0x71c>
 800b724:	9b03      	ldr	r3, [sp, #12]
 800b726:	1e5e      	subs	r6, r3, #1
 800b728:	9b07      	ldr	r3, [sp, #28]
 800b72a:	42b3      	cmp	r3, r6
 800b72c:	bfbf      	itttt	lt
 800b72e:	9b07      	ldrlt	r3, [sp, #28]
 800b730:	9607      	strlt	r6, [sp, #28]
 800b732:	1af2      	sublt	r2, r6, r3
 800b734:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b736:	bfb6      	itet	lt
 800b738:	189b      	addlt	r3, r3, r2
 800b73a:	1b9e      	subge	r6, r3, r6
 800b73c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b73e:	9b03      	ldr	r3, [sp, #12]
 800b740:	bfb8      	it	lt
 800b742:	2600      	movlt	r6, #0
 800b744:	2b00      	cmp	r3, #0
 800b746:	bfb7      	itett	lt
 800b748:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b74c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b750:	1a9d      	sublt	r5, r3, r2
 800b752:	2300      	movlt	r3, #0
 800b754:	e734      	b.n	800b5c0 <_dtoa_r+0x720>
 800b756:	9e07      	ldr	r6, [sp, #28]
 800b758:	9d04      	ldr	r5, [sp, #16]
 800b75a:	9f08      	ldr	r7, [sp, #32]
 800b75c:	e73b      	b.n	800b5d6 <_dtoa_r+0x736>
 800b75e:	9a07      	ldr	r2, [sp, #28]
 800b760:	e767      	b.n	800b632 <_dtoa_r+0x792>
 800b762:	9b06      	ldr	r3, [sp, #24]
 800b764:	2b01      	cmp	r3, #1
 800b766:	dc18      	bgt.n	800b79a <_dtoa_r+0x8fa>
 800b768:	f1ba 0f00 	cmp.w	sl, #0
 800b76c:	d115      	bne.n	800b79a <_dtoa_r+0x8fa>
 800b76e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b772:	b993      	cbnz	r3, 800b79a <_dtoa_r+0x8fa>
 800b774:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b778:	0d1b      	lsrs	r3, r3, #20
 800b77a:	051b      	lsls	r3, r3, #20
 800b77c:	b183      	cbz	r3, 800b7a0 <_dtoa_r+0x900>
 800b77e:	9b04      	ldr	r3, [sp, #16]
 800b780:	3301      	adds	r3, #1
 800b782:	9304      	str	r3, [sp, #16]
 800b784:	9b05      	ldr	r3, [sp, #20]
 800b786:	3301      	adds	r3, #1
 800b788:	9305      	str	r3, [sp, #20]
 800b78a:	f04f 0801 	mov.w	r8, #1
 800b78e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b790:	2b00      	cmp	r3, #0
 800b792:	f47f af6a 	bne.w	800b66a <_dtoa_r+0x7ca>
 800b796:	2001      	movs	r0, #1
 800b798:	e76f      	b.n	800b67a <_dtoa_r+0x7da>
 800b79a:	f04f 0800 	mov.w	r8, #0
 800b79e:	e7f6      	b.n	800b78e <_dtoa_r+0x8ee>
 800b7a0:	4698      	mov	r8, r3
 800b7a2:	e7f4      	b.n	800b78e <_dtoa_r+0x8ee>
 800b7a4:	f43f af7d 	beq.w	800b6a2 <_dtoa_r+0x802>
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	301c      	adds	r0, #28
 800b7ac:	e772      	b.n	800b694 <_dtoa_r+0x7f4>
 800b7ae:	9b03      	ldr	r3, [sp, #12]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	dc37      	bgt.n	800b824 <_dtoa_r+0x984>
 800b7b4:	9b06      	ldr	r3, [sp, #24]
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	dd34      	ble.n	800b824 <_dtoa_r+0x984>
 800b7ba:	9b03      	ldr	r3, [sp, #12]
 800b7bc:	9302      	str	r3, [sp, #8]
 800b7be:	9b02      	ldr	r3, [sp, #8]
 800b7c0:	b96b      	cbnz	r3, 800b7de <_dtoa_r+0x93e>
 800b7c2:	4631      	mov	r1, r6
 800b7c4:	2205      	movs	r2, #5
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f000 fac0 	bl	800bd4c <__multadd>
 800b7cc:	4601      	mov	r1, r0
 800b7ce:	4606      	mov	r6, r0
 800b7d0:	ee18 0a10 	vmov	r0, s16
 800b7d4:	f000 fcda 	bl	800c18c <__mcmp>
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	f73f adbb 	bgt.w	800b354 <_dtoa_r+0x4b4>
 800b7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7e0:	9d01      	ldr	r5, [sp, #4]
 800b7e2:	43db      	mvns	r3, r3
 800b7e4:	9300      	str	r3, [sp, #0]
 800b7e6:	f04f 0800 	mov.w	r8, #0
 800b7ea:	4631      	mov	r1, r6
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f000 fa8b 	bl	800bd08 <_Bfree>
 800b7f2:	2f00      	cmp	r7, #0
 800b7f4:	f43f aea4 	beq.w	800b540 <_dtoa_r+0x6a0>
 800b7f8:	f1b8 0f00 	cmp.w	r8, #0
 800b7fc:	d005      	beq.n	800b80a <_dtoa_r+0x96a>
 800b7fe:	45b8      	cmp	r8, r7
 800b800:	d003      	beq.n	800b80a <_dtoa_r+0x96a>
 800b802:	4641      	mov	r1, r8
 800b804:	4620      	mov	r0, r4
 800b806:	f000 fa7f 	bl	800bd08 <_Bfree>
 800b80a:	4639      	mov	r1, r7
 800b80c:	4620      	mov	r0, r4
 800b80e:	f000 fa7b 	bl	800bd08 <_Bfree>
 800b812:	e695      	b.n	800b540 <_dtoa_r+0x6a0>
 800b814:	2600      	movs	r6, #0
 800b816:	4637      	mov	r7, r6
 800b818:	e7e1      	b.n	800b7de <_dtoa_r+0x93e>
 800b81a:	9700      	str	r7, [sp, #0]
 800b81c:	4637      	mov	r7, r6
 800b81e:	e599      	b.n	800b354 <_dtoa_r+0x4b4>
 800b820:	40240000 	.word	0x40240000
 800b824:	9b08      	ldr	r3, [sp, #32]
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 80ca 	beq.w	800b9c0 <_dtoa_r+0xb20>
 800b82c:	9b03      	ldr	r3, [sp, #12]
 800b82e:	9302      	str	r3, [sp, #8]
 800b830:	2d00      	cmp	r5, #0
 800b832:	dd05      	ble.n	800b840 <_dtoa_r+0x9a0>
 800b834:	4639      	mov	r1, r7
 800b836:	462a      	mov	r2, r5
 800b838:	4620      	mov	r0, r4
 800b83a:	f000 fc37 	bl	800c0ac <__lshift>
 800b83e:	4607      	mov	r7, r0
 800b840:	f1b8 0f00 	cmp.w	r8, #0
 800b844:	d05b      	beq.n	800b8fe <_dtoa_r+0xa5e>
 800b846:	6879      	ldr	r1, [r7, #4]
 800b848:	4620      	mov	r0, r4
 800b84a:	f000 fa1d 	bl	800bc88 <_Balloc>
 800b84e:	4605      	mov	r5, r0
 800b850:	b928      	cbnz	r0, 800b85e <_dtoa_r+0x9be>
 800b852:	4b87      	ldr	r3, [pc, #540]	; (800ba70 <_dtoa_r+0xbd0>)
 800b854:	4602      	mov	r2, r0
 800b856:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b85a:	f7ff bb3b 	b.w	800aed4 <_dtoa_r+0x34>
 800b85e:	693a      	ldr	r2, [r7, #16]
 800b860:	3202      	adds	r2, #2
 800b862:	0092      	lsls	r2, r2, #2
 800b864:	f107 010c 	add.w	r1, r7, #12
 800b868:	300c      	adds	r0, #12
 800b86a:	f7fe fdcf 	bl	800a40c <memcpy>
 800b86e:	2201      	movs	r2, #1
 800b870:	4629      	mov	r1, r5
 800b872:	4620      	mov	r0, r4
 800b874:	f000 fc1a 	bl	800c0ac <__lshift>
 800b878:	9b01      	ldr	r3, [sp, #4]
 800b87a:	f103 0901 	add.w	r9, r3, #1
 800b87e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b882:	4413      	add	r3, r2
 800b884:	9305      	str	r3, [sp, #20]
 800b886:	f00a 0301 	and.w	r3, sl, #1
 800b88a:	46b8      	mov	r8, r7
 800b88c:	9304      	str	r3, [sp, #16]
 800b88e:	4607      	mov	r7, r0
 800b890:	4631      	mov	r1, r6
 800b892:	ee18 0a10 	vmov	r0, s16
 800b896:	f7ff fa75 	bl	800ad84 <quorem>
 800b89a:	4641      	mov	r1, r8
 800b89c:	9002      	str	r0, [sp, #8]
 800b89e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b8a2:	ee18 0a10 	vmov	r0, s16
 800b8a6:	f000 fc71 	bl	800c18c <__mcmp>
 800b8aa:	463a      	mov	r2, r7
 800b8ac:	9003      	str	r0, [sp, #12]
 800b8ae:	4631      	mov	r1, r6
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	f000 fc87 	bl	800c1c4 <__mdiff>
 800b8b6:	68c2      	ldr	r2, [r0, #12]
 800b8b8:	f109 3bff 	add.w	fp, r9, #4294967295
 800b8bc:	4605      	mov	r5, r0
 800b8be:	bb02      	cbnz	r2, 800b902 <_dtoa_r+0xa62>
 800b8c0:	4601      	mov	r1, r0
 800b8c2:	ee18 0a10 	vmov	r0, s16
 800b8c6:	f000 fc61 	bl	800c18c <__mcmp>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	4629      	mov	r1, r5
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	9207      	str	r2, [sp, #28]
 800b8d2:	f000 fa19 	bl	800bd08 <_Bfree>
 800b8d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b8da:	ea43 0102 	orr.w	r1, r3, r2
 800b8de:	9b04      	ldr	r3, [sp, #16]
 800b8e0:	430b      	orrs	r3, r1
 800b8e2:	464d      	mov	r5, r9
 800b8e4:	d10f      	bne.n	800b906 <_dtoa_r+0xa66>
 800b8e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b8ea:	d02a      	beq.n	800b942 <_dtoa_r+0xaa2>
 800b8ec:	9b03      	ldr	r3, [sp, #12]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	dd02      	ble.n	800b8f8 <_dtoa_r+0xa58>
 800b8f2:	9b02      	ldr	r3, [sp, #8]
 800b8f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b8f8:	f88b a000 	strb.w	sl, [fp]
 800b8fc:	e775      	b.n	800b7ea <_dtoa_r+0x94a>
 800b8fe:	4638      	mov	r0, r7
 800b900:	e7ba      	b.n	800b878 <_dtoa_r+0x9d8>
 800b902:	2201      	movs	r2, #1
 800b904:	e7e2      	b.n	800b8cc <_dtoa_r+0xa2c>
 800b906:	9b03      	ldr	r3, [sp, #12]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	db04      	blt.n	800b916 <_dtoa_r+0xa76>
 800b90c:	9906      	ldr	r1, [sp, #24]
 800b90e:	430b      	orrs	r3, r1
 800b910:	9904      	ldr	r1, [sp, #16]
 800b912:	430b      	orrs	r3, r1
 800b914:	d122      	bne.n	800b95c <_dtoa_r+0xabc>
 800b916:	2a00      	cmp	r2, #0
 800b918:	ddee      	ble.n	800b8f8 <_dtoa_r+0xa58>
 800b91a:	ee18 1a10 	vmov	r1, s16
 800b91e:	2201      	movs	r2, #1
 800b920:	4620      	mov	r0, r4
 800b922:	f000 fbc3 	bl	800c0ac <__lshift>
 800b926:	4631      	mov	r1, r6
 800b928:	ee08 0a10 	vmov	s16, r0
 800b92c:	f000 fc2e 	bl	800c18c <__mcmp>
 800b930:	2800      	cmp	r0, #0
 800b932:	dc03      	bgt.n	800b93c <_dtoa_r+0xa9c>
 800b934:	d1e0      	bne.n	800b8f8 <_dtoa_r+0xa58>
 800b936:	f01a 0f01 	tst.w	sl, #1
 800b93a:	d0dd      	beq.n	800b8f8 <_dtoa_r+0xa58>
 800b93c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b940:	d1d7      	bne.n	800b8f2 <_dtoa_r+0xa52>
 800b942:	2339      	movs	r3, #57	; 0x39
 800b944:	f88b 3000 	strb.w	r3, [fp]
 800b948:	462b      	mov	r3, r5
 800b94a:	461d      	mov	r5, r3
 800b94c:	3b01      	subs	r3, #1
 800b94e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b952:	2a39      	cmp	r2, #57	; 0x39
 800b954:	d071      	beq.n	800ba3a <_dtoa_r+0xb9a>
 800b956:	3201      	adds	r2, #1
 800b958:	701a      	strb	r2, [r3, #0]
 800b95a:	e746      	b.n	800b7ea <_dtoa_r+0x94a>
 800b95c:	2a00      	cmp	r2, #0
 800b95e:	dd07      	ble.n	800b970 <_dtoa_r+0xad0>
 800b960:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b964:	d0ed      	beq.n	800b942 <_dtoa_r+0xaa2>
 800b966:	f10a 0301 	add.w	r3, sl, #1
 800b96a:	f88b 3000 	strb.w	r3, [fp]
 800b96e:	e73c      	b.n	800b7ea <_dtoa_r+0x94a>
 800b970:	9b05      	ldr	r3, [sp, #20]
 800b972:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b976:	4599      	cmp	r9, r3
 800b978:	d047      	beq.n	800ba0a <_dtoa_r+0xb6a>
 800b97a:	ee18 1a10 	vmov	r1, s16
 800b97e:	2300      	movs	r3, #0
 800b980:	220a      	movs	r2, #10
 800b982:	4620      	mov	r0, r4
 800b984:	f000 f9e2 	bl	800bd4c <__multadd>
 800b988:	45b8      	cmp	r8, r7
 800b98a:	ee08 0a10 	vmov	s16, r0
 800b98e:	f04f 0300 	mov.w	r3, #0
 800b992:	f04f 020a 	mov.w	r2, #10
 800b996:	4641      	mov	r1, r8
 800b998:	4620      	mov	r0, r4
 800b99a:	d106      	bne.n	800b9aa <_dtoa_r+0xb0a>
 800b99c:	f000 f9d6 	bl	800bd4c <__multadd>
 800b9a0:	4680      	mov	r8, r0
 800b9a2:	4607      	mov	r7, r0
 800b9a4:	f109 0901 	add.w	r9, r9, #1
 800b9a8:	e772      	b.n	800b890 <_dtoa_r+0x9f0>
 800b9aa:	f000 f9cf 	bl	800bd4c <__multadd>
 800b9ae:	4639      	mov	r1, r7
 800b9b0:	4680      	mov	r8, r0
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	220a      	movs	r2, #10
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	f000 f9c8 	bl	800bd4c <__multadd>
 800b9bc:	4607      	mov	r7, r0
 800b9be:	e7f1      	b.n	800b9a4 <_dtoa_r+0xb04>
 800b9c0:	9b03      	ldr	r3, [sp, #12]
 800b9c2:	9302      	str	r3, [sp, #8]
 800b9c4:	9d01      	ldr	r5, [sp, #4]
 800b9c6:	ee18 0a10 	vmov	r0, s16
 800b9ca:	4631      	mov	r1, r6
 800b9cc:	f7ff f9da 	bl	800ad84 <quorem>
 800b9d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b9d4:	9b01      	ldr	r3, [sp, #4]
 800b9d6:	f805 ab01 	strb.w	sl, [r5], #1
 800b9da:	1aea      	subs	r2, r5, r3
 800b9dc:	9b02      	ldr	r3, [sp, #8]
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	dd09      	ble.n	800b9f6 <_dtoa_r+0xb56>
 800b9e2:	ee18 1a10 	vmov	r1, s16
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	220a      	movs	r2, #10
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f000 f9ae 	bl	800bd4c <__multadd>
 800b9f0:	ee08 0a10 	vmov	s16, r0
 800b9f4:	e7e7      	b.n	800b9c6 <_dtoa_r+0xb26>
 800b9f6:	9b02      	ldr	r3, [sp, #8]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	bfc8      	it	gt
 800b9fc:	461d      	movgt	r5, r3
 800b9fe:	9b01      	ldr	r3, [sp, #4]
 800ba00:	bfd8      	it	le
 800ba02:	2501      	movle	r5, #1
 800ba04:	441d      	add	r5, r3
 800ba06:	f04f 0800 	mov.w	r8, #0
 800ba0a:	ee18 1a10 	vmov	r1, s16
 800ba0e:	2201      	movs	r2, #1
 800ba10:	4620      	mov	r0, r4
 800ba12:	f000 fb4b 	bl	800c0ac <__lshift>
 800ba16:	4631      	mov	r1, r6
 800ba18:	ee08 0a10 	vmov	s16, r0
 800ba1c:	f000 fbb6 	bl	800c18c <__mcmp>
 800ba20:	2800      	cmp	r0, #0
 800ba22:	dc91      	bgt.n	800b948 <_dtoa_r+0xaa8>
 800ba24:	d102      	bne.n	800ba2c <_dtoa_r+0xb8c>
 800ba26:	f01a 0f01 	tst.w	sl, #1
 800ba2a:	d18d      	bne.n	800b948 <_dtoa_r+0xaa8>
 800ba2c:	462b      	mov	r3, r5
 800ba2e:	461d      	mov	r5, r3
 800ba30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba34:	2a30      	cmp	r2, #48	; 0x30
 800ba36:	d0fa      	beq.n	800ba2e <_dtoa_r+0xb8e>
 800ba38:	e6d7      	b.n	800b7ea <_dtoa_r+0x94a>
 800ba3a:	9a01      	ldr	r2, [sp, #4]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d184      	bne.n	800b94a <_dtoa_r+0xaaa>
 800ba40:	9b00      	ldr	r3, [sp, #0]
 800ba42:	3301      	adds	r3, #1
 800ba44:	9300      	str	r3, [sp, #0]
 800ba46:	2331      	movs	r3, #49	; 0x31
 800ba48:	7013      	strb	r3, [r2, #0]
 800ba4a:	e6ce      	b.n	800b7ea <_dtoa_r+0x94a>
 800ba4c:	4b09      	ldr	r3, [pc, #36]	; (800ba74 <_dtoa_r+0xbd4>)
 800ba4e:	f7ff ba95 	b.w	800af7c <_dtoa_r+0xdc>
 800ba52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f47f aa6e 	bne.w	800af36 <_dtoa_r+0x96>
 800ba5a:	4b07      	ldr	r3, [pc, #28]	; (800ba78 <_dtoa_r+0xbd8>)
 800ba5c:	f7ff ba8e 	b.w	800af7c <_dtoa_r+0xdc>
 800ba60:	9b02      	ldr	r3, [sp, #8]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	dcae      	bgt.n	800b9c4 <_dtoa_r+0xb24>
 800ba66:	9b06      	ldr	r3, [sp, #24]
 800ba68:	2b02      	cmp	r3, #2
 800ba6a:	f73f aea8 	bgt.w	800b7be <_dtoa_r+0x91e>
 800ba6e:	e7a9      	b.n	800b9c4 <_dtoa_r+0xb24>
 800ba70:	0800d513 	.word	0x0800d513
 800ba74:	0800d470 	.word	0x0800d470
 800ba78:	0800d494 	.word	0x0800d494

0800ba7c <std>:
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	b510      	push	{r4, lr}
 800ba80:	4604      	mov	r4, r0
 800ba82:	e9c0 3300 	strd	r3, r3, [r0]
 800ba86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba8a:	6083      	str	r3, [r0, #8]
 800ba8c:	8181      	strh	r1, [r0, #12]
 800ba8e:	6643      	str	r3, [r0, #100]	; 0x64
 800ba90:	81c2      	strh	r2, [r0, #14]
 800ba92:	6183      	str	r3, [r0, #24]
 800ba94:	4619      	mov	r1, r3
 800ba96:	2208      	movs	r2, #8
 800ba98:	305c      	adds	r0, #92	; 0x5c
 800ba9a:	f7fe fcdf 	bl	800a45c <memset>
 800ba9e:	4b05      	ldr	r3, [pc, #20]	; (800bab4 <std+0x38>)
 800baa0:	6263      	str	r3, [r4, #36]	; 0x24
 800baa2:	4b05      	ldr	r3, [pc, #20]	; (800bab8 <std+0x3c>)
 800baa4:	62a3      	str	r3, [r4, #40]	; 0x28
 800baa6:	4b05      	ldr	r3, [pc, #20]	; (800babc <std+0x40>)
 800baa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800baaa:	4b05      	ldr	r3, [pc, #20]	; (800bac0 <std+0x44>)
 800baac:	6224      	str	r4, [r4, #32]
 800baae:	6323      	str	r3, [r4, #48]	; 0x30
 800bab0:	bd10      	pop	{r4, pc}
 800bab2:	bf00      	nop
 800bab4:	0800c851 	.word	0x0800c851
 800bab8:	0800c873 	.word	0x0800c873
 800babc:	0800c8ab 	.word	0x0800c8ab
 800bac0:	0800c8cf 	.word	0x0800c8cf

0800bac4 <_cleanup_r>:
 800bac4:	4901      	ldr	r1, [pc, #4]	; (800bacc <_cleanup_r+0x8>)
 800bac6:	f000 b8af 	b.w	800bc28 <_fwalk_reent>
 800baca:	bf00      	nop
 800bacc:	0800cbe5 	.word	0x0800cbe5

0800bad0 <__sfmoreglue>:
 800bad0:	b570      	push	{r4, r5, r6, lr}
 800bad2:	2268      	movs	r2, #104	; 0x68
 800bad4:	1e4d      	subs	r5, r1, #1
 800bad6:	4355      	muls	r5, r2
 800bad8:	460e      	mov	r6, r1
 800bada:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bade:	f000 fcd9 	bl	800c494 <_malloc_r>
 800bae2:	4604      	mov	r4, r0
 800bae4:	b140      	cbz	r0, 800baf8 <__sfmoreglue+0x28>
 800bae6:	2100      	movs	r1, #0
 800bae8:	e9c0 1600 	strd	r1, r6, [r0]
 800baec:	300c      	adds	r0, #12
 800baee:	60a0      	str	r0, [r4, #8]
 800baf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800baf4:	f7fe fcb2 	bl	800a45c <memset>
 800baf8:	4620      	mov	r0, r4
 800bafa:	bd70      	pop	{r4, r5, r6, pc}

0800bafc <__sfp_lock_acquire>:
 800bafc:	4801      	ldr	r0, [pc, #4]	; (800bb04 <__sfp_lock_acquire+0x8>)
 800bafe:	f000 b8b8 	b.w	800bc72 <__retarget_lock_acquire_recursive>
 800bb02:	bf00      	nop
 800bb04:	20004e39 	.word	0x20004e39

0800bb08 <__sfp_lock_release>:
 800bb08:	4801      	ldr	r0, [pc, #4]	; (800bb10 <__sfp_lock_release+0x8>)
 800bb0a:	f000 b8b3 	b.w	800bc74 <__retarget_lock_release_recursive>
 800bb0e:	bf00      	nop
 800bb10:	20004e39 	.word	0x20004e39

0800bb14 <__sinit_lock_acquire>:
 800bb14:	4801      	ldr	r0, [pc, #4]	; (800bb1c <__sinit_lock_acquire+0x8>)
 800bb16:	f000 b8ac 	b.w	800bc72 <__retarget_lock_acquire_recursive>
 800bb1a:	bf00      	nop
 800bb1c:	20004e3a 	.word	0x20004e3a

0800bb20 <__sinit_lock_release>:
 800bb20:	4801      	ldr	r0, [pc, #4]	; (800bb28 <__sinit_lock_release+0x8>)
 800bb22:	f000 b8a7 	b.w	800bc74 <__retarget_lock_release_recursive>
 800bb26:	bf00      	nop
 800bb28:	20004e3a 	.word	0x20004e3a

0800bb2c <__sinit>:
 800bb2c:	b510      	push	{r4, lr}
 800bb2e:	4604      	mov	r4, r0
 800bb30:	f7ff fff0 	bl	800bb14 <__sinit_lock_acquire>
 800bb34:	69a3      	ldr	r3, [r4, #24]
 800bb36:	b11b      	cbz	r3, 800bb40 <__sinit+0x14>
 800bb38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb3c:	f7ff bff0 	b.w	800bb20 <__sinit_lock_release>
 800bb40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bb44:	6523      	str	r3, [r4, #80]	; 0x50
 800bb46:	4b13      	ldr	r3, [pc, #76]	; (800bb94 <__sinit+0x68>)
 800bb48:	4a13      	ldr	r2, [pc, #76]	; (800bb98 <__sinit+0x6c>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	62a2      	str	r2, [r4, #40]	; 0x28
 800bb4e:	42a3      	cmp	r3, r4
 800bb50:	bf04      	itt	eq
 800bb52:	2301      	moveq	r3, #1
 800bb54:	61a3      	streq	r3, [r4, #24]
 800bb56:	4620      	mov	r0, r4
 800bb58:	f000 f820 	bl	800bb9c <__sfp>
 800bb5c:	6060      	str	r0, [r4, #4]
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f000 f81c 	bl	800bb9c <__sfp>
 800bb64:	60a0      	str	r0, [r4, #8]
 800bb66:	4620      	mov	r0, r4
 800bb68:	f000 f818 	bl	800bb9c <__sfp>
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	60e0      	str	r0, [r4, #12]
 800bb70:	2104      	movs	r1, #4
 800bb72:	6860      	ldr	r0, [r4, #4]
 800bb74:	f7ff ff82 	bl	800ba7c <std>
 800bb78:	68a0      	ldr	r0, [r4, #8]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	2109      	movs	r1, #9
 800bb7e:	f7ff ff7d 	bl	800ba7c <std>
 800bb82:	68e0      	ldr	r0, [r4, #12]
 800bb84:	2202      	movs	r2, #2
 800bb86:	2112      	movs	r1, #18
 800bb88:	f7ff ff78 	bl	800ba7c <std>
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	61a3      	str	r3, [r4, #24]
 800bb90:	e7d2      	b.n	800bb38 <__sinit+0xc>
 800bb92:	bf00      	nop
 800bb94:	0800d45c 	.word	0x0800d45c
 800bb98:	0800bac5 	.word	0x0800bac5

0800bb9c <__sfp>:
 800bb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb9e:	4607      	mov	r7, r0
 800bba0:	f7ff ffac 	bl	800bafc <__sfp_lock_acquire>
 800bba4:	4b1e      	ldr	r3, [pc, #120]	; (800bc20 <__sfp+0x84>)
 800bba6:	681e      	ldr	r6, [r3, #0]
 800bba8:	69b3      	ldr	r3, [r6, #24]
 800bbaa:	b913      	cbnz	r3, 800bbb2 <__sfp+0x16>
 800bbac:	4630      	mov	r0, r6
 800bbae:	f7ff ffbd 	bl	800bb2c <__sinit>
 800bbb2:	3648      	adds	r6, #72	; 0x48
 800bbb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bbb8:	3b01      	subs	r3, #1
 800bbba:	d503      	bpl.n	800bbc4 <__sfp+0x28>
 800bbbc:	6833      	ldr	r3, [r6, #0]
 800bbbe:	b30b      	cbz	r3, 800bc04 <__sfp+0x68>
 800bbc0:	6836      	ldr	r6, [r6, #0]
 800bbc2:	e7f7      	b.n	800bbb4 <__sfp+0x18>
 800bbc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bbc8:	b9d5      	cbnz	r5, 800bc00 <__sfp+0x64>
 800bbca:	4b16      	ldr	r3, [pc, #88]	; (800bc24 <__sfp+0x88>)
 800bbcc:	60e3      	str	r3, [r4, #12]
 800bbce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bbd2:	6665      	str	r5, [r4, #100]	; 0x64
 800bbd4:	f000 f84c 	bl	800bc70 <__retarget_lock_init_recursive>
 800bbd8:	f7ff ff96 	bl	800bb08 <__sfp_lock_release>
 800bbdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bbe0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bbe4:	6025      	str	r5, [r4, #0]
 800bbe6:	61a5      	str	r5, [r4, #24]
 800bbe8:	2208      	movs	r2, #8
 800bbea:	4629      	mov	r1, r5
 800bbec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bbf0:	f7fe fc34 	bl	800a45c <memset>
 800bbf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bbf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc00:	3468      	adds	r4, #104	; 0x68
 800bc02:	e7d9      	b.n	800bbb8 <__sfp+0x1c>
 800bc04:	2104      	movs	r1, #4
 800bc06:	4638      	mov	r0, r7
 800bc08:	f7ff ff62 	bl	800bad0 <__sfmoreglue>
 800bc0c:	4604      	mov	r4, r0
 800bc0e:	6030      	str	r0, [r6, #0]
 800bc10:	2800      	cmp	r0, #0
 800bc12:	d1d5      	bne.n	800bbc0 <__sfp+0x24>
 800bc14:	f7ff ff78 	bl	800bb08 <__sfp_lock_release>
 800bc18:	230c      	movs	r3, #12
 800bc1a:	603b      	str	r3, [r7, #0]
 800bc1c:	e7ee      	b.n	800bbfc <__sfp+0x60>
 800bc1e:	bf00      	nop
 800bc20:	0800d45c 	.word	0x0800d45c
 800bc24:	ffff0001 	.word	0xffff0001

0800bc28 <_fwalk_reent>:
 800bc28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc2c:	4606      	mov	r6, r0
 800bc2e:	4688      	mov	r8, r1
 800bc30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc34:	2700      	movs	r7, #0
 800bc36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc3a:	f1b9 0901 	subs.w	r9, r9, #1
 800bc3e:	d505      	bpl.n	800bc4c <_fwalk_reent+0x24>
 800bc40:	6824      	ldr	r4, [r4, #0]
 800bc42:	2c00      	cmp	r4, #0
 800bc44:	d1f7      	bne.n	800bc36 <_fwalk_reent+0xe>
 800bc46:	4638      	mov	r0, r7
 800bc48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc4c:	89ab      	ldrh	r3, [r5, #12]
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d907      	bls.n	800bc62 <_fwalk_reent+0x3a>
 800bc52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc56:	3301      	adds	r3, #1
 800bc58:	d003      	beq.n	800bc62 <_fwalk_reent+0x3a>
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	47c0      	blx	r8
 800bc60:	4307      	orrs	r7, r0
 800bc62:	3568      	adds	r5, #104	; 0x68
 800bc64:	e7e9      	b.n	800bc3a <_fwalk_reent+0x12>
	...

0800bc68 <_localeconv_r>:
 800bc68:	4800      	ldr	r0, [pc, #0]	; (800bc6c <_localeconv_r+0x4>)
 800bc6a:	4770      	bx	lr
 800bc6c:	20000194 	.word	0x20000194

0800bc70 <__retarget_lock_init_recursive>:
 800bc70:	4770      	bx	lr

0800bc72 <__retarget_lock_acquire_recursive>:
 800bc72:	4770      	bx	lr

0800bc74 <__retarget_lock_release_recursive>:
 800bc74:	4770      	bx	lr
	...

0800bc78 <malloc>:
 800bc78:	4b02      	ldr	r3, [pc, #8]	; (800bc84 <malloc+0xc>)
 800bc7a:	4601      	mov	r1, r0
 800bc7c:	6818      	ldr	r0, [r3, #0]
 800bc7e:	f000 bc09 	b.w	800c494 <_malloc_r>
 800bc82:	bf00      	nop
 800bc84:	20000040 	.word	0x20000040

0800bc88 <_Balloc>:
 800bc88:	b570      	push	{r4, r5, r6, lr}
 800bc8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	460d      	mov	r5, r1
 800bc90:	b976      	cbnz	r6, 800bcb0 <_Balloc+0x28>
 800bc92:	2010      	movs	r0, #16
 800bc94:	f7ff fff0 	bl	800bc78 <malloc>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	6260      	str	r0, [r4, #36]	; 0x24
 800bc9c:	b920      	cbnz	r0, 800bca8 <_Balloc+0x20>
 800bc9e:	4b18      	ldr	r3, [pc, #96]	; (800bd00 <_Balloc+0x78>)
 800bca0:	4818      	ldr	r0, [pc, #96]	; (800bd04 <_Balloc+0x7c>)
 800bca2:	2166      	movs	r1, #102	; 0x66
 800bca4:	f000 feea 	bl	800ca7c <__assert_func>
 800bca8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bcac:	6006      	str	r6, [r0, #0]
 800bcae:	60c6      	str	r6, [r0, #12]
 800bcb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bcb2:	68f3      	ldr	r3, [r6, #12]
 800bcb4:	b183      	cbz	r3, 800bcd8 <_Balloc+0x50>
 800bcb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcb8:	68db      	ldr	r3, [r3, #12]
 800bcba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bcbe:	b9b8      	cbnz	r0, 800bcf0 <_Balloc+0x68>
 800bcc0:	2101      	movs	r1, #1
 800bcc2:	fa01 f605 	lsl.w	r6, r1, r5
 800bcc6:	1d72      	adds	r2, r6, #5
 800bcc8:	0092      	lsls	r2, r2, #2
 800bcca:	4620      	mov	r0, r4
 800bccc:	f000 fb60 	bl	800c390 <_calloc_r>
 800bcd0:	b160      	cbz	r0, 800bcec <_Balloc+0x64>
 800bcd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bcd6:	e00e      	b.n	800bcf6 <_Balloc+0x6e>
 800bcd8:	2221      	movs	r2, #33	; 0x21
 800bcda:	2104      	movs	r1, #4
 800bcdc:	4620      	mov	r0, r4
 800bcde:	f000 fb57 	bl	800c390 <_calloc_r>
 800bce2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bce4:	60f0      	str	r0, [r6, #12]
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d1e4      	bne.n	800bcb6 <_Balloc+0x2e>
 800bcec:	2000      	movs	r0, #0
 800bcee:	bd70      	pop	{r4, r5, r6, pc}
 800bcf0:	6802      	ldr	r2, [r0, #0]
 800bcf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bcfc:	e7f7      	b.n	800bcee <_Balloc+0x66>
 800bcfe:	bf00      	nop
 800bd00:	0800d4a1 	.word	0x0800d4a1
 800bd04:	0800d584 	.word	0x0800d584

0800bd08 <_Bfree>:
 800bd08:	b570      	push	{r4, r5, r6, lr}
 800bd0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd0c:	4605      	mov	r5, r0
 800bd0e:	460c      	mov	r4, r1
 800bd10:	b976      	cbnz	r6, 800bd30 <_Bfree+0x28>
 800bd12:	2010      	movs	r0, #16
 800bd14:	f7ff ffb0 	bl	800bc78 <malloc>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	6268      	str	r0, [r5, #36]	; 0x24
 800bd1c:	b920      	cbnz	r0, 800bd28 <_Bfree+0x20>
 800bd1e:	4b09      	ldr	r3, [pc, #36]	; (800bd44 <_Bfree+0x3c>)
 800bd20:	4809      	ldr	r0, [pc, #36]	; (800bd48 <_Bfree+0x40>)
 800bd22:	218a      	movs	r1, #138	; 0x8a
 800bd24:	f000 feaa 	bl	800ca7c <__assert_func>
 800bd28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd2c:	6006      	str	r6, [r0, #0]
 800bd2e:	60c6      	str	r6, [r0, #12]
 800bd30:	b13c      	cbz	r4, 800bd42 <_Bfree+0x3a>
 800bd32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bd34:	6862      	ldr	r2, [r4, #4]
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd3c:	6021      	str	r1, [r4, #0]
 800bd3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd42:	bd70      	pop	{r4, r5, r6, pc}
 800bd44:	0800d4a1 	.word	0x0800d4a1
 800bd48:	0800d584 	.word	0x0800d584

0800bd4c <__multadd>:
 800bd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd50:	690d      	ldr	r5, [r1, #16]
 800bd52:	4607      	mov	r7, r0
 800bd54:	460c      	mov	r4, r1
 800bd56:	461e      	mov	r6, r3
 800bd58:	f101 0c14 	add.w	ip, r1, #20
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	f8dc 3000 	ldr.w	r3, [ip]
 800bd62:	b299      	uxth	r1, r3
 800bd64:	fb02 6101 	mla	r1, r2, r1, r6
 800bd68:	0c1e      	lsrs	r6, r3, #16
 800bd6a:	0c0b      	lsrs	r3, r1, #16
 800bd6c:	fb02 3306 	mla	r3, r2, r6, r3
 800bd70:	b289      	uxth	r1, r1
 800bd72:	3001      	adds	r0, #1
 800bd74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd78:	4285      	cmp	r5, r0
 800bd7a:	f84c 1b04 	str.w	r1, [ip], #4
 800bd7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd82:	dcec      	bgt.n	800bd5e <__multadd+0x12>
 800bd84:	b30e      	cbz	r6, 800bdca <__multadd+0x7e>
 800bd86:	68a3      	ldr	r3, [r4, #8]
 800bd88:	42ab      	cmp	r3, r5
 800bd8a:	dc19      	bgt.n	800bdc0 <__multadd+0x74>
 800bd8c:	6861      	ldr	r1, [r4, #4]
 800bd8e:	4638      	mov	r0, r7
 800bd90:	3101      	adds	r1, #1
 800bd92:	f7ff ff79 	bl	800bc88 <_Balloc>
 800bd96:	4680      	mov	r8, r0
 800bd98:	b928      	cbnz	r0, 800bda6 <__multadd+0x5a>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	4b0c      	ldr	r3, [pc, #48]	; (800bdd0 <__multadd+0x84>)
 800bd9e:	480d      	ldr	r0, [pc, #52]	; (800bdd4 <__multadd+0x88>)
 800bda0:	21b5      	movs	r1, #181	; 0xb5
 800bda2:	f000 fe6b 	bl	800ca7c <__assert_func>
 800bda6:	6922      	ldr	r2, [r4, #16]
 800bda8:	3202      	adds	r2, #2
 800bdaa:	f104 010c 	add.w	r1, r4, #12
 800bdae:	0092      	lsls	r2, r2, #2
 800bdb0:	300c      	adds	r0, #12
 800bdb2:	f7fe fb2b 	bl	800a40c <memcpy>
 800bdb6:	4621      	mov	r1, r4
 800bdb8:	4638      	mov	r0, r7
 800bdba:	f7ff ffa5 	bl	800bd08 <_Bfree>
 800bdbe:	4644      	mov	r4, r8
 800bdc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bdc4:	3501      	adds	r5, #1
 800bdc6:	615e      	str	r6, [r3, #20]
 800bdc8:	6125      	str	r5, [r4, #16]
 800bdca:	4620      	mov	r0, r4
 800bdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdd0:	0800d513 	.word	0x0800d513
 800bdd4:	0800d584 	.word	0x0800d584

0800bdd8 <__hi0bits>:
 800bdd8:	0c03      	lsrs	r3, r0, #16
 800bdda:	041b      	lsls	r3, r3, #16
 800bddc:	b9d3      	cbnz	r3, 800be14 <__hi0bits+0x3c>
 800bdde:	0400      	lsls	r0, r0, #16
 800bde0:	2310      	movs	r3, #16
 800bde2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bde6:	bf04      	itt	eq
 800bde8:	0200      	lsleq	r0, r0, #8
 800bdea:	3308      	addeq	r3, #8
 800bdec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bdf0:	bf04      	itt	eq
 800bdf2:	0100      	lsleq	r0, r0, #4
 800bdf4:	3304      	addeq	r3, #4
 800bdf6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bdfa:	bf04      	itt	eq
 800bdfc:	0080      	lsleq	r0, r0, #2
 800bdfe:	3302      	addeq	r3, #2
 800be00:	2800      	cmp	r0, #0
 800be02:	db05      	blt.n	800be10 <__hi0bits+0x38>
 800be04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800be08:	f103 0301 	add.w	r3, r3, #1
 800be0c:	bf08      	it	eq
 800be0e:	2320      	moveq	r3, #32
 800be10:	4618      	mov	r0, r3
 800be12:	4770      	bx	lr
 800be14:	2300      	movs	r3, #0
 800be16:	e7e4      	b.n	800bde2 <__hi0bits+0xa>

0800be18 <__lo0bits>:
 800be18:	6803      	ldr	r3, [r0, #0]
 800be1a:	f013 0207 	ands.w	r2, r3, #7
 800be1e:	4601      	mov	r1, r0
 800be20:	d00b      	beq.n	800be3a <__lo0bits+0x22>
 800be22:	07da      	lsls	r2, r3, #31
 800be24:	d423      	bmi.n	800be6e <__lo0bits+0x56>
 800be26:	0798      	lsls	r0, r3, #30
 800be28:	bf49      	itett	mi
 800be2a:	085b      	lsrmi	r3, r3, #1
 800be2c:	089b      	lsrpl	r3, r3, #2
 800be2e:	2001      	movmi	r0, #1
 800be30:	600b      	strmi	r3, [r1, #0]
 800be32:	bf5c      	itt	pl
 800be34:	600b      	strpl	r3, [r1, #0]
 800be36:	2002      	movpl	r0, #2
 800be38:	4770      	bx	lr
 800be3a:	b298      	uxth	r0, r3
 800be3c:	b9a8      	cbnz	r0, 800be6a <__lo0bits+0x52>
 800be3e:	0c1b      	lsrs	r3, r3, #16
 800be40:	2010      	movs	r0, #16
 800be42:	b2da      	uxtb	r2, r3
 800be44:	b90a      	cbnz	r2, 800be4a <__lo0bits+0x32>
 800be46:	3008      	adds	r0, #8
 800be48:	0a1b      	lsrs	r3, r3, #8
 800be4a:	071a      	lsls	r2, r3, #28
 800be4c:	bf04      	itt	eq
 800be4e:	091b      	lsreq	r3, r3, #4
 800be50:	3004      	addeq	r0, #4
 800be52:	079a      	lsls	r2, r3, #30
 800be54:	bf04      	itt	eq
 800be56:	089b      	lsreq	r3, r3, #2
 800be58:	3002      	addeq	r0, #2
 800be5a:	07da      	lsls	r2, r3, #31
 800be5c:	d403      	bmi.n	800be66 <__lo0bits+0x4e>
 800be5e:	085b      	lsrs	r3, r3, #1
 800be60:	f100 0001 	add.w	r0, r0, #1
 800be64:	d005      	beq.n	800be72 <__lo0bits+0x5a>
 800be66:	600b      	str	r3, [r1, #0]
 800be68:	4770      	bx	lr
 800be6a:	4610      	mov	r0, r2
 800be6c:	e7e9      	b.n	800be42 <__lo0bits+0x2a>
 800be6e:	2000      	movs	r0, #0
 800be70:	4770      	bx	lr
 800be72:	2020      	movs	r0, #32
 800be74:	4770      	bx	lr
	...

0800be78 <__i2b>:
 800be78:	b510      	push	{r4, lr}
 800be7a:	460c      	mov	r4, r1
 800be7c:	2101      	movs	r1, #1
 800be7e:	f7ff ff03 	bl	800bc88 <_Balloc>
 800be82:	4602      	mov	r2, r0
 800be84:	b928      	cbnz	r0, 800be92 <__i2b+0x1a>
 800be86:	4b05      	ldr	r3, [pc, #20]	; (800be9c <__i2b+0x24>)
 800be88:	4805      	ldr	r0, [pc, #20]	; (800bea0 <__i2b+0x28>)
 800be8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800be8e:	f000 fdf5 	bl	800ca7c <__assert_func>
 800be92:	2301      	movs	r3, #1
 800be94:	6144      	str	r4, [r0, #20]
 800be96:	6103      	str	r3, [r0, #16]
 800be98:	bd10      	pop	{r4, pc}
 800be9a:	bf00      	nop
 800be9c:	0800d513 	.word	0x0800d513
 800bea0:	0800d584 	.word	0x0800d584

0800bea4 <__multiply>:
 800bea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea8:	4691      	mov	r9, r2
 800beaa:	690a      	ldr	r2, [r1, #16]
 800beac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	bfb8      	it	lt
 800beb4:	460b      	movlt	r3, r1
 800beb6:	460c      	mov	r4, r1
 800beb8:	bfbc      	itt	lt
 800beba:	464c      	movlt	r4, r9
 800bebc:	4699      	movlt	r9, r3
 800bebe:	6927      	ldr	r7, [r4, #16]
 800bec0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bec4:	68a3      	ldr	r3, [r4, #8]
 800bec6:	6861      	ldr	r1, [r4, #4]
 800bec8:	eb07 060a 	add.w	r6, r7, sl
 800becc:	42b3      	cmp	r3, r6
 800bece:	b085      	sub	sp, #20
 800bed0:	bfb8      	it	lt
 800bed2:	3101      	addlt	r1, #1
 800bed4:	f7ff fed8 	bl	800bc88 <_Balloc>
 800bed8:	b930      	cbnz	r0, 800bee8 <__multiply+0x44>
 800beda:	4602      	mov	r2, r0
 800bedc:	4b44      	ldr	r3, [pc, #272]	; (800bff0 <__multiply+0x14c>)
 800bede:	4845      	ldr	r0, [pc, #276]	; (800bff4 <__multiply+0x150>)
 800bee0:	f240 115d 	movw	r1, #349	; 0x15d
 800bee4:	f000 fdca 	bl	800ca7c <__assert_func>
 800bee8:	f100 0514 	add.w	r5, r0, #20
 800beec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bef0:	462b      	mov	r3, r5
 800bef2:	2200      	movs	r2, #0
 800bef4:	4543      	cmp	r3, r8
 800bef6:	d321      	bcc.n	800bf3c <__multiply+0x98>
 800bef8:	f104 0314 	add.w	r3, r4, #20
 800befc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bf00:	f109 0314 	add.w	r3, r9, #20
 800bf04:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bf08:	9202      	str	r2, [sp, #8]
 800bf0a:	1b3a      	subs	r2, r7, r4
 800bf0c:	3a15      	subs	r2, #21
 800bf0e:	f022 0203 	bic.w	r2, r2, #3
 800bf12:	3204      	adds	r2, #4
 800bf14:	f104 0115 	add.w	r1, r4, #21
 800bf18:	428f      	cmp	r7, r1
 800bf1a:	bf38      	it	cc
 800bf1c:	2204      	movcc	r2, #4
 800bf1e:	9201      	str	r2, [sp, #4]
 800bf20:	9a02      	ldr	r2, [sp, #8]
 800bf22:	9303      	str	r3, [sp, #12]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d80c      	bhi.n	800bf42 <__multiply+0x9e>
 800bf28:	2e00      	cmp	r6, #0
 800bf2a:	dd03      	ble.n	800bf34 <__multiply+0x90>
 800bf2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d05a      	beq.n	800bfea <__multiply+0x146>
 800bf34:	6106      	str	r6, [r0, #16]
 800bf36:	b005      	add	sp, #20
 800bf38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf3c:	f843 2b04 	str.w	r2, [r3], #4
 800bf40:	e7d8      	b.n	800bef4 <__multiply+0x50>
 800bf42:	f8b3 a000 	ldrh.w	sl, [r3]
 800bf46:	f1ba 0f00 	cmp.w	sl, #0
 800bf4a:	d024      	beq.n	800bf96 <__multiply+0xf2>
 800bf4c:	f104 0e14 	add.w	lr, r4, #20
 800bf50:	46a9      	mov	r9, r5
 800bf52:	f04f 0c00 	mov.w	ip, #0
 800bf56:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bf5a:	f8d9 1000 	ldr.w	r1, [r9]
 800bf5e:	fa1f fb82 	uxth.w	fp, r2
 800bf62:	b289      	uxth	r1, r1
 800bf64:	fb0a 110b 	mla	r1, sl, fp, r1
 800bf68:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bf6c:	f8d9 2000 	ldr.w	r2, [r9]
 800bf70:	4461      	add	r1, ip
 800bf72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf76:	fb0a c20b 	mla	r2, sl, fp, ip
 800bf7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bf7e:	b289      	uxth	r1, r1
 800bf80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf84:	4577      	cmp	r7, lr
 800bf86:	f849 1b04 	str.w	r1, [r9], #4
 800bf8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf8e:	d8e2      	bhi.n	800bf56 <__multiply+0xb2>
 800bf90:	9a01      	ldr	r2, [sp, #4]
 800bf92:	f845 c002 	str.w	ip, [r5, r2]
 800bf96:	9a03      	ldr	r2, [sp, #12]
 800bf98:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bf9c:	3304      	adds	r3, #4
 800bf9e:	f1b9 0f00 	cmp.w	r9, #0
 800bfa2:	d020      	beq.n	800bfe6 <__multiply+0x142>
 800bfa4:	6829      	ldr	r1, [r5, #0]
 800bfa6:	f104 0c14 	add.w	ip, r4, #20
 800bfaa:	46ae      	mov	lr, r5
 800bfac:	f04f 0a00 	mov.w	sl, #0
 800bfb0:	f8bc b000 	ldrh.w	fp, [ip]
 800bfb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bfb8:	fb09 220b 	mla	r2, r9, fp, r2
 800bfbc:	4492      	add	sl, r2
 800bfbe:	b289      	uxth	r1, r1
 800bfc0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bfc4:	f84e 1b04 	str.w	r1, [lr], #4
 800bfc8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bfcc:	f8be 1000 	ldrh.w	r1, [lr]
 800bfd0:	0c12      	lsrs	r2, r2, #16
 800bfd2:	fb09 1102 	mla	r1, r9, r2, r1
 800bfd6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bfda:	4567      	cmp	r7, ip
 800bfdc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bfe0:	d8e6      	bhi.n	800bfb0 <__multiply+0x10c>
 800bfe2:	9a01      	ldr	r2, [sp, #4]
 800bfe4:	50a9      	str	r1, [r5, r2]
 800bfe6:	3504      	adds	r5, #4
 800bfe8:	e79a      	b.n	800bf20 <__multiply+0x7c>
 800bfea:	3e01      	subs	r6, #1
 800bfec:	e79c      	b.n	800bf28 <__multiply+0x84>
 800bfee:	bf00      	nop
 800bff0:	0800d513 	.word	0x0800d513
 800bff4:	0800d584 	.word	0x0800d584

0800bff8 <__pow5mult>:
 800bff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bffc:	4615      	mov	r5, r2
 800bffe:	f012 0203 	ands.w	r2, r2, #3
 800c002:	4606      	mov	r6, r0
 800c004:	460f      	mov	r7, r1
 800c006:	d007      	beq.n	800c018 <__pow5mult+0x20>
 800c008:	4c25      	ldr	r4, [pc, #148]	; (800c0a0 <__pow5mult+0xa8>)
 800c00a:	3a01      	subs	r2, #1
 800c00c:	2300      	movs	r3, #0
 800c00e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c012:	f7ff fe9b 	bl	800bd4c <__multadd>
 800c016:	4607      	mov	r7, r0
 800c018:	10ad      	asrs	r5, r5, #2
 800c01a:	d03d      	beq.n	800c098 <__pow5mult+0xa0>
 800c01c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c01e:	b97c      	cbnz	r4, 800c040 <__pow5mult+0x48>
 800c020:	2010      	movs	r0, #16
 800c022:	f7ff fe29 	bl	800bc78 <malloc>
 800c026:	4602      	mov	r2, r0
 800c028:	6270      	str	r0, [r6, #36]	; 0x24
 800c02a:	b928      	cbnz	r0, 800c038 <__pow5mult+0x40>
 800c02c:	4b1d      	ldr	r3, [pc, #116]	; (800c0a4 <__pow5mult+0xac>)
 800c02e:	481e      	ldr	r0, [pc, #120]	; (800c0a8 <__pow5mult+0xb0>)
 800c030:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c034:	f000 fd22 	bl	800ca7c <__assert_func>
 800c038:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c03c:	6004      	str	r4, [r0, #0]
 800c03e:	60c4      	str	r4, [r0, #12]
 800c040:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c044:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c048:	b94c      	cbnz	r4, 800c05e <__pow5mult+0x66>
 800c04a:	f240 2171 	movw	r1, #625	; 0x271
 800c04e:	4630      	mov	r0, r6
 800c050:	f7ff ff12 	bl	800be78 <__i2b>
 800c054:	2300      	movs	r3, #0
 800c056:	f8c8 0008 	str.w	r0, [r8, #8]
 800c05a:	4604      	mov	r4, r0
 800c05c:	6003      	str	r3, [r0, #0]
 800c05e:	f04f 0900 	mov.w	r9, #0
 800c062:	07eb      	lsls	r3, r5, #31
 800c064:	d50a      	bpl.n	800c07c <__pow5mult+0x84>
 800c066:	4639      	mov	r1, r7
 800c068:	4622      	mov	r2, r4
 800c06a:	4630      	mov	r0, r6
 800c06c:	f7ff ff1a 	bl	800bea4 <__multiply>
 800c070:	4639      	mov	r1, r7
 800c072:	4680      	mov	r8, r0
 800c074:	4630      	mov	r0, r6
 800c076:	f7ff fe47 	bl	800bd08 <_Bfree>
 800c07a:	4647      	mov	r7, r8
 800c07c:	106d      	asrs	r5, r5, #1
 800c07e:	d00b      	beq.n	800c098 <__pow5mult+0xa0>
 800c080:	6820      	ldr	r0, [r4, #0]
 800c082:	b938      	cbnz	r0, 800c094 <__pow5mult+0x9c>
 800c084:	4622      	mov	r2, r4
 800c086:	4621      	mov	r1, r4
 800c088:	4630      	mov	r0, r6
 800c08a:	f7ff ff0b 	bl	800bea4 <__multiply>
 800c08e:	6020      	str	r0, [r4, #0]
 800c090:	f8c0 9000 	str.w	r9, [r0]
 800c094:	4604      	mov	r4, r0
 800c096:	e7e4      	b.n	800c062 <__pow5mult+0x6a>
 800c098:	4638      	mov	r0, r7
 800c09a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c09e:	bf00      	nop
 800c0a0:	0800d6d0 	.word	0x0800d6d0
 800c0a4:	0800d4a1 	.word	0x0800d4a1
 800c0a8:	0800d584 	.word	0x0800d584

0800c0ac <__lshift>:
 800c0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0b0:	460c      	mov	r4, r1
 800c0b2:	6849      	ldr	r1, [r1, #4]
 800c0b4:	6923      	ldr	r3, [r4, #16]
 800c0b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c0ba:	68a3      	ldr	r3, [r4, #8]
 800c0bc:	4607      	mov	r7, r0
 800c0be:	4691      	mov	r9, r2
 800c0c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c0c4:	f108 0601 	add.w	r6, r8, #1
 800c0c8:	42b3      	cmp	r3, r6
 800c0ca:	db0b      	blt.n	800c0e4 <__lshift+0x38>
 800c0cc:	4638      	mov	r0, r7
 800c0ce:	f7ff fddb 	bl	800bc88 <_Balloc>
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	b948      	cbnz	r0, 800c0ea <__lshift+0x3e>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	4b2a      	ldr	r3, [pc, #168]	; (800c184 <__lshift+0xd8>)
 800c0da:	482b      	ldr	r0, [pc, #172]	; (800c188 <__lshift+0xdc>)
 800c0dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c0e0:	f000 fccc 	bl	800ca7c <__assert_func>
 800c0e4:	3101      	adds	r1, #1
 800c0e6:	005b      	lsls	r3, r3, #1
 800c0e8:	e7ee      	b.n	800c0c8 <__lshift+0x1c>
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	f100 0114 	add.w	r1, r0, #20
 800c0f0:	f100 0210 	add.w	r2, r0, #16
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	4553      	cmp	r3, sl
 800c0f8:	db37      	blt.n	800c16a <__lshift+0xbe>
 800c0fa:	6920      	ldr	r0, [r4, #16]
 800c0fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c100:	f104 0314 	add.w	r3, r4, #20
 800c104:	f019 091f 	ands.w	r9, r9, #31
 800c108:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c10c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c110:	d02f      	beq.n	800c172 <__lshift+0xc6>
 800c112:	f1c9 0e20 	rsb	lr, r9, #32
 800c116:	468a      	mov	sl, r1
 800c118:	f04f 0c00 	mov.w	ip, #0
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	fa02 f209 	lsl.w	r2, r2, r9
 800c122:	ea42 020c 	orr.w	r2, r2, ip
 800c126:	f84a 2b04 	str.w	r2, [sl], #4
 800c12a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c12e:	4298      	cmp	r0, r3
 800c130:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c134:	d8f2      	bhi.n	800c11c <__lshift+0x70>
 800c136:	1b03      	subs	r3, r0, r4
 800c138:	3b15      	subs	r3, #21
 800c13a:	f023 0303 	bic.w	r3, r3, #3
 800c13e:	3304      	adds	r3, #4
 800c140:	f104 0215 	add.w	r2, r4, #21
 800c144:	4290      	cmp	r0, r2
 800c146:	bf38      	it	cc
 800c148:	2304      	movcc	r3, #4
 800c14a:	f841 c003 	str.w	ip, [r1, r3]
 800c14e:	f1bc 0f00 	cmp.w	ip, #0
 800c152:	d001      	beq.n	800c158 <__lshift+0xac>
 800c154:	f108 0602 	add.w	r6, r8, #2
 800c158:	3e01      	subs	r6, #1
 800c15a:	4638      	mov	r0, r7
 800c15c:	612e      	str	r6, [r5, #16]
 800c15e:	4621      	mov	r1, r4
 800c160:	f7ff fdd2 	bl	800bd08 <_Bfree>
 800c164:	4628      	mov	r0, r5
 800c166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c16a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c16e:	3301      	adds	r3, #1
 800c170:	e7c1      	b.n	800c0f6 <__lshift+0x4a>
 800c172:	3904      	subs	r1, #4
 800c174:	f853 2b04 	ldr.w	r2, [r3], #4
 800c178:	f841 2f04 	str.w	r2, [r1, #4]!
 800c17c:	4298      	cmp	r0, r3
 800c17e:	d8f9      	bhi.n	800c174 <__lshift+0xc8>
 800c180:	e7ea      	b.n	800c158 <__lshift+0xac>
 800c182:	bf00      	nop
 800c184:	0800d513 	.word	0x0800d513
 800c188:	0800d584 	.word	0x0800d584

0800c18c <__mcmp>:
 800c18c:	b530      	push	{r4, r5, lr}
 800c18e:	6902      	ldr	r2, [r0, #16]
 800c190:	690c      	ldr	r4, [r1, #16]
 800c192:	1b12      	subs	r2, r2, r4
 800c194:	d10e      	bne.n	800c1b4 <__mcmp+0x28>
 800c196:	f100 0314 	add.w	r3, r0, #20
 800c19a:	3114      	adds	r1, #20
 800c19c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c1a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c1a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c1a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c1ac:	42a5      	cmp	r5, r4
 800c1ae:	d003      	beq.n	800c1b8 <__mcmp+0x2c>
 800c1b0:	d305      	bcc.n	800c1be <__mcmp+0x32>
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	4610      	mov	r0, r2
 800c1b6:	bd30      	pop	{r4, r5, pc}
 800c1b8:	4283      	cmp	r3, r0
 800c1ba:	d3f3      	bcc.n	800c1a4 <__mcmp+0x18>
 800c1bc:	e7fa      	b.n	800c1b4 <__mcmp+0x28>
 800c1be:	f04f 32ff 	mov.w	r2, #4294967295
 800c1c2:	e7f7      	b.n	800c1b4 <__mcmp+0x28>

0800c1c4 <__mdiff>:
 800c1c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c8:	460c      	mov	r4, r1
 800c1ca:	4606      	mov	r6, r0
 800c1cc:	4611      	mov	r1, r2
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	4690      	mov	r8, r2
 800c1d2:	f7ff ffdb 	bl	800c18c <__mcmp>
 800c1d6:	1e05      	subs	r5, r0, #0
 800c1d8:	d110      	bne.n	800c1fc <__mdiff+0x38>
 800c1da:	4629      	mov	r1, r5
 800c1dc:	4630      	mov	r0, r6
 800c1de:	f7ff fd53 	bl	800bc88 <_Balloc>
 800c1e2:	b930      	cbnz	r0, 800c1f2 <__mdiff+0x2e>
 800c1e4:	4b3a      	ldr	r3, [pc, #232]	; (800c2d0 <__mdiff+0x10c>)
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	f240 2132 	movw	r1, #562	; 0x232
 800c1ec:	4839      	ldr	r0, [pc, #228]	; (800c2d4 <__mdiff+0x110>)
 800c1ee:	f000 fc45 	bl	800ca7c <__assert_func>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c1f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1fc:	bfa4      	itt	ge
 800c1fe:	4643      	movge	r3, r8
 800c200:	46a0      	movge	r8, r4
 800c202:	4630      	mov	r0, r6
 800c204:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c208:	bfa6      	itte	ge
 800c20a:	461c      	movge	r4, r3
 800c20c:	2500      	movge	r5, #0
 800c20e:	2501      	movlt	r5, #1
 800c210:	f7ff fd3a 	bl	800bc88 <_Balloc>
 800c214:	b920      	cbnz	r0, 800c220 <__mdiff+0x5c>
 800c216:	4b2e      	ldr	r3, [pc, #184]	; (800c2d0 <__mdiff+0x10c>)
 800c218:	4602      	mov	r2, r0
 800c21a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c21e:	e7e5      	b.n	800c1ec <__mdiff+0x28>
 800c220:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c224:	6926      	ldr	r6, [r4, #16]
 800c226:	60c5      	str	r5, [r0, #12]
 800c228:	f104 0914 	add.w	r9, r4, #20
 800c22c:	f108 0514 	add.w	r5, r8, #20
 800c230:	f100 0e14 	add.w	lr, r0, #20
 800c234:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c238:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c23c:	f108 0210 	add.w	r2, r8, #16
 800c240:	46f2      	mov	sl, lr
 800c242:	2100      	movs	r1, #0
 800c244:	f859 3b04 	ldr.w	r3, [r9], #4
 800c248:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c24c:	fa1f f883 	uxth.w	r8, r3
 800c250:	fa11 f18b 	uxtah	r1, r1, fp
 800c254:	0c1b      	lsrs	r3, r3, #16
 800c256:	eba1 0808 	sub.w	r8, r1, r8
 800c25a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c25e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c262:	fa1f f888 	uxth.w	r8, r8
 800c266:	1419      	asrs	r1, r3, #16
 800c268:	454e      	cmp	r6, r9
 800c26a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c26e:	f84a 3b04 	str.w	r3, [sl], #4
 800c272:	d8e7      	bhi.n	800c244 <__mdiff+0x80>
 800c274:	1b33      	subs	r3, r6, r4
 800c276:	3b15      	subs	r3, #21
 800c278:	f023 0303 	bic.w	r3, r3, #3
 800c27c:	3304      	adds	r3, #4
 800c27e:	3415      	adds	r4, #21
 800c280:	42a6      	cmp	r6, r4
 800c282:	bf38      	it	cc
 800c284:	2304      	movcc	r3, #4
 800c286:	441d      	add	r5, r3
 800c288:	4473      	add	r3, lr
 800c28a:	469e      	mov	lr, r3
 800c28c:	462e      	mov	r6, r5
 800c28e:	4566      	cmp	r6, ip
 800c290:	d30e      	bcc.n	800c2b0 <__mdiff+0xec>
 800c292:	f10c 0203 	add.w	r2, ip, #3
 800c296:	1b52      	subs	r2, r2, r5
 800c298:	f022 0203 	bic.w	r2, r2, #3
 800c29c:	3d03      	subs	r5, #3
 800c29e:	45ac      	cmp	ip, r5
 800c2a0:	bf38      	it	cc
 800c2a2:	2200      	movcc	r2, #0
 800c2a4:	441a      	add	r2, r3
 800c2a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c2aa:	b17b      	cbz	r3, 800c2cc <__mdiff+0x108>
 800c2ac:	6107      	str	r7, [r0, #16]
 800c2ae:	e7a3      	b.n	800c1f8 <__mdiff+0x34>
 800c2b0:	f856 8b04 	ldr.w	r8, [r6], #4
 800c2b4:	fa11 f288 	uxtah	r2, r1, r8
 800c2b8:	1414      	asrs	r4, r2, #16
 800c2ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c2be:	b292      	uxth	r2, r2
 800c2c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c2c4:	f84e 2b04 	str.w	r2, [lr], #4
 800c2c8:	1421      	asrs	r1, r4, #16
 800c2ca:	e7e0      	b.n	800c28e <__mdiff+0xca>
 800c2cc:	3f01      	subs	r7, #1
 800c2ce:	e7ea      	b.n	800c2a6 <__mdiff+0xe2>
 800c2d0:	0800d513 	.word	0x0800d513
 800c2d4:	0800d584 	.word	0x0800d584

0800c2d8 <__d2b>:
 800c2d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c2dc:	4689      	mov	r9, r1
 800c2de:	2101      	movs	r1, #1
 800c2e0:	ec57 6b10 	vmov	r6, r7, d0
 800c2e4:	4690      	mov	r8, r2
 800c2e6:	f7ff fccf 	bl	800bc88 <_Balloc>
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	b930      	cbnz	r0, 800c2fc <__d2b+0x24>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	4b25      	ldr	r3, [pc, #148]	; (800c388 <__d2b+0xb0>)
 800c2f2:	4826      	ldr	r0, [pc, #152]	; (800c38c <__d2b+0xb4>)
 800c2f4:	f240 310a 	movw	r1, #778	; 0x30a
 800c2f8:	f000 fbc0 	bl	800ca7c <__assert_func>
 800c2fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c300:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c304:	bb35      	cbnz	r5, 800c354 <__d2b+0x7c>
 800c306:	2e00      	cmp	r6, #0
 800c308:	9301      	str	r3, [sp, #4]
 800c30a:	d028      	beq.n	800c35e <__d2b+0x86>
 800c30c:	4668      	mov	r0, sp
 800c30e:	9600      	str	r6, [sp, #0]
 800c310:	f7ff fd82 	bl	800be18 <__lo0bits>
 800c314:	9900      	ldr	r1, [sp, #0]
 800c316:	b300      	cbz	r0, 800c35a <__d2b+0x82>
 800c318:	9a01      	ldr	r2, [sp, #4]
 800c31a:	f1c0 0320 	rsb	r3, r0, #32
 800c31e:	fa02 f303 	lsl.w	r3, r2, r3
 800c322:	430b      	orrs	r3, r1
 800c324:	40c2      	lsrs	r2, r0
 800c326:	6163      	str	r3, [r4, #20]
 800c328:	9201      	str	r2, [sp, #4]
 800c32a:	9b01      	ldr	r3, [sp, #4]
 800c32c:	61a3      	str	r3, [r4, #24]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	bf14      	ite	ne
 800c332:	2202      	movne	r2, #2
 800c334:	2201      	moveq	r2, #1
 800c336:	6122      	str	r2, [r4, #16]
 800c338:	b1d5      	cbz	r5, 800c370 <__d2b+0x98>
 800c33a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c33e:	4405      	add	r5, r0
 800c340:	f8c9 5000 	str.w	r5, [r9]
 800c344:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c348:	f8c8 0000 	str.w	r0, [r8]
 800c34c:	4620      	mov	r0, r4
 800c34e:	b003      	add	sp, #12
 800c350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c354:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c358:	e7d5      	b.n	800c306 <__d2b+0x2e>
 800c35a:	6161      	str	r1, [r4, #20]
 800c35c:	e7e5      	b.n	800c32a <__d2b+0x52>
 800c35e:	a801      	add	r0, sp, #4
 800c360:	f7ff fd5a 	bl	800be18 <__lo0bits>
 800c364:	9b01      	ldr	r3, [sp, #4]
 800c366:	6163      	str	r3, [r4, #20]
 800c368:	2201      	movs	r2, #1
 800c36a:	6122      	str	r2, [r4, #16]
 800c36c:	3020      	adds	r0, #32
 800c36e:	e7e3      	b.n	800c338 <__d2b+0x60>
 800c370:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c374:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c378:	f8c9 0000 	str.w	r0, [r9]
 800c37c:	6918      	ldr	r0, [r3, #16]
 800c37e:	f7ff fd2b 	bl	800bdd8 <__hi0bits>
 800c382:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c386:	e7df      	b.n	800c348 <__d2b+0x70>
 800c388:	0800d513 	.word	0x0800d513
 800c38c:	0800d584 	.word	0x0800d584

0800c390 <_calloc_r>:
 800c390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c392:	fba1 2402 	umull	r2, r4, r1, r2
 800c396:	b94c      	cbnz	r4, 800c3ac <_calloc_r+0x1c>
 800c398:	4611      	mov	r1, r2
 800c39a:	9201      	str	r2, [sp, #4]
 800c39c:	f000 f87a 	bl	800c494 <_malloc_r>
 800c3a0:	9a01      	ldr	r2, [sp, #4]
 800c3a2:	4605      	mov	r5, r0
 800c3a4:	b930      	cbnz	r0, 800c3b4 <_calloc_r+0x24>
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	b003      	add	sp, #12
 800c3aa:	bd30      	pop	{r4, r5, pc}
 800c3ac:	220c      	movs	r2, #12
 800c3ae:	6002      	str	r2, [r0, #0]
 800c3b0:	2500      	movs	r5, #0
 800c3b2:	e7f8      	b.n	800c3a6 <_calloc_r+0x16>
 800c3b4:	4621      	mov	r1, r4
 800c3b6:	f7fe f851 	bl	800a45c <memset>
 800c3ba:	e7f4      	b.n	800c3a6 <_calloc_r+0x16>

0800c3bc <_free_r>:
 800c3bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3be:	2900      	cmp	r1, #0
 800c3c0:	d044      	beq.n	800c44c <_free_r+0x90>
 800c3c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3c6:	9001      	str	r0, [sp, #4]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	f1a1 0404 	sub.w	r4, r1, #4
 800c3ce:	bfb8      	it	lt
 800c3d0:	18e4      	addlt	r4, r4, r3
 800c3d2:	f000 fcdf 	bl	800cd94 <__malloc_lock>
 800c3d6:	4a1e      	ldr	r2, [pc, #120]	; (800c450 <_free_r+0x94>)
 800c3d8:	9801      	ldr	r0, [sp, #4]
 800c3da:	6813      	ldr	r3, [r2, #0]
 800c3dc:	b933      	cbnz	r3, 800c3ec <_free_r+0x30>
 800c3de:	6063      	str	r3, [r4, #4]
 800c3e0:	6014      	str	r4, [r2, #0]
 800c3e2:	b003      	add	sp, #12
 800c3e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3e8:	f000 bcda 	b.w	800cda0 <__malloc_unlock>
 800c3ec:	42a3      	cmp	r3, r4
 800c3ee:	d908      	bls.n	800c402 <_free_r+0x46>
 800c3f0:	6825      	ldr	r5, [r4, #0]
 800c3f2:	1961      	adds	r1, r4, r5
 800c3f4:	428b      	cmp	r3, r1
 800c3f6:	bf01      	itttt	eq
 800c3f8:	6819      	ldreq	r1, [r3, #0]
 800c3fa:	685b      	ldreq	r3, [r3, #4]
 800c3fc:	1949      	addeq	r1, r1, r5
 800c3fe:	6021      	streq	r1, [r4, #0]
 800c400:	e7ed      	b.n	800c3de <_free_r+0x22>
 800c402:	461a      	mov	r2, r3
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	b10b      	cbz	r3, 800c40c <_free_r+0x50>
 800c408:	42a3      	cmp	r3, r4
 800c40a:	d9fa      	bls.n	800c402 <_free_r+0x46>
 800c40c:	6811      	ldr	r1, [r2, #0]
 800c40e:	1855      	adds	r5, r2, r1
 800c410:	42a5      	cmp	r5, r4
 800c412:	d10b      	bne.n	800c42c <_free_r+0x70>
 800c414:	6824      	ldr	r4, [r4, #0]
 800c416:	4421      	add	r1, r4
 800c418:	1854      	adds	r4, r2, r1
 800c41a:	42a3      	cmp	r3, r4
 800c41c:	6011      	str	r1, [r2, #0]
 800c41e:	d1e0      	bne.n	800c3e2 <_free_r+0x26>
 800c420:	681c      	ldr	r4, [r3, #0]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	6053      	str	r3, [r2, #4]
 800c426:	4421      	add	r1, r4
 800c428:	6011      	str	r1, [r2, #0]
 800c42a:	e7da      	b.n	800c3e2 <_free_r+0x26>
 800c42c:	d902      	bls.n	800c434 <_free_r+0x78>
 800c42e:	230c      	movs	r3, #12
 800c430:	6003      	str	r3, [r0, #0]
 800c432:	e7d6      	b.n	800c3e2 <_free_r+0x26>
 800c434:	6825      	ldr	r5, [r4, #0]
 800c436:	1961      	adds	r1, r4, r5
 800c438:	428b      	cmp	r3, r1
 800c43a:	bf04      	itt	eq
 800c43c:	6819      	ldreq	r1, [r3, #0]
 800c43e:	685b      	ldreq	r3, [r3, #4]
 800c440:	6063      	str	r3, [r4, #4]
 800c442:	bf04      	itt	eq
 800c444:	1949      	addeq	r1, r1, r5
 800c446:	6021      	streq	r1, [r4, #0]
 800c448:	6054      	str	r4, [r2, #4]
 800c44a:	e7ca      	b.n	800c3e2 <_free_r+0x26>
 800c44c:	b003      	add	sp, #12
 800c44e:	bd30      	pop	{r4, r5, pc}
 800c450:	20004e3c 	.word	0x20004e3c

0800c454 <sbrk_aligned>:
 800c454:	b570      	push	{r4, r5, r6, lr}
 800c456:	4e0e      	ldr	r6, [pc, #56]	; (800c490 <sbrk_aligned+0x3c>)
 800c458:	460c      	mov	r4, r1
 800c45a:	6831      	ldr	r1, [r6, #0]
 800c45c:	4605      	mov	r5, r0
 800c45e:	b911      	cbnz	r1, 800c466 <sbrk_aligned+0x12>
 800c460:	f000 f9e6 	bl	800c830 <_sbrk_r>
 800c464:	6030      	str	r0, [r6, #0]
 800c466:	4621      	mov	r1, r4
 800c468:	4628      	mov	r0, r5
 800c46a:	f000 f9e1 	bl	800c830 <_sbrk_r>
 800c46e:	1c43      	adds	r3, r0, #1
 800c470:	d00a      	beq.n	800c488 <sbrk_aligned+0x34>
 800c472:	1cc4      	adds	r4, r0, #3
 800c474:	f024 0403 	bic.w	r4, r4, #3
 800c478:	42a0      	cmp	r0, r4
 800c47a:	d007      	beq.n	800c48c <sbrk_aligned+0x38>
 800c47c:	1a21      	subs	r1, r4, r0
 800c47e:	4628      	mov	r0, r5
 800c480:	f000 f9d6 	bl	800c830 <_sbrk_r>
 800c484:	3001      	adds	r0, #1
 800c486:	d101      	bne.n	800c48c <sbrk_aligned+0x38>
 800c488:	f04f 34ff 	mov.w	r4, #4294967295
 800c48c:	4620      	mov	r0, r4
 800c48e:	bd70      	pop	{r4, r5, r6, pc}
 800c490:	20004e40 	.word	0x20004e40

0800c494 <_malloc_r>:
 800c494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c498:	1ccd      	adds	r5, r1, #3
 800c49a:	f025 0503 	bic.w	r5, r5, #3
 800c49e:	3508      	adds	r5, #8
 800c4a0:	2d0c      	cmp	r5, #12
 800c4a2:	bf38      	it	cc
 800c4a4:	250c      	movcc	r5, #12
 800c4a6:	2d00      	cmp	r5, #0
 800c4a8:	4607      	mov	r7, r0
 800c4aa:	db01      	blt.n	800c4b0 <_malloc_r+0x1c>
 800c4ac:	42a9      	cmp	r1, r5
 800c4ae:	d905      	bls.n	800c4bc <_malloc_r+0x28>
 800c4b0:	230c      	movs	r3, #12
 800c4b2:	603b      	str	r3, [r7, #0]
 800c4b4:	2600      	movs	r6, #0
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4bc:	4e2e      	ldr	r6, [pc, #184]	; (800c578 <_malloc_r+0xe4>)
 800c4be:	f000 fc69 	bl	800cd94 <__malloc_lock>
 800c4c2:	6833      	ldr	r3, [r6, #0]
 800c4c4:	461c      	mov	r4, r3
 800c4c6:	bb34      	cbnz	r4, 800c516 <_malloc_r+0x82>
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	4638      	mov	r0, r7
 800c4cc:	f7ff ffc2 	bl	800c454 <sbrk_aligned>
 800c4d0:	1c43      	adds	r3, r0, #1
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	d14d      	bne.n	800c572 <_malloc_r+0xde>
 800c4d6:	6834      	ldr	r4, [r6, #0]
 800c4d8:	4626      	mov	r6, r4
 800c4da:	2e00      	cmp	r6, #0
 800c4dc:	d140      	bne.n	800c560 <_malloc_r+0xcc>
 800c4de:	6823      	ldr	r3, [r4, #0]
 800c4e0:	4631      	mov	r1, r6
 800c4e2:	4638      	mov	r0, r7
 800c4e4:	eb04 0803 	add.w	r8, r4, r3
 800c4e8:	f000 f9a2 	bl	800c830 <_sbrk_r>
 800c4ec:	4580      	cmp	r8, r0
 800c4ee:	d13a      	bne.n	800c566 <_malloc_r+0xd2>
 800c4f0:	6821      	ldr	r1, [r4, #0]
 800c4f2:	3503      	adds	r5, #3
 800c4f4:	1a6d      	subs	r5, r5, r1
 800c4f6:	f025 0503 	bic.w	r5, r5, #3
 800c4fa:	3508      	adds	r5, #8
 800c4fc:	2d0c      	cmp	r5, #12
 800c4fe:	bf38      	it	cc
 800c500:	250c      	movcc	r5, #12
 800c502:	4629      	mov	r1, r5
 800c504:	4638      	mov	r0, r7
 800c506:	f7ff ffa5 	bl	800c454 <sbrk_aligned>
 800c50a:	3001      	adds	r0, #1
 800c50c:	d02b      	beq.n	800c566 <_malloc_r+0xd2>
 800c50e:	6823      	ldr	r3, [r4, #0]
 800c510:	442b      	add	r3, r5
 800c512:	6023      	str	r3, [r4, #0]
 800c514:	e00e      	b.n	800c534 <_malloc_r+0xa0>
 800c516:	6822      	ldr	r2, [r4, #0]
 800c518:	1b52      	subs	r2, r2, r5
 800c51a:	d41e      	bmi.n	800c55a <_malloc_r+0xc6>
 800c51c:	2a0b      	cmp	r2, #11
 800c51e:	d916      	bls.n	800c54e <_malloc_r+0xba>
 800c520:	1961      	adds	r1, r4, r5
 800c522:	42a3      	cmp	r3, r4
 800c524:	6025      	str	r5, [r4, #0]
 800c526:	bf18      	it	ne
 800c528:	6059      	strne	r1, [r3, #4]
 800c52a:	6863      	ldr	r3, [r4, #4]
 800c52c:	bf08      	it	eq
 800c52e:	6031      	streq	r1, [r6, #0]
 800c530:	5162      	str	r2, [r4, r5]
 800c532:	604b      	str	r3, [r1, #4]
 800c534:	4638      	mov	r0, r7
 800c536:	f104 060b 	add.w	r6, r4, #11
 800c53a:	f000 fc31 	bl	800cda0 <__malloc_unlock>
 800c53e:	f026 0607 	bic.w	r6, r6, #7
 800c542:	1d23      	adds	r3, r4, #4
 800c544:	1af2      	subs	r2, r6, r3
 800c546:	d0b6      	beq.n	800c4b6 <_malloc_r+0x22>
 800c548:	1b9b      	subs	r3, r3, r6
 800c54a:	50a3      	str	r3, [r4, r2]
 800c54c:	e7b3      	b.n	800c4b6 <_malloc_r+0x22>
 800c54e:	6862      	ldr	r2, [r4, #4]
 800c550:	42a3      	cmp	r3, r4
 800c552:	bf0c      	ite	eq
 800c554:	6032      	streq	r2, [r6, #0]
 800c556:	605a      	strne	r2, [r3, #4]
 800c558:	e7ec      	b.n	800c534 <_malloc_r+0xa0>
 800c55a:	4623      	mov	r3, r4
 800c55c:	6864      	ldr	r4, [r4, #4]
 800c55e:	e7b2      	b.n	800c4c6 <_malloc_r+0x32>
 800c560:	4634      	mov	r4, r6
 800c562:	6876      	ldr	r6, [r6, #4]
 800c564:	e7b9      	b.n	800c4da <_malloc_r+0x46>
 800c566:	230c      	movs	r3, #12
 800c568:	603b      	str	r3, [r7, #0]
 800c56a:	4638      	mov	r0, r7
 800c56c:	f000 fc18 	bl	800cda0 <__malloc_unlock>
 800c570:	e7a1      	b.n	800c4b6 <_malloc_r+0x22>
 800c572:	6025      	str	r5, [r4, #0]
 800c574:	e7de      	b.n	800c534 <_malloc_r+0xa0>
 800c576:	bf00      	nop
 800c578:	20004e3c 	.word	0x20004e3c

0800c57c <__sfputc_r>:
 800c57c:	6893      	ldr	r3, [r2, #8]
 800c57e:	3b01      	subs	r3, #1
 800c580:	2b00      	cmp	r3, #0
 800c582:	b410      	push	{r4}
 800c584:	6093      	str	r3, [r2, #8]
 800c586:	da08      	bge.n	800c59a <__sfputc_r+0x1e>
 800c588:	6994      	ldr	r4, [r2, #24]
 800c58a:	42a3      	cmp	r3, r4
 800c58c:	db01      	blt.n	800c592 <__sfputc_r+0x16>
 800c58e:	290a      	cmp	r1, #10
 800c590:	d103      	bne.n	800c59a <__sfputc_r+0x1e>
 800c592:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c596:	f000 b99f 	b.w	800c8d8 <__swbuf_r>
 800c59a:	6813      	ldr	r3, [r2, #0]
 800c59c:	1c58      	adds	r0, r3, #1
 800c59e:	6010      	str	r0, [r2, #0]
 800c5a0:	7019      	strb	r1, [r3, #0]
 800c5a2:	4608      	mov	r0, r1
 800c5a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <__sfputs_r>:
 800c5aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ac:	4606      	mov	r6, r0
 800c5ae:	460f      	mov	r7, r1
 800c5b0:	4614      	mov	r4, r2
 800c5b2:	18d5      	adds	r5, r2, r3
 800c5b4:	42ac      	cmp	r4, r5
 800c5b6:	d101      	bne.n	800c5bc <__sfputs_r+0x12>
 800c5b8:	2000      	movs	r0, #0
 800c5ba:	e007      	b.n	800c5cc <__sfputs_r+0x22>
 800c5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5c0:	463a      	mov	r2, r7
 800c5c2:	4630      	mov	r0, r6
 800c5c4:	f7ff ffda 	bl	800c57c <__sfputc_r>
 800c5c8:	1c43      	adds	r3, r0, #1
 800c5ca:	d1f3      	bne.n	800c5b4 <__sfputs_r+0xa>
 800c5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5d0 <_vfiprintf_r>:
 800c5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d4:	460d      	mov	r5, r1
 800c5d6:	b09d      	sub	sp, #116	; 0x74
 800c5d8:	4614      	mov	r4, r2
 800c5da:	4698      	mov	r8, r3
 800c5dc:	4606      	mov	r6, r0
 800c5de:	b118      	cbz	r0, 800c5e8 <_vfiprintf_r+0x18>
 800c5e0:	6983      	ldr	r3, [r0, #24]
 800c5e2:	b90b      	cbnz	r3, 800c5e8 <_vfiprintf_r+0x18>
 800c5e4:	f7ff faa2 	bl	800bb2c <__sinit>
 800c5e8:	4b89      	ldr	r3, [pc, #548]	; (800c810 <_vfiprintf_r+0x240>)
 800c5ea:	429d      	cmp	r5, r3
 800c5ec:	d11b      	bne.n	800c626 <_vfiprintf_r+0x56>
 800c5ee:	6875      	ldr	r5, [r6, #4]
 800c5f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5f2:	07d9      	lsls	r1, r3, #31
 800c5f4:	d405      	bmi.n	800c602 <_vfiprintf_r+0x32>
 800c5f6:	89ab      	ldrh	r3, [r5, #12]
 800c5f8:	059a      	lsls	r2, r3, #22
 800c5fa:	d402      	bmi.n	800c602 <_vfiprintf_r+0x32>
 800c5fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5fe:	f7ff fb38 	bl	800bc72 <__retarget_lock_acquire_recursive>
 800c602:	89ab      	ldrh	r3, [r5, #12]
 800c604:	071b      	lsls	r3, r3, #28
 800c606:	d501      	bpl.n	800c60c <_vfiprintf_r+0x3c>
 800c608:	692b      	ldr	r3, [r5, #16]
 800c60a:	b9eb      	cbnz	r3, 800c648 <_vfiprintf_r+0x78>
 800c60c:	4629      	mov	r1, r5
 800c60e:	4630      	mov	r0, r6
 800c610:	f000 f9c6 	bl	800c9a0 <__swsetup_r>
 800c614:	b1c0      	cbz	r0, 800c648 <_vfiprintf_r+0x78>
 800c616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c618:	07dc      	lsls	r4, r3, #31
 800c61a:	d50e      	bpl.n	800c63a <_vfiprintf_r+0x6a>
 800c61c:	f04f 30ff 	mov.w	r0, #4294967295
 800c620:	b01d      	add	sp, #116	; 0x74
 800c622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c626:	4b7b      	ldr	r3, [pc, #492]	; (800c814 <_vfiprintf_r+0x244>)
 800c628:	429d      	cmp	r5, r3
 800c62a:	d101      	bne.n	800c630 <_vfiprintf_r+0x60>
 800c62c:	68b5      	ldr	r5, [r6, #8]
 800c62e:	e7df      	b.n	800c5f0 <_vfiprintf_r+0x20>
 800c630:	4b79      	ldr	r3, [pc, #484]	; (800c818 <_vfiprintf_r+0x248>)
 800c632:	429d      	cmp	r5, r3
 800c634:	bf08      	it	eq
 800c636:	68f5      	ldreq	r5, [r6, #12]
 800c638:	e7da      	b.n	800c5f0 <_vfiprintf_r+0x20>
 800c63a:	89ab      	ldrh	r3, [r5, #12]
 800c63c:	0598      	lsls	r0, r3, #22
 800c63e:	d4ed      	bmi.n	800c61c <_vfiprintf_r+0x4c>
 800c640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c642:	f7ff fb17 	bl	800bc74 <__retarget_lock_release_recursive>
 800c646:	e7e9      	b.n	800c61c <_vfiprintf_r+0x4c>
 800c648:	2300      	movs	r3, #0
 800c64a:	9309      	str	r3, [sp, #36]	; 0x24
 800c64c:	2320      	movs	r3, #32
 800c64e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c652:	f8cd 800c 	str.w	r8, [sp, #12]
 800c656:	2330      	movs	r3, #48	; 0x30
 800c658:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c81c <_vfiprintf_r+0x24c>
 800c65c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c660:	f04f 0901 	mov.w	r9, #1
 800c664:	4623      	mov	r3, r4
 800c666:	469a      	mov	sl, r3
 800c668:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c66c:	b10a      	cbz	r2, 800c672 <_vfiprintf_r+0xa2>
 800c66e:	2a25      	cmp	r2, #37	; 0x25
 800c670:	d1f9      	bne.n	800c666 <_vfiprintf_r+0x96>
 800c672:	ebba 0b04 	subs.w	fp, sl, r4
 800c676:	d00b      	beq.n	800c690 <_vfiprintf_r+0xc0>
 800c678:	465b      	mov	r3, fp
 800c67a:	4622      	mov	r2, r4
 800c67c:	4629      	mov	r1, r5
 800c67e:	4630      	mov	r0, r6
 800c680:	f7ff ff93 	bl	800c5aa <__sfputs_r>
 800c684:	3001      	adds	r0, #1
 800c686:	f000 80aa 	beq.w	800c7de <_vfiprintf_r+0x20e>
 800c68a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c68c:	445a      	add	r2, fp
 800c68e:	9209      	str	r2, [sp, #36]	; 0x24
 800c690:	f89a 3000 	ldrb.w	r3, [sl]
 800c694:	2b00      	cmp	r3, #0
 800c696:	f000 80a2 	beq.w	800c7de <_vfiprintf_r+0x20e>
 800c69a:	2300      	movs	r3, #0
 800c69c:	f04f 32ff 	mov.w	r2, #4294967295
 800c6a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6a4:	f10a 0a01 	add.w	sl, sl, #1
 800c6a8:	9304      	str	r3, [sp, #16]
 800c6aa:	9307      	str	r3, [sp, #28]
 800c6ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6b0:	931a      	str	r3, [sp, #104]	; 0x68
 800c6b2:	4654      	mov	r4, sl
 800c6b4:	2205      	movs	r2, #5
 800c6b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ba:	4858      	ldr	r0, [pc, #352]	; (800c81c <_vfiprintf_r+0x24c>)
 800c6bc:	f7f3 fdb0 	bl	8000220 <memchr>
 800c6c0:	9a04      	ldr	r2, [sp, #16]
 800c6c2:	b9d8      	cbnz	r0, 800c6fc <_vfiprintf_r+0x12c>
 800c6c4:	06d1      	lsls	r1, r2, #27
 800c6c6:	bf44      	itt	mi
 800c6c8:	2320      	movmi	r3, #32
 800c6ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6ce:	0713      	lsls	r3, r2, #28
 800c6d0:	bf44      	itt	mi
 800c6d2:	232b      	movmi	r3, #43	; 0x2b
 800c6d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6d8:	f89a 3000 	ldrb.w	r3, [sl]
 800c6dc:	2b2a      	cmp	r3, #42	; 0x2a
 800c6de:	d015      	beq.n	800c70c <_vfiprintf_r+0x13c>
 800c6e0:	9a07      	ldr	r2, [sp, #28]
 800c6e2:	4654      	mov	r4, sl
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	f04f 0c0a 	mov.w	ip, #10
 800c6ea:	4621      	mov	r1, r4
 800c6ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6f0:	3b30      	subs	r3, #48	; 0x30
 800c6f2:	2b09      	cmp	r3, #9
 800c6f4:	d94e      	bls.n	800c794 <_vfiprintf_r+0x1c4>
 800c6f6:	b1b0      	cbz	r0, 800c726 <_vfiprintf_r+0x156>
 800c6f8:	9207      	str	r2, [sp, #28]
 800c6fa:	e014      	b.n	800c726 <_vfiprintf_r+0x156>
 800c6fc:	eba0 0308 	sub.w	r3, r0, r8
 800c700:	fa09 f303 	lsl.w	r3, r9, r3
 800c704:	4313      	orrs	r3, r2
 800c706:	9304      	str	r3, [sp, #16]
 800c708:	46a2      	mov	sl, r4
 800c70a:	e7d2      	b.n	800c6b2 <_vfiprintf_r+0xe2>
 800c70c:	9b03      	ldr	r3, [sp, #12]
 800c70e:	1d19      	adds	r1, r3, #4
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	9103      	str	r1, [sp, #12]
 800c714:	2b00      	cmp	r3, #0
 800c716:	bfbb      	ittet	lt
 800c718:	425b      	neglt	r3, r3
 800c71a:	f042 0202 	orrlt.w	r2, r2, #2
 800c71e:	9307      	strge	r3, [sp, #28]
 800c720:	9307      	strlt	r3, [sp, #28]
 800c722:	bfb8      	it	lt
 800c724:	9204      	strlt	r2, [sp, #16]
 800c726:	7823      	ldrb	r3, [r4, #0]
 800c728:	2b2e      	cmp	r3, #46	; 0x2e
 800c72a:	d10c      	bne.n	800c746 <_vfiprintf_r+0x176>
 800c72c:	7863      	ldrb	r3, [r4, #1]
 800c72e:	2b2a      	cmp	r3, #42	; 0x2a
 800c730:	d135      	bne.n	800c79e <_vfiprintf_r+0x1ce>
 800c732:	9b03      	ldr	r3, [sp, #12]
 800c734:	1d1a      	adds	r2, r3, #4
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	9203      	str	r2, [sp, #12]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	bfb8      	it	lt
 800c73e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c742:	3402      	adds	r4, #2
 800c744:	9305      	str	r3, [sp, #20]
 800c746:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c82c <_vfiprintf_r+0x25c>
 800c74a:	7821      	ldrb	r1, [r4, #0]
 800c74c:	2203      	movs	r2, #3
 800c74e:	4650      	mov	r0, sl
 800c750:	f7f3 fd66 	bl	8000220 <memchr>
 800c754:	b140      	cbz	r0, 800c768 <_vfiprintf_r+0x198>
 800c756:	2340      	movs	r3, #64	; 0x40
 800c758:	eba0 000a 	sub.w	r0, r0, sl
 800c75c:	fa03 f000 	lsl.w	r0, r3, r0
 800c760:	9b04      	ldr	r3, [sp, #16]
 800c762:	4303      	orrs	r3, r0
 800c764:	3401      	adds	r4, #1
 800c766:	9304      	str	r3, [sp, #16]
 800c768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c76c:	482c      	ldr	r0, [pc, #176]	; (800c820 <_vfiprintf_r+0x250>)
 800c76e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c772:	2206      	movs	r2, #6
 800c774:	f7f3 fd54 	bl	8000220 <memchr>
 800c778:	2800      	cmp	r0, #0
 800c77a:	d03f      	beq.n	800c7fc <_vfiprintf_r+0x22c>
 800c77c:	4b29      	ldr	r3, [pc, #164]	; (800c824 <_vfiprintf_r+0x254>)
 800c77e:	bb1b      	cbnz	r3, 800c7c8 <_vfiprintf_r+0x1f8>
 800c780:	9b03      	ldr	r3, [sp, #12]
 800c782:	3307      	adds	r3, #7
 800c784:	f023 0307 	bic.w	r3, r3, #7
 800c788:	3308      	adds	r3, #8
 800c78a:	9303      	str	r3, [sp, #12]
 800c78c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c78e:	443b      	add	r3, r7
 800c790:	9309      	str	r3, [sp, #36]	; 0x24
 800c792:	e767      	b.n	800c664 <_vfiprintf_r+0x94>
 800c794:	fb0c 3202 	mla	r2, ip, r2, r3
 800c798:	460c      	mov	r4, r1
 800c79a:	2001      	movs	r0, #1
 800c79c:	e7a5      	b.n	800c6ea <_vfiprintf_r+0x11a>
 800c79e:	2300      	movs	r3, #0
 800c7a0:	3401      	adds	r4, #1
 800c7a2:	9305      	str	r3, [sp, #20]
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	f04f 0c0a 	mov.w	ip, #10
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7b0:	3a30      	subs	r2, #48	; 0x30
 800c7b2:	2a09      	cmp	r2, #9
 800c7b4:	d903      	bls.n	800c7be <_vfiprintf_r+0x1ee>
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d0c5      	beq.n	800c746 <_vfiprintf_r+0x176>
 800c7ba:	9105      	str	r1, [sp, #20]
 800c7bc:	e7c3      	b.n	800c746 <_vfiprintf_r+0x176>
 800c7be:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7c2:	4604      	mov	r4, r0
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	e7f0      	b.n	800c7aa <_vfiprintf_r+0x1da>
 800c7c8:	ab03      	add	r3, sp, #12
 800c7ca:	9300      	str	r3, [sp, #0]
 800c7cc:	462a      	mov	r2, r5
 800c7ce:	4b16      	ldr	r3, [pc, #88]	; (800c828 <_vfiprintf_r+0x258>)
 800c7d0:	a904      	add	r1, sp, #16
 800c7d2:	4630      	mov	r0, r6
 800c7d4:	f7fd feea 	bl	800a5ac <_printf_float>
 800c7d8:	4607      	mov	r7, r0
 800c7da:	1c78      	adds	r0, r7, #1
 800c7dc:	d1d6      	bne.n	800c78c <_vfiprintf_r+0x1bc>
 800c7de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7e0:	07d9      	lsls	r1, r3, #31
 800c7e2:	d405      	bmi.n	800c7f0 <_vfiprintf_r+0x220>
 800c7e4:	89ab      	ldrh	r3, [r5, #12]
 800c7e6:	059a      	lsls	r2, r3, #22
 800c7e8:	d402      	bmi.n	800c7f0 <_vfiprintf_r+0x220>
 800c7ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7ec:	f7ff fa42 	bl	800bc74 <__retarget_lock_release_recursive>
 800c7f0:	89ab      	ldrh	r3, [r5, #12]
 800c7f2:	065b      	lsls	r3, r3, #25
 800c7f4:	f53f af12 	bmi.w	800c61c <_vfiprintf_r+0x4c>
 800c7f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7fa:	e711      	b.n	800c620 <_vfiprintf_r+0x50>
 800c7fc:	ab03      	add	r3, sp, #12
 800c7fe:	9300      	str	r3, [sp, #0]
 800c800:	462a      	mov	r2, r5
 800c802:	4b09      	ldr	r3, [pc, #36]	; (800c828 <_vfiprintf_r+0x258>)
 800c804:	a904      	add	r1, sp, #16
 800c806:	4630      	mov	r0, r6
 800c808:	f7fe f974 	bl	800aaf4 <_printf_i>
 800c80c:	e7e4      	b.n	800c7d8 <_vfiprintf_r+0x208>
 800c80e:	bf00      	nop
 800c810:	0800d544 	.word	0x0800d544
 800c814:	0800d564 	.word	0x0800d564
 800c818:	0800d524 	.word	0x0800d524
 800c81c:	0800d6dc 	.word	0x0800d6dc
 800c820:	0800d6e6 	.word	0x0800d6e6
 800c824:	0800a5ad 	.word	0x0800a5ad
 800c828:	0800c5ab 	.word	0x0800c5ab
 800c82c:	0800d6e2 	.word	0x0800d6e2

0800c830 <_sbrk_r>:
 800c830:	b538      	push	{r3, r4, r5, lr}
 800c832:	4d06      	ldr	r5, [pc, #24]	; (800c84c <_sbrk_r+0x1c>)
 800c834:	2300      	movs	r3, #0
 800c836:	4604      	mov	r4, r0
 800c838:	4608      	mov	r0, r1
 800c83a:	602b      	str	r3, [r5, #0]
 800c83c:	f7f7 f9e4 	bl	8003c08 <_sbrk>
 800c840:	1c43      	adds	r3, r0, #1
 800c842:	d102      	bne.n	800c84a <_sbrk_r+0x1a>
 800c844:	682b      	ldr	r3, [r5, #0]
 800c846:	b103      	cbz	r3, 800c84a <_sbrk_r+0x1a>
 800c848:	6023      	str	r3, [r4, #0]
 800c84a:	bd38      	pop	{r3, r4, r5, pc}
 800c84c:	20004e44 	.word	0x20004e44

0800c850 <__sread>:
 800c850:	b510      	push	{r4, lr}
 800c852:	460c      	mov	r4, r1
 800c854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c858:	f000 faa8 	bl	800cdac <_read_r>
 800c85c:	2800      	cmp	r0, #0
 800c85e:	bfab      	itete	ge
 800c860:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c862:	89a3      	ldrhlt	r3, [r4, #12]
 800c864:	181b      	addge	r3, r3, r0
 800c866:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c86a:	bfac      	ite	ge
 800c86c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c86e:	81a3      	strhlt	r3, [r4, #12]
 800c870:	bd10      	pop	{r4, pc}

0800c872 <__swrite>:
 800c872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c876:	461f      	mov	r7, r3
 800c878:	898b      	ldrh	r3, [r1, #12]
 800c87a:	05db      	lsls	r3, r3, #23
 800c87c:	4605      	mov	r5, r0
 800c87e:	460c      	mov	r4, r1
 800c880:	4616      	mov	r6, r2
 800c882:	d505      	bpl.n	800c890 <__swrite+0x1e>
 800c884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c888:	2302      	movs	r3, #2
 800c88a:	2200      	movs	r2, #0
 800c88c:	f000 f9f8 	bl	800cc80 <_lseek_r>
 800c890:	89a3      	ldrh	r3, [r4, #12]
 800c892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c89a:	81a3      	strh	r3, [r4, #12]
 800c89c:	4632      	mov	r2, r6
 800c89e:	463b      	mov	r3, r7
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8a6:	f000 b869 	b.w	800c97c <_write_r>

0800c8aa <__sseek>:
 800c8aa:	b510      	push	{r4, lr}
 800c8ac:	460c      	mov	r4, r1
 800c8ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8b2:	f000 f9e5 	bl	800cc80 <_lseek_r>
 800c8b6:	1c43      	adds	r3, r0, #1
 800c8b8:	89a3      	ldrh	r3, [r4, #12]
 800c8ba:	bf15      	itete	ne
 800c8bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c8be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c8c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c8c6:	81a3      	strheq	r3, [r4, #12]
 800c8c8:	bf18      	it	ne
 800c8ca:	81a3      	strhne	r3, [r4, #12]
 800c8cc:	bd10      	pop	{r4, pc}

0800c8ce <__sclose>:
 800c8ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8d2:	f000 b8f1 	b.w	800cab8 <_close_r>
	...

0800c8d8 <__swbuf_r>:
 800c8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8da:	460e      	mov	r6, r1
 800c8dc:	4614      	mov	r4, r2
 800c8de:	4605      	mov	r5, r0
 800c8e0:	b118      	cbz	r0, 800c8ea <__swbuf_r+0x12>
 800c8e2:	6983      	ldr	r3, [r0, #24]
 800c8e4:	b90b      	cbnz	r3, 800c8ea <__swbuf_r+0x12>
 800c8e6:	f7ff f921 	bl	800bb2c <__sinit>
 800c8ea:	4b21      	ldr	r3, [pc, #132]	; (800c970 <__swbuf_r+0x98>)
 800c8ec:	429c      	cmp	r4, r3
 800c8ee:	d12b      	bne.n	800c948 <__swbuf_r+0x70>
 800c8f0:	686c      	ldr	r4, [r5, #4]
 800c8f2:	69a3      	ldr	r3, [r4, #24]
 800c8f4:	60a3      	str	r3, [r4, #8]
 800c8f6:	89a3      	ldrh	r3, [r4, #12]
 800c8f8:	071a      	lsls	r2, r3, #28
 800c8fa:	d52f      	bpl.n	800c95c <__swbuf_r+0x84>
 800c8fc:	6923      	ldr	r3, [r4, #16]
 800c8fe:	b36b      	cbz	r3, 800c95c <__swbuf_r+0x84>
 800c900:	6923      	ldr	r3, [r4, #16]
 800c902:	6820      	ldr	r0, [r4, #0]
 800c904:	1ac0      	subs	r0, r0, r3
 800c906:	6963      	ldr	r3, [r4, #20]
 800c908:	b2f6      	uxtb	r6, r6
 800c90a:	4283      	cmp	r3, r0
 800c90c:	4637      	mov	r7, r6
 800c90e:	dc04      	bgt.n	800c91a <__swbuf_r+0x42>
 800c910:	4621      	mov	r1, r4
 800c912:	4628      	mov	r0, r5
 800c914:	f000 f966 	bl	800cbe4 <_fflush_r>
 800c918:	bb30      	cbnz	r0, 800c968 <__swbuf_r+0x90>
 800c91a:	68a3      	ldr	r3, [r4, #8]
 800c91c:	3b01      	subs	r3, #1
 800c91e:	60a3      	str	r3, [r4, #8]
 800c920:	6823      	ldr	r3, [r4, #0]
 800c922:	1c5a      	adds	r2, r3, #1
 800c924:	6022      	str	r2, [r4, #0]
 800c926:	701e      	strb	r6, [r3, #0]
 800c928:	6963      	ldr	r3, [r4, #20]
 800c92a:	3001      	adds	r0, #1
 800c92c:	4283      	cmp	r3, r0
 800c92e:	d004      	beq.n	800c93a <__swbuf_r+0x62>
 800c930:	89a3      	ldrh	r3, [r4, #12]
 800c932:	07db      	lsls	r3, r3, #31
 800c934:	d506      	bpl.n	800c944 <__swbuf_r+0x6c>
 800c936:	2e0a      	cmp	r6, #10
 800c938:	d104      	bne.n	800c944 <__swbuf_r+0x6c>
 800c93a:	4621      	mov	r1, r4
 800c93c:	4628      	mov	r0, r5
 800c93e:	f000 f951 	bl	800cbe4 <_fflush_r>
 800c942:	b988      	cbnz	r0, 800c968 <__swbuf_r+0x90>
 800c944:	4638      	mov	r0, r7
 800c946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c948:	4b0a      	ldr	r3, [pc, #40]	; (800c974 <__swbuf_r+0x9c>)
 800c94a:	429c      	cmp	r4, r3
 800c94c:	d101      	bne.n	800c952 <__swbuf_r+0x7a>
 800c94e:	68ac      	ldr	r4, [r5, #8]
 800c950:	e7cf      	b.n	800c8f2 <__swbuf_r+0x1a>
 800c952:	4b09      	ldr	r3, [pc, #36]	; (800c978 <__swbuf_r+0xa0>)
 800c954:	429c      	cmp	r4, r3
 800c956:	bf08      	it	eq
 800c958:	68ec      	ldreq	r4, [r5, #12]
 800c95a:	e7ca      	b.n	800c8f2 <__swbuf_r+0x1a>
 800c95c:	4621      	mov	r1, r4
 800c95e:	4628      	mov	r0, r5
 800c960:	f000 f81e 	bl	800c9a0 <__swsetup_r>
 800c964:	2800      	cmp	r0, #0
 800c966:	d0cb      	beq.n	800c900 <__swbuf_r+0x28>
 800c968:	f04f 37ff 	mov.w	r7, #4294967295
 800c96c:	e7ea      	b.n	800c944 <__swbuf_r+0x6c>
 800c96e:	bf00      	nop
 800c970:	0800d544 	.word	0x0800d544
 800c974:	0800d564 	.word	0x0800d564
 800c978:	0800d524 	.word	0x0800d524

0800c97c <_write_r>:
 800c97c:	b538      	push	{r3, r4, r5, lr}
 800c97e:	4d07      	ldr	r5, [pc, #28]	; (800c99c <_write_r+0x20>)
 800c980:	4604      	mov	r4, r0
 800c982:	4608      	mov	r0, r1
 800c984:	4611      	mov	r1, r2
 800c986:	2200      	movs	r2, #0
 800c988:	602a      	str	r2, [r5, #0]
 800c98a:	461a      	mov	r2, r3
 800c98c:	f7f7 f8ec 	bl	8003b68 <_write>
 800c990:	1c43      	adds	r3, r0, #1
 800c992:	d102      	bne.n	800c99a <_write_r+0x1e>
 800c994:	682b      	ldr	r3, [r5, #0]
 800c996:	b103      	cbz	r3, 800c99a <_write_r+0x1e>
 800c998:	6023      	str	r3, [r4, #0]
 800c99a:	bd38      	pop	{r3, r4, r5, pc}
 800c99c:	20004e44 	.word	0x20004e44

0800c9a0 <__swsetup_r>:
 800c9a0:	4b32      	ldr	r3, [pc, #200]	; (800ca6c <__swsetup_r+0xcc>)
 800c9a2:	b570      	push	{r4, r5, r6, lr}
 800c9a4:	681d      	ldr	r5, [r3, #0]
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	460c      	mov	r4, r1
 800c9aa:	b125      	cbz	r5, 800c9b6 <__swsetup_r+0x16>
 800c9ac:	69ab      	ldr	r3, [r5, #24]
 800c9ae:	b913      	cbnz	r3, 800c9b6 <__swsetup_r+0x16>
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	f7ff f8bb 	bl	800bb2c <__sinit>
 800c9b6:	4b2e      	ldr	r3, [pc, #184]	; (800ca70 <__swsetup_r+0xd0>)
 800c9b8:	429c      	cmp	r4, r3
 800c9ba:	d10f      	bne.n	800c9dc <__swsetup_r+0x3c>
 800c9bc:	686c      	ldr	r4, [r5, #4]
 800c9be:	89a3      	ldrh	r3, [r4, #12]
 800c9c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9c4:	0719      	lsls	r1, r3, #28
 800c9c6:	d42c      	bmi.n	800ca22 <__swsetup_r+0x82>
 800c9c8:	06dd      	lsls	r5, r3, #27
 800c9ca:	d411      	bmi.n	800c9f0 <__swsetup_r+0x50>
 800c9cc:	2309      	movs	r3, #9
 800c9ce:	6033      	str	r3, [r6, #0]
 800c9d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9d4:	81a3      	strh	r3, [r4, #12]
 800c9d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9da:	e03e      	b.n	800ca5a <__swsetup_r+0xba>
 800c9dc:	4b25      	ldr	r3, [pc, #148]	; (800ca74 <__swsetup_r+0xd4>)
 800c9de:	429c      	cmp	r4, r3
 800c9e0:	d101      	bne.n	800c9e6 <__swsetup_r+0x46>
 800c9e2:	68ac      	ldr	r4, [r5, #8]
 800c9e4:	e7eb      	b.n	800c9be <__swsetup_r+0x1e>
 800c9e6:	4b24      	ldr	r3, [pc, #144]	; (800ca78 <__swsetup_r+0xd8>)
 800c9e8:	429c      	cmp	r4, r3
 800c9ea:	bf08      	it	eq
 800c9ec:	68ec      	ldreq	r4, [r5, #12]
 800c9ee:	e7e6      	b.n	800c9be <__swsetup_r+0x1e>
 800c9f0:	0758      	lsls	r0, r3, #29
 800c9f2:	d512      	bpl.n	800ca1a <__swsetup_r+0x7a>
 800c9f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9f6:	b141      	cbz	r1, 800ca0a <__swsetup_r+0x6a>
 800c9f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9fc:	4299      	cmp	r1, r3
 800c9fe:	d002      	beq.n	800ca06 <__swsetup_r+0x66>
 800ca00:	4630      	mov	r0, r6
 800ca02:	f7ff fcdb 	bl	800c3bc <_free_r>
 800ca06:	2300      	movs	r3, #0
 800ca08:	6363      	str	r3, [r4, #52]	; 0x34
 800ca0a:	89a3      	ldrh	r3, [r4, #12]
 800ca0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca10:	81a3      	strh	r3, [r4, #12]
 800ca12:	2300      	movs	r3, #0
 800ca14:	6063      	str	r3, [r4, #4]
 800ca16:	6923      	ldr	r3, [r4, #16]
 800ca18:	6023      	str	r3, [r4, #0]
 800ca1a:	89a3      	ldrh	r3, [r4, #12]
 800ca1c:	f043 0308 	orr.w	r3, r3, #8
 800ca20:	81a3      	strh	r3, [r4, #12]
 800ca22:	6923      	ldr	r3, [r4, #16]
 800ca24:	b94b      	cbnz	r3, 800ca3a <__swsetup_r+0x9a>
 800ca26:	89a3      	ldrh	r3, [r4, #12]
 800ca28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca30:	d003      	beq.n	800ca3a <__swsetup_r+0x9a>
 800ca32:	4621      	mov	r1, r4
 800ca34:	4630      	mov	r0, r6
 800ca36:	f000 f95b 	bl	800ccf0 <__smakebuf_r>
 800ca3a:	89a0      	ldrh	r0, [r4, #12]
 800ca3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca40:	f010 0301 	ands.w	r3, r0, #1
 800ca44:	d00a      	beq.n	800ca5c <__swsetup_r+0xbc>
 800ca46:	2300      	movs	r3, #0
 800ca48:	60a3      	str	r3, [r4, #8]
 800ca4a:	6963      	ldr	r3, [r4, #20]
 800ca4c:	425b      	negs	r3, r3
 800ca4e:	61a3      	str	r3, [r4, #24]
 800ca50:	6923      	ldr	r3, [r4, #16]
 800ca52:	b943      	cbnz	r3, 800ca66 <__swsetup_r+0xc6>
 800ca54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca58:	d1ba      	bne.n	800c9d0 <__swsetup_r+0x30>
 800ca5a:	bd70      	pop	{r4, r5, r6, pc}
 800ca5c:	0781      	lsls	r1, r0, #30
 800ca5e:	bf58      	it	pl
 800ca60:	6963      	ldrpl	r3, [r4, #20]
 800ca62:	60a3      	str	r3, [r4, #8]
 800ca64:	e7f4      	b.n	800ca50 <__swsetup_r+0xb0>
 800ca66:	2000      	movs	r0, #0
 800ca68:	e7f7      	b.n	800ca5a <__swsetup_r+0xba>
 800ca6a:	bf00      	nop
 800ca6c:	20000040 	.word	0x20000040
 800ca70:	0800d544 	.word	0x0800d544
 800ca74:	0800d564 	.word	0x0800d564
 800ca78:	0800d524 	.word	0x0800d524

0800ca7c <__assert_func>:
 800ca7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca7e:	4614      	mov	r4, r2
 800ca80:	461a      	mov	r2, r3
 800ca82:	4b09      	ldr	r3, [pc, #36]	; (800caa8 <__assert_func+0x2c>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4605      	mov	r5, r0
 800ca88:	68d8      	ldr	r0, [r3, #12]
 800ca8a:	b14c      	cbz	r4, 800caa0 <__assert_func+0x24>
 800ca8c:	4b07      	ldr	r3, [pc, #28]	; (800caac <__assert_func+0x30>)
 800ca8e:	9100      	str	r1, [sp, #0]
 800ca90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca94:	4906      	ldr	r1, [pc, #24]	; (800cab0 <__assert_func+0x34>)
 800ca96:	462b      	mov	r3, r5
 800ca98:	f000 f8e0 	bl	800cc5c <fiprintf>
 800ca9c:	f000 f9a5 	bl	800cdea <abort>
 800caa0:	4b04      	ldr	r3, [pc, #16]	; (800cab4 <__assert_func+0x38>)
 800caa2:	461c      	mov	r4, r3
 800caa4:	e7f3      	b.n	800ca8e <__assert_func+0x12>
 800caa6:	bf00      	nop
 800caa8:	20000040 	.word	0x20000040
 800caac:	0800d6ed 	.word	0x0800d6ed
 800cab0:	0800d6fa 	.word	0x0800d6fa
 800cab4:	0800d728 	.word	0x0800d728

0800cab8 <_close_r>:
 800cab8:	b538      	push	{r3, r4, r5, lr}
 800caba:	4d06      	ldr	r5, [pc, #24]	; (800cad4 <_close_r+0x1c>)
 800cabc:	2300      	movs	r3, #0
 800cabe:	4604      	mov	r4, r0
 800cac0:	4608      	mov	r0, r1
 800cac2:	602b      	str	r3, [r5, #0]
 800cac4:	f7f7 f86c 	bl	8003ba0 <_close>
 800cac8:	1c43      	adds	r3, r0, #1
 800caca:	d102      	bne.n	800cad2 <_close_r+0x1a>
 800cacc:	682b      	ldr	r3, [r5, #0]
 800cace:	b103      	cbz	r3, 800cad2 <_close_r+0x1a>
 800cad0:	6023      	str	r3, [r4, #0]
 800cad2:	bd38      	pop	{r3, r4, r5, pc}
 800cad4:	20004e44 	.word	0x20004e44

0800cad8 <__sflush_r>:
 800cad8:	898a      	ldrh	r2, [r1, #12]
 800cada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cade:	4605      	mov	r5, r0
 800cae0:	0710      	lsls	r0, r2, #28
 800cae2:	460c      	mov	r4, r1
 800cae4:	d458      	bmi.n	800cb98 <__sflush_r+0xc0>
 800cae6:	684b      	ldr	r3, [r1, #4]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	dc05      	bgt.n	800caf8 <__sflush_r+0x20>
 800caec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800caee:	2b00      	cmp	r3, #0
 800caf0:	dc02      	bgt.n	800caf8 <__sflush_r+0x20>
 800caf2:	2000      	movs	r0, #0
 800caf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cafa:	2e00      	cmp	r6, #0
 800cafc:	d0f9      	beq.n	800caf2 <__sflush_r+0x1a>
 800cafe:	2300      	movs	r3, #0
 800cb00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb04:	682f      	ldr	r7, [r5, #0]
 800cb06:	602b      	str	r3, [r5, #0]
 800cb08:	d032      	beq.n	800cb70 <__sflush_r+0x98>
 800cb0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb0c:	89a3      	ldrh	r3, [r4, #12]
 800cb0e:	075a      	lsls	r2, r3, #29
 800cb10:	d505      	bpl.n	800cb1e <__sflush_r+0x46>
 800cb12:	6863      	ldr	r3, [r4, #4]
 800cb14:	1ac0      	subs	r0, r0, r3
 800cb16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb18:	b10b      	cbz	r3, 800cb1e <__sflush_r+0x46>
 800cb1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb1c:	1ac0      	subs	r0, r0, r3
 800cb1e:	2300      	movs	r3, #0
 800cb20:	4602      	mov	r2, r0
 800cb22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb24:	6a21      	ldr	r1, [r4, #32]
 800cb26:	4628      	mov	r0, r5
 800cb28:	47b0      	blx	r6
 800cb2a:	1c43      	adds	r3, r0, #1
 800cb2c:	89a3      	ldrh	r3, [r4, #12]
 800cb2e:	d106      	bne.n	800cb3e <__sflush_r+0x66>
 800cb30:	6829      	ldr	r1, [r5, #0]
 800cb32:	291d      	cmp	r1, #29
 800cb34:	d82c      	bhi.n	800cb90 <__sflush_r+0xb8>
 800cb36:	4a2a      	ldr	r2, [pc, #168]	; (800cbe0 <__sflush_r+0x108>)
 800cb38:	40ca      	lsrs	r2, r1
 800cb3a:	07d6      	lsls	r6, r2, #31
 800cb3c:	d528      	bpl.n	800cb90 <__sflush_r+0xb8>
 800cb3e:	2200      	movs	r2, #0
 800cb40:	6062      	str	r2, [r4, #4]
 800cb42:	04d9      	lsls	r1, r3, #19
 800cb44:	6922      	ldr	r2, [r4, #16]
 800cb46:	6022      	str	r2, [r4, #0]
 800cb48:	d504      	bpl.n	800cb54 <__sflush_r+0x7c>
 800cb4a:	1c42      	adds	r2, r0, #1
 800cb4c:	d101      	bne.n	800cb52 <__sflush_r+0x7a>
 800cb4e:	682b      	ldr	r3, [r5, #0]
 800cb50:	b903      	cbnz	r3, 800cb54 <__sflush_r+0x7c>
 800cb52:	6560      	str	r0, [r4, #84]	; 0x54
 800cb54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb56:	602f      	str	r7, [r5, #0]
 800cb58:	2900      	cmp	r1, #0
 800cb5a:	d0ca      	beq.n	800caf2 <__sflush_r+0x1a>
 800cb5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb60:	4299      	cmp	r1, r3
 800cb62:	d002      	beq.n	800cb6a <__sflush_r+0x92>
 800cb64:	4628      	mov	r0, r5
 800cb66:	f7ff fc29 	bl	800c3bc <_free_r>
 800cb6a:	2000      	movs	r0, #0
 800cb6c:	6360      	str	r0, [r4, #52]	; 0x34
 800cb6e:	e7c1      	b.n	800caf4 <__sflush_r+0x1c>
 800cb70:	6a21      	ldr	r1, [r4, #32]
 800cb72:	2301      	movs	r3, #1
 800cb74:	4628      	mov	r0, r5
 800cb76:	47b0      	blx	r6
 800cb78:	1c41      	adds	r1, r0, #1
 800cb7a:	d1c7      	bne.n	800cb0c <__sflush_r+0x34>
 800cb7c:	682b      	ldr	r3, [r5, #0]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d0c4      	beq.n	800cb0c <__sflush_r+0x34>
 800cb82:	2b1d      	cmp	r3, #29
 800cb84:	d001      	beq.n	800cb8a <__sflush_r+0xb2>
 800cb86:	2b16      	cmp	r3, #22
 800cb88:	d101      	bne.n	800cb8e <__sflush_r+0xb6>
 800cb8a:	602f      	str	r7, [r5, #0]
 800cb8c:	e7b1      	b.n	800caf2 <__sflush_r+0x1a>
 800cb8e:	89a3      	ldrh	r3, [r4, #12]
 800cb90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb94:	81a3      	strh	r3, [r4, #12]
 800cb96:	e7ad      	b.n	800caf4 <__sflush_r+0x1c>
 800cb98:	690f      	ldr	r7, [r1, #16]
 800cb9a:	2f00      	cmp	r7, #0
 800cb9c:	d0a9      	beq.n	800caf2 <__sflush_r+0x1a>
 800cb9e:	0793      	lsls	r3, r2, #30
 800cba0:	680e      	ldr	r6, [r1, #0]
 800cba2:	bf08      	it	eq
 800cba4:	694b      	ldreq	r3, [r1, #20]
 800cba6:	600f      	str	r7, [r1, #0]
 800cba8:	bf18      	it	ne
 800cbaa:	2300      	movne	r3, #0
 800cbac:	eba6 0807 	sub.w	r8, r6, r7
 800cbb0:	608b      	str	r3, [r1, #8]
 800cbb2:	f1b8 0f00 	cmp.w	r8, #0
 800cbb6:	dd9c      	ble.n	800caf2 <__sflush_r+0x1a>
 800cbb8:	6a21      	ldr	r1, [r4, #32]
 800cbba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbbc:	4643      	mov	r3, r8
 800cbbe:	463a      	mov	r2, r7
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	47b0      	blx	r6
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	dc06      	bgt.n	800cbd6 <__sflush_r+0xfe>
 800cbc8:	89a3      	ldrh	r3, [r4, #12]
 800cbca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbce:	81a3      	strh	r3, [r4, #12]
 800cbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd4:	e78e      	b.n	800caf4 <__sflush_r+0x1c>
 800cbd6:	4407      	add	r7, r0
 800cbd8:	eba8 0800 	sub.w	r8, r8, r0
 800cbdc:	e7e9      	b.n	800cbb2 <__sflush_r+0xda>
 800cbde:	bf00      	nop
 800cbe0:	20400001 	.word	0x20400001

0800cbe4 <_fflush_r>:
 800cbe4:	b538      	push	{r3, r4, r5, lr}
 800cbe6:	690b      	ldr	r3, [r1, #16]
 800cbe8:	4605      	mov	r5, r0
 800cbea:	460c      	mov	r4, r1
 800cbec:	b913      	cbnz	r3, 800cbf4 <_fflush_r+0x10>
 800cbee:	2500      	movs	r5, #0
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	bd38      	pop	{r3, r4, r5, pc}
 800cbf4:	b118      	cbz	r0, 800cbfe <_fflush_r+0x1a>
 800cbf6:	6983      	ldr	r3, [r0, #24]
 800cbf8:	b90b      	cbnz	r3, 800cbfe <_fflush_r+0x1a>
 800cbfa:	f7fe ff97 	bl	800bb2c <__sinit>
 800cbfe:	4b14      	ldr	r3, [pc, #80]	; (800cc50 <_fflush_r+0x6c>)
 800cc00:	429c      	cmp	r4, r3
 800cc02:	d11b      	bne.n	800cc3c <_fflush_r+0x58>
 800cc04:	686c      	ldr	r4, [r5, #4]
 800cc06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d0ef      	beq.n	800cbee <_fflush_r+0xa>
 800cc0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc10:	07d0      	lsls	r0, r2, #31
 800cc12:	d404      	bmi.n	800cc1e <_fflush_r+0x3a>
 800cc14:	0599      	lsls	r1, r3, #22
 800cc16:	d402      	bmi.n	800cc1e <_fflush_r+0x3a>
 800cc18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc1a:	f7ff f82a 	bl	800bc72 <__retarget_lock_acquire_recursive>
 800cc1e:	4628      	mov	r0, r5
 800cc20:	4621      	mov	r1, r4
 800cc22:	f7ff ff59 	bl	800cad8 <__sflush_r>
 800cc26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc28:	07da      	lsls	r2, r3, #31
 800cc2a:	4605      	mov	r5, r0
 800cc2c:	d4e0      	bmi.n	800cbf0 <_fflush_r+0xc>
 800cc2e:	89a3      	ldrh	r3, [r4, #12]
 800cc30:	059b      	lsls	r3, r3, #22
 800cc32:	d4dd      	bmi.n	800cbf0 <_fflush_r+0xc>
 800cc34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc36:	f7ff f81d 	bl	800bc74 <__retarget_lock_release_recursive>
 800cc3a:	e7d9      	b.n	800cbf0 <_fflush_r+0xc>
 800cc3c:	4b05      	ldr	r3, [pc, #20]	; (800cc54 <_fflush_r+0x70>)
 800cc3e:	429c      	cmp	r4, r3
 800cc40:	d101      	bne.n	800cc46 <_fflush_r+0x62>
 800cc42:	68ac      	ldr	r4, [r5, #8]
 800cc44:	e7df      	b.n	800cc06 <_fflush_r+0x22>
 800cc46:	4b04      	ldr	r3, [pc, #16]	; (800cc58 <_fflush_r+0x74>)
 800cc48:	429c      	cmp	r4, r3
 800cc4a:	bf08      	it	eq
 800cc4c:	68ec      	ldreq	r4, [r5, #12]
 800cc4e:	e7da      	b.n	800cc06 <_fflush_r+0x22>
 800cc50:	0800d544 	.word	0x0800d544
 800cc54:	0800d564 	.word	0x0800d564
 800cc58:	0800d524 	.word	0x0800d524

0800cc5c <fiprintf>:
 800cc5c:	b40e      	push	{r1, r2, r3}
 800cc5e:	b503      	push	{r0, r1, lr}
 800cc60:	4601      	mov	r1, r0
 800cc62:	ab03      	add	r3, sp, #12
 800cc64:	4805      	ldr	r0, [pc, #20]	; (800cc7c <fiprintf+0x20>)
 800cc66:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc6a:	6800      	ldr	r0, [r0, #0]
 800cc6c:	9301      	str	r3, [sp, #4]
 800cc6e:	f7ff fcaf 	bl	800c5d0 <_vfiprintf_r>
 800cc72:	b002      	add	sp, #8
 800cc74:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc78:	b003      	add	sp, #12
 800cc7a:	4770      	bx	lr
 800cc7c:	20000040 	.word	0x20000040

0800cc80 <_lseek_r>:
 800cc80:	b538      	push	{r3, r4, r5, lr}
 800cc82:	4d07      	ldr	r5, [pc, #28]	; (800cca0 <_lseek_r+0x20>)
 800cc84:	4604      	mov	r4, r0
 800cc86:	4608      	mov	r0, r1
 800cc88:	4611      	mov	r1, r2
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	602a      	str	r2, [r5, #0]
 800cc8e:	461a      	mov	r2, r3
 800cc90:	f7f6 ffad 	bl	8003bee <_lseek>
 800cc94:	1c43      	adds	r3, r0, #1
 800cc96:	d102      	bne.n	800cc9e <_lseek_r+0x1e>
 800cc98:	682b      	ldr	r3, [r5, #0]
 800cc9a:	b103      	cbz	r3, 800cc9e <_lseek_r+0x1e>
 800cc9c:	6023      	str	r3, [r4, #0]
 800cc9e:	bd38      	pop	{r3, r4, r5, pc}
 800cca0:	20004e44 	.word	0x20004e44

0800cca4 <__swhatbuf_r>:
 800cca4:	b570      	push	{r4, r5, r6, lr}
 800cca6:	460e      	mov	r6, r1
 800cca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccac:	2900      	cmp	r1, #0
 800ccae:	b096      	sub	sp, #88	; 0x58
 800ccb0:	4614      	mov	r4, r2
 800ccb2:	461d      	mov	r5, r3
 800ccb4:	da08      	bge.n	800ccc8 <__swhatbuf_r+0x24>
 800ccb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	602a      	str	r2, [r5, #0]
 800ccbe:	061a      	lsls	r2, r3, #24
 800ccc0:	d410      	bmi.n	800cce4 <__swhatbuf_r+0x40>
 800ccc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccc6:	e00e      	b.n	800cce6 <__swhatbuf_r+0x42>
 800ccc8:	466a      	mov	r2, sp
 800ccca:	f000 f895 	bl	800cdf8 <_fstat_r>
 800ccce:	2800      	cmp	r0, #0
 800ccd0:	dbf1      	blt.n	800ccb6 <__swhatbuf_r+0x12>
 800ccd2:	9a01      	ldr	r2, [sp, #4]
 800ccd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ccd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ccdc:	425a      	negs	r2, r3
 800ccde:	415a      	adcs	r2, r3
 800cce0:	602a      	str	r2, [r5, #0]
 800cce2:	e7ee      	b.n	800ccc2 <__swhatbuf_r+0x1e>
 800cce4:	2340      	movs	r3, #64	; 0x40
 800cce6:	2000      	movs	r0, #0
 800cce8:	6023      	str	r3, [r4, #0]
 800ccea:	b016      	add	sp, #88	; 0x58
 800ccec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ccf0 <__smakebuf_r>:
 800ccf0:	898b      	ldrh	r3, [r1, #12]
 800ccf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ccf4:	079d      	lsls	r5, r3, #30
 800ccf6:	4606      	mov	r6, r0
 800ccf8:	460c      	mov	r4, r1
 800ccfa:	d507      	bpl.n	800cd0c <__smakebuf_r+0x1c>
 800ccfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd00:	6023      	str	r3, [r4, #0]
 800cd02:	6123      	str	r3, [r4, #16]
 800cd04:	2301      	movs	r3, #1
 800cd06:	6163      	str	r3, [r4, #20]
 800cd08:	b002      	add	sp, #8
 800cd0a:	bd70      	pop	{r4, r5, r6, pc}
 800cd0c:	ab01      	add	r3, sp, #4
 800cd0e:	466a      	mov	r2, sp
 800cd10:	f7ff ffc8 	bl	800cca4 <__swhatbuf_r>
 800cd14:	9900      	ldr	r1, [sp, #0]
 800cd16:	4605      	mov	r5, r0
 800cd18:	4630      	mov	r0, r6
 800cd1a:	f7ff fbbb 	bl	800c494 <_malloc_r>
 800cd1e:	b948      	cbnz	r0, 800cd34 <__smakebuf_r+0x44>
 800cd20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd24:	059a      	lsls	r2, r3, #22
 800cd26:	d4ef      	bmi.n	800cd08 <__smakebuf_r+0x18>
 800cd28:	f023 0303 	bic.w	r3, r3, #3
 800cd2c:	f043 0302 	orr.w	r3, r3, #2
 800cd30:	81a3      	strh	r3, [r4, #12]
 800cd32:	e7e3      	b.n	800ccfc <__smakebuf_r+0xc>
 800cd34:	4b0d      	ldr	r3, [pc, #52]	; (800cd6c <__smakebuf_r+0x7c>)
 800cd36:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd38:	89a3      	ldrh	r3, [r4, #12]
 800cd3a:	6020      	str	r0, [r4, #0]
 800cd3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd40:	81a3      	strh	r3, [r4, #12]
 800cd42:	9b00      	ldr	r3, [sp, #0]
 800cd44:	6163      	str	r3, [r4, #20]
 800cd46:	9b01      	ldr	r3, [sp, #4]
 800cd48:	6120      	str	r0, [r4, #16]
 800cd4a:	b15b      	cbz	r3, 800cd64 <__smakebuf_r+0x74>
 800cd4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd50:	4630      	mov	r0, r6
 800cd52:	f000 f863 	bl	800ce1c <_isatty_r>
 800cd56:	b128      	cbz	r0, 800cd64 <__smakebuf_r+0x74>
 800cd58:	89a3      	ldrh	r3, [r4, #12]
 800cd5a:	f023 0303 	bic.w	r3, r3, #3
 800cd5e:	f043 0301 	orr.w	r3, r3, #1
 800cd62:	81a3      	strh	r3, [r4, #12]
 800cd64:	89a0      	ldrh	r0, [r4, #12]
 800cd66:	4305      	orrs	r5, r0
 800cd68:	81a5      	strh	r5, [r4, #12]
 800cd6a:	e7cd      	b.n	800cd08 <__smakebuf_r+0x18>
 800cd6c:	0800bac5 	.word	0x0800bac5

0800cd70 <__ascii_mbtowc>:
 800cd70:	b082      	sub	sp, #8
 800cd72:	b901      	cbnz	r1, 800cd76 <__ascii_mbtowc+0x6>
 800cd74:	a901      	add	r1, sp, #4
 800cd76:	b142      	cbz	r2, 800cd8a <__ascii_mbtowc+0x1a>
 800cd78:	b14b      	cbz	r3, 800cd8e <__ascii_mbtowc+0x1e>
 800cd7a:	7813      	ldrb	r3, [r2, #0]
 800cd7c:	600b      	str	r3, [r1, #0]
 800cd7e:	7812      	ldrb	r2, [r2, #0]
 800cd80:	1e10      	subs	r0, r2, #0
 800cd82:	bf18      	it	ne
 800cd84:	2001      	movne	r0, #1
 800cd86:	b002      	add	sp, #8
 800cd88:	4770      	bx	lr
 800cd8a:	4610      	mov	r0, r2
 800cd8c:	e7fb      	b.n	800cd86 <__ascii_mbtowc+0x16>
 800cd8e:	f06f 0001 	mvn.w	r0, #1
 800cd92:	e7f8      	b.n	800cd86 <__ascii_mbtowc+0x16>

0800cd94 <__malloc_lock>:
 800cd94:	4801      	ldr	r0, [pc, #4]	; (800cd9c <__malloc_lock+0x8>)
 800cd96:	f7fe bf6c 	b.w	800bc72 <__retarget_lock_acquire_recursive>
 800cd9a:	bf00      	nop
 800cd9c:	20004e38 	.word	0x20004e38

0800cda0 <__malloc_unlock>:
 800cda0:	4801      	ldr	r0, [pc, #4]	; (800cda8 <__malloc_unlock+0x8>)
 800cda2:	f7fe bf67 	b.w	800bc74 <__retarget_lock_release_recursive>
 800cda6:	bf00      	nop
 800cda8:	20004e38 	.word	0x20004e38

0800cdac <_read_r>:
 800cdac:	b538      	push	{r3, r4, r5, lr}
 800cdae:	4d07      	ldr	r5, [pc, #28]	; (800cdcc <_read_r+0x20>)
 800cdb0:	4604      	mov	r4, r0
 800cdb2:	4608      	mov	r0, r1
 800cdb4:	4611      	mov	r1, r2
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	602a      	str	r2, [r5, #0]
 800cdba:	461a      	mov	r2, r3
 800cdbc:	f7f6 feb7 	bl	8003b2e <_read>
 800cdc0:	1c43      	adds	r3, r0, #1
 800cdc2:	d102      	bne.n	800cdca <_read_r+0x1e>
 800cdc4:	682b      	ldr	r3, [r5, #0]
 800cdc6:	b103      	cbz	r3, 800cdca <_read_r+0x1e>
 800cdc8:	6023      	str	r3, [r4, #0]
 800cdca:	bd38      	pop	{r3, r4, r5, pc}
 800cdcc:	20004e44 	.word	0x20004e44

0800cdd0 <__ascii_wctomb>:
 800cdd0:	b149      	cbz	r1, 800cde6 <__ascii_wctomb+0x16>
 800cdd2:	2aff      	cmp	r2, #255	; 0xff
 800cdd4:	bf85      	ittet	hi
 800cdd6:	238a      	movhi	r3, #138	; 0x8a
 800cdd8:	6003      	strhi	r3, [r0, #0]
 800cdda:	700a      	strbls	r2, [r1, #0]
 800cddc:	f04f 30ff 	movhi.w	r0, #4294967295
 800cde0:	bf98      	it	ls
 800cde2:	2001      	movls	r0, #1
 800cde4:	4770      	bx	lr
 800cde6:	4608      	mov	r0, r1
 800cde8:	4770      	bx	lr

0800cdea <abort>:
 800cdea:	b508      	push	{r3, lr}
 800cdec:	2006      	movs	r0, #6
 800cdee:	f000 f84d 	bl	800ce8c <raise>
 800cdf2:	2001      	movs	r0, #1
 800cdf4:	f7f6 fe91 	bl	8003b1a <_exit>

0800cdf8 <_fstat_r>:
 800cdf8:	b538      	push	{r3, r4, r5, lr}
 800cdfa:	4d07      	ldr	r5, [pc, #28]	; (800ce18 <_fstat_r+0x20>)
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	4604      	mov	r4, r0
 800ce00:	4608      	mov	r0, r1
 800ce02:	4611      	mov	r1, r2
 800ce04:	602b      	str	r3, [r5, #0]
 800ce06:	f7f6 fed7 	bl	8003bb8 <_fstat>
 800ce0a:	1c43      	adds	r3, r0, #1
 800ce0c:	d102      	bne.n	800ce14 <_fstat_r+0x1c>
 800ce0e:	682b      	ldr	r3, [r5, #0]
 800ce10:	b103      	cbz	r3, 800ce14 <_fstat_r+0x1c>
 800ce12:	6023      	str	r3, [r4, #0]
 800ce14:	bd38      	pop	{r3, r4, r5, pc}
 800ce16:	bf00      	nop
 800ce18:	20004e44 	.word	0x20004e44

0800ce1c <_isatty_r>:
 800ce1c:	b538      	push	{r3, r4, r5, lr}
 800ce1e:	4d06      	ldr	r5, [pc, #24]	; (800ce38 <_isatty_r+0x1c>)
 800ce20:	2300      	movs	r3, #0
 800ce22:	4604      	mov	r4, r0
 800ce24:	4608      	mov	r0, r1
 800ce26:	602b      	str	r3, [r5, #0]
 800ce28:	f7f6 fed6 	bl	8003bd8 <_isatty>
 800ce2c:	1c43      	adds	r3, r0, #1
 800ce2e:	d102      	bne.n	800ce36 <_isatty_r+0x1a>
 800ce30:	682b      	ldr	r3, [r5, #0]
 800ce32:	b103      	cbz	r3, 800ce36 <_isatty_r+0x1a>
 800ce34:	6023      	str	r3, [r4, #0]
 800ce36:	bd38      	pop	{r3, r4, r5, pc}
 800ce38:	20004e44 	.word	0x20004e44

0800ce3c <_raise_r>:
 800ce3c:	291f      	cmp	r1, #31
 800ce3e:	b538      	push	{r3, r4, r5, lr}
 800ce40:	4604      	mov	r4, r0
 800ce42:	460d      	mov	r5, r1
 800ce44:	d904      	bls.n	800ce50 <_raise_r+0x14>
 800ce46:	2316      	movs	r3, #22
 800ce48:	6003      	str	r3, [r0, #0]
 800ce4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce4e:	bd38      	pop	{r3, r4, r5, pc}
 800ce50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ce52:	b112      	cbz	r2, 800ce5a <_raise_r+0x1e>
 800ce54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce58:	b94b      	cbnz	r3, 800ce6e <_raise_r+0x32>
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	f000 f830 	bl	800cec0 <_getpid_r>
 800ce60:	462a      	mov	r2, r5
 800ce62:	4601      	mov	r1, r0
 800ce64:	4620      	mov	r0, r4
 800ce66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce6a:	f000 b817 	b.w	800ce9c <_kill_r>
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d00a      	beq.n	800ce88 <_raise_r+0x4c>
 800ce72:	1c59      	adds	r1, r3, #1
 800ce74:	d103      	bne.n	800ce7e <_raise_r+0x42>
 800ce76:	2316      	movs	r3, #22
 800ce78:	6003      	str	r3, [r0, #0]
 800ce7a:	2001      	movs	r0, #1
 800ce7c:	e7e7      	b.n	800ce4e <_raise_r+0x12>
 800ce7e:	2400      	movs	r4, #0
 800ce80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce84:	4628      	mov	r0, r5
 800ce86:	4798      	blx	r3
 800ce88:	2000      	movs	r0, #0
 800ce8a:	e7e0      	b.n	800ce4e <_raise_r+0x12>

0800ce8c <raise>:
 800ce8c:	4b02      	ldr	r3, [pc, #8]	; (800ce98 <raise+0xc>)
 800ce8e:	4601      	mov	r1, r0
 800ce90:	6818      	ldr	r0, [r3, #0]
 800ce92:	f7ff bfd3 	b.w	800ce3c <_raise_r>
 800ce96:	bf00      	nop
 800ce98:	20000040 	.word	0x20000040

0800ce9c <_kill_r>:
 800ce9c:	b538      	push	{r3, r4, r5, lr}
 800ce9e:	4d07      	ldr	r5, [pc, #28]	; (800cebc <_kill_r+0x20>)
 800cea0:	2300      	movs	r3, #0
 800cea2:	4604      	mov	r4, r0
 800cea4:	4608      	mov	r0, r1
 800cea6:	4611      	mov	r1, r2
 800cea8:	602b      	str	r3, [r5, #0]
 800ceaa:	f7f6 fe26 	bl	8003afa <_kill>
 800ceae:	1c43      	adds	r3, r0, #1
 800ceb0:	d102      	bne.n	800ceb8 <_kill_r+0x1c>
 800ceb2:	682b      	ldr	r3, [r5, #0]
 800ceb4:	b103      	cbz	r3, 800ceb8 <_kill_r+0x1c>
 800ceb6:	6023      	str	r3, [r4, #0]
 800ceb8:	bd38      	pop	{r3, r4, r5, pc}
 800ceba:	bf00      	nop
 800cebc:	20004e44 	.word	0x20004e44

0800cec0 <_getpid_r>:
 800cec0:	f7f6 be13 	b.w	8003aea <_getpid>

0800cec4 <_init>:
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec6:	bf00      	nop
 800cec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceca:	bc08      	pop	{r3}
 800cecc:	469e      	mov	lr, r3
 800cece:	4770      	bx	lr

0800ced0 <_fini>:
 800ced0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced2:	bf00      	nop
 800ced4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ced6:	bc08      	pop	{r3}
 800ced8:	469e      	mov	lr, r3
 800ceda:	4770      	bx	lr
